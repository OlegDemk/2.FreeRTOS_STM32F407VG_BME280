
2.FreeRTOS_STM32F407VG_BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800b658  0800b658  0001b658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b988  0800b988  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b988  0800b988  0001b988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b990  0800b990  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b990  0800b990  0001b990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b994  0800b994  0001b994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          0000b93c  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000bb24  2000bb24  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027081  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e04  00000000  00000000  00047299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f0  00000000  00000000  0004c0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001708  00000000  00000000  0004d990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006b61  00000000  00000000  0004f098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa9e  00000000  00000000  00055bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7a16  00000000  00000000  00075697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014d0ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006dd8  00000000  00000000  0014d100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b640 	.word	0x0800b640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800b640 	.word	0x0800b640

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fd5a 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f854 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f90a 	bl	800079c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000588:	f000 f8ba 	bl	8000700 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 800058c:	4818      	ldr	r0, [pc, #96]	; (80005f0 <main+0x78>)
 800058e:	f002 fecd 	bl	800332c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000592:	f006 fb4b 	bl	8006c2c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <main+0x7c>)
 8000598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059c:	200a      	movs	r0, #10
 800059e:	f006 fc3c 	bl	8006e1a <osMessageQueueNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <main+0x80>)
 80005a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <main+0x84>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4814      	ldr	r0, [pc, #80]	; (8000600 <main+0x88>)
 80005ae:	f006 fb87 	bl	8006cc0 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a13      	ldr	r2, [pc, #76]	; (8000604 <main+0x8c>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* creation of Blue_LED_Blink */
  Blue_LED_BlinkHandle = osThreadNew(Start_Blue_LED_Blink, NULL, &Blue_LED_Blink_attributes);
 80005b8:	4a13      	ldr	r2, [pc, #76]	; (8000608 <main+0x90>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4813      	ldr	r0, [pc, #76]	; (800060c <main+0x94>)
 80005be:	f006 fb7f 	bl	8006cc0 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a12      	ldr	r2, [pc, #72]	; (8000610 <main+0x98>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <main+0x9c>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <main+0xa0>)
 80005ce:	f006 fb77 	bl	8006cc0 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a11      	ldr	r2, [pc, #68]	; (800061c <main+0xa4>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 80005d8:	4a11      	ldr	r2, [pc, #68]	; (8000620 <main+0xa8>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4811      	ldr	r0, [pc, #68]	; (8000624 <main+0xac>)
 80005de:	f006 fb6f 	bl	8006cc0 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <main+0xb0>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f006 fb44 	bl	8006c74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x74>
 80005ee:	bf00      	nop
 80005f0:	20008e9c 	.word	0x20008e9c
 80005f4:	0800b8a0 	.word	0x0800b8a0
 80005f8:	20006498 	.word	0x20006498
 80005fc:	0800b810 	.word	0x0800b810
 8000600:	08000a1d 	.word	0x08000a1d
 8000604:	200052c0 	.word	0x200052c0
 8000608:	0800b834 	.word	0x0800b834
 800060c:	08000a41 	.word	0x08000a41
 8000610:	20005314 	.word	0x20005314
 8000614:	0800b858 	.word	0x0800b858
 8000618:	08000a75 	.word	0x08000a75
 800061c:	2000a0ec 	.word	0x2000a0ec
 8000620:	0800b87c 	.word	0x0800b87c
 8000624:	08000ce5 	.word	0x08000ce5
 8000628:	20008ee4 	.word	0x20008ee4

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f00a fb16 	bl	800ac6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 f958 	bl	8002968 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006be:	f000 fb5f 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2105      	movs	r1, #5
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fbb9 	bl	8002e58 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ec:	f000 fb48 	bl	8000d80 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	; 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_TIM3_Init+0x94>)
 800071e:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <MX_TIM3_Init+0x98>)
 8000720:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_TIM3_Init+0x94>)
 8000724:	f240 3247 	movw	r2, #839	; 0x347
 8000728:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_TIM3_Init+0x94>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_TIM3_Init+0x94>)
 8000732:	220a      	movs	r2, #10
 8000734:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_TIM3_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_TIM3_Init+0x94>)
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000742:	4814      	ldr	r0, [pc, #80]	; (8000794 <MX_TIM3_Init+0x94>)
 8000744:	f002 fda2 	bl	800328c <HAL_TIM_Base_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 fb17 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	4619      	mov	r1, r3
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_TIM3_Init+0x94>)
 8000760:	f002 ff5c 	bl	800361c <HAL_TIM_ConfigClockSource>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 fb09 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_TIM3_Init+0x94>)
 800077c:	f003 f978 	bl	8003a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000786:	f000 fafb 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20008e9c 	.word	0x20008e9c
 8000798:	40000400 	.word	0x40000400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	4b93      	ldr	r3, [pc, #588]	; (8000a04 <MX_GPIO_Init+0x268>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a92      	ldr	r2, [pc, #584]	; (8000a04 <MX_GPIO_Init+0x268>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b90      	ldr	r3, [pc, #576]	; (8000a04 <MX_GPIO_Init+0x268>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	4b8c      	ldr	r3, [pc, #560]	; (8000a04 <MX_GPIO_Init+0x268>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a8b      	ldr	r2, [pc, #556]	; (8000a04 <MX_GPIO_Init+0x268>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b89      	ldr	r3, [pc, #548]	; (8000a04 <MX_GPIO_Init+0x268>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b85      	ldr	r3, [pc, #532]	; (8000a04 <MX_GPIO_Init+0x268>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a84      	ldr	r2, [pc, #528]	; (8000a04 <MX_GPIO_Init+0x268>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b82      	ldr	r3, [pc, #520]	; (8000a04 <MX_GPIO_Init+0x268>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b7e      	ldr	r3, [pc, #504]	; (8000a04 <MX_GPIO_Init+0x268>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a7d      	ldr	r2, [pc, #500]	; (8000a04 <MX_GPIO_Init+0x268>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b7b      	ldr	r3, [pc, #492]	; (8000a04 <MX_GPIO_Init+0x268>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b77      	ldr	r3, [pc, #476]	; (8000a04 <MX_GPIO_Init+0x268>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a76      	ldr	r2, [pc, #472]	; (8000a04 <MX_GPIO_Init+0x268>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b74      	ldr	r3, [pc, #464]	; (8000a04 <MX_GPIO_Init+0x268>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b70      	ldr	r3, [pc, #448]	; (8000a04 <MX_GPIO_Init+0x268>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a6f      	ldr	r2, [pc, #444]	; (8000a04 <MX_GPIO_Init+0x268>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b6d      	ldr	r3, [pc, #436]	; (8000a04 <MX_GPIO_Init+0x268>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	486a      	ldr	r0, [pc, #424]	; (8000a08 <MX_GPIO_Init+0x26c>)
 8000860:	f000 fecc 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2101      	movs	r1, #1
 8000868:	4868      	ldr	r0, [pc, #416]	; (8000a0c <MX_GPIO_Init+0x270>)
 800086a:	f000 fec7 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086e:	2200      	movs	r2, #0
 8000870:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000874:	4866      	ldr	r0, [pc, #408]	; (8000a10 <MX_GPIO_Init+0x274>)
 8000876:	f000 fec1 	bl	80015fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800087a:	2308      	movs	r3, #8
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	485d      	ldr	r0, [pc, #372]	; (8000a08 <MX_GPIO_Init+0x26c>)
 8000892:	f000 fd17 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000896:	2301      	movs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4857      	ldr	r0, [pc, #348]	; (8000a0c <MX_GPIO_Init+0x270>)
 80008ae:	f000 fd09 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b2:	2308      	movs	r3, #8
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c2:	2305      	movs	r3, #5
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	484f      	ldr	r0, [pc, #316]	; (8000a0c <MX_GPIO_Init+0x270>)
 80008ce:	f000 fcf9 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	484b      	ldr	r0, [pc, #300]	; (8000a14 <MX_GPIO_Init+0x278>)
 80008e8:	f000 fcec 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ec:	2310      	movs	r3, #16
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fc:	2306      	movs	r3, #6
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4843      	ldr	r0, [pc, #268]	; (8000a14 <MX_GPIO_Init+0x278>)
 8000908:	f000 fcdc 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800090c:	23e0      	movs	r3, #224	; 0xe0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800091c:	2305      	movs	r3, #5
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	483b      	ldr	r0, [pc, #236]	; (8000a14 <MX_GPIO_Init+0x278>)
 8000928:	f000 fccc 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800092c:	2304      	movs	r3, #4
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4836      	ldr	r0, [pc, #216]	; (8000a18 <MX_GPIO_Init+0x27c>)
 8000940:	f000 fcc0 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	482d      	ldr	r0, [pc, #180]	; (8000a18 <MX_GPIO_Init+0x27c>)
 8000962:	f000 fcaf 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000966:	f24f 0310 	movw	r3, #61456	; 0xf010
 800096a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4824      	ldr	r0, [pc, #144]	; (8000a10 <MX_GPIO_Init+0x274>)
 8000980:	f000 fca0 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000984:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000996:	2306      	movs	r3, #6
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	481a      	ldr	r0, [pc, #104]	; (8000a0c <MX_GPIO_Init+0x270>)
 80009a2:	f000 fc8f 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009a6:	2320      	movs	r3, #32
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4815      	ldr	r0, [pc, #84]	; (8000a10 <MX_GPIO_Init+0x274>)
 80009ba:	f000 fc83 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009be:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c4:	2312      	movs	r3, #18
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d0:	2304      	movs	r3, #4
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	480f      	ldr	r0, [pc, #60]	; (8000a18 <MX_GPIO_Init+0x27c>)
 80009dc:	f000 fc72 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_GPIO_Init+0x26c>)
 80009f6:	f000 fc65 	bl	80012c4 <HAL_GPIO_Init>

}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400

08000a1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a24:	f009 fba6 	bl	800a174 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8000a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <StartDefaultTask+0x20>)
 8000a2e:	f000 fdfe 	bl	800162e <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000a32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a36:	f006 f9d5 	bl	8006de4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8000a3a:	e7f5      	b.n	8000a28 <StartDefaultTask+0xc>
 8000a3c:	40020c00 	.word	0x40020c00

08000a40 <Start_Blue_LED_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Blue_LED_Blink */
void Start_Blue_LED_Blink(void *argument)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Blue_LED_Blink */
  /* Infinite loop */
	static uint8_t i = 1;
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4e:	4808      	ldr	r0, [pc, #32]	; (8000a70 <Start_Blue_LED_Blink+0x30>)
 8000a50:	f000 fdd4 	bl	80015fc <HAL_GPIO_WritePin>
		osDelay(100);
 8000a54:	2064      	movs	r0, #100	; 0x64
 8000a56:	f006 f9c5 	bl	8006de4 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <Start_Blue_LED_Blink+0x30>)
 8000a62:	f000 fdcb 	bl	80015fc <HAL_GPIO_WritePin>
		osDelay(900);
 8000a66:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000a6a:	f006 f9bb 	bl	8006de4 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8000a6e:	e7eb      	b.n	8000a48 <Start_Blue_LED_Blink+0x8>
 8000a70:	40020c00 	.word	0x40020c00

08000a74 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(2000);												// Every 5 second task management will print data
 8000a80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a84:	f006 f9ae 	bl	8006de4 <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8000a88:	4a8d      	ldr	r2, [pc, #564]	; (8000cc0 <Start_Show_Resources+0x24c>)
 8000a8a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	4611      	mov	r1, r2
 8000a92:	8019      	strh	r1, [r3, #0]
 8000a94:	3302      	adds	r3, #2
 8000a96:	0c12      	lsrs	r2, r2, #16
 8000a98:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8000a9a:	232d      	movs	r3, #45	; 0x2d
 8000a9c:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	  char buff[10] = {0};
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8000aa6:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8000ab0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a f8d6 	bl	800ac6c <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8000ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fb83 	bl	80001d0 <strlen>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a7b      	ldr	r2, [pc, #492]	; (8000cc4 <Start_Show_Resources+0x250>)
 8000ad6:	461d      	mov	r5, r3
 8000ad8:	4614      	mov	r4, r2
 8000ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000adc:	6028      	str	r0, [r5, #0]
 8000ade:	6069      	str	r1, [r5, #4]
 8000ae0:	60aa      	str	r2, [r5, #8]
 8000ae2:	60eb      	str	r3, [r5, #12]
 8000ae4:	cc03      	ldmia	r4!, {r0, r1}
 8000ae6:	6128      	str	r0, [r5, #16]
 8000ae8:	6169      	str	r1, [r5, #20]
 8000aea:	7823      	ldrb	r3, [r4, #0]
 8000aec:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8000aee:	f009 fa79 	bl	8009fe4 <xPortGetFreeHeapSize>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b74      	ldr	r3, [pc, #464]	; (8000cc8 <Start_Show_Resources+0x254>)
 8000af8:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8000afa:	4b73      	ldr	r3, [pc, #460]	; (8000cc8 <Start_Show_Resources+0x254>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8000b02:	220a      	movs	r2, #10
 8000b04:	4618      	mov	r0, r3
 8000b06:	f00a f89f 	bl	800ac48 <itoa>
	  strcat(msg.Buf, buff);
 8000b0a:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8000b0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00a f9a5 	bl	800ae64 <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8000b1a:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8000b1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f00a f99d 	bl	800ae64 <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME           | STATUS |   PRIOR	|  STACK  |    NUM  |\n\r\0");
 8000b2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fb4e 	bl	80001d0 <strlen>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a63      	ldr	r2, [pc, #396]	; (8000ccc <Start_Show_Resources+0x258>)
 8000b40:	4618      	mov	r0, r3
 8000b42:	4611      	mov	r1, r2
 8000b44:	2341      	movs	r3, #65	; 0x41
 8000b46:	461a      	mov	r2, r3
 8000b48:	f00a f882 	bl	800ac50 <memcpy>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8000b4c:	4860      	ldr	r0, [pc, #384]	; (8000cd0 <Start_Show_Resources+0x25c>)
 8000b4e:	f008 fa0d 	bl	8008f6c <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8000b58:	e004      	b.n	8000b64 <Start_Show_Resources+0xf0>
	  {
	  	buffer_size ++;
 8000b5a:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8000b5e:	3301      	adds	r3, #1
 8000b60:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8000b64:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8000b68:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000b6c:	5cd3      	ldrb	r3, [r2, r3]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1f3      	bne.n	8000b5a <Start_Show_Resources+0xe6>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8000b7e:	e011      	b.n	8000ba4 <Start_Show_Resources+0x130>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8000b80:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8000b84:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000b88:	4413      	add	r3, r2
 8000b8a:	4951      	ldr	r1, [pc, #324]	; (8000cd0 <Start_Show_Resources+0x25c>)
 8000b8c:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8000b90:	440a      	add	r2, r1
 8000b92:	7811      	ldrb	r1, [r2, #0]
 8000b94:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000b98:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8000b9a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8000ba4:	4a4a      	ldr	r2, [pc, #296]	; (8000cd0 <Start_Show_Resources+0x25c>)
 8000ba6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000baa:	4413      	add	r3, r2
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1e6      	bne.n	8000b80 <Start_Show_Resources+0x10c>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8000bb2:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <Start_Show_Resources+0x260>)
 8000bb4:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 8000bb8:	461d      	mov	r5, r3
 8000bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc2:	c403      	stmia	r4!, {r0, r1}
 8000bc4:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME           | ABS TIME |              TASK TIME% |\n\r"};
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4a43      	ldr	r2, [pc, #268]	; (8000cd8 <Start_Show_Resources+0x264>)
 8000bcc:	461c      	mov	r4, r3
 8000bce:	4615      	mov	r5, r2
 8000bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bdc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000be0:	c407      	stmia	r4!, {r0, r1, r2}
 8000be2:	8023      	strh	r3, [r4, #0]
 8000be4:	3402      	adds	r4, #2
 8000be6:	0c1b      	lsrs	r3, r3, #16
 8000be8:	7023      	strb	r3, [r4, #0]
	  strcat(msg.Buf, str_line);
 8000bea:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8000bee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f00a f935 	bl	800ae64 <strcat>
	  strcat(msg.Buf, str_head_2);
 8000bfa:	f107 020c 	add.w	r2, r7, #12
 8000bfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00a f92d 	bl	800ae64 <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8000c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c0e:	2100      	movs	r1, #0
 8000c10:	482f      	ldr	r0, [pc, #188]	; (8000cd0 <Start_Show_Resources+0x25c>)
 8000c12:	f00a f82b 	bl	800ac6c <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8000c16:	482e      	ldr	r0, [pc, #184]	; (8000cd0 <Start_Show_Resources+0x25c>)
 8000c18:	f008 fa3e 	bl	8009098 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);           // НЕ ВИВОДИТЬ СТРОКУ !!!!!!!!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<
 8000c1c:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8000c26:	4413      	add	r3, r2
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	3357      	adds	r3, #87	; 0x57
 8000c2c:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8000c36:	e011      	b.n	8000c5c <Start_Show_Resources+0x1e8>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8000c38:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8000c3c:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000c40:	4413      	add	r3, r2
 8000c42:	4923      	ldr	r1, [pc, #140]	; (8000cd0 <Start_Show_Resources+0x25c>)
 8000c44:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8000c48:	440a      	add	r2, r1
 8000c4a:	7811      	ldrb	r1, [r2, #0]
 8000c4c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000c50:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8000c52:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000c56:	3301      	adds	r3, #1
 8000c58:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8000c5c:	4a1c      	ldr	r2, [pc, #112]	; (8000cd0 <Start_Show_Resources+0x25c>)
 8000c5e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000c62:	4413      	add	r3, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1e6      	bne.n	8000c38 <Start_Show_Resources+0x1c4>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8000c6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff faae 	bl	80001d0 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <Start_Show_Resources+0x268>)
 8000c80:	4614      	mov	r4, r2
 8000c82:	469c      	mov	ip, r3
 8000c84:	f104 0e20 	add.w	lr, r4, #32
 8000c88:	4665      	mov	r5, ip
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c8e:	6028      	str	r0, [r5, #0]
 8000c90:	6069      	str	r1, [r5, #4]
 8000c92:	60aa      	str	r2, [r5, #8]
 8000c94:	60eb      	str	r3, [r5, #12]
 8000c96:	3410      	adds	r4, #16
 8000c98:	f10c 0c10 	add.w	ip, ip, #16
 8000c9c:	4574      	cmp	r4, lr
 8000c9e:	d1f3      	bne.n	8000c88 <Start_Show_Resources+0x214>
 8000ca0:	4665      	mov	r5, ip
 8000ca2:	4623      	mov	r3, r4
 8000ca4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ca6:	6028      	str	r0, [r5, #0]
 8000ca8:	6069      	str	r1, [r5, #4]
 8000caa:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <Start_Show_Resources+0x26c>)
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f006 f921 	bl	8006f00 <osMessageQueuePut>
  {
 8000cbe:	e6df      	b.n	8000a80 <Start_Show_Resources+0xc>
 8000cc0:	0800b728 	.word	0x0800b728
 8000cc4:	0800b69c 	.word	0x0800b69c
 8000cc8:	200005ec 	.word	0x200005ec
 8000ccc:	0800b6b8 	.word	0x0800b6b8
 8000cd0:	20000204 	.word	0x20000204
 8000cd4:	0800b72c 	.word	0x0800b72c
 8000cd8:	0800b748 	.word	0x0800b748
 8000cdc:	0800b6fc 	.word	0x0800b6fc
 8000ce0:	20006498 	.word	0x20006498

08000ce4 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <Start_UART_Task+0x58>)
 8000cf2:	6818      	ldr	r0, [r3, #0]
 8000cf4:	f107 010c 	add.w	r1, r7, #12
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f006 f95f 	bl	8006fc0 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8000d08:	e004      	b.n	8000d14 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8000d0a:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8000d0e:	3301      	adds	r3, #1
 8000d10:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8000d14:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8000d18:	f107 020c 	add.w	r2, r7, #12
 8000d1c:	5cd3      	ldrb	r3, [r2, r3]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f3      	bne.n	8000d0a <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8000d22:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f009 fadf 	bl	800a2f0 <CDC_Transmit_FS>
    osDelay(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f006 f856 	bl	8006de4 <osDelay>
  {
 8000d38:	e7da      	b.n	8000cf0 <Start_UART_Task+0xc>
 8000d3a:	bf00      	nop
 8000d3c:	20006498 	.word	0x20006498

08000d40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM3)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d104      	bne.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000d5a:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8000d66:	f000 f987 	bl	8001078 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40000400 	.word	0x40000400
 8000d78:	2000a0e8 	.word	0x2000a0e8
 8000d7c:	40010000 	.word	0x40010000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_MspInit+0x54>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <HAL_MspInit+0x54>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_MspInit+0x54>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_MspInit+0x54>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_MspInit+0x54>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_MspInit+0x54>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	210f      	movs	r1, #15
 8000dce:	f06f 0001 	mvn.w	r0, #1
 8000dd2:	f000 fa4d 	bl	8001270 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_TIM_Base_MspInit+0x48>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d115      	bne.n	8000e22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_TIM_Base_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <HAL_TIM_Base_MspInit+0x4c>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_TIM_Base_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2105      	movs	r1, #5
 8000e16:	201d      	movs	r0, #29
 8000e18:	f000 fa2a 	bl	8001270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e1c:	201d      	movs	r0, #29
 8000e1e:	f000 fa43 	bl	80012a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40000400 	.word	0x40000400
 8000e30:	40023800 	.word	0x40023800

08000e34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	2019      	movs	r0, #25
 8000e4a:	f000 fa11 	bl	8001270 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e4e:	2019      	movs	r0, #25
 8000e50:	f000 fa2a 	bl	80012a8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <HAL_InitTick+0xa4>)
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <HAL_InitTick+0xa4>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6453      	str	r3, [r2, #68]	; 0x44
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_InitTick+0xa4>)
 8000e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e70:	f107 0210 	add.w	r2, r7, #16
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 f9d4 	bl	8003228 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e80:	f002 f9be 	bl	8003200 <HAL_RCC_GetPCLK2Freq>
 8000e84:	4603      	mov	r3, r0
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8c:	4a13      	ldr	r2, [pc, #76]	; (8000edc <HAL_InitTick+0xa8>)
 8000e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e92:	0c9b      	lsrs	r3, r3, #18
 8000e94:	3b01      	subs	r3, #1
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_InitTick+0xac>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <HAL_InitTick+0xb0>)
 8000e9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_InitTick+0xac>)
 8000ea0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_InitTick+0xac>)
 8000ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eaa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_InitTick+0xac>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_InitTick+0xac>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <HAL_InitTick+0xac>)
 8000eba:	f002 f9e7 	bl	800328c <HAL_TIM_Base_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d104      	bne.n	8000ece <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <HAL_InitTick+0xac>)
 8000ec6:	f002 fa31 	bl	800332c <HAL_TIM_Base_Start_IT>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3730      	adds	r7, #48	; 0x30
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	431bde83 	.word	0x431bde83
 8000ee0:	2000a1b0 	.word	0x2000a1b0
 8000ee4:	40010000 	.word	0x40010000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f1a:	f002 fa77 	bl	800340c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000a1b0 	.word	0x2000a1b0

08000f28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <TIM3_IRQHandler+0x10>)
 8000f2e:	f002 fa6d 	bl	800340c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20008e9c 	.word	0x20008e9c

08000f3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <OTG_FS_IRQHandler+0x10>)
 8000f42:	f000 fcde 	bl	8001902 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000b70c 	.word	0x2000b70c

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f80:	f009 fe20 	bl	800abc4 <__errno>
 8000f84:	4603      	mov	r3, r0
 8000f86:	220c      	movs	r2, #12
 8000f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f8e:	e009      	b.n	8000fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <_sbrk+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20020000 	.word	0x20020000
 8000fb0:	00000400 	.word	0x00000400
 8000fb4:	200005f0 	.word	0x200005f0
 8000fb8:	2000bb28 	.word	0x2000bb28

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001018 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ffc:	4c0b      	ldr	r4, [pc, #44]	; (800102c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800100a:	f7ff ffd7 	bl	8000fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100e:	f009 fddf 	bl	800abd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fab1 	bl	8000578 <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001018:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001024:	0800b998 	.word	0x0800b998
  ldr r2, =_sbss
 8001028:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800102c:	2000bb24 	.word	0x2000bb24

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <HAL_Init+0x40>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <HAL_Init+0x40>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800104e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_Init+0x40>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f8fc 	bl	800125a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	200f      	movs	r0, #15
 8001064:	f7ff fee6 	bl	8000e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fe90 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008
 800109c:	2000a1f8 	.word	0x2000a1f8

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	2000a1f8 	.word	0x2000a1f8

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <__NVIC_EnableIRQ+0x38>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff4c 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001282:	f7ff ff61 	bl	8001148 <__NVIC_GetPriorityGrouping>
 8001286:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	6978      	ldr	r0, [r7, #20]
 800128e:	f7ff ffb1 	bl	80011f4 <NVIC_EncodePriority>
 8001292:	4602      	mov	r2, r0
 8001294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff80 	bl	80011a0 <__NVIC_SetPriority>
}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff54 	bl	8001164 <__NVIC_EnableIRQ>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	e16b      	b.n	80015b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f040 815a 	bne.w	80015b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d005      	beq.n	8001316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001312:	2b02      	cmp	r3, #2
 8001314:	d130      	bne.n	8001378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 0201 	and.w	r2, r3, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b03      	cmp	r3, #3
 8001382:	d017      	beq.n	80013b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d123      	bne.n	8001408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	08da      	lsrs	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3208      	adds	r2, #8
 80013c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	08da      	lsrs	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3208      	adds	r2, #8
 8001402:	69b9      	ldr	r1, [r7, #24]
 8001404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0203 	and.w	r2, r3, #3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80b4 	beq.w	80015b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b60      	ldr	r3, [pc, #384]	; (80015d0 <HAL_GPIO_Init+0x30c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a5f      	ldr	r2, [pc, #380]	; (80015d0 <HAL_GPIO_Init+0x30c>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <HAL_GPIO_Init+0x30c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001466:	4a5b      	ldr	r2, [pc, #364]	; (80015d4 <HAL_GPIO_Init+0x310>)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_GPIO_Init+0x314>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d02b      	beq.n	80014ea <HAL_GPIO_Init+0x226>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a51      	ldr	r2, [pc, #324]	; (80015dc <HAL_GPIO_Init+0x318>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d025      	beq.n	80014e6 <HAL_GPIO_Init+0x222>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a50      	ldr	r2, [pc, #320]	; (80015e0 <HAL_GPIO_Init+0x31c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01f      	beq.n	80014e2 <HAL_GPIO_Init+0x21e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4f      	ldr	r2, [pc, #316]	; (80015e4 <HAL_GPIO_Init+0x320>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x21a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4e      	ldr	r2, [pc, #312]	; (80015e8 <HAL_GPIO_Init+0x324>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x216>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4d      	ldr	r2, [pc, #308]	; (80015ec <HAL_GPIO_Init+0x328>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x212>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4c      	ldr	r2, [pc, #304]	; (80015f0 <HAL_GPIO_Init+0x32c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x20e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4b      	ldr	r2, [pc, #300]	; (80015f4 <HAL_GPIO_Init+0x330>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x20a>
 80014ca:	2307      	movs	r3, #7
 80014cc:	e00e      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014ce:	2308      	movs	r3, #8
 80014d0:	e00c      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014d2:	2306      	movs	r3, #6
 80014d4:	e00a      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014d6:	2305      	movs	r3, #5
 80014d8:	e008      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014da:	2304      	movs	r3, #4
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014de:	2303      	movs	r3, #3
 80014e0:	e004      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e002      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <HAL_GPIO_Init+0x228>
 80014ea:	2300      	movs	r3, #0
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	f002 0203 	and.w	r2, r2, #3
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	4093      	lsls	r3, r2
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014fc:	4935      	ldr	r1, [pc, #212]	; (80015d4 <HAL_GPIO_Init+0x310>)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150a:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <HAL_GPIO_Init+0x334>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800152e:	4a32      	ldr	r2, [pc, #200]	; (80015f8 <HAL_GPIO_Init+0x334>)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001534:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <HAL_GPIO_Init+0x334>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_GPIO_Init+0x334>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <HAL_GPIO_Init+0x334>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001582:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <HAL_GPIO_Init+0x334>)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_GPIO_Init+0x334>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <HAL_GPIO_Init+0x334>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3301      	adds	r3, #1
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b0f      	cmp	r3, #15
 80015bc:	f67f ae90 	bls.w	80012e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40013800 	.word	0x40013800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40021400 	.word	0x40021400
 80015f0:	40021800 	.word	0x40021800
 80015f4:	40021c00 	.word	0x40021c00
 80015f8:	40013c00 	.word	0x40013c00

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001618:	e003      	b.n	8001622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001640:	887a      	ldrh	r2, [r7, #2]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	041a      	lsls	r2, r3, #16
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43d9      	mvns	r1, r3
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	400b      	ands	r3, r1
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001664:	b08f      	sub	sp, #60	; 0x3c
 8001666:	af0a      	add	r7, sp, #40	; 0x28
 8001668:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e10f      	b.n	8001894 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f008 ff76 	bl	800a580 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2203      	movs	r2, #3
 8001698:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 fb81 	bl	8003dba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	687e      	ldr	r6, [r7, #4]
 80016c0:	466d      	mov	r5, sp
 80016c2:	f106 0410 	add.w	r4, r6, #16
 80016c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016d6:	1d33      	adds	r3, r6, #4
 80016d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016da:	6838      	ldr	r0, [r7, #0]
 80016dc:	f002 fa58 	bl	8003b90 <USB_CoreInit>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0d0      	b.n	8001894 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fb6f 	bl	8003ddc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	e04a      	b.n	800179a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	333d      	adds	r3, #61	; 0x3d
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	1a9b      	subs	r3, r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	333c      	adds	r3, #60	; 0x3c
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	b298      	uxth	r0, r3
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	3342      	adds	r3, #66	; 0x42
 8001740:	4602      	mov	r2, r0
 8001742:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	333f      	adds	r3, #63	; 0x3f
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001758:	7bfa      	ldrb	r2, [r7, #15]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	3344      	adds	r3, #68	; 0x44
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	1a9b      	subs	r3, r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3348      	adds	r3, #72	; 0x48
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	3350      	adds	r3, #80	; 0x50
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	3301      	adds	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3af      	bcc.n	8001704 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e044      	b.n	8001834 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80017d2:	7bfa      	ldrb	r2, [r7, #15]
 80017d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	1a9b      	subs	r3, r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	3301      	adds	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d3b5      	bcc.n	80017aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	687e      	ldr	r6, [r7, #4]
 8001846:	466d      	mov	r5, sp
 8001848:	f106 0410 	add.w	r4, r6, #16
 800184c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001854:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001858:	e885 0003 	stmia.w	r5, {r0, r1}
 800185c:	1d33      	adds	r3, r6, #4
 800185e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001860:	6838      	ldr	r0, [r7, #0]
 8001862:	f002 fb07 	bl	8003e74 <USB_DevInit>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2202      	movs	r2, #2
 8001870:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e00d      	b.n	8001894 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f003 fb83 	bl	8004f98 <USB_DevDisconnect>

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800189c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_PCD_Start+0x1c>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e020      	b.n	80018fa <HAL_PCD_Start+0x5e>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d109      	bne.n	80018dc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d005      	beq.n	80018dc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 fa59 	bl	8003d98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 fb33 	bl	8004f56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001902:	b590      	push	{r4, r7, lr}
 8001904:	b08d      	sub	sp, #52	; 0x34
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fbf1 	bl	8005100 <USB_GetMode>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	f040 839d 	bne.w	8002060 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fb55 	bl	8004fda <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8393 	beq.w	800205e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f003 fb4c 	bl	8004fda <USB_ReadInterrupts>
 8001942:	4603      	mov	r3, r0
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b02      	cmp	r3, #2
 800194a:	d107      	bne.n	800195c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f002 0202 	and.w	r2, r2, #2
 800195a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f003 fb3a 	bl	8004fda <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	2b10      	cmp	r3, #16
 800196e:	d161      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699a      	ldr	r2, [r3, #24]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0210 	bic.w	r2, r2, #16
 800197e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f003 020f 	and.w	r2, r3, #15
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	3304      	adds	r3, #4
 800199e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	0c5b      	lsrs	r3, r3, #17
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d124      	bne.n	80019f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d035      	beq.n	8001a24 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	6a38      	ldr	r0, [r7, #32]
 80019cc:	f003 f971 	bl	8004cb2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019dc:	441a      	add	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	699a      	ldr	r2, [r3, #24]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019ee:	441a      	add	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	619a      	str	r2, [r3, #24]
 80019f4:	e016      	b.n	8001a24 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	0c5b      	lsrs	r3, r3, #17
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d110      	bne.n	8001a24 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a08:	2208      	movs	r2, #8
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6a38      	ldr	r0, [r7, #32]
 8001a0e:	f003 f950 	bl	8004cb2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a1e:	441a      	add	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699a      	ldr	r2, [r3, #24]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0210 	orr.w	r2, r2, #16
 8001a32:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 face 	bl	8004fda <USB_ReadInterrupts>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a48:	d16e      	bne.n	8001b28 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 fad4 	bl	8005000 <USB_ReadDevAllOutEpInterrupt>
 8001a58:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001a5a:	e062      	b.n	8001b22 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d057      	beq.n	8001b16 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 faf9 	bl	8005068 <USB_ReadDevOutEPInterrupt>
 8001a76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00c      	beq.n	8001a9c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2301      	movs	r3, #1
 8001a92:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fdb0 	bl	80025fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00c      	beq.n	8001ac0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	015a      	lsls	r2, r3, #5
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 feaa 	bl	8002814 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d008      	beq.n	8001adc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	015a      	lsls	r2, r3, #5
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2310      	movs	r3, #16
 8001ada:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f003 0320 	and.w	r3, r3, #32
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d008      	beq.n	8001af8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	015a      	lsls	r2, r3, #5
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001af2:	461a      	mov	r2, r3
 8001af4:	2320      	movs	r3, #32
 8001af6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	015a      	lsls	r2, r3, #5
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	4413      	add	r3, r2
 8001b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b14:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	3301      	adds	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d199      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 fa54 	bl	8004fda <USB_ReadInterrupts>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b3c:	f040 80c0 	bne.w	8001cc0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fa75 	bl	8005034 <USB_ReadDevAllInEpInterrupt>
 8001b4a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001b50:	e0b2      	b.n	8001cb8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a7 	beq.w	8001cac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fa9b 	bl	80050a4 <USB_ReadDevInEPInterrupt>
 8001b6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d057      	beq.n	8001c2a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	2201      	movs	r2, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69f9      	ldr	r1, [r7, #28]
 8001b96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	015a      	lsls	r2, r3, #5
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001baa:	461a      	mov	r2, r3
 8001bac:	2301      	movs	r3, #1
 8001bae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d132      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3348      	adds	r3, #72	; 0x48
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4403      	add	r3, r0
 8001bd8:	3344      	adds	r3, #68	; 0x44
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4419      	add	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4403      	add	r3, r0
 8001bec:	3348      	adds	r3, #72	; 0x48
 8001bee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d113      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x31c>
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	3350      	adds	r3, #80	; 0x50
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d108      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c16:	461a      	mov	r2, r3
 8001c18:	2101      	movs	r1, #1
 8001c1a:	f003 faa3 	bl	8005164 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4619      	mov	r1, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f008 fd3a 	bl	800a69e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c40:	461a      	mov	r2, r3
 8001c42:	2308      	movs	r3, #8
 8001c44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2310      	movs	r3, #16
 8001c60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	015a      	lsls	r2, r3, #5
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2340      	movs	r3, #64	; 0x40
 8001c7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c94:	461a      	mov	r2, r3
 8001c96:	2302      	movs	r3, #2
 8001c98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fc1b 	bl	80024e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	3301      	adds	r3, #1
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	085b      	lsrs	r3, r3, #1
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f47f af49 	bne.w	8001b52 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 f988 	bl	8004fda <USB_ReadInterrupts>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cd4:	d122      	bne.n	8001d1c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d108      	bne.n	8001d06 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fe26 	bl	8002950 <HAL_PCDEx_LPM_Callback>
 8001d04:	e002      	b.n	8001d0c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f008 fd40 	bl	800a78c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 f95a 	bl	8004fda <USB_ReadInterrupts>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d30:	d112      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d102      	bne.n	8001d48 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f008 fcfc 	bl	800a740 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001d56:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 f93c 	bl	8004fda <USB_ReadInterrupts>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6c:	f040 80c7 	bne.w	8001efe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2110      	movs	r1, #16
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f002 f9d6 	bl	800413c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d94:	e056      	b.n	8001e44 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da2:	461a      	mov	r2, r3
 8001da4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001da8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dba:	0151      	lsls	r1, r2, #5
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	440a      	add	r2, r1
 8001dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001dc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dc8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dda:	0151      	lsls	r1, r2, #5
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	440a      	add	r2, r1
 8001de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001de4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001de8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df6:	461a      	mov	r2, r3
 8001df8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001dfc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e0e:	0151      	lsls	r1, r2, #5
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	440a      	add	r2, r1
 8001e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e2e:	0151      	lsls	r1, r2, #5
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	440a      	add	r2, r1
 8001e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	3301      	adds	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d3a3      	bcc.n	8001d96 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e5c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d016      	beq.n	8001e98 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e7a:	f043 030b 	orr.w	r3, r3, #11
 8001e7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e90:	f043 030b 	orr.w	r3, r3, #11
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	e015      	b.n	8001ec4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ea6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eaa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001eae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ebe:	f043 030b 	orr.w	r3, r3, #11
 8001ec2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ed2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ed6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f003 f93b 	bl	8005164 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 f869 	bl	8004fda <USB_ReadInterrupts>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f12:	d124      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 f8ff 	bl	800511c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 f967 	bl	80041f6 <USB_GetDevSpeed>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681c      	ldr	r4, [r3, #0]
 8001f34:	f001 f958 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8001f38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	4620      	mov	r0, r4
 8001f44:	f001 fe86 	bl	8003c54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f008 fbd0 	bl	800a6ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 f839 	bl	8004fda <USB_ReadInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d10a      	bne.n	8001f88 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f008 fbad 	bl	800a6d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f002 0208 	and.w	r2, r2, #8
 8001f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f003 f824 	bl	8004fda <USB_ReadInterrupts>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f9c:	d10f      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f008 fc0f 	bl	800a7cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 f809 	bl	8004fda <USB_ReadInterrupts>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fd2:	d10f      	bne.n	8001ff4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4619      	mov	r1, r3
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f008 fbe2 	bl	800a7a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ff2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 ffee 	bl	8004fda <USB_ReadInterrupts>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002008:	d10a      	bne.n	8002020 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f008 fbf0 	bl	800a7f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800201e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f002 ffd8 	bl	8004fda <USB_ReadInterrupts>
 800202a:	4603      	mov	r3, r0
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b04      	cmp	r3, #4
 8002032:	d115      	bne.n	8002060 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f008 fbe0 	bl	800a80c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	430a      	orrs	r2, r1
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	e000      	b.n	8002060 <HAL_PCD_IRQHandler+0x75e>
      return;
 800205e:	bf00      	nop
    }
  }
}
 8002060:	3734      	adds	r7, #52	; 0x34
 8002062:	46bd      	mov	sp, r7
 8002064:	bd90      	pop	{r4, r7, pc}

08002066 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_PCD_SetAddress+0x1a>
 800207c:	2302      	movs	r3, #2
 800207e:	e013      	b.n	80020a8 <HAL_PCD_SetAddress+0x42>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f002 ff36 	bl	8004f0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	461a      	mov	r2, r3
 80020be:	4603      	mov	r3, r0
 80020c0:	70fb      	strb	r3, [r7, #3]
 80020c2:	460b      	mov	r3, r1
 80020c4:	803b      	strh	r3, [r7, #0]
 80020c6:	4613      	mov	r3, r2
 80020c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	da0f      	bge.n	80020f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f003 020f 	and.w	r2, r3, #15
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	3338      	adds	r3, #56	; 0x38
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	3304      	adds	r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	705a      	strb	r2, [r3, #1]
 80020f4:	e00f      	b.n	8002116 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	f003 020f 	and.w	r2, r3, #15
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4413      	add	r3, r2
 800210c:	3304      	adds	r3, #4
 800210e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	b2da      	uxtb	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002122:	883a      	ldrh	r2, [r7, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	78ba      	ldrb	r2, [r7, #2]
 800212c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	785b      	ldrb	r3, [r3, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002140:	78bb      	ldrb	r3, [r7, #2]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d102      	bne.n	800214c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_PCD_EP_Open+0xaa>
 8002156:	2302      	movs	r3, #2
 8002158:	e00e      	b.n	8002178 <HAL_PCD_EP_Open+0xc8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68f9      	ldr	r1, [r7, #12]
 8002168:	4618      	mov	r0, r3
 800216a:	f002 f869 	bl	8004240 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002176:	7afb      	ldrb	r3, [r7, #11]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800218c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002190:	2b00      	cmp	r3, #0
 8002192:	da0f      	bge.n	80021b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	f003 020f 	and.w	r2, r3, #15
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	3338      	adds	r3, #56	; 0x38
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	3304      	adds	r3, #4
 80021aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	705a      	strb	r2, [r3, #1]
 80021b2:	e00f      	b.n	80021d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	f003 020f 	and.w	r2, r3, #15
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	3304      	adds	r3, #4
 80021cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_PCD_EP_Close+0x6e>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e00e      	b.n	800220c <HAL_PCD_EP_Close+0x8c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68f9      	ldr	r1, [r7, #12]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 f8a7 	bl	8004350 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	460b      	mov	r3, r1
 8002222:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002224:	7afb      	ldrb	r3, [r7, #11]
 8002226:	f003 020f 	and.w	r2, r3, #15
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4413      	add	r3, r2
 800223a:	3304      	adds	r3, #4
 800223c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2200      	movs	r2, #0
 8002254:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002256:	7afb      	ldrb	r3, [r7, #11]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	b2da      	uxtb	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d102      	bne.n	8002270 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002270:	7afb      	ldrb	r3, [r7, #11]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	6979      	ldr	r1, [r7, #20]
 8002288:	f002 fb82 	bl	8004990 <USB_EP0StartXfer>
 800228c:	e008      	b.n	80022a0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	6979      	ldr	r1, [r7, #20]
 800229c:	f002 f934 	bl	8004508 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	f003 020f 	and.w	r2, r3, #15
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80022cc:	681b      	ldr	r3, [r3, #0]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	460b      	mov	r3, r1
 80022e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ea:	7afb      	ldrb	r3, [r7, #11]
 80022ec:	f003 020f 	and.w	r2, r3, #15
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	3338      	adds	r3, #56	; 0x38
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4413      	add	r3, r2
 80022fe:	3304      	adds	r3, #4
 8002300:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2201      	movs	r2, #1
 8002318:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800231a:	7afb      	ldrb	r3, [r7, #11]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	b2da      	uxtb	r2, r3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d102      	bne.n	8002334 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	6979      	ldr	r1, [r7, #20]
 800234c:	f002 fb20 	bl	8004990 <USB_EP0StartXfer>
 8002350:	e008      	b.n	8002364 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	6979      	ldr	r1, [r7, #20]
 8002360:	f002 f8d2 	bl	8004508 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	f003 020f 	and.w	r2, r3, #15
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d901      	bls.n	800238c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e050      	b.n	800242e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800238c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002390:	2b00      	cmp	r3, #0
 8002392:	da0f      	bge.n	80023b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 020f 	and.w	r2, r3, #15
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	3338      	adds	r3, #56	; 0x38
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	3304      	adds	r3, #4
 80023aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	705a      	strb	r2, [r3, #1]
 80023b2:	e00d      	b.n	80023d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	3304      	adds	r3, #4
 80023c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_PCD_EP_SetStall+0x82>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e01e      	b.n	800242e <HAL_PCD_EP_SetStall+0xc0>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68f9      	ldr	r1, [r7, #12]
 80023fe:	4618      	mov	r0, r3
 8002400:	f002 fcaf 	bl	8004d62 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10a      	bne.n	8002424 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	b2d9      	uxtb	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800241e:	461a      	mov	r2, r3
 8002420:	f002 fea0 	bl	8005164 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 020f 	and.w	r2, r3, #15
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	429a      	cmp	r2, r3
 800244e:	d901      	bls.n	8002454 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e042      	b.n	80024da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002458:	2b00      	cmp	r3, #0
 800245a:	da0f      	bge.n	800247c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	f003 020f 	and.w	r2, r3, #15
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	3338      	adds	r3, #56	; 0x38
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	3304      	adds	r3, #4
 8002472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	705a      	strb	r2, [r3, #1]
 800247a:	e00f      	b.n	800249c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	f003 020f 	and.w	r2, r3, #15
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	3304      	adds	r3, #4
 8002494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_PCD_EP_ClrStall+0x86>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e00e      	b.n	80024da <HAL_PCD_EP_ClrStall+0xa4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68f9      	ldr	r1, [r7, #12]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 fcb7 	bl	8004e3e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b08a      	sub	sp, #40	; 0x28
 80024e6:	af02      	add	r7, sp, #8
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	3338      	adds	r3, #56	; 0x38
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	3304      	adds	r3, #4
 8002508:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	429a      	cmp	r2, r3
 8002514:	d901      	bls.n	800251a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e06c      	b.n	80025f4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	429a      	cmp	r2, r3
 800252e:	d902      	bls.n	8002536 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3303      	adds	r3, #3
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800253e:	e02b      	b.n	8002598 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	429a      	cmp	r2, r3
 8002554:	d902      	bls.n	800255c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	3303      	adds	r3, #3
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68d9      	ldr	r1, [r3, #12]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002574:	b2db      	uxtb	r3, r3
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	4603      	mov	r3, r0
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f002 fb5b 	bl	8004c36 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	441a      	add	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	699a      	ldr	r2, [r3, #24]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	441a      	add	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d809      	bhi.n	80025c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d203      	bcs.n	80025c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1be      	bne.n	8002540 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d811      	bhi.n	80025f2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	2201      	movs	r2, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	6939      	ldr	r1, [r7, #16]
 80025ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025ee:	4013      	ands	r3, r2
 80025f0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	333c      	adds	r3, #60	; 0x3c
 8002614:	3304      	adds	r3, #4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b01      	cmp	r3, #1
 8002630:	f040 80a0 	bne.w	8002774 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d015      	beq.n	800266a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a72      	ldr	r2, [pc, #456]	; (800280c <PCD_EP_OutXfrComplete_int+0x210>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f240 80dd 	bls.w	8002802 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80d7 	beq.w	8002802 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002660:	461a      	mov	r2, r3
 8002662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002666:	6093      	str	r3, [r2, #8]
 8002668:	e0cb      	b.n	8002802 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d009      	beq.n	8002688 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002680:	461a      	mov	r2, r3
 8002682:	2320      	movs	r3, #32
 8002684:	6093      	str	r3, [r2, #8]
 8002686:	e0bc      	b.n	8002802 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 80b7 	bne.w	8002802 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4a5d      	ldr	r2, [pc, #372]	; (800280c <PCD_EP_OutXfrComplete_int+0x210>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d90f      	bls.n	80026bc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b2:	461a      	mov	r2, r3
 80026b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026b8:	6093      	str	r3, [r2, #8]
 80026ba:	e0a2      	b.n	8002802 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80026ce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	0159      	lsls	r1, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	440b      	add	r3, r1
 80026d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80026e2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4403      	add	r3, r0
 80026f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80026f6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800270a:	6819      	ldr	r1, [r3, #0]
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4403      	add	r3, r0
 800271a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4419      	add	r1, r3
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4403      	add	r3, r0
 8002730:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002734:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d114      	bne.n	8002766 <PCD_EP_OutXfrComplete_int+0x16a>
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d108      	bne.n	8002766 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800275e:	461a      	mov	r2, r3
 8002760:	2101      	movs	r1, #1
 8002762:	f002 fcff 	bl	8005164 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4619      	mov	r1, r3
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f007 ff7b 	bl	800a668 <HAL_PCD_DataOutStageCallback>
 8002772:	e046      	b.n	8002802 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4a26      	ldr	r2, [pc, #152]	; (8002810 <PCD_EP_OutXfrComplete_int+0x214>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d124      	bne.n	80027c6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002792:	461a      	mov	r2, r3
 8002794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002798:	6093      	str	r3, [r2, #8]
 800279a:	e032      	b.n	8002802 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b2:	461a      	mov	r2, r3
 80027b4:	2320      	movs	r3, #32
 80027b6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	4619      	mov	r1, r3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f007 ff52 	bl	800a668 <HAL_PCD_DataOutStageCallback>
 80027c4:	e01d      	b.n	8002802 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d114      	bne.n	80027f6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d108      	bne.n	80027f6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027ee:	461a      	mov	r2, r3
 80027f0:	2100      	movs	r1, #0
 80027f2:	f002 fcb7 	bl	8005164 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4619      	mov	r1, r3
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f007 ff33 	bl	800a668 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	4f54300a 	.word	0x4f54300a
 8002810:	4f54310a 	.word	0x4f54310a

08002814 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	333c      	adds	r3, #60	; 0x3c
 800282c:	3304      	adds	r3, #4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a15      	ldr	r2, [pc, #84]	; (800289c <PCD_EP_OutSetupPacket_int+0x88>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d90e      	bls.n	8002868 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002860:	461a      	mov	r2, r3
 8002862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002866:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f007 feeb 	bl	800a644 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4a0a      	ldr	r2, [pc, #40]	; (800289c <PCD_EP_OutSetupPacket_int+0x88>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d90c      	bls.n	8002890 <PCD_EP_OutSetupPacket_int+0x7c>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d108      	bne.n	8002890 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002888:	461a      	mov	r2, r3
 800288a:	2101      	movs	r1, #1
 800288c:	f002 fc6a 	bl	8005164 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	4f54300a 	.word	0x4f54300a

080028a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
 80028ac:	4613      	mov	r3, r2
 80028ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d107      	bne.n	80028ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80028be:	883b      	ldrh	r3, [r7, #0]
 80028c0:	0419      	lsls	r1, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
 80028cc:	e028      	b.n	8002920 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	4413      	add	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	e00d      	b.n	80028fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	3340      	adds	r3, #64	; 0x40
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	4413      	add	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	3301      	adds	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	3b01      	subs	r3, #1
 8002904:	429a      	cmp	r2, r3
 8002906:	d3ec      	bcc.n	80028e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002908:	883b      	ldrh	r3, [r7, #0]
 800290a:	0418      	lsls	r0, r3, #16
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	3b01      	subs	r3, #1
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	4302      	orrs	r2, r0
 8002918:	3340      	adds	r3, #64	; 0x40
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e264      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d075      	beq.n	8002a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002986:	4ba3      	ldr	r3, [pc, #652]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b04      	cmp	r3, #4
 8002990:	d00c      	beq.n	80029ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002992:	4ba0      	ldr	r3, [pc, #640]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299a:	2b08      	cmp	r3, #8
 800299c:	d112      	bne.n	80029c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4b9d      	ldr	r3, [pc, #628]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029aa:	d10b      	bne.n	80029c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	4b99      	ldr	r3, [pc, #612]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d05b      	beq.n	8002a70 <HAL_RCC_OscConfig+0x108>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d157      	bne.n	8002a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e23f      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d106      	bne.n	80029dc <HAL_RCC_OscConfig+0x74>
 80029ce:	4b91      	ldr	r3, [pc, #580]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a90      	ldr	r2, [pc, #576]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e01d      	b.n	8002a18 <HAL_RCC_OscConfig+0xb0>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x98>
 80029e6:	4b8b      	ldr	r3, [pc, #556]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a8a      	ldr	r2, [pc, #552]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b88      	ldr	r3, [pc, #544]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a87      	ldr	r2, [pc, #540]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0xb0>
 8002a00:	4b84      	ldr	r3, [pc, #528]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a83      	ldr	r2, [pc, #524]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b81      	ldr	r3, [pc, #516]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a80      	ldr	r2, [pc, #512]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe fb3e 	bl	80010a0 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe fb3a 	bl	80010a0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e204      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b76      	ldr	r3, [pc, #472]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0xc0>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe fb2a 	bl	80010a0 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a50:	f7fe fb26 	bl	80010a0 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e1f0      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	4b6c      	ldr	r3, [pc, #432]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0xe8>
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d063      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a7e:	4b65      	ldr	r3, [pc, #404]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8a:	4b62      	ldr	r3, [pc, #392]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d11c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a96:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d116      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_RCC_OscConfig+0x152>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e1c4      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aba:	4b56      	ldr	r3, [pc, #344]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4952      	ldr	r1, [pc, #328]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	e03a      	b.n	8002b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_RCC_OscConfig+0x2b0>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7fe fadf 	bl	80010a0 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae6:	f7fe fadb 	bl	80010a0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1a5      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af8:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4940      	ldr	r1, [pc, #256]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	600b      	str	r3, [r1, #0]
 8002b18:	e015      	b.n	8002b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1a:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <HAL_RCC_OscConfig+0x2b0>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe fabe 	bl	80010a0 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b28:	f7fe faba 	bl	80010a0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e184      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d030      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5a:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <HAL_RCC_OscConfig+0x2b4>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fe fa9e 	bl	80010a0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b68:	f7fe fa9a 	bl	80010a0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e164      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x200>
 8002b86:	e015      	b.n	8002bb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_OscConfig+0x2b4>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7fe fa87 	bl	80010a0 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b96:	f7fe fa83 	bl	80010a0 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e14d      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f0      	bne.n	8002b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80a0 	beq.w	8002d02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_OscConfig+0x2b8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d121      	bne.n	8002c42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HAL_RCC_OscConfig+0x2b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <HAL_RCC_OscConfig+0x2b8>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fa49 	bl	80010a0 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	e011      	b.n	8002c36 <HAL_RCC_OscConfig+0x2ce>
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	42470000 	.word	0x42470000
 8002c1c:	42470e80 	.word	0x42470e80
 8002c20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c24:	f7fe fa3c 	bl	80010a0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e106      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	4b85      	ldr	r3, [pc, #532]	; (8002e4c <HAL_RCC_OscConfig+0x4e4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
 8002c4a:	4b81      	ldr	r3, [pc, #516]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a80      	ldr	r2, [pc, #512]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	e01c      	b.n	8002c92 <HAL_RCC_OscConfig+0x32a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x312>
 8002c60:	4b7b      	ldr	r3, [pc, #492]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	4a7a      	ldr	r2, [pc, #488]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6c:	4b78      	ldr	r3, [pc, #480]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a77      	ldr	r2, [pc, #476]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	e00b      	b.n	8002c92 <HAL_RCC_OscConfig+0x32a>
 8002c7a:	4b75      	ldr	r3, [pc, #468]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a74      	ldr	r2, [pc, #464]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
 8002c86:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a71      	ldr	r2, [pc, #452]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d015      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fa01 	bl	80010a0 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7fe f9fd 	bl	80010a0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0c5      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ee      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x33a>
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe f9eb 	bl	80010a0 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe f9e7 	bl	80010a0 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0af      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	4b5a      	ldr	r3, [pc, #360]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ee      	bne.n	8002cce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf6:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a55      	ldr	r2, [pc, #340]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 809b 	beq.w	8002e42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d0c:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d05c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d141      	bne.n	8002da4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d20:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fe f9bb 	bl	80010a0 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fe f9b7 	bl	80010a0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e081      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d40:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	019b      	lsls	r3, r3, #6
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	3b01      	subs	r3, #1
 8002d66:	041b      	lsls	r3, r3, #16
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	061b      	lsls	r3, r3, #24
 8002d70:	4937      	ldr	r1, [pc, #220]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d76:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe f990 	bl	80010a0 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe f98c 	bl	80010a0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e056      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	4b2e      	ldr	r3, [pc, #184]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x41c>
 8002da2:	e04e      	b.n	8002e42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fe f979 	bl	80010a0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fe f975 	bl	80010a0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e03f      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x44a>
 8002dd0:	e037      	b.n	8002e42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e032      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dde:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d028      	beq.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d121      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d11a      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e0e:	4013      	ands	r3, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d111      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	085b      	lsrs	r3, r3, #1
 8002e26:	3b01      	subs	r3, #1
 8002e28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	40023800 	.word	0x40023800
 8002e54:	42470060 	.word	0x42470060

08002e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0cc      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b68      	ldr	r3, [pc, #416]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d90c      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b65      	ldr	r3, [pc, #404]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b63      	ldr	r3, [pc, #396]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0b8      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eac:	4b59      	ldr	r3, [pc, #356]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a58      	ldr	r2, [pc, #352]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec4:	4b53      	ldr	r3, [pc, #332]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4a52      	ldr	r2, [pc, #328]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed0:	4b50      	ldr	r3, [pc, #320]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	494d      	ldr	r1, [pc, #308]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d044      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d119      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e07f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f16:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e06f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e067      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b37      	ldr	r3, [pc, #220]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4934      	ldr	r1, [pc, #208]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f48:	f7fe f8aa 	bl	80010a0 <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7fe f8a6 	bl	80010a0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e04f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d20c      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e032      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4916      	ldr	r1, [pc, #88]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	490e      	ldr	r1, [pc, #56]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fde:	f000 f821 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	490a      	ldr	r1, [pc, #40]	; (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	5ccb      	ldrb	r3, [r1, r3]
 8002ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd ff18 	bl	8000e34 <HAL_InitTick>

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023c00 	.word	0x40023c00
 8003014:	40023800 	.word	0x40023800
 8003018:	0800b8b8 	.word	0x0800b8b8
 800301c:	20000000 	.word	0x20000000
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	2300      	movs	r3, #0
 8003036:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800303c:	4b67      	ldr	r3, [pc, #412]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d00d      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x40>
 8003048:	2b08      	cmp	r3, #8
 800304a:	f200 80bd 	bhi.w	80031c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x34>
 8003052:	2b04      	cmp	r3, #4
 8003054:	d003      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0x3a>
 8003056:	e0b7      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003058:	4b61      	ldr	r3, [pc, #388]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800305a:	60bb      	str	r3, [r7, #8]
       break;
 800305c:	e0b7      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800305e:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003060:	60bb      	str	r3, [r7, #8]
      break;
 8003062:	e0b4      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003064:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800306c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800306e:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d04d      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307a:	4b58      	ldr	r3, [pc, #352]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	099b      	lsrs	r3, r3, #6
 8003080:	461a      	mov	r2, r3
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	f240 10ff 	movw	r0, #511	; 0x1ff
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	ea02 0800 	and.w	r8, r2, r0
 8003092:	ea03 0901 	and.w	r9, r3, r1
 8003096:	4640      	mov	r0, r8
 8003098:	4649      	mov	r1, r9
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	014b      	lsls	r3, r1, #5
 80030a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030a8:	0142      	lsls	r2, r0, #5
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	ebb0 0008 	subs.w	r0, r0, r8
 80030b2:	eb61 0109 	sbc.w	r1, r1, r9
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	018b      	lsls	r3, r1, #6
 80030c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030c4:	0182      	lsls	r2, r0, #6
 80030c6:	1a12      	subs	r2, r2, r0
 80030c8:	eb63 0301 	sbc.w	r3, r3, r1
 80030cc:	f04f 0000 	mov.w	r0, #0
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	00d9      	lsls	r1, r3, #3
 80030d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030da:	00d0      	lsls	r0, r2, #3
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	eb12 0208 	adds.w	r2, r2, r8
 80030e4:	eb43 0309 	adc.w	r3, r3, r9
 80030e8:	f04f 0000 	mov.w	r0, #0
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	0259      	lsls	r1, r3, #9
 80030f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030f6:	0250      	lsls	r0, r2, #9
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	461a      	mov	r2, r3
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	f7fd f8ba 	bl	8000280 <__aeabi_uldivmod>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4613      	mov	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e04a      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003116:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	461a      	mov	r2, r3
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003126:	f04f 0100 	mov.w	r1, #0
 800312a:	ea02 0400 	and.w	r4, r2, r0
 800312e:	ea03 0501 	and.w	r5, r3, r1
 8003132:	4620      	mov	r0, r4
 8003134:	4629      	mov	r1, r5
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	014b      	lsls	r3, r1, #5
 8003140:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003144:	0142      	lsls	r2, r0, #5
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	1b00      	subs	r0, r0, r4
 800314c:	eb61 0105 	sbc.w	r1, r1, r5
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	018b      	lsls	r3, r1, #6
 800315a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800315e:	0182      	lsls	r2, r0, #6
 8003160:	1a12      	subs	r2, r2, r0
 8003162:	eb63 0301 	sbc.w	r3, r3, r1
 8003166:	f04f 0000 	mov.w	r0, #0
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	00d9      	lsls	r1, r3, #3
 8003170:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003174:	00d0      	lsls	r0, r2, #3
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	1912      	adds	r2, r2, r4
 800317c:	eb45 0303 	adc.w	r3, r5, r3
 8003180:	f04f 0000 	mov.w	r0, #0
 8003184:	f04f 0100 	mov.w	r1, #0
 8003188:	0299      	lsls	r1, r3, #10
 800318a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800318e:	0290      	lsls	r0, r2, #10
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	461a      	mov	r2, r3
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	f7fd f86e 	bl	8000280 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4613      	mov	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	3301      	adds	r3, #1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	60bb      	str	r3, [r7, #8]
      break;
 80031c6:	e002      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031ca:	60bb      	str	r3, [r7, #8]
      break;
 80031cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ce:	68bb      	ldr	r3, [r7, #8]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	00f42400 	.word	0x00f42400
 80031e4:	007a1200 	.word	0x007a1200

080031e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000000 	.word	0x20000000

08003200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003204:	f7ff fff0 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0b5b      	lsrs	r3, r3, #13
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4903      	ldr	r1, [pc, #12]	; (8003224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	0800b8c8 	.word	0x0800b8c8

08003228 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	220f      	movs	r2, #15
 8003236:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_RCC_GetClockConfig+0x5c>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0203 	and.w	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <HAL_RCC_GetClockConfig+0x5c>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_RCC_GetClockConfig+0x5c>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_RCC_GetClockConfig+0x5c>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	08db      	lsrs	r3, r3, #3
 8003262:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <HAL_RCC_GetClockConfig+0x60>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0207 	and.w	r2, r3, #7
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	601a      	str	r2, [r3, #0]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	40023c00 	.word	0x40023c00

0800328c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e041      	b.n	8003322 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fd fd96 	bl	8000de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3304      	adds	r3, #4
 80032c8:	4619      	mov	r1, r3
 80032ca:	4610      	mov	r0, r2
 80032cc:	f000 fa96 	bl	80037fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b01      	cmp	r3, #1
 800333e:	d001      	beq.n	8003344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e04e      	b.n	80033e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a23      	ldr	r2, [pc, #140]	; (80033f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d022      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336e:	d01d      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1f      	ldr	r2, [pc, #124]	; (80033f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <HAL_TIM_Base_Start_IT+0xd0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1b      	ldr	r2, [pc, #108]	; (8003400 <HAL_TIM_Base_Start_IT+0xd4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a19      	ldr	r2, [pc, #100]	; (8003404 <HAL_TIM_Base_Start_IT+0xd8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_TIM_Base_Start_IT+0x80>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a18      	ldr	r2, [pc, #96]	; (8003408 <HAL_TIM_Base_Start_IT+0xdc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d111      	bne.n	80033d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d010      	beq.n	80033e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ce:	e007      	b.n	80033e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40010000 	.word	0x40010000
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800
 80033fc:	40000c00 	.word	0x40000c00
 8003400:	40010400 	.word	0x40010400
 8003404:	40014000 	.word	0x40014000
 8003408:	40001800 	.word	0x40001800

0800340c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d122      	bne.n	8003468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d11b      	bne.n	8003468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0202 	mvn.w	r2, #2
 8003438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f9b5 	bl	80037be <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9a7 	bl	80037aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f9b8 	bl	80037d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b04      	cmp	r3, #4
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0204 	mvn.w	r2, #4
 800348c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f98b 	bl	80037be <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f97d 	bl	80037aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f98e 	bl	80037d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d122      	bne.n	8003510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d11b      	bne.n	8003510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0208 	mvn.w	r2, #8
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2204      	movs	r2, #4
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f961 	bl	80037be <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f953 	bl	80037aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f964 	bl	80037d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b10      	cmp	r3, #16
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b10      	cmp	r3, #16
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0210 	mvn.w	r2, #16
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2208      	movs	r2, #8
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f937 	bl	80037be <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f929 	bl	80037aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f93a 	bl	80037d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10e      	bne.n	8003590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0201 	mvn.w	r2, #1
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fbd8 	bl	8000d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d10e      	bne.n	80035bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d107      	bne.n	80035bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fae0 	bl	8003b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d10e      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d107      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f8ff 	bl	80037e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b20      	cmp	r3, #32
 8003602:	d107      	bne.n	8003614 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0220 	mvn.w	r2, #32
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 faaa 	bl	8003b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIM_ConfigClockSource+0x1c>
 8003634:	2302      	movs	r3, #2
 8003636:	e0b4      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x186>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800365e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003670:	d03e      	beq.n	80036f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003676:	f200 8087 	bhi.w	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 800367a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367e:	f000 8086 	beq.w	800378e <HAL_TIM_ConfigClockSource+0x172>
 8003682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003686:	d87f      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 8003688:	2b70      	cmp	r3, #112	; 0x70
 800368a:	d01a      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0xa6>
 800368c:	2b70      	cmp	r3, #112	; 0x70
 800368e:	d87b      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 8003690:	2b60      	cmp	r3, #96	; 0x60
 8003692:	d050      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0x11a>
 8003694:	2b60      	cmp	r3, #96	; 0x60
 8003696:	d877      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 8003698:	2b50      	cmp	r3, #80	; 0x50
 800369a:	d03c      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0xfa>
 800369c:	2b50      	cmp	r3, #80	; 0x50
 800369e:	d873      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d058      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x13a>
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d86f      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 80036a8:	2b30      	cmp	r3, #48	; 0x30
 80036aa:	d064      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x15a>
 80036ac:	2b30      	cmp	r3, #48	; 0x30
 80036ae:	d86b      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d060      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x15a>
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d867      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d05c      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x15a>
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d05a      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x15a>
 80036c0:	e062      	b.n	8003788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6899      	ldr	r1, [r3, #8]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f000 f9ad 	bl	8003a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	609a      	str	r2, [r3, #8]
      break;
 80036ee:	e04f      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f000 f996 	bl	8003a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003712:	609a      	str	r2, [r3, #8]
      break;
 8003714:	e03c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	461a      	mov	r2, r3
 8003724:	f000 f90a 	bl	800393c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2150      	movs	r1, #80	; 0x50
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f963 	bl	80039fa <TIM_ITRx_SetConfig>
      break;
 8003734:	e02c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	6859      	ldr	r1, [r3, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	461a      	mov	r2, r3
 8003744:	f000 f929 	bl	800399a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2160      	movs	r1, #96	; 0x60
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f953 	bl	80039fa <TIM_ITRx_SetConfig>
      break;
 8003754:	e01c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6859      	ldr	r1, [r3, #4]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	461a      	mov	r2, r3
 8003764:	f000 f8ea 	bl	800393c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2140      	movs	r1, #64	; 0x40
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f943 	bl	80039fa <TIM_ITRx_SetConfig>
      break;
 8003774:	e00c      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4619      	mov	r1, r3
 8003780:	4610      	mov	r0, r2
 8003782:	f000 f93a 	bl	80039fa <TIM_ITRx_SetConfig>
      break;
 8003786:	e003      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      break;
 800378c:	e000      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800378e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a40      	ldr	r2, [pc, #256]	; (8003910 <TIM_Base_SetConfig+0x114>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <TIM_Base_SetConfig+0x40>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381a:	d00f      	beq.n	800383c <TIM_Base_SetConfig+0x40>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a3d      	ldr	r2, [pc, #244]	; (8003914 <TIM_Base_SetConfig+0x118>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00b      	beq.n	800383c <TIM_Base_SetConfig+0x40>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a3c      	ldr	r2, [pc, #240]	; (8003918 <TIM_Base_SetConfig+0x11c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <TIM_Base_SetConfig+0x40>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a3b      	ldr	r2, [pc, #236]	; (800391c <TIM_Base_SetConfig+0x120>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_Base_SetConfig+0x40>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a3a      	ldr	r2, [pc, #232]	; (8003920 <TIM_Base_SetConfig+0x124>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d108      	bne.n	800384e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2f      	ldr	r2, [pc, #188]	; (8003910 <TIM_Base_SetConfig+0x114>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d02b      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385c:	d027      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2c      	ldr	r2, [pc, #176]	; (8003914 <TIM_Base_SetConfig+0x118>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d023      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a2b      	ldr	r2, [pc, #172]	; (8003918 <TIM_Base_SetConfig+0x11c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01f      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a2a      	ldr	r2, [pc, #168]	; (800391c <TIM_Base_SetConfig+0x120>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01b      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a29      	ldr	r2, [pc, #164]	; (8003920 <TIM_Base_SetConfig+0x124>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d017      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a28      	ldr	r2, [pc, #160]	; (8003924 <TIM_Base_SetConfig+0x128>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a27      	ldr	r2, [pc, #156]	; (8003928 <TIM_Base_SetConfig+0x12c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00f      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a26      	ldr	r2, [pc, #152]	; (800392c <TIM_Base_SetConfig+0x130>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00b      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a25      	ldr	r2, [pc, #148]	; (8003930 <TIM_Base_SetConfig+0x134>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d007      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a24      	ldr	r2, [pc, #144]	; (8003934 <TIM_Base_SetConfig+0x138>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d003      	beq.n	80038ae <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a23      	ldr	r2, [pc, #140]	; (8003938 <TIM_Base_SetConfig+0x13c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d108      	bne.n	80038c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <TIM_Base_SetConfig+0x114>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d003      	beq.n	80038f4 <TIM_Base_SetConfig+0xf8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <TIM_Base_SetConfig+0x124>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d103      	bne.n	80038fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	615a      	str	r2, [r3, #20]
}
 8003902:	bf00      	nop
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40010000 	.word	0x40010000
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800
 800391c:	40000c00 	.word	0x40000c00
 8003920:	40010400 	.word	0x40010400
 8003924:	40014000 	.word	0x40014000
 8003928:	40014400 	.word	0x40014400
 800392c:	40014800 	.word	0x40014800
 8003930:	40001800 	.word	0x40001800
 8003934:	40001c00 	.word	0x40001c00
 8003938:	40002000 	.word	0x40002000

0800393c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f023 0201 	bic.w	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f023 030a 	bic.w	r3, r3, #10
 8003978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	621a      	str	r2, [r3, #32]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800399a:	b480      	push	{r7}
 800399c:	b087      	sub	sp, #28
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f023 0210 	bic.w	r2, r3, #16
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	031b      	lsls	r3, r3, #12
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b085      	sub	sp, #20
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f043 0307 	orr.w	r3, r3, #7
 8003a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	609a      	str	r2, [r3, #8]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	021a      	lsls	r2, r3, #8
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	609a      	str	r2, [r3, #8]
}
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e05a      	b.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d022      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d01d      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1d      	ldr	r2, [pc, #116]	; (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d018      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1a      	ldr	r2, [pc, #104]	; (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00e      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a17      	ldr	r2, [pc, #92]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10c      	bne.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800
 8003b58:	40000c00 	.word	0x40000c00
 8003b5c:	40010400 	.word	0x40010400
 8003b60:	40014000 	.word	0x40014000
 8003b64:	40001800 	.word	0x40001800

08003b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b90:	b084      	sub	sp, #16
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	f107 001c 	add.w	r0, r7, #28
 8003b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d122      	bne.n	8003bee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d105      	bne.n	8003be2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f001 fb1c 	bl	8005220 <USB_CoreReset>
 8003be8:	4603      	mov	r3, r0
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	e01a      	b.n	8003c24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f001 fb10 	bl	8005220 <USB_CoreReset>
 8003c00:	4603      	mov	r3, r0
 8003c02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38
 8003c16:	e005      	b.n	8003c24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d10b      	bne.n	8003c42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f043 0206 	orr.w	r2, r3, #6
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c4e:	b004      	add	sp, #16
 8003c50:	4770      	bx	lr
	...

08003c54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d165      	bne.n	8003d34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4a41      	ldr	r2, [pc, #260]	; (8003d70 <USB_SetTurnaroundTime+0x11c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d906      	bls.n	8003c7e <USB_SetTurnaroundTime+0x2a>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4a40      	ldr	r2, [pc, #256]	; (8003d74 <USB_SetTurnaroundTime+0x120>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d202      	bcs.n	8003c7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003c78:	230f      	movs	r3, #15
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e062      	b.n	8003d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4a3c      	ldr	r2, [pc, #240]	; (8003d74 <USB_SetTurnaroundTime+0x120>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d306      	bcc.n	8003c94 <USB_SetTurnaroundTime+0x40>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4a3b      	ldr	r2, [pc, #236]	; (8003d78 <USB_SetTurnaroundTime+0x124>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d202      	bcs.n	8003c94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003c8e:	230e      	movs	r3, #14
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	e057      	b.n	8003d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4a38      	ldr	r2, [pc, #224]	; (8003d78 <USB_SetTurnaroundTime+0x124>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d306      	bcc.n	8003caa <USB_SetTurnaroundTime+0x56>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4a37      	ldr	r2, [pc, #220]	; (8003d7c <USB_SetTurnaroundTime+0x128>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d202      	bcs.n	8003caa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003ca4:	230d      	movs	r3, #13
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e04c      	b.n	8003d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4a33      	ldr	r2, [pc, #204]	; (8003d7c <USB_SetTurnaroundTime+0x128>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d306      	bcc.n	8003cc0 <USB_SetTurnaroundTime+0x6c>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4a32      	ldr	r2, [pc, #200]	; (8003d80 <USB_SetTurnaroundTime+0x12c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d802      	bhi.n	8003cc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003cba:	230c      	movs	r3, #12
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	e041      	b.n	8003d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4a2f      	ldr	r2, [pc, #188]	; (8003d80 <USB_SetTurnaroundTime+0x12c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d906      	bls.n	8003cd6 <USB_SetTurnaroundTime+0x82>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4a2e      	ldr	r2, [pc, #184]	; (8003d84 <USB_SetTurnaroundTime+0x130>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d802      	bhi.n	8003cd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003cd0:	230b      	movs	r3, #11
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e036      	b.n	8003d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4a2a      	ldr	r2, [pc, #168]	; (8003d84 <USB_SetTurnaroundTime+0x130>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d906      	bls.n	8003cec <USB_SetTurnaroundTime+0x98>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4a29      	ldr	r2, [pc, #164]	; (8003d88 <USB_SetTurnaroundTime+0x134>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d802      	bhi.n	8003cec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003ce6:	230a      	movs	r3, #10
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	e02b      	b.n	8003d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4a26      	ldr	r2, [pc, #152]	; (8003d88 <USB_SetTurnaroundTime+0x134>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d906      	bls.n	8003d02 <USB_SetTurnaroundTime+0xae>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4a25      	ldr	r2, [pc, #148]	; (8003d8c <USB_SetTurnaroundTime+0x138>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d202      	bcs.n	8003d02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003cfc:	2309      	movs	r3, #9
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e020      	b.n	8003d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4a21      	ldr	r2, [pc, #132]	; (8003d8c <USB_SetTurnaroundTime+0x138>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d306      	bcc.n	8003d18 <USB_SetTurnaroundTime+0xc4>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4a20      	ldr	r2, [pc, #128]	; (8003d90 <USB_SetTurnaroundTime+0x13c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d802      	bhi.n	8003d18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d12:	2308      	movs	r3, #8
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	e015      	b.n	8003d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <USB_SetTurnaroundTime+0x13c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d906      	bls.n	8003d2e <USB_SetTurnaroundTime+0xda>
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <USB_SetTurnaroundTime+0x140>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d202      	bcs.n	8003d2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d28:	2307      	movs	r3, #7
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	e00a      	b.n	8003d44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d2e:	2306      	movs	r3, #6
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e007      	b.n	8003d44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d3a:	2309      	movs	r3, #9
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	e001      	b.n	8003d44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d40:	2309      	movs	r3, #9
 8003d42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	029b      	lsls	r3, r3, #10
 8003d58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	00d8acbf 	.word	0x00d8acbf
 8003d74:	00e4e1c0 	.word	0x00e4e1c0
 8003d78:	00f42400 	.word	0x00f42400
 8003d7c:	01067380 	.word	0x01067380
 8003d80:	011a499f 	.word	0x011a499f
 8003d84:	01312cff 	.word	0x01312cff
 8003d88:	014ca43f 	.word	0x014ca43f
 8003d8c:	016e3600 	.word	0x016e3600
 8003d90:	01a6ab1f 	.word	0x01a6ab1f
 8003d94:	01e84800 	.word	0x01e84800

08003d98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f023 0201 	bic.w	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d115      	bne.n	8003e2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f7fd f954 	bl	80010b8 <HAL_Delay>
      ms++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f001 f972 	bl	8005100 <USB_GetMode>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d01e      	beq.n	8003e60 <USB_SetCurrentMode+0x84>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b31      	cmp	r3, #49	; 0x31
 8003e26:	d9f0      	bls.n	8003e0a <USB_SetCurrentMode+0x2e>
 8003e28:	e01a      	b.n	8003e60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d115      	bne.n	8003e5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	f7fd f93b 	bl	80010b8 <HAL_Delay>
      ms++;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3301      	adds	r3, #1
 8003e46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f001 f959 	bl	8005100 <USB_GetMode>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <USB_SetCurrentMode+0x84>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b31      	cmp	r3, #49	; 0x31
 8003e58:	d9f0      	bls.n	8003e3c <USB_SetCurrentMode+0x60>
 8003e5a:	e001      	b.n	8003e60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e005      	b.n	8003e6c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b32      	cmp	r3, #50	; 0x32
 8003e64:	d101      	bne.n	8003e6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e74:	b084      	sub	sp, #16
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	e009      	b.n	8003ea8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3340      	adds	r3, #64	; 0x40
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b0e      	cmp	r3, #14
 8003eac:	d9f2      	bls.n	8003e94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d11c      	bne.n	8003eee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec2:	f043 0302 	orr.w	r3, r3, #2
 8003ec6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38
 8003eec:	e00b      	b.n	8003f06 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f18:	4619      	mov	r1, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	461a      	mov	r2, r3
 8003f22:	680b      	ldr	r3, [r1, #0]
 8003f24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d10c      	bne.n	8003f46 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f32:	2100      	movs	r1, #0
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f945 	bl	80041c4 <USB_SetDevSpeed>
 8003f3a:	e008      	b.n	8003f4e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f940 	bl	80041c4 <USB_SetDevSpeed>
 8003f44:	e003      	b.n	8003f4e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f46:	2103      	movs	r1, #3
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f93b 	bl	80041c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f4e:	2110      	movs	r1, #16
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8f3 	bl	800413c <USB_FlushTxFifo>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f90f 	bl	8004184 <USB_FlushRxFifo>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	461a      	mov	r2, r3
 8003f78:	2300      	movs	r3, #0
 8003f7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f82:	461a      	mov	r2, r3
 8003f84:	2300      	movs	r3, #0
 8003f86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8e:	461a      	mov	r2, r3
 8003f90:	2300      	movs	r3, #0
 8003f92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	e043      	b.n	8004022 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb0:	d118      	bne.n	8003fe4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	e013      	b.n	8003ff6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e008      	b.n	8003ff6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004002:	461a      	mov	r2, r3
 8004004:	2300      	movs	r3, #0
 8004006:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004014:	461a      	mov	r2, r3
 8004016:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800401a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	3301      	adds	r3, #1
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	429a      	cmp	r2, r3
 8004028:	d3b7      	bcc.n	8003f9a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	e043      	b.n	80040b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004046:	d118      	bne.n	800407a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405a:	461a      	mov	r2, r3
 800405c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e013      	b.n	800408c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	461a      	mov	r2, r3
 8004072:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	e008      	b.n	800408c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004086:	461a      	mov	r2, r3
 8004088:	2300      	movs	r3, #0
 800408a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004098:	461a      	mov	r2, r3
 800409a:	2300      	movs	r3, #0
 800409c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040aa:	461a      	mov	r2, r3
 80040ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	3301      	adds	r3, #1
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d3b7      	bcc.n	8004030 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80040e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f043 0210 	orr.w	r2, r3, #16
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <USB_DevInit+0x2c4>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f043 0208 	orr.w	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d107      	bne.n	8004128 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004128:	7dfb      	ldrb	r3, [r7, #23]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004134:	b004      	add	sp, #16
 8004136:	4770      	bx	lr
 8004138:	803c3800 	.word	0x803c3800

0800413c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	019b      	lsls	r3, r3, #6
 800414e:	f043 0220 	orr.w	r2, r3, #32
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3301      	adds	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	4a08      	ldr	r2, [pc, #32]	; (8004180 <USB_FlushTxFifo+0x44>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d901      	bls.n	8004166 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e006      	b.n	8004174 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b20      	cmp	r3, #32
 8004170:	d0f1      	beq.n	8004156 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	00030d40 	.word	0x00030d40

08004184 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2210      	movs	r2, #16
 8004194:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3301      	adds	r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <USB_FlushRxFifo+0x3c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e006      	b.n	80041b4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d0f1      	beq.n	8004196 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	00030d40 	.word	0x00030d40

080041c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b087      	sub	sp, #28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 0306 	and.w	r3, r3, #6
 800420e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004216:	2300      	movs	r3, #0
 8004218:	75fb      	strb	r3, [r7, #23]
 800421a:	e00a      	b.n	8004232 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d002      	beq.n	8004228 <USB_GetDevSpeed+0x32>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b06      	cmp	r3, #6
 8004226:	d102      	bne.n	800422e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004228:	2302      	movs	r3, #2
 800422a:	75fb      	strb	r3, [r7, #23]
 800422c:	e001      	b.n	8004232 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800422e:	230f      	movs	r3, #15
 8004230:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004232:	7dfb      	ldrb	r3, [r7, #23]
}
 8004234:	4618      	mov	r0, r3
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	785b      	ldrb	r3, [r3, #1]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d13a      	bne.n	80042d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	2101      	movs	r1, #1
 800426e:	fa01 f303 	lsl.w	r3, r1, r3
 8004272:	b29b      	uxth	r3, r3
 8004274:	68f9      	ldr	r1, [r7, #12]
 8004276:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800427a:	4313      	orrs	r3, r2
 800427c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d155      	bne.n	8004340 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	78db      	ldrb	r3, [r3, #3]
 80042ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	059b      	lsls	r3, r3, #22
 80042b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042b8:	4313      	orrs	r3, r2
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	e036      	b.n	8004340 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	2101      	movs	r1, #1
 80042e4:	fa01 f303 	lsl.w	r3, r1, r3
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	68f9      	ldr	r1, [r7, #12]
 80042ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d11a      	bne.n	8004340 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	78db      	ldrb	r3, [r3, #3]
 8004324:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004326:	430b      	orrs	r3, r1
 8004328:	4313      	orrs	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	440a      	add	r2, r1
 8004332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800433e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
	...

08004350 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	785b      	ldrb	r3, [r3, #1]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d161      	bne.n	8004430 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800437e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004382:	d11f      	bne.n	80043c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	0151      	lsls	r1, r2, #5
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	440a      	add	r2, r1
 800439a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	2101      	movs	r1, #1
 80043d6:	fa01 f303 	lsl.w	r3, r1, r3
 80043da:	b29b      	uxth	r3, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	68f9      	ldr	r1, [r7, #12]
 80043e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043e4:	4013      	ands	r3, r2
 80043e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	2101      	movs	r1, #1
 80043fa:	fa01 f303 	lsl.w	r3, r1, r3
 80043fe:	b29b      	uxth	r3, r3
 8004400:	43db      	mvns	r3, r3
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004408:	4013      	ands	r3, r2
 800440a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	0159      	lsls	r1, r3, #5
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	440b      	add	r3, r1
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	4619      	mov	r1, r3
 8004428:	4b35      	ldr	r3, [pc, #212]	; (8004500 <USB_DeactivateEndpoint+0x1b0>)
 800442a:	4013      	ands	r3, r2
 800442c:	600b      	str	r3, [r1, #0]
 800442e:	e060      	b.n	80044f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004446:	d11f      	bne.n	8004488 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004462:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004466:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	0151      	lsls	r1, r2, #5
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	440a      	add	r2, r1
 800447e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004482:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004486:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	2101      	movs	r1, #1
 800449a:	fa01 f303 	lsl.w	r3, r1, r3
 800449e:	041b      	lsls	r3, r3, #16
 80044a0:	43db      	mvns	r3, r3
 80044a2:	68f9      	ldr	r1, [r7, #12]
 80044a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044a8:	4013      	ands	r3, r2
 80044aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	2101      	movs	r1, #1
 80044be:	fa01 f303 	lsl.w	r3, r1, r3
 80044c2:	041b      	lsls	r3, r3, #16
 80044c4:	43db      	mvns	r3, r3
 80044c6:	68f9      	ldr	r1, [r7, #12]
 80044c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044cc:	4013      	ands	r3, r2
 80044ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	0159      	lsls	r1, r3, #5
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	440b      	add	r3, r1
 80044e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ea:	4619      	mov	r1, r3
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <USB_DeactivateEndpoint+0x1b4>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	ec337800 	.word	0xec337800
 8004504:	eff37800 	.word	0xeff37800

08004508 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	2b01      	cmp	r3, #1
 8004526:	f040 815c 	bne.w	80047e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d132      	bne.n	8004598 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	440a      	add	r2, r1
 8004548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004550:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004554:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	0151      	lsls	r1, r2, #5
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	440a      	add	r2, r1
 800456c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004574:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	0151      	lsls	r1, r2, #5
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	440a      	add	r2, r1
 800458c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004590:	0cdb      	lsrs	r3, r3, #19
 8004592:	04db      	lsls	r3, r3, #19
 8004594:	6113      	str	r3, [r2, #16]
 8004596:	e074      	b.n	8004682 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b2:	0cdb      	lsrs	r3, r3, #19
 80045b4:	04db      	lsls	r3, r3, #19
 80045b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	0151      	lsls	r1, r2, #5
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	440a      	add	r2, r1
 80045ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	6959      	ldr	r1, [r3, #20]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	440b      	add	r3, r1
 80045f4:	1e59      	subs	r1, r3, #1
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80045fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004600:	4b9d      	ldr	r3, [pc, #628]	; (8004878 <USB_EPStartXfer+0x370>)
 8004602:	400b      	ands	r3, r1
 8004604:	69b9      	ldr	r1, [r7, #24]
 8004606:	0148      	lsls	r0, r1, #5
 8004608:	69f9      	ldr	r1, [r7, #28]
 800460a:	4401      	add	r1, r0
 800460c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004610:	4313      	orrs	r3, r2
 8004612:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800462a:	69b9      	ldr	r1, [r7, #24]
 800462c:	0148      	lsls	r0, r1, #5
 800462e:	69f9      	ldr	r1, [r7, #28]
 8004630:	4401      	add	r1, r0
 8004632:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004636:	4313      	orrs	r3, r2
 8004638:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	78db      	ldrb	r3, [r3, #3]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d11f      	bne.n	8004682 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	0151      	lsls	r1, r2, #5
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	440a      	add	r2, r1
 8004658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800465c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004660:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	0151      	lsls	r1, r2, #5
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	440a      	add	r2, r1
 8004678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800467c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004680:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d14b      	bne.n	8004720 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469c:	461a      	mov	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	78db      	ldrb	r3, [r3, #3]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d128      	bne.n	80046fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d110      	bne.n	80046de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	0151      	lsls	r1, r2, #5
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	440a      	add	r2, r1
 80046d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	e00f      	b.n	80046fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	0151      	lsls	r1, r2, #5
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	440a      	add	r2, r1
 8004714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004718:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e12f      	b.n	8004980 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800473e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	78db      	ldrb	r3, [r3, #3]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d015      	beq.n	8004774 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8117 	beq.w	8004980 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	2101      	movs	r1, #1
 8004764:	fa01 f303 	lsl.w	r3, r1, r3
 8004768:	69f9      	ldr	r1, [r7, #28]
 800476a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800476e:	4313      	orrs	r3, r2
 8004770:	634b      	str	r3, [r1, #52]	; 0x34
 8004772:	e105      	b.n	8004980 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d110      	bne.n	80047a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	0151      	lsls	r1, r2, #5
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	440a      	add	r2, r1
 800479a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800479e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	e00f      	b.n	80047c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	0151      	lsls	r1, r2, #5
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	440a      	add	r2, r1
 80047bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	68d9      	ldr	r1, [r3, #12]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781a      	ldrb	r2, [r3, #0]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	b298      	uxth	r0, r3
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	4603      	mov	r3, r0
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fa2b 	bl	8004c36 <USB_WritePacket>
 80047e0:	e0ce      	b.n	8004980 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047fc:	0cdb      	lsrs	r3, r3, #19
 80047fe:	04db      	lsls	r3, r3, #19
 8004800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	0151      	lsls	r1, r2, #5
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	440a      	add	r2, r1
 8004818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800481c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004820:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004824:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d126      	bne.n	800487c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004844:	69b9      	ldr	r1, [r7, #24]
 8004846:	0148      	lsls	r0, r1, #5
 8004848:	69f9      	ldr	r1, [r7, #28]
 800484a:	4401      	add	r1, r0
 800484c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004850:	4313      	orrs	r3, r2
 8004852:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	0151      	lsls	r1, r2, #5
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	440a      	add	r2, r1
 800486a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800486e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004872:	6113      	str	r3, [r2, #16]
 8004874:	e036      	b.n	80048e4 <USB_EPStartXfer+0x3dc>
 8004876:	bf00      	nop
 8004878:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	695a      	ldr	r2, [r3, #20]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4413      	add	r3, r2
 8004886:	1e5a      	subs	r2, r3, #1
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	8afb      	ldrh	r3, [r7, #22]
 80048a2:	04d9      	lsls	r1, r3, #19
 80048a4:	4b39      	ldr	r3, [pc, #228]	; (800498c <USB_EPStartXfer+0x484>)
 80048a6:	400b      	ands	r3, r1
 80048a8:	69b9      	ldr	r1, [r7, #24]
 80048aa:	0148      	lsls	r0, r1, #5
 80048ac:	69f9      	ldr	r1, [r7, #28]
 80048ae:	4401      	add	r1, r0
 80048b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048b4:	4313      	orrs	r3, r2
 80048b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	8af9      	ldrh	r1, [r7, #22]
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d4:	69b9      	ldr	r1, [r7, #24]
 80048d6:	0148      	lsls	r0, r1, #5
 80048d8:	69f9      	ldr	r1, [r7, #28]
 80048da:	4401      	add	r1, r0
 80048dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048e0:	4313      	orrs	r3, r2
 80048e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10d      	bne.n	8004906 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	68d9      	ldr	r1, [r3, #12]
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004902:	460a      	mov	r2, r1
 8004904:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	78db      	ldrb	r3, [r3, #3]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d128      	bne.n	8004960 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d110      	bne.n	8004940 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	0151      	lsls	r1, r2, #5
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	440a      	add	r2, r1
 8004934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004938:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e00f      	b.n	8004960 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800495a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	440a      	add	r2, r1
 8004976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800497a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800497e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	1ff80000 	.word	0x1ff80000

08004990 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	4613      	mov	r3, r2
 800499c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	785b      	ldrb	r3, [r3, #1]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	f040 80cd 	bne.w	8004b4c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d132      	bne.n	8004a20 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	0151      	lsls	r1, r2, #5
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	440a      	add	r2, r1
 80049f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	0151      	lsls	r1, r2, #5
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	440a      	add	r2, r1
 8004a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a18:	0cdb      	lsrs	r3, r3, #19
 8004a1a:	04db      	lsls	r3, r3, #19
 8004a1c:	6113      	str	r3, [r2, #16]
 8004a1e:	e04e      	b.n	8004abe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	0151      	lsls	r1, r2, #5
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	440a      	add	r2, r1
 8004a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3a:	0cdb      	lsrs	r3, r3, #19
 8004a3c:	04db      	lsls	r3, r3, #19
 8004a3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	0151      	lsls	r1, r2, #5
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	440a      	add	r2, r1
 8004a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a62:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d903      	bls.n	8004a78 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	0151      	lsls	r1, r2, #5
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	440a      	add	r2, r1
 8004a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aae:	6939      	ldr	r1, [r7, #16]
 8004ab0:	0148      	lsls	r0, r1, #5
 8004ab2:	6979      	ldr	r1, [r7, #20]
 8004ab4:	4401      	add	r1, r0
 8004ab6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004aba:	4313      	orrs	r3, r2
 8004abc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d11e      	bne.n	8004b02 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d009      	beq.n	8004ae0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	0151      	lsls	r1, r2, #5
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	440a      	add	r2, r1
 8004af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	e092      	b.n	8004c28 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b20:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d07e      	beq.n	8004c28 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b40:	6979      	ldr	r1, [r7, #20]
 8004b42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b46:	4313      	orrs	r3, r2
 8004b48:	634b      	str	r3, [r1, #52]	; 0x34
 8004b4a:	e06d      	b.n	8004c28 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b66:	0cdb      	lsrs	r3, r3, #19
 8004b68:	04db      	lsls	r3, r3, #19
 8004b6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	0151      	lsls	r1, r2, #5
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	440a      	add	r2, r1
 8004b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b8e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	0151      	lsls	r1, r2, #5
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	440a      	add	r2, r1
 8004bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd6:	6939      	ldr	r1, [r7, #16]
 8004bd8:	0148      	lsls	r0, r1, #5
 8004bda:	6979      	ldr	r1, [r7, #20]
 8004bdc:	4401      	add	r1, r0
 8004bde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004be2:	4313      	orrs	r3, r2
 8004be4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d10d      	bne.n	8004c08 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	68d9      	ldr	r1, [r3, #12]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c04:	460a      	mov	r2, r1
 8004c06:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b089      	sub	sp, #36	; 0x24
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	4611      	mov	r1, r2
 8004c42:	461a      	mov	r2, r3
 8004c44:	460b      	mov	r3, r1
 8004c46:	71fb      	strb	r3, [r7, #7]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d123      	bne.n	8004ca4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c5c:	88bb      	ldrh	r3, [r7, #4]
 8004c5e:	3303      	adds	r3, #3
 8004c60:	089b      	lsrs	r3, r3, #2
 8004c62:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c64:	2300      	movs	r3, #0
 8004c66:	61bb      	str	r3, [r7, #24]
 8004c68:	e018      	b.n	8004c9c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	031a      	lsls	r2, r3, #12
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c76:	461a      	mov	r2, r3
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3301      	adds	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	3301      	adds	r3, #1
 8004c88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	3301      	adds	r3, #1
 8004c94:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d3e2      	bcc.n	8004c6a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3724      	adds	r7, #36	; 0x24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b08b      	sub	sp, #44	; 0x2c
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004cc8:	88fb      	ldrh	r3, [r7, #6]
 8004cca:	089b      	lsrs	r3, r3, #2
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	623b      	str	r3, [r7, #32]
 8004cdc:	e014      	b.n	8004d08 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	3301      	adds	r3, #1
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	3301      	adds	r3, #1
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	3301      	adds	r3, #1
 8004d06:	623b      	str	r3, [r7, #32]
 8004d08:	6a3a      	ldr	r2, [r7, #32]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d3e6      	bcc.n	8004cde <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d10:	8bfb      	ldrh	r3, [r7, #30]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01e      	beq.n	8004d54 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d20:	461a      	mov	r2, r3
 8004d22:	f107 0310 	add.w	r3, r7, #16
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	fa22 f303 	lsr.w	r3, r2, r3
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	701a      	strb	r2, [r3, #0]
      i++;
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	3301      	adds	r3, #1
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d48:	8bfb      	ldrh	r3, [r7, #30]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d4e:	8bfb      	ldrh	r3, [r7, #30]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1ea      	bne.n	8004d2a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	372c      	adds	r7, #44	; 0x2c
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	785b      	ldrb	r3, [r3, #1]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d12c      	bne.n	8004dd8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	db12      	blt.n	8004db6 <USB_EPSetStall+0x54>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00f      	beq.n	8004db6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004db4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e02b      	b.n	8004e30 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	db12      	blt.n	8004e10 <USB_EPSetStall+0xae>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00f      	beq.n	8004e10 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e0e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d128      	bne.n	8004eac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	0151      	lsls	r1, r2, #5
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	440a      	add	r2, r1
 8004e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	78db      	ldrb	r3, [r3, #3]
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d003      	beq.n	8004e8a <USB_EPClearStall+0x4c>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	78db      	ldrb	r3, [r3, #3]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d138      	bne.n	8004efc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e027      	b.n	8004efc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	0151      	lsls	r1, r2, #5
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	440a      	add	r2, r1
 8004ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ec6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004eca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	78db      	ldrb	r3, [r3, #3]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d003      	beq.n	8004edc <USB_EPClearStall+0x9e>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	78db      	ldrb	r3, [r3, #3]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d10f      	bne.n	8004efc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	460b      	mov	r3, r1
 8004f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f2c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f70:	f023 0303 	bic.w	r3, r3, #3
 8004f74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f84:	f023 0302 	bic.w	r3, r3, #2
 8004f88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fb2:	f023 0303 	bic.w	r3, r3, #3
 8004fb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fc6:	f043 0302 	orr.w	r3, r3, #2
 8004fca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	4013      	ands	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	0c1b      	lsrs	r3, r3, #16
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	4013      	ands	r3, r2
 8005056:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	b29b      	uxth	r3, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	4013      	ands	r3, r2
 8005094:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005096:	68bb      	ldr	r3, [r7, #8]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
 80050d4:	01db      	lsls	r3, r3, #7
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4013      	ands	r3, r2
 80050f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050f2:	68bb      	ldr	r3, [r7, #8]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	f003 0301 	and.w	r3, r3, #1
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005136:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800513a:	f023 0307 	bic.w	r3, r3, #7
 800513e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800514e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005152:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	460b      	mov	r3, r1
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	333c      	adds	r3, #60	; 0x3c
 800517a:	3304      	adds	r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4a26      	ldr	r2, [pc, #152]	; (800521c <USB_EP0_OutStart+0xb8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d90a      	bls.n	800519e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005198:	d101      	bne.n	800519e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e037      	b.n	800520e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	461a      	mov	r2, r3
 80051a6:	2300      	movs	r3, #0
 80051a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051cc:	f043 0318 	orr.w	r3, r3, #24
 80051d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80051e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80051e6:	7afb      	ldrb	r3, [r7, #11]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d10f      	bne.n	800520c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f2:	461a      	mov	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005206:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800520a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	4f54300a 	.word	0x4f54300a

08005220 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3301      	adds	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	4a13      	ldr	r2, [pc, #76]	; (8005280 <USB_CoreReset+0x60>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d901      	bls.n	800523c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e01a      	b.n	8005272 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	daf3      	bge.n	800522c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f043 0201 	orr.w	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3301      	adds	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	4a09      	ldr	r2, [pc, #36]	; (8005280 <USB_CoreReset+0x60>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e006      	b.n	8005272 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b01      	cmp	r3, #1
 800526e:	d0f1      	beq.n	8005254 <USB_CoreReset+0x34>

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	00030d40 	.word	0x00030d40

08005284 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005290:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005294:	f005 fc52 	bl	800ab3c <USBD_static_malloc>
 8005298:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80052a8:	2302      	movs	r3, #2
 80052aa:	e066      	b.n	800537a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	7c1b      	ldrb	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d119      	bne.n	80052f0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052c0:	2202      	movs	r2, #2
 80052c2:	2181      	movs	r1, #129	; 0x81
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f005 fb16 	bl	800a8f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052d4:	2202      	movs	r2, #2
 80052d6:	2101      	movs	r1, #1
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f005 fb0c 	bl	800a8f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2210      	movs	r2, #16
 80052ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80052ee:	e016      	b.n	800531e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052f0:	2340      	movs	r3, #64	; 0x40
 80052f2:	2202      	movs	r2, #2
 80052f4:	2181      	movs	r1, #129	; 0x81
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f005 fafd 	bl	800a8f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005302:	2340      	movs	r3, #64	; 0x40
 8005304:	2202      	movs	r2, #2
 8005306:	2101      	movs	r1, #1
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f005 faf4 	bl	800a8f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2210      	movs	r2, #16
 800531a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800531e:	2308      	movs	r3, #8
 8005320:	2203      	movs	r2, #3
 8005322:	2182      	movs	r1, #130	; 0x82
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f005 fae6 	bl	800a8f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	7c1b      	ldrb	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d109      	bne.n	8005368 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800535a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800535e:	2101      	movs	r1, #1
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f005 fbb7 	bl	800aad4 <USBD_LL_PrepareReceive>
 8005366:	e007      	b.n	8005378 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800536e:	2340      	movs	r3, #64	; 0x40
 8005370:	2101      	movs	r1, #1
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f005 fbae 	bl	800aad4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	460b      	mov	r3, r1
 800538c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800538e:	2181      	movs	r1, #129	; 0x81
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f005 fad6 	bl	800a942 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800539c:	2101      	movs	r1, #1
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f005 facf 	bl	800a942 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80053ac:	2182      	movs	r1, #130	; 0x82
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f005 fac7 	bl	800a942 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00e      	beq.n	80053ec <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053de:	4618      	mov	r0, r3
 80053e0:	f005 fbba 	bl	800ab58 <USBD_static_free>
    pdev->pClassData = NULL;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005408:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800541c:	2303      	movs	r3, #3
 800541e:	e0af      	b.n	8005580 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005428:	2b00      	cmp	r3, #0
 800542a:	d03f      	beq.n	80054ac <USBD_CDC_Setup+0xb4>
 800542c:	2b20      	cmp	r3, #32
 800542e:	f040 809f 	bne.w	8005570 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	88db      	ldrh	r3, [r3, #6]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d02e      	beq.n	8005498 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	b25b      	sxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	da16      	bge.n	8005472 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005450:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	88d2      	ldrh	r2, [r2, #6]
 8005456:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	88db      	ldrh	r3, [r3, #6]
 800545c:	2b07      	cmp	r3, #7
 800545e:	bf28      	it	cs
 8005460:	2307      	movcs	r3, #7
 8005462:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	89fa      	ldrh	r2, [r7, #14]
 8005468:	4619      	mov	r1, r3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f001 fb19 	bl	8006aa2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005470:	e085      	b.n	800557e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	785a      	ldrb	r2, [r3, #1]
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	88db      	ldrh	r3, [r3, #6]
 8005480:	b2da      	uxtb	r2, r3
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005488:	6939      	ldr	r1, [r7, #16]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	88db      	ldrh	r3, [r3, #6]
 800548e:	461a      	mov	r2, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f001 fb32 	bl	8006afa <USBD_CtlPrepareRx>
      break;
 8005496:	e072      	b.n	800557e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	7850      	ldrb	r0, [r2, #1]
 80054a4:	2200      	movs	r2, #0
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	4798      	blx	r3
      break;
 80054aa:	e068      	b.n	800557e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	2b0b      	cmp	r3, #11
 80054b2:	d852      	bhi.n	800555a <USBD_CDC_Setup+0x162>
 80054b4:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <USBD_CDC_Setup+0xc4>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054ed 	.word	0x080054ed
 80054c0:	08005569 	.word	0x08005569
 80054c4:	0800555b 	.word	0x0800555b
 80054c8:	0800555b 	.word	0x0800555b
 80054cc:	0800555b 	.word	0x0800555b
 80054d0:	0800555b 	.word	0x0800555b
 80054d4:	0800555b 	.word	0x0800555b
 80054d8:	0800555b 	.word	0x0800555b
 80054dc:	0800555b 	.word	0x0800555b
 80054e0:	0800555b 	.word	0x0800555b
 80054e4:	08005517 	.word	0x08005517
 80054e8:	08005541 	.word	0x08005541
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d107      	bne.n	8005508 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80054f8:	f107 030a 	add.w	r3, r7, #10
 80054fc:	2202      	movs	r2, #2
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 face 	bl	8006aa2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005506:	e032      	b.n	800556e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 fa58 	bl	80069c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005510:	2303      	movs	r3, #3
 8005512:	75fb      	strb	r3, [r7, #23]
          break;
 8005514:	e02b      	b.n	800556e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b03      	cmp	r3, #3
 8005520:	d107      	bne.n	8005532 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005522:	f107 030d 	add.w	r3, r7, #13
 8005526:	2201      	movs	r2, #1
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f001 fab9 	bl	8006aa2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005530:	e01d      	b.n	800556e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 fa43 	bl	80069c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800553a:	2303      	movs	r3, #3
 800553c:	75fb      	strb	r3, [r7, #23]
          break;
 800553e:	e016      	b.n	800556e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b03      	cmp	r3, #3
 800554a:	d00f      	beq.n	800556c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 fa36 	bl	80069c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005554:	2303      	movs	r3, #3
 8005556:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005558:	e008      	b.n	800556c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f001 fa2f 	bl	80069c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8005562:	2303      	movs	r3, #3
 8005564:	75fb      	strb	r3, [r7, #23]
          break;
 8005566:	e002      	b.n	800556e <USBD_CDC_Setup+0x176>
          break;
 8005568:	bf00      	nop
 800556a:	e008      	b.n	800557e <USBD_CDC_Setup+0x186>
          break;
 800556c:	bf00      	nop
      }
      break;
 800556e:	e006      	b.n	800557e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f001 fa24 	bl	80069c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005578:	2303      	movs	r3, #3
 800557a:	75fb      	strb	r3, [r7, #23]
      break;
 800557c:	bf00      	nop
  }

  return (uint8_t)ret;
 800557e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800559a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e04f      	b.n	800564a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80055b2:	78fa      	ldrb	r2, [r7, #3]
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	3318      	adds	r3, #24
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d029      	beq.n	800561c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80055c8:	78fa      	ldrb	r2, [r7, #3]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	3318      	adds	r3, #24
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	78f9      	ldrb	r1, [r7, #3]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	460b      	mov	r3, r1
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	1a5b      	subs	r3, r3, r1
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4403      	add	r3, r0
 80055e8:	3344      	adds	r3, #68	; 0x44
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80055f0:	fb03 f301 	mul.w	r3, r3, r1
 80055f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d110      	bne.n	800561c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80055fa:	78fa      	ldrb	r2, [r7, #3]
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	3318      	adds	r3, #24
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800560e:	78f9      	ldrb	r1, [r7, #3]
 8005610:	2300      	movs	r3, #0
 8005612:	2200      	movs	r2, #0
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f005 fa3c 	bl	800aa92 <USBD_LL_Transmit>
 800561a:	e015      	b.n	8005648 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005664:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005670:	2303      	movs	r3, #3
 8005672:	e015      	b.n	80056a0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f005 fa4c 	bl	800ab16 <USBD_LL_GetRxDataSize>
 800567e:	4602      	mov	r2, r0
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800569a:	4611      	mov	r1, r2
 800569c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80056be:	2303      	movs	r3, #3
 80056c0:	e01b      	b.n	80056fa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d015      	beq.n	80056f8 <USBD_CDC_EP0_RxReady+0x50>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80056d2:	2bff      	cmp	r3, #255	; 0xff
 80056d4:	d010      	beq.n	80056f8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80056e4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80056ec:	b292      	uxth	r2, r2
 80056ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	22ff      	movs	r2, #255	; 0xff
 80056f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2243      	movs	r2, #67	; 0x43
 8005710:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005712:	4b03      	ldr	r3, [pc, #12]	; (8005720 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	20000094 	.word	0x20000094

08005724 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2243      	movs	r2, #67	; 0x43
 8005730:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005732:	4b03      	ldr	r3, [pc, #12]	; (8005740 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	20000050 	.word	0x20000050

08005744 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2243      	movs	r2, #67	; 0x43
 8005750:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005752:	4b03      	ldr	r3, [pc, #12]	; (8005760 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	200000d8 	.word	0x200000d8

08005764 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	220a      	movs	r2, #10
 8005770:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005772:	4b03      	ldr	r3, [pc, #12]	; (8005780 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	2000000c 	.word	0x2000000c

08005784 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005794:	2303      	movs	r3, #3
 8005796:	e004      	b.n	80057a2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b087      	sub	sp, #28
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057c0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e008      	b.n	80057de <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005802:	2303      	movs	r3, #3
 8005804:	e004      	b.n	8005810 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800582a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800583a:	2303      	movs	r3, #3
 800583c:	e01a      	b.n	8005874 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005844:	2b00      	cmp	r3, #0
 8005846:	d114      	bne.n	8005872 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2201      	movs	r2, #1
 800584c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005866:	2181      	movs	r1, #129	; 0x81
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f005 f912 	bl	800aa92 <USBD_LL_Transmit>

    ret = USBD_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005872:	7bfb      	ldrb	r3, [r7, #15]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800588a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005896:	2303      	movs	r3, #3
 8005898:	e016      	b.n	80058c8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	7c1b      	ldrb	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d109      	bne.n	80058b6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058ac:	2101      	movs	r1, #1
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f005 f910 	bl	800aad4 <USBD_LL_PrepareReceive>
 80058b4:	e007      	b.n	80058c6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058bc:	2340      	movs	r3, #64	; 0x40
 80058be:	2101      	movs	r1, #1
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f005 f907 	bl	800aad4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e01f      	b.n	8005928 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	79fa      	ldrb	r2, [r7, #7]
 800591a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f004 ff83 	bl	800a828 <USBD_LL_Init>
 8005922:	4603      	mov	r3, r0
 8005924:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005926:	7dfb      	ldrb	r3, [r7, #23]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005944:	2303      	movs	r3, #3
 8005946:	e016      	b.n	8005976 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00b      	beq.n	8005974 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	f107 020e 	add.w	r2, r7, #14
 8005968:	4610      	mov	r0, r2
 800596a:	4798      	blx	r3
 800596c:	4602      	mov	r2, r0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f004 ff9a 	bl	800a8c0 <USBD_LL_Start>
 800598c:	4603      	mov	r3, r0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80059b8:	2303      	movs	r3, #3
 80059ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	4611      	mov	r1, r2
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	4798      	blx	r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80059da:	7bfb      	ldrb	r3, [r7, #15]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	78fa      	ldrb	r2, [r7, #3]
 8005a04:	4611      	mov	r1, r2
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	4798      	blx	r3
  }

  return USBD_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 ff90 	bl	800694c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d01a      	beq.n	8005a86 <USBD_LL_SetupStage+0x72>
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d822      	bhi.n	8005a9a <USBD_LL_SetupStage+0x86>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <USBD_LL_SetupStage+0x4a>
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d00a      	beq.n	8005a72 <USBD_LL_SetupStage+0x5e>
 8005a5c:	e01d      	b.n	8005a9a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa62 	bl	8005f30 <USBD_StdDevReq>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a70:	e020      	b.n	8005ab4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fac6 	bl	800600c <USBD_StdItfReq>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]
      break;
 8005a84:	e016      	b.n	8005ab4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fb05 	bl	800609e <USBD_StdEPReq>
 8005a94:	4603      	mov	r3, r0
 8005a96:	73fb      	strb	r3, [r7, #15]
      break;
 8005a98:	e00c      	b.n	8005ab4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005aa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f004 ff69 	bl	800a980 <USBD_LL_StallEP>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab2:	bf00      	nop
  }

  return ret;
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005acc:	7afb      	ldrb	r3, [r7, #11]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d138      	bne.n	8005b44 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ad8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d14a      	bne.n	8005b7a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d913      	bls.n	8005b18 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	1ad2      	subs	r2, r2, r3
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	4293      	cmp	r3, r2
 8005b08:	bf28      	it	cs
 8005b0a:	4613      	movcs	r3, r2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f001 f80f 	bl	8006b34 <USBD_CtlContinueRx>
 8005b16:	e030      	b.n	8005b7a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d10b      	bne.n	8005b3c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f001 f80a 	bl	8006b56 <USBD_CtlSendStatus>
 8005b42:	e01a      	b.n	8005b7a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d114      	bne.n	8005b7a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00e      	beq.n	8005b7a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	7afa      	ldrb	r2, [r7, #11]
 8005b66:	4611      	mov	r1, r2
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	4798      	blx	r3
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
 8005b78:	e000      	b.n	8005b7c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005b92:	7afb      	ldrb	r3, [r7, #11]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d16b      	bne.n	8005c70 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d156      	bne.n	8005c56 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d914      	bls.n	8005bde <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	1ad2      	subs	r2, r2, r3
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 ff84 	bl	8006ad8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f004 ff7c 	bl	800aad4 <USBD_LL_PrepareReceive>
 8005bdc:	e03b      	b.n	8005c56 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d11c      	bne.n	8005c24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d316      	bcc.n	8005c24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d20f      	bcs.n	8005c24 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c04:	2200      	movs	r2, #0
 8005c06:	2100      	movs	r1, #0
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 ff65 	bl	8006ad8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c16:	2300      	movs	r3, #0
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f004 ff59 	bl	800aad4 <USBD_LL_PrepareReceive>
 8005c22:	e018      	b.n	8005c56 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d10b      	bne.n	8005c48 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c48:	2180      	movs	r1, #128	; 0x80
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f004 fe98 	bl	800a980 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 ff93 	bl	8006b7c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d122      	bne.n	8005ca6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f7ff fe98 	bl	8005996 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c6e:	e01a      	b.n	8005ca6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d114      	bne.n	8005ca6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00e      	beq.n	8005ca6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	7afa      	ldrb	r2, [r7, #11]
 8005c92:	4611      	mov	r1, r2
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	4798      	blx	r3
 8005c98:	4603      	mov	r3, r0
 8005c9a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
 8005ca4:	e000      	b.n	8005ca8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e02f      	b.n	8005d44 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00f      	beq.n	8005d0e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d009      	beq.n	8005d0e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6852      	ldr	r2, [r2, #4]
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	4611      	mov	r1, r2
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d0e:	2340      	movs	r3, #64	; 0x40
 8005d10:	2200      	movs	r2, #0
 8005d12:	2100      	movs	r1, #0
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f004 fdee 	bl	800a8f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2240      	movs	r2, #64	; 0x40
 8005d26:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d2a:	2340      	movs	r3, #64	; 0x40
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2180      	movs	r1, #128	; 0x80
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f004 fde0 	bl	800a8f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2240      	movs	r2, #64	; 0x40
 8005d40:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2204      	movs	r2, #4
 8005d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d106      	bne.n	8005dba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e012      	b.n	8005e04 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d10b      	bne.n	8005e02 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e014      	b.n	8005e50 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d10d      	bne.n	8005e4e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	78fa      	ldrb	r2, [r7, #3]
 8005e48:	4611      	mov	r1, r2
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e014      	b.n	8005e9c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d10d      	bne.n	8005e9a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d007      	beq.n	8005e9a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	78fa      	ldrb	r2, [r7, #3]
 8005e94:	4611      	mov	r1, r2
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d009      	beq.n	8005ee8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6852      	ldr	r2, [r2, #4]
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	4798      	blx	r3
  }

  return USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b087      	sub	sp, #28
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	3301      	adds	r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f10:	8a3b      	ldrh	r3, [r7, #16]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	b21a      	sxth	r2, r3
 8005f16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	b21b      	sxth	r3, r3
 8005f1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f20:	89fb      	ldrh	r3, [r7, #14]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	d005      	beq.n	8005f56 <USBD_StdDevReq+0x26>
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d853      	bhi.n	8005ff6 <USBD_StdDevReq+0xc6>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <USBD_StdDevReq+0x3a>
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d14f      	bne.n	8005ff6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	4798      	blx	r3
 8005f64:	4603      	mov	r3, r0
 8005f66:	73fb      	strb	r3, [r7, #15]
      break;
 8005f68:	e04a      	b.n	8006000 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b09      	cmp	r3, #9
 8005f70:	d83b      	bhi.n	8005fea <USBD_StdDevReq+0xba>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <USBD_StdDevReq+0x48>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005fe1 	.word	0x08005fe1
 8005f80:	08005feb 	.word	0x08005feb
 8005f84:	08005fd7 	.word	0x08005fd7
 8005f88:	08005feb 	.word	0x08005feb
 8005f8c:	08005fab 	.word	0x08005fab
 8005f90:	08005fa1 	.word	0x08005fa1
 8005f94:	08005feb 	.word	0x08005feb
 8005f98:	08005fc3 	.word	0x08005fc3
 8005f9c:	08005fb5 	.word	0x08005fb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9de 	bl	8006364 <USBD_GetDescriptor>
          break;
 8005fa8:	e024      	b.n	8005ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fb43 	bl	8006638 <USBD_SetAddress>
          break;
 8005fb2:	e01f      	b.n	8005ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fb82 	bl	80066c0 <USBD_SetConfig>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
          break;
 8005fc0:	e018      	b.n	8005ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fc21 	bl	800680c <USBD_GetConfig>
          break;
 8005fca:	e013      	b.n	8005ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fc52 	bl	8006878 <USBD_GetStatus>
          break;
 8005fd4:	e00e      	b.n	8005ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fc81 	bl	80068e0 <USBD_SetFeature>
          break;
 8005fde:	e009      	b.n	8005ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fc90 	bl	8006908 <USBD_ClrFeature>
          break;
 8005fe8:	e004      	b.n	8005ff4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fce7 	bl	80069c0 <USBD_CtlError>
          break;
 8005ff2:	bf00      	nop
      }
      break;
 8005ff4:	e004      	b.n	8006000 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fce1 	bl	80069c0 <USBD_CtlError>
      break;
 8005ffe:	bf00      	nop
  }

  return ret;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop

0800600c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d005      	beq.n	8006032 <USBD_StdItfReq+0x26>
 8006026:	2b40      	cmp	r3, #64	; 0x40
 8006028:	d82f      	bhi.n	800608a <USBD_StdItfReq+0x7e>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <USBD_StdItfReq+0x26>
 800602e:	2b20      	cmp	r3, #32
 8006030:	d12b      	bne.n	800608a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006038:	b2db      	uxtb	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	2b02      	cmp	r3, #2
 800603e:	d81d      	bhi.n	800607c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	889b      	ldrh	r3, [r3, #4]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	d813      	bhi.n	8006072 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	6839      	ldr	r1, [r7, #0]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	4798      	blx	r3
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	88db      	ldrh	r3, [r3, #6]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d110      	bne.n	8006086 <USBD_StdItfReq+0x7a>
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10d      	bne.n	8006086 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fd73 	bl	8006b56 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006070:	e009      	b.n	8006086 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fca3 	bl	80069c0 <USBD_CtlError>
          break;
 800607a:	e004      	b.n	8006086 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fc9e 	bl	80069c0 <USBD_CtlError>
          break;
 8006084:	e000      	b.n	8006088 <USBD_StdItfReq+0x7c>
          break;
 8006086:	bf00      	nop
      }
      break;
 8006088:	e004      	b.n	8006094 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fc97 	bl	80069c0 <USBD_CtlError>
      break;
 8006092:	bf00      	nop
  }

  return ret;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	889b      	ldrh	r3, [r3, #4]
 80060b0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060ba:	2b40      	cmp	r3, #64	; 0x40
 80060bc:	d007      	beq.n	80060ce <USBD_StdEPReq+0x30>
 80060be:	2b40      	cmp	r3, #64	; 0x40
 80060c0:	f200 8145 	bhi.w	800634e <USBD_StdEPReq+0x2b0>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00c      	beq.n	80060e2 <USBD_StdEPReq+0x44>
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	f040 8140 	bne.w	800634e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
 80060dc:	4603      	mov	r3, r0
 80060de:	73fb      	strb	r3, [r7, #15]
      break;
 80060e0:	e13a      	b.n	8006358 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d007      	beq.n	80060fa <USBD_StdEPReq+0x5c>
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	f300 8129 	bgt.w	8006342 <USBD_StdEPReq+0x2a4>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d07f      	beq.n	80061f4 <USBD_StdEPReq+0x156>
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d03c      	beq.n	8006172 <USBD_StdEPReq+0xd4>
 80060f8:	e123      	b.n	8006342 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d002      	beq.n	800610c <USBD_StdEPReq+0x6e>
 8006106:	2b03      	cmp	r3, #3
 8006108:	d016      	beq.n	8006138 <USBD_StdEPReq+0x9a>
 800610a:	e02c      	b.n	8006166 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00d      	beq.n	800612e <USBD_StdEPReq+0x90>
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	2b80      	cmp	r3, #128	; 0x80
 8006116:	d00a      	beq.n	800612e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006118:	7bbb      	ldrb	r3, [r7, #14]
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f004 fc2f 	bl	800a980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006122:	2180      	movs	r1, #128	; 0x80
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f004 fc2b 	bl	800a980 <USBD_LL_StallEP>
 800612a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800612c:	e020      	b.n	8006170 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fc45 	bl	80069c0 <USBD_CtlError>
              break;
 8006136:	e01b      	b.n	8006170 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	885b      	ldrh	r3, [r3, #2]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10e      	bne.n	800615e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006140:	7bbb      	ldrb	r3, [r7, #14]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <USBD_StdEPReq+0xc0>
 8006146:	7bbb      	ldrb	r3, [r7, #14]
 8006148:	2b80      	cmp	r3, #128	; 0x80
 800614a:	d008      	beq.n	800615e <USBD_StdEPReq+0xc0>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	88db      	ldrh	r3, [r3, #6]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d104      	bne.n	800615e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f004 fc11 	bl	800a980 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fcf9 	bl	8006b56 <USBD_CtlSendStatus>

              break;
 8006164:	e004      	b.n	8006170 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fc29 	bl	80069c0 <USBD_CtlError>
              break;
 800616e:	bf00      	nop
          }
          break;
 8006170:	e0ec      	b.n	800634c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d002      	beq.n	8006184 <USBD_StdEPReq+0xe6>
 800617e:	2b03      	cmp	r3, #3
 8006180:	d016      	beq.n	80061b0 <USBD_StdEPReq+0x112>
 8006182:	e030      	b.n	80061e6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006184:	7bbb      	ldrb	r3, [r7, #14]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00d      	beq.n	80061a6 <USBD_StdEPReq+0x108>
 800618a:	7bbb      	ldrb	r3, [r7, #14]
 800618c:	2b80      	cmp	r3, #128	; 0x80
 800618e:	d00a      	beq.n	80061a6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f004 fbf3 	bl	800a980 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800619a:	2180      	movs	r1, #128	; 0x80
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f004 fbef 	bl	800a980 <USBD_LL_StallEP>
 80061a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061a4:	e025      	b.n	80061f2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fc09 	bl	80069c0 <USBD_CtlError>
              break;
 80061ae:	e020      	b.n	80061f2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	885b      	ldrh	r3, [r3, #2]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d11b      	bne.n	80061f0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80061c2:	7bbb      	ldrb	r3, [r7, #14]
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f004 fbf9 	bl	800a9be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fcc2 	bl	8006b56 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80061e4:	e004      	b.n	80061f0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fbe9 	bl	80069c0 <USBD_CtlError>
              break;
 80061ee:	e000      	b.n	80061f2 <USBD_StdEPReq+0x154>
              break;
 80061f0:	bf00      	nop
          }
          break;
 80061f2:	e0ab      	b.n	800634c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d002      	beq.n	8006206 <USBD_StdEPReq+0x168>
 8006200:	2b03      	cmp	r3, #3
 8006202:	d032      	beq.n	800626a <USBD_StdEPReq+0x1cc>
 8006204:	e097      	b.n	8006336 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006206:	7bbb      	ldrb	r3, [r7, #14]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <USBD_StdEPReq+0x17e>
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	2b80      	cmp	r3, #128	; 0x80
 8006210:	d004      	beq.n	800621c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fbd3 	bl	80069c0 <USBD_CtlError>
                break;
 800621a:	e091      	b.n	8006340 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800621c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006220:	2b00      	cmp	r3, #0
 8006222:	da0b      	bge.n	800623c <USBD_StdEPReq+0x19e>
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	3310      	adds	r3, #16
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	4413      	add	r3, r2
 8006238:	3304      	adds	r3, #4
 800623a:	e00b      	b.n	8006254 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800623c:	7bbb      	ldrb	r3, [r7, #14]
 800623e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	3304      	adds	r3, #4
 8006254:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2202      	movs	r2, #2
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fc1d 	bl	8006aa2 <USBD_CtlSendData>
              break;
 8006268:	e06a      	b.n	8006340 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800626a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800626e:	2b00      	cmp	r3, #0
 8006270:	da11      	bge.n	8006296 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006272:	7bbb      	ldrb	r3, [r7, #14]
 8006274:	f003 020f 	and.w	r2, r3, #15
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	3324      	adds	r3, #36	; 0x24
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d117      	bne.n	80062bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fb96 	bl	80069c0 <USBD_CtlError>
                  break;
 8006294:	e054      	b.n	8006340 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	f003 020f 	and.w	r2, r3, #15
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fb83 	bl	80069c0 <USBD_CtlError>
                  break;
 80062ba:	e041      	b.n	8006340 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da0b      	bge.n	80062dc <USBD_StdEPReq+0x23e>
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	3310      	adds	r3, #16
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4413      	add	r3, r2
 80062d8:	3304      	adds	r3, #4
 80062da:	e00b      	b.n	80062f4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	3304      	adds	r3, #4
 80062f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <USBD_StdEPReq+0x264>
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d103      	bne.n	800630a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e00e      	b.n	8006328 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f004 fb74 	bl	800a9fc <USBD_LL_IsStallEP>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2201      	movs	r2, #1
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e002      	b.n	8006328 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2202      	movs	r2, #2
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fbb7 	bl	8006aa2 <USBD_CtlSendData>
              break;
 8006334:	e004      	b.n	8006340 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fb41 	bl	80069c0 <USBD_CtlError>
              break;
 800633e:	bf00      	nop
          }
          break;
 8006340:	e004      	b.n	800634c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fb3b 	bl	80069c0 <USBD_CtlError>
          break;
 800634a:	bf00      	nop
      }
      break;
 800634c:	e004      	b.n	8006358 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fb35 	bl	80069c0 <USBD_CtlError>
      break;
 8006356:	bf00      	nop
  }

  return ret;
 8006358:	7bfb      	ldrb	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	885b      	ldrh	r3, [r3, #2]
 800637e:	0a1b      	lsrs	r3, r3, #8
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	2b06      	cmp	r3, #6
 8006386:	f200 8128 	bhi.w	80065da <USBD_GetDescriptor+0x276>
 800638a:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <USBD_GetDescriptor+0x2c>)
 800638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006390:	080063ad 	.word	0x080063ad
 8006394:	080063c5 	.word	0x080063c5
 8006398:	08006405 	.word	0x08006405
 800639c:	080065db 	.word	0x080065db
 80063a0:	080065db 	.word	0x080065db
 80063a4:	0800657b 	.word	0x0800657b
 80063a8:	080065a7 	.word	0x080065a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	7c12      	ldrb	r2, [r2, #16]
 80063b8:	f107 0108 	add.w	r1, r7, #8
 80063bc:	4610      	mov	r0, r2
 80063be:	4798      	blx	r3
 80063c0:	60f8      	str	r0, [r7, #12]
      break;
 80063c2:	e112      	b.n	80065ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	7c1b      	ldrb	r3, [r3, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10d      	bne.n	80063e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	f107 0208 	add.w	r2, r7, #8
 80063d8:	4610      	mov	r0, r2
 80063da:	4798      	blx	r3
 80063dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3301      	adds	r3, #1
 80063e2:	2202      	movs	r2, #2
 80063e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80063e6:	e100      	b.n	80065ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	f107 0208 	add.w	r2, r7, #8
 80063f4:	4610      	mov	r0, r2
 80063f6:	4798      	blx	r3
 80063f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3301      	adds	r3, #1
 80063fe:	2202      	movs	r2, #2
 8006400:	701a      	strb	r2, [r3, #0]
      break;
 8006402:	e0f2      	b.n	80065ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	885b      	ldrh	r3, [r3, #2]
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b05      	cmp	r3, #5
 800640c:	f200 80ac 	bhi.w	8006568 <USBD_GetDescriptor+0x204>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <USBD_GetDescriptor+0xb4>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	08006431 	.word	0x08006431
 800641c:	08006465 	.word	0x08006465
 8006420:	08006499 	.word	0x08006499
 8006424:	080064cd 	.word	0x080064cd
 8006428:	08006501 	.word	0x08006501
 800642c:	08006535 	.word	0x08006535
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	7c12      	ldrb	r2, [r2, #16]
 8006448:	f107 0108 	add.w	r1, r7, #8
 800644c:	4610      	mov	r0, r2
 800644e:	4798      	blx	r3
 8006450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006452:	e091      	b.n	8006578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fab2 	bl	80069c0 <USBD_CtlError>
            err++;
 800645c:	7afb      	ldrb	r3, [r7, #11]
 800645e:	3301      	adds	r3, #1
 8006460:	72fb      	strb	r3, [r7, #11]
          break;
 8006462:	e089      	b.n	8006578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	7c12      	ldrb	r2, [r2, #16]
 800647c:	f107 0108 	add.w	r1, r7, #8
 8006480:	4610      	mov	r0, r2
 8006482:	4798      	blx	r3
 8006484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006486:	e077      	b.n	8006578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa98 	bl	80069c0 <USBD_CtlError>
            err++;
 8006490:	7afb      	ldrb	r3, [r7, #11]
 8006492:	3301      	adds	r3, #1
 8006494:	72fb      	strb	r3, [r7, #11]
          break;
 8006496:	e06f      	b.n	8006578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	7c12      	ldrb	r2, [r2, #16]
 80064b0:	f107 0108 	add.w	r1, r7, #8
 80064b4:	4610      	mov	r0, r2
 80064b6:	4798      	blx	r3
 80064b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ba:	e05d      	b.n	8006578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fa7e 	bl	80069c0 <USBD_CtlError>
            err++;
 80064c4:	7afb      	ldrb	r3, [r7, #11]
 80064c6:	3301      	adds	r3, #1
 80064c8:	72fb      	strb	r3, [r7, #11]
          break;
 80064ca:	e055      	b.n	8006578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	7c12      	ldrb	r2, [r2, #16]
 80064e4:	f107 0108 	add.w	r1, r7, #8
 80064e8:	4610      	mov	r0, r2
 80064ea:	4798      	blx	r3
 80064ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ee:	e043      	b.n	8006578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa64 	bl	80069c0 <USBD_CtlError>
            err++;
 80064f8:	7afb      	ldrb	r3, [r7, #11]
 80064fa:	3301      	adds	r3, #1
 80064fc:	72fb      	strb	r3, [r7, #11]
          break;
 80064fe:	e03b      	b.n	8006578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00b      	beq.n	8006524 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	7c12      	ldrb	r2, [r2, #16]
 8006518:	f107 0108 	add.w	r1, r7, #8
 800651c:	4610      	mov	r0, r2
 800651e:	4798      	blx	r3
 8006520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006522:	e029      	b.n	8006578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa4a 	bl	80069c0 <USBD_CtlError>
            err++;
 800652c:	7afb      	ldrb	r3, [r7, #11]
 800652e:	3301      	adds	r3, #1
 8006530:	72fb      	strb	r3, [r7, #11]
          break;
 8006532:	e021      	b.n	8006578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	7c12      	ldrb	r2, [r2, #16]
 800654c:	f107 0108 	add.w	r1, r7, #8
 8006550:	4610      	mov	r0, r2
 8006552:	4798      	blx	r3
 8006554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006556:	e00f      	b.n	8006578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa30 	bl	80069c0 <USBD_CtlError>
            err++;
 8006560:	7afb      	ldrb	r3, [r7, #11]
 8006562:	3301      	adds	r3, #1
 8006564:	72fb      	strb	r3, [r7, #11]
          break;
 8006566:	e007      	b.n	8006578 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa28 	bl	80069c0 <USBD_CtlError>
          err++;
 8006570:	7afb      	ldrb	r3, [r7, #11]
 8006572:	3301      	adds	r3, #1
 8006574:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006576:	bf00      	nop
      }
      break;
 8006578:	e037      	b.n	80065ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	7c1b      	ldrb	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658a:	f107 0208 	add.w	r2, r7, #8
 800658e:	4610      	mov	r0, r2
 8006590:	4798      	blx	r3
 8006592:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006594:	e029      	b.n	80065ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fa11 	bl	80069c0 <USBD_CtlError>
        err++;
 800659e:	7afb      	ldrb	r3, [r7, #11]
 80065a0:	3301      	adds	r3, #1
 80065a2:	72fb      	strb	r3, [r7, #11]
      break;
 80065a4:	e021      	b.n	80065ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	7c1b      	ldrb	r3, [r3, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10d      	bne.n	80065ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	f107 0208 	add.w	r2, r7, #8
 80065ba:	4610      	mov	r0, r2
 80065bc:	4798      	blx	r3
 80065be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	2207      	movs	r2, #7
 80065c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065c8:	e00f      	b.n	80065ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f9f7 	bl	80069c0 <USBD_CtlError>
        err++;
 80065d2:	7afb      	ldrb	r3, [r7, #11]
 80065d4:	3301      	adds	r3, #1
 80065d6:	72fb      	strb	r3, [r7, #11]
      break;
 80065d8:	e007      	b.n	80065ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f9ef 	bl	80069c0 <USBD_CtlError>
      err++;
 80065e2:	7afb      	ldrb	r3, [r7, #11]
 80065e4:	3301      	adds	r3, #1
 80065e6:	72fb      	strb	r3, [r7, #11]
      break;
 80065e8:	bf00      	nop
  }

  if (err != 0U)
 80065ea:	7afb      	ldrb	r3, [r7, #11]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11e      	bne.n	800662e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	88db      	ldrh	r3, [r3, #6]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d016      	beq.n	8006626 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80065f8:	893b      	ldrh	r3, [r7, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00e      	beq.n	800661c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	88da      	ldrh	r2, [r3, #6]
 8006602:	893b      	ldrh	r3, [r7, #8]
 8006604:	4293      	cmp	r3, r2
 8006606:	bf28      	it	cs
 8006608:	4613      	movcs	r3, r2
 800660a:	b29b      	uxth	r3, r3
 800660c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800660e:	893b      	ldrh	r3, [r7, #8]
 8006610:	461a      	mov	r2, r3
 8006612:	68f9      	ldr	r1, [r7, #12]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fa44 	bl	8006aa2 <USBD_CtlSendData>
 800661a:	e009      	b.n	8006630 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f9ce 	bl	80069c0 <USBD_CtlError>
 8006624:	e004      	b.n	8006630 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fa95 	bl	8006b56 <USBD_CtlSendStatus>
 800662c:	e000      	b.n	8006630 <USBD_GetDescriptor+0x2cc>
    return;
 800662e:	bf00      	nop
  }
}
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop

08006638 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	889b      	ldrh	r3, [r3, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d131      	bne.n	80066ae <USBD_SetAddress+0x76>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	88db      	ldrh	r3, [r3, #6]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d12d      	bne.n	80066ae <USBD_SetAddress+0x76>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	885b      	ldrh	r3, [r3, #2]
 8006656:	2b7f      	cmp	r3, #127	; 0x7f
 8006658:	d829      	bhi.n	80066ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	885b      	ldrh	r3, [r3, #2]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006664:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b03      	cmp	r3, #3
 8006670:	d104      	bne.n	800667c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f9a3 	bl	80069c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667a:	e01d      	b.n	80066b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	7bfa      	ldrb	r2, [r7, #15]
 8006680:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f004 f9e3 	bl	800aa54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fa61 	bl	8006b56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d004      	beq.n	80066a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a2:	e009      	b.n	80066b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ac:	e004      	b.n	80066b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f985 	bl	80069c0 <USBD_CtlError>
  }
}
 80066b6:	bf00      	nop
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	885b      	ldrh	r3, [r3, #2]
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	4b4c      	ldr	r3, [pc, #304]	; (8006808 <USBD_SetConfig+0x148>)
 80066d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80066d8:	4b4b      	ldr	r3, [pc, #300]	; (8006808 <USBD_SetConfig+0x148>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d905      	bls.n	80066ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f96c 	bl	80069c0 <USBD_CtlError>
    return USBD_FAIL;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e088      	b.n	80067fe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d002      	beq.n	80066fe <USBD_SetConfig+0x3e>
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d025      	beq.n	8006748 <USBD_SetConfig+0x88>
 80066fc:	e071      	b.n	80067e2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80066fe:	4b42      	ldr	r3, [pc, #264]	; (8006808 <USBD_SetConfig+0x148>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d01c      	beq.n	8006740 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006706:	4b40      	ldr	r3, [pc, #256]	; (8006808 <USBD_SetConfig+0x148>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006710:	4b3d      	ldr	r3, [pc, #244]	; (8006808 <USBD_SetConfig+0x148>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff f948 	bl	80059ac <USBD_SetClassConfig>
 800671c:	4603      	mov	r3, r0
 800671e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d004      	beq.n	8006730 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f949 	bl	80069c0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800672e:	e065      	b.n	80067fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fa10 	bl	8006b56 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2203      	movs	r2, #3
 800673a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800673e:	e05d      	b.n	80067fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fa08 	bl	8006b56 <USBD_CtlSendStatus>
      break;
 8006746:	e059      	b.n	80067fc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006748:	4b2f      	ldr	r3, [pc, #188]	; (8006808 <USBD_SetConfig+0x148>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d112      	bne.n	8006776 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006758:	4b2b      	ldr	r3, [pc, #172]	; (8006808 <USBD_SetConfig+0x148>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006762:	4b29      	ldr	r3, [pc, #164]	; (8006808 <USBD_SetConfig+0x148>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff f93b 	bl	80059e4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f9f1 	bl	8006b56 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006774:	e042      	b.n	80067fc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006776:	4b24      	ldr	r3, [pc, #144]	; (8006808 <USBD_SetConfig+0x148>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	d02a      	beq.n	80067da <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff f929 	bl	80059e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006792:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <USBD_SetConfig+0x148>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800679c:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <USBD_SetConfig+0x148>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff f902 	bl	80059ac <USBD_SetClassConfig>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00f      	beq.n	80067d2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f903 	bl	80069c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff f90e 	bl	80059e4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80067d0:	e014      	b.n	80067fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f9bf 	bl	8006b56 <USBD_CtlSendStatus>
      break;
 80067d8:	e010      	b.n	80067fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9bb 	bl	8006b56 <USBD_CtlSendStatus>
      break;
 80067e0:	e00c      	b.n	80067fc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f8eb 	bl	80069c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067ea:	4b07      	ldr	r3, [pc, #28]	; (8006808 <USBD_SetConfig+0x148>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff f8f7 	bl	80059e4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80067f6:	2303      	movs	r3, #3
 80067f8:	73fb      	strb	r3, [r7, #15]
      break;
 80067fa:	bf00      	nop
  }

  return ret;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	200005f4 	.word	0x200005f4

0800680c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	88db      	ldrh	r3, [r3, #6]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d004      	beq.n	8006828 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f8cd 	bl	80069c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006826:	e023      	b.n	8006870 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b02      	cmp	r3, #2
 8006832:	dc02      	bgt.n	800683a <USBD_GetConfig+0x2e>
 8006834:	2b00      	cmp	r3, #0
 8006836:	dc03      	bgt.n	8006840 <USBD_GetConfig+0x34>
 8006838:	e015      	b.n	8006866 <USBD_GetConfig+0x5a>
 800683a:	2b03      	cmp	r3, #3
 800683c:	d00b      	beq.n	8006856 <USBD_GetConfig+0x4a>
 800683e:	e012      	b.n	8006866 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3308      	adds	r3, #8
 800684a:	2201      	movs	r2, #1
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f927 	bl	8006aa2 <USBD_CtlSendData>
        break;
 8006854:	e00c      	b.n	8006870 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3304      	adds	r3, #4
 800685a:	2201      	movs	r2, #1
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f91f 	bl	8006aa2 <USBD_CtlSendData>
        break;
 8006864:	e004      	b.n	8006870 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f8a9 	bl	80069c0 <USBD_CtlError>
        break;
 800686e:	bf00      	nop
}
 8006870:	bf00      	nop
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006888:	b2db      	uxtb	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	2b02      	cmp	r3, #2
 800688e:	d81e      	bhi.n	80068ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	88db      	ldrh	r3, [r3, #6]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d004      	beq.n	80068a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f890 	bl	80069c0 <USBD_CtlError>
        break;
 80068a0:	e01a      	b.n	80068d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f043 0202 	orr.w	r2, r3, #2
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	330c      	adds	r3, #12
 80068c2:	2202      	movs	r2, #2
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f8eb 	bl	8006aa2 <USBD_CtlSendData>
      break;
 80068cc:	e004      	b.n	80068d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f875 	bl	80069c0 <USBD_CtlError>
      break;
 80068d6:	bf00      	nop
  }
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	885b      	ldrh	r3, [r3, #2]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d106      	bne.n	8006900 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f92b 	bl	8006b56 <USBD_CtlSendStatus>
  }
}
 8006900:	bf00      	nop
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006918:	b2db      	uxtb	r3, r3
 800691a:	3b01      	subs	r3, #1
 800691c:	2b02      	cmp	r3, #2
 800691e:	d80b      	bhi.n	8006938 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	885b      	ldrh	r3, [r3, #2]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d10c      	bne.n	8006942 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f910 	bl	8006b56 <USBD_CtlSendStatus>
      }
      break;
 8006936:	e004      	b.n	8006942 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f840 	bl	80069c0 <USBD_CtlError>
      break;
 8006940:	e000      	b.n	8006944 <USBD_ClrFeature+0x3c>
      break;
 8006942:	bf00      	nop
  }
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	781a      	ldrb	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3301      	adds	r3, #1
 8006974:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff fabb 	bl	8005ef2 <SWAPBYTE>
 800697c:	4603      	mov	r3, r0
 800697e:	461a      	mov	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3301      	adds	r3, #1
 8006988:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3301      	adds	r3, #1
 800698e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff faae 	bl	8005ef2 <SWAPBYTE>
 8006996:	4603      	mov	r3, r0
 8006998:	461a      	mov	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3301      	adds	r3, #1
 80069a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3301      	adds	r3, #1
 80069a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff faa1 	bl	8005ef2 <SWAPBYTE>
 80069b0:	4603      	mov	r3, r0
 80069b2:	461a      	mov	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	80da      	strh	r2, [r3, #6]
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ca:	2180      	movs	r1, #128	; 0x80
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f003 ffd7 	bl	800a980 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80069d2:	2100      	movs	r1, #0
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f003 ffd3 	bl	800a980 <USBD_LL_StallEP>
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d036      	beq.n	8006a66 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80069fc:	6938      	ldr	r0, [r7, #16]
 80069fe:	f000 f836 	bl	8006a6e <USBD_GetLen>
 8006a02:	4603      	mov	r3, r0
 8006a04:	3301      	adds	r3, #1
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	4413      	add	r3, r2
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	7812      	ldrb	r2, [r2, #0]
 8006a1a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	4413      	add	r3, r2
 8006a28:	2203      	movs	r2, #3
 8006a2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a32:	e013      	b.n	8006a5c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	4413      	add	r3, r2
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	7812      	ldrb	r2, [r2, #0]
 8006a3e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	3301      	adds	r3, #1
 8006a44:	613b      	str	r3, [r7, #16]
    idx++;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	4413      	add	r3, r2
 8006a52:	2200      	movs	r2, #0
 8006a54:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e7      	bne.n	8006a34 <USBD_GetString+0x52>
 8006a64:	e000      	b.n	8006a68 <USBD_GetString+0x86>
    return;
 8006a66:	bf00      	nop
  }
}
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a7e:	e005      	b.n	8006a8c <USBD_GetLen+0x1e>
  {
    len++;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	3301      	adds	r3, #1
 8006a84:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1f5      	bne.n	8006a80 <USBD_GetLen+0x12>
  }

  return len;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f003 ffe2 	bl	800aa92 <USBD_LL_Transmit>

  return USBD_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	2100      	movs	r1, #0
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f003 ffd1 	bl	800aa92 <USBD_LL_Transmit>

  return USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2203      	movs	r2, #3
 8006b0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	2100      	movs	r1, #0
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f003 ffd5 	bl	800aad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	2100      	movs	r1, #0
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f003 ffc4 	bl	800aad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2204      	movs	r2, #4
 8006b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b66:	2300      	movs	r3, #0
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f003 ff90 	bl	800aa92 <USBD_LL_Transmit>

  return USBD_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2205      	movs	r2, #5
 8006b88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f003 ff9e 	bl	800aad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <__NVIC_SetPriority>:
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	4603      	mov	r3, r0
 8006bac:	6039      	str	r1, [r7, #0]
 8006bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	db0a      	blt.n	8006bce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	490c      	ldr	r1, [pc, #48]	; (8006bf0 <__NVIC_SetPriority+0x4c>)
 8006bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bc2:	0112      	lsls	r2, r2, #4
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	440b      	add	r3, r1
 8006bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006bcc:	e00a      	b.n	8006be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	4908      	ldr	r1, [pc, #32]	; (8006bf4 <__NVIC_SetPriority+0x50>)
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	3b04      	subs	r3, #4
 8006bdc:	0112      	lsls	r2, r2, #4
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	440b      	add	r3, r1
 8006be2:	761a      	strb	r2, [r3, #24]
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	e000e100 	.word	0xe000e100
 8006bf4:	e000ed00 	.word	0xe000ed00

08006bf8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <SysTick_Handler+0x1c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006c00:	f002 f902 	bl	8008e08 <xTaskGetSchedulerState>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d001      	beq.n	8006c0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006c0a:	f003 f82d 	bl	8009c68 <xPortSysTickHandler>
  }
}
 8006c0e:	bf00      	nop
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	e000e010 	.word	0xe000e010

08006c18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	f06f 0004 	mvn.w	r0, #4
 8006c22:	f7ff ffbf 	bl	8006ba4 <__NVIC_SetPriority>
#endif
}
 8006c26:	bf00      	nop
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c32:	f3ef 8305 	mrs	r3, IPSR
 8006c36:	603b      	str	r3, [r7, #0]
  return(result);
 8006c38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006c3e:	f06f 0305 	mvn.w	r3, #5
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	e00c      	b.n	8006c60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c46:	4b0a      	ldr	r3, [pc, #40]	; (8006c70 <osKernelInitialize+0x44>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d105      	bne.n	8006c5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c4e:	4b08      	ldr	r3, [pc, #32]	; (8006c70 <osKernelInitialize+0x44>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	607b      	str	r3, [r7, #4]
 8006c58:	e002      	b.n	8006c60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c60:	687b      	ldr	r3, [r7, #4]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	200005f8 	.word	0x200005f8

08006c74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c7a:	f3ef 8305 	mrs	r3, IPSR
 8006c7e:	603b      	str	r3, [r7, #0]
  return(result);
 8006c80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006c86:	f06f 0305 	mvn.w	r3, #5
 8006c8a:	607b      	str	r3, [r7, #4]
 8006c8c:	e010      	b.n	8006cb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <osKernelStart+0x48>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d109      	bne.n	8006caa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c96:	f7ff ffbf 	bl	8006c18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c9a:	4b08      	ldr	r3, [pc, #32]	; (8006cbc <osKernelStart+0x48>)
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ca0:	f001 fad0 	bl	8008244 <vTaskStartScheduler>
      stat = osOK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	607b      	str	r3, [r7, #4]
 8006ca8:	e002      	b.n	8006cb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006cb0:	687b      	ldr	r3, [r7, #4]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	200005f8 	.word	0x200005f8

08006cc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08e      	sub	sp, #56	; 0x38
 8006cc4:	af04      	add	r7, sp, #16
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cd0:	f3ef 8305 	mrs	r3, IPSR
 8006cd4:	617b      	str	r3, [r7, #20]
  return(result);
 8006cd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d17e      	bne.n	8006dda <osThreadNew+0x11a>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d07b      	beq.n	8006dda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006ce2:	2380      	movs	r3, #128	; 0x80
 8006ce4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ce6:	2318      	movs	r3, #24
 8006ce8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cf2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d045      	beq.n	8006d86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <osThreadNew+0x48>
        name = attr->name;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d008      	beq.n	8006d2e <osThreadNew+0x6e>
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	2b38      	cmp	r3, #56	; 0x38
 8006d20:	d805      	bhi.n	8006d2e <osThreadNew+0x6e>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <osThreadNew+0x72>
        return (NULL);
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e054      	b.n	8006ddc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	089b      	lsrs	r3, r3, #2
 8006d40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00e      	beq.n	8006d68 <osThreadNew+0xa8>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	2bbf      	cmp	r3, #191	; 0xbf
 8006d50:	d90a      	bls.n	8006d68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d006      	beq.n	8006d68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <osThreadNew+0xa8>
        mem = 1;
 8006d62:	2301      	movs	r3, #1
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	e010      	b.n	8006d8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10c      	bne.n	8006d8a <osThreadNew+0xca>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d108      	bne.n	8006d8a <osThreadNew+0xca>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d104      	bne.n	8006d8a <osThreadNew+0xca>
          mem = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	e001      	b.n	8006d8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d110      	bne.n	8006db2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d98:	9202      	str	r2, [sp, #8]
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	6a3a      	ldr	r2, [r7, #32]
 8006da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 fff6 	bl	8007d98 <xTaskCreateStatic>
 8006dac:	4603      	mov	r3, r0
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	e013      	b.n	8006dda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d110      	bne.n	8006dda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	f107 0310 	add.w	r3, r7, #16
 8006dc0:	9301      	str	r3, [sp, #4]
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f001 f841 	bl	8007e52 <xTaskCreate>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d001      	beq.n	8006dda <osThreadNew+0x11a>
            hTask = NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006dda:	693b      	ldr	r3, [r7, #16]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3728      	adds	r7, #40	; 0x28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dec:	f3ef 8305 	mrs	r3, IPSR
 8006df0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006df2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <osDelay+0x1c>
    stat = osErrorISR;
 8006df8:	f06f 0305 	mvn.w	r3, #5
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	e007      	b.n	8006e10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 f980 	bl	8008110 <vTaskDelay>
    }
  }

  return (stat);
 8006e10:	68fb      	ldr	r3, [r7, #12]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b08a      	sub	sp, #40	; 0x28
 8006e1e:	af02      	add	r7, sp, #8
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e2a:	f3ef 8305 	mrs	r3, IPSR
 8006e2e:	613b      	str	r3, [r7, #16]
  return(result);
 8006e30:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d15f      	bne.n	8006ef6 <osMessageQueueNew+0xdc>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d05c      	beq.n	8006ef6 <osMessageQueueNew+0xdc>
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d059      	beq.n	8006ef6 <osMessageQueueNew+0xdc>
    mem = -1;
 8006e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d029      	beq.n	8006ea2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d012      	beq.n	8006e7c <osMessageQueueNew+0x62>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	2b4f      	cmp	r3, #79	; 0x4f
 8006e5c:	d90e      	bls.n	8006e7c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695a      	ldr	r2, [r3, #20]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d302      	bcc.n	8006e7c <osMessageQueueNew+0x62>
        mem = 1;
 8006e76:	2301      	movs	r3, #1
 8006e78:	61bb      	str	r3, [r7, #24]
 8006e7a:	e014      	b.n	8006ea6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d110      	bne.n	8006ea6 <osMessageQueueNew+0x8c>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10c      	bne.n	8006ea6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d108      	bne.n	8006ea6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d104      	bne.n	8006ea6 <osMessageQueueNew+0x8c>
          mem = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	e001      	b.n	8006ea6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d10b      	bne.n	8006ec4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	9100      	str	r1, [sp, #0]
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fa2e 	bl	800731c <xQueueGenericCreateStatic>
 8006ec0:	61f8      	str	r0, [r7, #28]
 8006ec2:	e008      	b.n	8006ed6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d105      	bne.n	8006ed6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006eca:	2200      	movs	r2, #0
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 fa9c 	bl	800740c <xQueueGenericCreate>
 8006ed4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00c      	beq.n	8006ef6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <osMessageQueueNew+0xd0>
        name = attr->name;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	e001      	b.n	8006eee <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006eee:	6979      	ldr	r1, [r7, #20]
 8006ef0:	69f8      	ldr	r0, [r7, #28]
 8006ef2:	f000 fef3 	bl	8007cdc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006ef6:	69fb      	ldr	r3, [r7, #28]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3720      	adds	r7, #32
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b088      	sub	sp, #32
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f18:	f3ef 8305 	mrs	r3, IPSR
 8006f1c:	617b      	str	r3, [r7, #20]
  return(result);
 8006f1e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d028      	beq.n	8006f76 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <osMessageQueuePut+0x36>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <osMessageQueuePut+0x36>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006f36:	f06f 0303 	mvn.w	r3, #3
 8006f3a:	61fb      	str	r3, [r7, #28]
 8006f3c:	e038      	b.n	8006fb0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006f42:	f107 0210 	add.w	r2, r7, #16
 8006f46:	2300      	movs	r3, #0
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	69b8      	ldr	r0, [r7, #24]
 8006f4c:	f000 fbba 	bl	80076c4 <xQueueGenericSendFromISR>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d003      	beq.n	8006f5e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006f56:	f06f 0302 	mvn.w	r3, #2
 8006f5a:	61fb      	str	r3, [r7, #28]
 8006f5c:	e028      	b.n	8006fb0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d025      	beq.n	8006fb0 <osMessageQueuePut+0xb0>
 8006f64:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <osMessageQueuePut+0xbc>)
 8006f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	e01c      	b.n	8006fb0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <osMessageQueuePut+0x82>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d103      	bne.n	8006f8a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006f82:	f06f 0303 	mvn.w	r3, #3
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	e012      	b.n	8006fb0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	68b9      	ldr	r1, [r7, #8]
 8006f90:	69b8      	ldr	r0, [r7, #24]
 8006f92:	f000 fa99 	bl	80074c8 <xQueueGenericSend>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d009      	beq.n	8006fb0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006fa2:	f06f 0301 	mvn.w	r3, #1
 8006fa6:	61fb      	str	r3, [r7, #28]
 8006fa8:	e002      	b.n	8006fb0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006faa:	f06f 0302 	mvn.w	r3, #2
 8006fae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006fb0:	69fb      	ldr	r3, [r7, #28]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3720      	adds	r7, #32
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fd6:	f3ef 8305 	mrs	r3, IPSR
 8006fda:	617b      	str	r3, [r7, #20]
  return(result);
 8006fdc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d028      	beq.n	8007034 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <osMessageQueueGet+0x34>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <osMessageQueueGet+0x34>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006ff4:	f06f 0303 	mvn.w	r3, #3
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	e037      	b.n	800706c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007000:	f107 0310 	add.w	r3, r7, #16
 8007004:	461a      	mov	r2, r3
 8007006:	68b9      	ldr	r1, [r7, #8]
 8007008:	69b8      	ldr	r0, [r7, #24]
 800700a:	f000 fcd7 	bl	80079bc <xQueueReceiveFromISR>
 800700e:	4603      	mov	r3, r0
 8007010:	2b01      	cmp	r3, #1
 8007012:	d003      	beq.n	800701c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007014:	f06f 0302 	mvn.w	r3, #2
 8007018:	61fb      	str	r3, [r7, #28]
 800701a:	e027      	b.n	800706c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d024      	beq.n	800706c <osMessageQueueGet+0xac>
 8007022:	4b15      	ldr	r3, [pc, #84]	; (8007078 <osMessageQueueGet+0xb8>)
 8007024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	e01b      	b.n	800706c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <osMessageQueueGet+0x80>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d103      	bne.n	8007048 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007040:	f06f 0303 	mvn.w	r3, #3
 8007044:	61fb      	str	r3, [r7, #28]
 8007046:	e011      	b.n	800706c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	69b8      	ldr	r0, [r7, #24]
 800704e:	f000 fbd5 	bl	80077fc <xQueueReceive>
 8007052:	4603      	mov	r3, r0
 8007054:	2b01      	cmp	r3, #1
 8007056:	d009      	beq.n	800706c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800705e:	f06f 0301 	mvn.w	r3, #1
 8007062:	61fb      	str	r3, [r7, #28]
 8007064:	e002      	b.n	800706c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007066:	f06f 0302 	mvn.w	r3, #2
 800706a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800706c:	69fb      	ldr	r3, [r7, #28]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3720      	adds	r7, #32
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	e000ed04 	.word	0xe000ed04

0800707c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4a07      	ldr	r2, [pc, #28]	; (80070a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800708c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	4a06      	ldr	r2, [pc, #24]	; (80070ac <vApplicationGetIdleTaskMemory+0x30>)
 8007092:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2280      	movs	r2, #128	; 0x80
 8007098:	601a      	str	r2, [r3, #0]
}
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	200005fc 	.word	0x200005fc
 80070ac:	200006bc 	.word	0x200006bc

080070b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4a07      	ldr	r2, [pc, #28]	; (80070dc <vApplicationGetTimerTaskMemory+0x2c>)
 80070c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	4a06      	ldr	r2, [pc, #24]	; (80070e0 <vApplicationGetTimerTaskMemory+0x30>)
 80070c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ce:	601a      	str	r2, [r3, #0]
}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	200008bc 	.word	0x200008bc
 80070e0:	2000097c 	.word	0x2000097c

080070e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f103 0208 	add.w	r2, r3, #8
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f103 0208 	add.w	r2, r3, #8
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f103 0208 	add.w	r2, r3, #8
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	601a      	str	r2, [r3, #0]
}
 800717a:	bf00      	nop
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800719c:	d103      	bne.n	80071a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	e00c      	b.n	80071c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3308      	adds	r3, #8
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	e002      	b.n	80071b4 <vListInsert+0x2e>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d2f6      	bcs.n	80071ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	601a      	str	r2, [r3, #0]
}
 80071ec:	bf00      	nop
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6892      	ldr	r2, [r2, #8]
 800720e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6852      	ldr	r2, [r2, #4]
 8007218:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d103      	bne.n	800722c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	1e5a      	subs	r2, r3, #1
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007276:	f002 fc65 	bl	8009b44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007282:	68f9      	ldr	r1, [r7, #12]
 8007284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007286:	fb01 f303 	mul.w	r3, r1, r3
 800728a:	441a      	add	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	3b01      	subs	r3, #1
 80072a8:	68f9      	ldr	r1, [r7, #12]
 80072aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072ac:	fb01 f303 	mul.w	r3, r1, r3
 80072b0:	441a      	add	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	22ff      	movs	r2, #255	; 0xff
 80072ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	22ff      	movs	r2, #255	; 0xff
 80072c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d114      	bne.n	80072f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d01a      	beq.n	800730a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3310      	adds	r3, #16
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 faff 	bl	80088dc <xTaskRemoveFromEventList>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d012      	beq.n	800730a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072e4:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <xQueueGenericReset+0xcc>)
 80072e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	e009      	b.n	800730a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3310      	adds	r3, #16
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff fef2 	bl	80070e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3324      	adds	r3, #36	; 0x24
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff feed 	bl	80070e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800730a:	f002 fc4b 	bl	8009ba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800730e:	2301      	movs	r3, #1
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	e000ed04 	.word	0xe000ed04

0800731c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800731c:	b580      	push	{r7, lr}
 800731e:	b08e      	sub	sp, #56	; 0x38
 8007320:	af02      	add	r7, sp, #8
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <xQueueGenericCreateStatic+0x52>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <xQueueGenericCreateStatic+0x56>
 800736e:	2301      	movs	r3, #1
 8007370:	e000      	b.n	8007374 <xQueueGenericCreateStatic+0x58>
 8007372:	2300      	movs	r3, #0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	623b      	str	r3, [r7, #32]
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <xQueueGenericCreateStatic+0x7e>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <xQueueGenericCreateStatic+0x82>
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <xQueueGenericCreateStatic+0x84>
 800739e:	2300      	movs	r3, #0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	61fb      	str	r3, [r7, #28]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073ba:	2350      	movs	r3, #80	; 0x50
 80073bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b50      	cmp	r3, #80	; 0x50
 80073c2:	d00a      	beq.n	80073da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	61bb      	str	r3, [r7, #24]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00d      	beq.n	8007402 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	4613      	mov	r3, r2
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	68b9      	ldr	r1, [r7, #8]
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f83f 	bl	8007480 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007404:	4618      	mov	r0, r3
 8007406:	3730      	adds	r7, #48	; 0x30
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08a      	sub	sp, #40	; 0x28
 8007410:	af02      	add	r7, sp, #8
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	4613      	mov	r3, r2
 8007418:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	613b      	str	r3, [r7, #16]
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	fb02 f303 	mul.w	r3, r2, r3
 800743e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	3350      	adds	r3, #80	; 0x50
 8007444:	4618      	mov	r0, r3
 8007446:	f002 fc9f 	bl	8009d88 <pvPortMalloc>
 800744a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d011      	beq.n	8007476 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	3350      	adds	r3, #80	; 0x50
 800745a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007464:	79fa      	ldrb	r2, [r7, #7]
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	4613      	mov	r3, r2
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 f805 	bl	8007480 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007476:	69bb      	ldr	r3, [r7, #24]
	}
 8007478:	4618      	mov	r0, r3
 800747a:	3720      	adds	r7, #32
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d103      	bne.n	800749c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	e002      	b.n	80074a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074ae:	2101      	movs	r1, #1
 80074b0:	69b8      	ldr	r0, [r7, #24]
 80074b2:	f7ff fecb 	bl	800724c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08e      	sub	sp, #56	; 0x38
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074d6:	2300      	movs	r3, #0
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <xQueueGenericSend+0x32>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074f6:	bf00      	nop
 80074f8:	e7fe      	b.n	80074f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d103      	bne.n	8007508 <xQueueGenericSend+0x40>
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <xQueueGenericSend+0x44>
 8007508:	2301      	movs	r3, #1
 800750a:	e000      	b.n	800750e <xQueueGenericSend+0x46>
 800750c:	2300      	movs	r3, #0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <xQueueGenericSend+0x60>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b02      	cmp	r3, #2
 800752c:	d103      	bne.n	8007536 <xQueueGenericSend+0x6e>
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <xQueueGenericSend+0x72>
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <xQueueGenericSend+0x74>
 800753a:	2300      	movs	r3, #0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <xQueueGenericSend+0x8e>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	623b      	str	r3, [r7, #32]
}
 8007552:	bf00      	nop
 8007554:	e7fe      	b.n	8007554 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007556:	f001 fc57 	bl	8008e08 <xTaskGetSchedulerState>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d102      	bne.n	8007566 <xQueueGenericSend+0x9e>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <xQueueGenericSend+0xa2>
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <xQueueGenericSend+0xa4>
 800756a:	2300      	movs	r3, #0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <xQueueGenericSend+0xbe>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	61fb      	str	r3, [r7, #28]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007586:	f002 fadd 	bl	8009b44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007592:	429a      	cmp	r2, r3
 8007594:	d302      	bcc.n	800759c <xQueueGenericSend+0xd4>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b02      	cmp	r3, #2
 800759a:	d129      	bne.n	80075f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	68b9      	ldr	r1, [r7, #8]
 80075a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075a2:	f000 fa8b 	bl	8007abc <prvCopyDataToQueue>
 80075a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d010      	beq.n	80075d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	3324      	adds	r3, #36	; 0x24
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 f991 	bl	80088dc <xTaskRemoveFromEventList>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d013      	beq.n	80075e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075c0:	4b3f      	ldr	r3, [pc, #252]	; (80076c0 <xQueueGenericSend+0x1f8>)
 80075c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	e00a      	b.n	80075e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d007      	beq.n	80075e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075d8:	4b39      	ldr	r3, [pc, #228]	; (80076c0 <xQueueGenericSend+0x1f8>)
 80075da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075e8:	f002 fadc 	bl	8009ba4 <vPortExitCritical>
				return pdPASS;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e063      	b.n	80076b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d103      	bne.n	80075fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075f6:	f002 fad5 	bl	8009ba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	e05c      	b.n	80076b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007600:	2b00      	cmp	r3, #0
 8007602:	d106      	bne.n	8007612 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007604:	f107 0314 	add.w	r3, r7, #20
 8007608:	4618      	mov	r0, r3
 800760a:	f001 f9cb 	bl	80089a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800760e:	2301      	movs	r3, #1
 8007610:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007612:	f002 fac7 	bl	8009ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007616:	f000 fe89 	bl	800832c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800761a:	f002 fa93 	bl	8009b44 <vPortEnterCritical>
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007624:	b25b      	sxtb	r3, r3
 8007626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800762a:	d103      	bne.n	8007634 <xQueueGenericSend+0x16c>
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800763a:	b25b      	sxtb	r3, r3
 800763c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007640:	d103      	bne.n	800764a <xQueueGenericSend+0x182>
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800764a:	f002 faab 	bl	8009ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800764e:	1d3a      	adds	r2, r7, #4
 8007650:	f107 0314 	add.w	r3, r7, #20
 8007654:	4611      	mov	r1, r2
 8007656:	4618      	mov	r0, r3
 8007658:	f001 f9ba 	bl	80089d0 <xTaskCheckForTimeOut>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d124      	bne.n	80076ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007664:	f000 fb22 	bl	8007cac <prvIsQueueFull>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d018      	beq.n	80076a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	3310      	adds	r3, #16
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	4611      	mov	r1, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f001 f8e0 	bl	800883c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800767c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800767e:	f000 faad 	bl	8007bdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007682:	f000 fe61 	bl	8008348 <xTaskResumeAll>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	f47f af7c 	bne.w	8007586 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800768e:	4b0c      	ldr	r3, [pc, #48]	; (80076c0 <xQueueGenericSend+0x1f8>)
 8007690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	e772      	b.n	8007586 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076a2:	f000 fa9b 	bl	8007bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076a6:	f000 fe4f 	bl	8008348 <xTaskResumeAll>
 80076aa:	e76c      	b.n	8007586 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076ae:	f000 fa95 	bl	8007bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076b2:	f000 fe49 	bl	8008348 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3738      	adds	r7, #56	; 0x38
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b090      	sub	sp, #64	; 0x40
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10a      	bne.n	80076f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d103      	bne.n	8007700 <xQueueGenericSendFromISR+0x3c>
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <xQueueGenericSendFromISR+0x40>
 8007700:	2301      	movs	r3, #1
 8007702:	e000      	b.n	8007706 <xQueueGenericSendFromISR+0x42>
 8007704:	2300      	movs	r3, #0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d103      	bne.n	800772e <xQueueGenericSendFromISR+0x6a>
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <xQueueGenericSendFromISR+0x6e>
 800772e:	2301      	movs	r3, #1
 8007730:	e000      	b.n	8007734 <xQueueGenericSendFromISR+0x70>
 8007732:	2300      	movs	r3, #0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	623b      	str	r3, [r7, #32]
}
 800774a:	bf00      	nop
 800774c:	e7fe      	b.n	800774c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800774e:	f002 fadb 	bl	8009d08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007752:	f3ef 8211 	mrs	r2, BASEPRI
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	61fa      	str	r2, [r7, #28]
 8007768:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800776a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007776:	429a      	cmp	r2, r3
 8007778:	d302      	bcc.n	8007780 <xQueueGenericSendFromISR+0xbc>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d12f      	bne.n	80077e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007796:	f000 f991 	bl	8007abc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800779a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800779e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077a2:	d112      	bne.n	80077ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d016      	beq.n	80077da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ae:	3324      	adds	r3, #36	; 0x24
 80077b0:	4618      	mov	r0, r3
 80077b2:	f001 f893 	bl	80088dc <xTaskRemoveFromEventList>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00e      	beq.n	80077da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00b      	beq.n	80077da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	e007      	b.n	80077da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077ce:	3301      	adds	r3, #1
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	b25a      	sxtb	r2, r3
 80077d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077da:	2301      	movs	r3, #1
 80077dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80077de:	e001      	b.n	80077e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3740      	adds	r7, #64	; 0x40
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08c      	sub	sp, #48	; 0x30
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007808:	2300      	movs	r3, #0
 800780a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10a      	bne.n	800782c <xQueueReceive+0x30>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	623b      	str	r3, [r7, #32]
}
 8007828:	bf00      	nop
 800782a:	e7fe      	b.n	800782a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <xQueueReceive+0x3e>
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <xQueueReceive+0x42>
 800783a:	2301      	movs	r3, #1
 800783c:	e000      	b.n	8007840 <xQueueReceive+0x44>
 800783e:	2300      	movs	r3, #0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10a      	bne.n	800785a <xQueueReceive+0x5e>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	61fb      	str	r3, [r7, #28]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800785a:	f001 fad5 	bl	8008e08 <xTaskGetSchedulerState>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d102      	bne.n	800786a <xQueueReceive+0x6e>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <xQueueReceive+0x72>
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <xQueueReceive+0x74>
 800786e:	2300      	movs	r3, #0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <xQueueReceive+0x8e>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	61bb      	str	r3, [r7, #24]
}
 8007886:	bf00      	nop
 8007888:	e7fe      	b.n	8007888 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800788a:	f002 f95b 	bl	8009b44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d01f      	beq.n	80078da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800789a:	68b9      	ldr	r1, [r7, #8]
 800789c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800789e:	f000 f977 	bl	8007b90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	1e5a      	subs	r2, r3, #1
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00f      	beq.n	80078d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	3310      	adds	r3, #16
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 f810 	bl	80088dc <xTaskRemoveFromEventList>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d007      	beq.n	80078d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078c2:	4b3d      	ldr	r3, [pc, #244]	; (80079b8 <xQueueReceive+0x1bc>)
 80078c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078d2:	f002 f967 	bl	8009ba4 <vPortExitCritical>
				return pdPASS;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e069      	b.n	80079ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d103      	bne.n	80078e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078e0:	f002 f960 	bl	8009ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078e4:	2300      	movs	r3, #0
 80078e6:	e062      	b.n	80079ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d106      	bne.n	80078fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078ee:	f107 0310 	add.w	r3, r7, #16
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 f856 	bl	80089a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078f8:	2301      	movs	r3, #1
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078fc:	f002 f952 	bl	8009ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007900:	f000 fd14 	bl	800832c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007904:	f002 f91e 	bl	8009b44 <vPortEnterCritical>
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800790e:	b25b      	sxtb	r3, r3
 8007910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007914:	d103      	bne.n	800791e <xQueueReceive+0x122>
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007924:	b25b      	sxtb	r3, r3
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800792a:	d103      	bne.n	8007934 <xQueueReceive+0x138>
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007934:	f002 f936 	bl	8009ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007938:	1d3a      	adds	r2, r7, #4
 800793a:	f107 0310 	add.w	r3, r7, #16
 800793e:	4611      	mov	r1, r2
 8007940:	4618      	mov	r0, r3
 8007942:	f001 f845 	bl	80089d0 <xTaskCheckForTimeOut>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d123      	bne.n	8007994 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800794c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800794e:	f000 f997 	bl	8007c80 <prvIsQueueEmpty>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d017      	beq.n	8007988 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	3324      	adds	r3, #36	; 0x24
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	4611      	mov	r1, r2
 8007960:	4618      	mov	r0, r3
 8007962:	f000 ff6b 	bl	800883c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007968:	f000 f938 	bl	8007bdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800796c:	f000 fcec 	bl	8008348 <xTaskResumeAll>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d189      	bne.n	800788a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007976:	4b10      	ldr	r3, [pc, #64]	; (80079b8 <xQueueReceive+0x1bc>)
 8007978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	e780      	b.n	800788a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800798a:	f000 f927 	bl	8007bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800798e:	f000 fcdb 	bl	8008348 <xTaskResumeAll>
 8007992:	e77a      	b.n	800788a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007996:	f000 f921 	bl	8007bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800799a:	f000 fcd5 	bl	8008348 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800799e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079a0:	f000 f96e 	bl	8007c80 <prvIsQueueEmpty>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f43f af6f 	beq.w	800788a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3730      	adds	r7, #48	; 0x30
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08e      	sub	sp, #56	; 0x38
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10a      	bne.n	80079e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	623b      	str	r3, [r7, #32]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d103      	bne.n	80079f6 <xQueueReceiveFromISR+0x3a>
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <xQueueReceiveFromISR+0x3e>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <xQueueReceiveFromISR+0x40>
 80079fa:	2300      	movs	r3, #0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	61fb      	str	r3, [r7, #28]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a16:	f002 f977 	bl	8009d08 <vPortValidateInterruptPriority>
	__asm volatile
 8007a1a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	61ba      	str	r2, [r7, #24]
 8007a30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d02f      	beq.n	8007aa2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a4c:	68b9      	ldr	r1, [r7, #8]
 8007a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a50:	f000 f89e 	bl	8007b90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a56:	1e5a      	subs	r2, r3, #1
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a64:	d112      	bne.n	8007a8c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d016      	beq.n	8007a9c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	3310      	adds	r3, #16
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 ff32 	bl	80088dc <xTaskRemoveFromEventList>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00e      	beq.n	8007a9c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	e007      	b.n	8007a9c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a90:	3301      	adds	r3, #1
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	b25a      	sxtb	r2, r3
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa0:	e001      	b.n	8007aa6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f383 8811 	msr	BASEPRI, r3
}
 8007ab0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3738      	adds	r7, #56	; 0x38
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10d      	bne.n	8007af6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d14d      	bne.n	8007b7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 f9ac 	bl	8008e44 <xTaskPriorityDisinherit>
 8007aec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	609a      	str	r2, [r3, #8]
 8007af4:	e043      	b.n	8007b7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d119      	bne.n	8007b30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6858      	ldr	r0, [r3, #4]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	461a      	mov	r2, r3
 8007b06:	68b9      	ldr	r1, [r7, #8]
 8007b08:	f003 f8a2 	bl	800ac50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b14:	441a      	add	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d32b      	bcc.n	8007b7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	605a      	str	r2, [r3, #4]
 8007b2e:	e026      	b.n	8007b7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	68d8      	ldr	r0, [r3, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	461a      	mov	r2, r3
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	f003 f888 	bl	800ac50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	425b      	negs	r3, r3
 8007b4a:	441a      	add	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d207      	bcs.n	8007b6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b64:	425b      	negs	r3, r3
 8007b66:	441a      	add	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d105      	bne.n	8007b7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b86:	697b      	ldr	r3, [r7, #20]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d018      	beq.n	8007bd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	441a      	add	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d303      	bcc.n	8007bc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68d9      	ldr	r1, [r3, #12]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bcc:	461a      	mov	r2, r3
 8007bce:	6838      	ldr	r0, [r7, #0]
 8007bd0:	f003 f83e 	bl	800ac50 <memcpy>
	}
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007be4:	f001 ffae 	bl	8009b44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bf0:	e011      	b.n	8007c16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d012      	beq.n	8007c20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3324      	adds	r3, #36	; 0x24
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fe6c 	bl	80088dc <xTaskRemoveFromEventList>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c0a:	f000 ff43 	bl	8008a94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dce9      	bgt.n	8007bf2 <prvUnlockQueue+0x16>
 8007c1e:	e000      	b.n	8007c22 <prvUnlockQueue+0x46>
					break;
 8007c20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	22ff      	movs	r2, #255	; 0xff
 8007c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c2a:	f001 ffbb 	bl	8009ba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c2e:	f001 ff89 	bl	8009b44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c3a:	e011      	b.n	8007c60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d012      	beq.n	8007c6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3310      	adds	r3, #16
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fe47 	bl	80088dc <xTaskRemoveFromEventList>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c54:	f000 ff1e 	bl	8008a94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	dce9      	bgt.n	8007c3c <prvUnlockQueue+0x60>
 8007c68:	e000      	b.n	8007c6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	22ff      	movs	r2, #255	; 0xff
 8007c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c74:	f001 ff96 	bl	8009ba4 <vPortExitCritical>
}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c88:	f001 ff5c 	bl	8009b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c94:	2301      	movs	r3, #1
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	e001      	b.n	8007c9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c9e:	f001 ff81 	bl	8009ba4 <vPortExitCritical>

	return xReturn;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cb4:	f001 ff46 	bl	8009b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d102      	bne.n	8007cca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	e001      	b.n	8007cce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cce:	f001 ff69 	bl	8009ba4 <vPortExitCritical>

	return xReturn;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	e014      	b.n	8007d16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007cec:	4a0f      	ldr	r2, [pc, #60]	; (8007d2c <vQueueAddToRegistry+0x50>)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10b      	bne.n	8007d10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007cf8:	490c      	ldr	r1, [pc, #48]	; (8007d2c <vQueueAddToRegistry+0x50>)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d02:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <vQueueAddToRegistry+0x50>)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	4413      	add	r3, r2
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d0e:	e006      	b.n	8007d1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3301      	adds	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b07      	cmp	r3, #7
 8007d1a:	d9e7      	bls.n	8007cec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	2000a1fc 	.word	0x2000a1fc

08007d30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d40:	f001 ff00 	bl	8009b44 <vPortEnterCritical>
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d4a:	b25b      	sxtb	r3, r3
 8007d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d50:	d103      	bne.n	8007d5a <vQueueWaitForMessageRestricted+0x2a>
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d66:	d103      	bne.n	8007d70 <vQueueWaitForMessageRestricted+0x40>
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d70:	f001 ff18 	bl	8009ba4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d106      	bne.n	8007d8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	3324      	adds	r3, #36	; 0x24
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fd7d 	bl	8008884 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d8a:	6978      	ldr	r0, [r7, #20]
 8007d8c:	f7ff ff26 	bl	8007bdc <prvUnlockQueue>
	}
 8007d90:	bf00      	nop
 8007d92:	3718      	adds	r7, #24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08e      	sub	sp, #56	; 0x38
 8007d9c:	af04      	add	r7, sp, #16
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	623b      	str	r3, [r7, #32]
}
 8007dbe:	bf00      	nop
 8007dc0:	e7fe      	b.n	8007dc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <xTaskCreateStatic+0x46>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	61fb      	str	r3, [r7, #28]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007dde:	23c0      	movs	r3, #192	; 0xc0
 8007de0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	2bc0      	cmp	r3, #192	; 0xc0
 8007de6:	d00a      	beq.n	8007dfe <xTaskCreateStatic+0x66>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	61bb      	str	r3, [r7, #24]
}
 8007dfa:	bf00      	nop
 8007dfc:	e7fe      	b.n	8007dfc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007dfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d01e      	beq.n	8007e44 <xTaskCreateStatic+0xac>
 8007e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01b      	beq.n	8007e44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	2202      	movs	r2, #2
 8007e1a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9303      	str	r3, [sp, #12]
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	9302      	str	r3, [sp, #8]
 8007e26:	f107 0314 	add.w	r3, r7, #20
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f850 	bl	8007edc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e3e:	f000 f8f7 	bl	8008030 <prvAddNewTaskToReadyList>
 8007e42:	e001      	b.n	8007e48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e48:	697b      	ldr	r3, [r7, #20]
	}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3728      	adds	r7, #40	; 0x28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b08c      	sub	sp, #48	; 0x30
 8007e56:	af04      	add	r7, sp, #16
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	603b      	str	r3, [r7, #0]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e62:	88fb      	ldrh	r3, [r7, #6]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f001 ff8e 	bl	8009d88 <pvPortMalloc>
 8007e6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00e      	beq.n	8007e92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e74:	20c0      	movs	r0, #192	; 0xc0
 8007e76:	f001 ff87 	bl	8009d88 <pvPortMalloc>
 8007e7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30
 8007e88:	e005      	b.n	8007e96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e8a:	6978      	ldr	r0, [r7, #20]
 8007e8c:	f002 f848 	bl	8009f20 <vPortFree>
 8007e90:	e001      	b.n	8007e96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d017      	beq.n	8007ecc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ea4:	88fa      	ldrh	r2, [r7, #6]
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	9303      	str	r3, [sp, #12]
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	9302      	str	r3, [sp, #8]
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68b9      	ldr	r1, [r7, #8]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 f80e 	bl	8007edc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ec0:	69f8      	ldr	r0, [r7, #28]
 8007ec2:	f000 f8b5 	bl	8008030 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	61bb      	str	r3, [r7, #24]
 8007eca:	e002      	b.n	8007ed2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ed0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ed2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3720      	adds	r7, #32
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	21a5      	movs	r1, #165	; 0xa5
 8007ef6:	f002 feb9 	bl	800ac6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f04:	3b01      	subs	r3, #1
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	f023 0307 	bic.w	r3, r3, #7
 8007f12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	617b      	str	r3, [r7, #20]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d01f      	beq.n	8007f7a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61fb      	str	r3, [r7, #28]
 8007f3e:	e012      	b.n	8007f66 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	4413      	add	r3, r2
 8007f46:	7819      	ldrb	r1, [r3, #0]
 8007f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	3334      	adds	r3, #52	; 0x34
 8007f50:	460a      	mov	r2, r1
 8007f52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	4413      	add	r3, r2
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d006      	beq.n	8007f6e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	3301      	adds	r3, #1
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	2b0f      	cmp	r3, #15
 8007f6a:	d9e9      	bls.n	8007f40 <prvInitialiseNewTask+0x64>
 8007f6c:	e000      	b.n	8007f70 <prvInitialiseNewTask+0x94>
			{
				break;
 8007f6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f78:	e003      	b.n	8007f82 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f84:	2b37      	cmp	r3, #55	; 0x37
 8007f86:	d901      	bls.n	8007f8c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f88:	2337      	movs	r3, #55	; 0x37
 8007f8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff f8be 	bl	8007124 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	3318      	adds	r3, #24
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff f8b9 	bl	8007124 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	2200      	movs	r2, #0
 8007fcc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	3358      	adds	r3, #88	; 0x58
 8007fe2:	2260      	movs	r2, #96	; 0x60
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f002 fe40 	bl	800ac6c <memset>
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	4a0d      	ldr	r2, [pc, #52]	; (8008024 <prvInitialiseNewTask+0x148>)
 8007ff0:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	4a0c      	ldr	r2, [pc, #48]	; (8008028 <prvInitialiseNewTask+0x14c>)
 8007ff6:	661a      	str	r2, [r3, #96]	; 0x60
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	4a0c      	ldr	r2, [pc, #48]	; (800802c <prvInitialiseNewTask+0x150>)
 8007ffc:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	68f9      	ldr	r1, [r7, #12]
 8008002:	69b8      	ldr	r0, [r7, #24]
 8008004:	f001 fc6e 	bl	80098e4 <pxPortInitialiseStack>
 8008008:	4602      	mov	r2, r0
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008018:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800801a:	bf00      	nop
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	0800b8f0 	.word	0x0800b8f0
 8008028:	0800b910 	.word	0x0800b910
 800802c:	0800b8d0 	.word	0x0800b8d0

08008030 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008038:	f001 fd84 	bl	8009b44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800803c:	4b2d      	ldr	r3, [pc, #180]	; (80080f4 <prvAddNewTaskToReadyList+0xc4>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3301      	adds	r3, #1
 8008042:	4a2c      	ldr	r2, [pc, #176]	; (80080f4 <prvAddNewTaskToReadyList+0xc4>)
 8008044:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008046:	4b2c      	ldr	r3, [pc, #176]	; (80080f8 <prvAddNewTaskToReadyList+0xc8>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d109      	bne.n	8008062 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800804e:	4a2a      	ldr	r2, [pc, #168]	; (80080f8 <prvAddNewTaskToReadyList+0xc8>)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008054:	4b27      	ldr	r3, [pc, #156]	; (80080f4 <prvAddNewTaskToReadyList+0xc4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d110      	bne.n	800807e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800805c:	f000 fd3e 	bl	8008adc <prvInitialiseTaskLists>
 8008060:	e00d      	b.n	800807e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008062:	4b26      	ldr	r3, [pc, #152]	; (80080fc <prvAddNewTaskToReadyList+0xcc>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800806a:	4b23      	ldr	r3, [pc, #140]	; (80080f8 <prvAddNewTaskToReadyList+0xc8>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	429a      	cmp	r2, r3
 8008076:	d802      	bhi.n	800807e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008078:	4a1f      	ldr	r2, [pc, #124]	; (80080f8 <prvAddNewTaskToReadyList+0xc8>)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800807e:	4b20      	ldr	r3, [pc, #128]	; (8008100 <prvAddNewTaskToReadyList+0xd0>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3301      	adds	r3, #1
 8008084:	4a1e      	ldr	r2, [pc, #120]	; (8008100 <prvAddNewTaskToReadyList+0xd0>)
 8008086:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008088:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <prvAddNewTaskToReadyList+0xd0>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008094:	4b1b      	ldr	r3, [pc, #108]	; (8008104 <prvAddNewTaskToReadyList+0xd4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	429a      	cmp	r2, r3
 800809a:	d903      	bls.n	80080a4 <prvAddNewTaskToReadyList+0x74>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	4a18      	ldr	r2, [pc, #96]	; (8008104 <prvAddNewTaskToReadyList+0xd4>)
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a8:	4613      	mov	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4a15      	ldr	r2, [pc, #84]	; (8008108 <prvAddNewTaskToReadyList+0xd8>)
 80080b2:	441a      	add	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3304      	adds	r3, #4
 80080b8:	4619      	mov	r1, r3
 80080ba:	4610      	mov	r0, r2
 80080bc:	f7ff f83f 	bl	800713e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080c0:	f001 fd70 	bl	8009ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080c4:	4b0d      	ldr	r3, [pc, #52]	; (80080fc <prvAddNewTaskToReadyList+0xcc>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00e      	beq.n	80080ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <prvAddNewTaskToReadyList+0xc8>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d207      	bcs.n	80080ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080da:	4b0c      	ldr	r3, [pc, #48]	; (800810c <prvAddNewTaskToReadyList+0xdc>)
 80080dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080ea:	bf00      	nop
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20001250 	.word	0x20001250
 80080f8:	20000d7c 	.word	0x20000d7c
 80080fc:	2000125c 	.word	0x2000125c
 8008100:	2000126c 	.word	0x2000126c
 8008104:	20001258 	.word	0x20001258
 8008108:	20000d80 	.word	0x20000d80
 800810c:	e000ed04 	.word	0xe000ed04

08008110 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d017      	beq.n	8008152 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008122:	4b13      	ldr	r3, [pc, #76]	; (8008170 <vTaskDelay+0x60>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <vTaskDelay+0x30>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	60bb      	str	r3, [r7, #8]
}
 800813c:	bf00      	nop
 800813e:	e7fe      	b.n	800813e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008140:	f000 f8f4 	bl	800832c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008144:	2100      	movs	r1, #0
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 f82a 	bl	80091a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800814c:	f000 f8fc 	bl	8008348 <xTaskResumeAll>
 8008150:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d107      	bne.n	8008168 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008158:	4b06      	ldr	r3, [pc, #24]	; (8008174 <vTaskDelay+0x64>)
 800815a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008168:	bf00      	nop
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	20001278 	.word	0x20001278
 8008174:	e000ed04 	.word	0xe000ed04

08008178 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <eTaskGetState+0x28>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	60bb      	str	r3, [r7, #8]
}
 800819c:	bf00      	nop
 800819e:	e7fe      	b.n	800819e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80081a0:	4b23      	ldr	r3, [pc, #140]	; (8008230 <eTaskGetState+0xb8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d102      	bne.n	80081b0 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80081aa:	2300      	movs	r3, #0
 80081ac:	77fb      	strb	r3, [r7, #31]
 80081ae:	e03a      	b.n	8008226 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80081b0:	f001 fcc8 	bl	8009b44 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80081ba:	4b1e      	ldr	r3, [pc, #120]	; (8008234 <eTaskGetState+0xbc>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80081c0:	4b1d      	ldr	r3, [pc, #116]	; (8008238 <eTaskGetState+0xc0>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80081c6:	f001 fced 	bl	8009ba4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d003      	beq.n	80081da <eTaskGetState+0x62>
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d102      	bne.n	80081e0 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80081da:	2302      	movs	r3, #2
 80081dc:	77fb      	strb	r3, [r7, #31]
 80081de:	e022      	b.n	8008226 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	4a16      	ldr	r2, [pc, #88]	; (800823c <eTaskGetState+0xc4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d112      	bne.n	800820e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10b      	bne.n	8008208 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d102      	bne.n	8008202 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80081fc:	2302      	movs	r3, #2
 80081fe:	77fb      	strb	r3, [r7, #31]
 8008200:	e011      	b.n	8008226 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8008202:	2303      	movs	r3, #3
 8008204:	77fb      	strb	r3, [r7, #31]
 8008206:	e00e      	b.n	8008226 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8008208:	2302      	movs	r3, #2
 800820a:	77fb      	strb	r3, [r7, #31]
 800820c:	e00b      	b.n	8008226 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	4a0b      	ldr	r2, [pc, #44]	; (8008240 <eTaskGetState+0xc8>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d002      	beq.n	800821c <eTaskGetState+0xa4>
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800821c:	2304      	movs	r3, #4
 800821e:	77fb      	strb	r3, [r7, #31]
 8008220:	e001      	b.n	8008226 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8008222:	2301      	movs	r3, #1
 8008224:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8008226:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008228:	4618      	mov	r0, r3
 800822a:	3720      	adds	r7, #32
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20000d7c 	.word	0x20000d7c
 8008234:	20001208 	.word	0x20001208
 8008238:	2000120c 	.word	0x2000120c
 800823c:	2000123c 	.word	0x2000123c
 8008240:	20001224 	.word	0x20001224

08008244 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08a      	sub	sp, #40	; 0x28
 8008248:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800824a:	2300      	movs	r3, #0
 800824c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800824e:	2300      	movs	r3, #0
 8008250:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008252:	463a      	mov	r2, r7
 8008254:	1d39      	adds	r1, r7, #4
 8008256:	f107 0308 	add.w	r3, r7, #8
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe ff0e 	bl	800707c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	9202      	str	r2, [sp, #8]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	2300      	movs	r3, #0
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	2300      	movs	r3, #0
 8008270:	460a      	mov	r2, r1
 8008272:	4925      	ldr	r1, [pc, #148]	; (8008308 <vTaskStartScheduler+0xc4>)
 8008274:	4825      	ldr	r0, [pc, #148]	; (800830c <vTaskStartScheduler+0xc8>)
 8008276:	f7ff fd8f 	bl	8007d98 <xTaskCreateStatic>
 800827a:	4603      	mov	r3, r0
 800827c:	4a24      	ldr	r2, [pc, #144]	; (8008310 <vTaskStartScheduler+0xcc>)
 800827e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008280:	4b23      	ldr	r3, [pc, #140]	; (8008310 <vTaskStartScheduler+0xcc>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008288:	2301      	movs	r3, #1
 800828a:	617b      	str	r3, [r7, #20]
 800828c:	e001      	b.n	8008292 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800828e:	2300      	movs	r3, #0
 8008290:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d102      	bne.n	800829e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008298:	f000 ffd6 	bl	8009248 <xTimerCreateTimerTask>
 800829c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d11e      	bne.n	80082e2 <vTaskStartScheduler+0x9e>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	613b      	str	r3, [r7, #16]
}
 80082b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082b8:	4b16      	ldr	r3, [pc, #88]	; (8008314 <vTaskStartScheduler+0xd0>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3358      	adds	r3, #88	; 0x58
 80082be:	4a16      	ldr	r2, [pc, #88]	; (8008318 <vTaskStartScheduler+0xd4>)
 80082c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082c2:	4b16      	ldr	r3, [pc, #88]	; (800831c <vTaskStartScheduler+0xd8>)
 80082c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082ca:	4b15      	ldr	r3, [pc, #84]	; (8008320 <vTaskStartScheduler+0xdc>)
 80082cc:	2201      	movs	r2, #1
 80082ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082d0:	4b14      	ldr	r3, [pc, #80]	; (8008324 <vTaskStartScheduler+0xe0>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80082d6:	4b14      	ldr	r3, [pc, #80]	; (8008328 <vTaskStartScheduler+0xe4>)
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082dc:	f001 fb90 	bl	8009a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082e0:	e00e      	b.n	8008300 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082e8:	d10a      	bne.n	8008300 <vTaskStartScheduler+0xbc>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	60fb      	str	r3, [r7, #12]
}
 80082fc:	bf00      	nop
 80082fe:	e7fe      	b.n	80082fe <vTaskStartScheduler+0xba>
}
 8008300:	bf00      	nop
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	0800b788 	.word	0x0800b788
 800830c:	08008aad 	.word	0x08008aad
 8008310:	20001274 	.word	0x20001274
 8008314:	20000d7c 	.word	0x20000d7c
 8008318:	20000184 	.word	0x20000184
 800831c:	20001270 	.word	0x20001270
 8008320:	2000125c 	.word	0x2000125c
 8008324:	20001254 	.word	0x20001254
 8008328:	2000a0e8 	.word	0x2000a0e8

0800832c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008330:	4b04      	ldr	r3, [pc, #16]	; (8008344 <vTaskSuspendAll+0x18>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3301      	adds	r3, #1
 8008336:	4a03      	ldr	r2, [pc, #12]	; (8008344 <vTaskSuspendAll+0x18>)
 8008338:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800833a:	bf00      	nop
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	20001278 	.word	0x20001278

08008348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800834e:	2300      	movs	r3, #0
 8008350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008352:	2300      	movs	r3, #0
 8008354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008356:	4b42      	ldr	r3, [pc, #264]	; (8008460 <xTaskResumeAll+0x118>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10a      	bne.n	8008374 <xTaskResumeAll+0x2c>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	603b      	str	r3, [r7, #0]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008374:	f001 fbe6 	bl	8009b44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008378:	4b39      	ldr	r3, [pc, #228]	; (8008460 <xTaskResumeAll+0x118>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3b01      	subs	r3, #1
 800837e:	4a38      	ldr	r2, [pc, #224]	; (8008460 <xTaskResumeAll+0x118>)
 8008380:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008382:	4b37      	ldr	r3, [pc, #220]	; (8008460 <xTaskResumeAll+0x118>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d162      	bne.n	8008450 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800838a:	4b36      	ldr	r3, [pc, #216]	; (8008464 <xTaskResumeAll+0x11c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d05e      	beq.n	8008450 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008392:	e02f      	b.n	80083f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008394:	4b34      	ldr	r3, [pc, #208]	; (8008468 <xTaskResumeAll+0x120>)
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3318      	adds	r3, #24
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe ff29 	bl	80071f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3304      	adds	r3, #4
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe ff24 	bl	80071f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b4:	4b2d      	ldr	r3, [pc, #180]	; (800846c <xTaskResumeAll+0x124>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d903      	bls.n	80083c4 <xTaskResumeAll+0x7c>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c0:	4a2a      	ldr	r2, [pc, #168]	; (800846c <xTaskResumeAll+0x124>)
 80083c2:	6013      	str	r3, [r2, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c8:	4613      	mov	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4a27      	ldr	r2, [pc, #156]	; (8008470 <xTaskResumeAll+0x128>)
 80083d2:	441a      	add	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3304      	adds	r3, #4
 80083d8:	4619      	mov	r1, r3
 80083da:	4610      	mov	r0, r2
 80083dc:	f7fe feaf 	bl	800713e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e4:	4b23      	ldr	r3, [pc, #140]	; (8008474 <xTaskResumeAll+0x12c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d302      	bcc.n	80083f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80083ee:	4b22      	ldr	r3, [pc, #136]	; (8008478 <xTaskResumeAll+0x130>)
 80083f0:	2201      	movs	r2, #1
 80083f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083f4:	4b1c      	ldr	r3, [pc, #112]	; (8008468 <xTaskResumeAll+0x120>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1cb      	bne.n	8008394 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008402:	f000 fce1 	bl	8008dc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008406:	4b1d      	ldr	r3, [pc, #116]	; (800847c <xTaskResumeAll+0x134>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d010      	beq.n	8008434 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008412:	f000 f8d7 	bl	80085c4 <xTaskIncrementTick>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800841c:	4b16      	ldr	r3, [pc, #88]	; (8008478 <xTaskResumeAll+0x130>)
 800841e:	2201      	movs	r2, #1
 8008420:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3b01      	subs	r3, #1
 8008426:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1f1      	bne.n	8008412 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800842e:	4b13      	ldr	r3, [pc, #76]	; (800847c <xTaskResumeAll+0x134>)
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008434:	4b10      	ldr	r3, [pc, #64]	; (8008478 <xTaskResumeAll+0x130>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d009      	beq.n	8008450 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800843c:	2301      	movs	r3, #1
 800843e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008440:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <xTaskResumeAll+0x138>)
 8008442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008450:	f001 fba8 	bl	8009ba4 <vPortExitCritical>

	return xAlreadyYielded;
 8008454:	68bb      	ldr	r3, [r7, #8]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20001278 	.word	0x20001278
 8008464:	20001250 	.word	0x20001250
 8008468:	20001210 	.word	0x20001210
 800846c:	20001258 	.word	0x20001258
 8008470:	20000d80 	.word	0x20000d80
 8008474:	20000d7c 	.word	0x20000d7c
 8008478:	20001264 	.word	0x20001264
 800847c:	20001260 	.word	0x20001260
 8008480:	e000ed04 	.word	0xe000ed04

08008484 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800848a:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <xTaskGetTickCount+0x1c>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008490:	687b      	ldr	r3, [r7, #4]
}
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	20001254 	.word	0x20001254

080084a4 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]
 80084b4:	2338      	movs	r3, #56	; 0x38
 80084b6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80084b8:	f7ff ff38 	bl	800832c <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80084bc:	4b3a      	ldr	r3, [pc, #232]	; (80085a8 <uxTaskGetSystemState+0x104>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d369      	bcc.n	800859a <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	4613      	mov	r3, r2
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	461a      	mov	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	1898      	adds	r0, r3, r2
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	4613      	mov	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4a31      	ldr	r2, [pc, #196]	; (80085ac <uxTaskGetSystemState+0x108>)
 80084e8:	4413      	add	r3, r2
 80084ea:	2201      	movs	r2, #1
 80084ec:	4619      	mov	r1, r3
 80084ee:	f000 fbc9 	bl	8008c84 <prvListTasksWithinSingleList>
 80084f2:	4602      	mov	r2, r0
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	4413      	add	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e2      	bne.n	80084c6 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	4613      	mov	r3, r2
 8008504:	00db      	lsls	r3, r3, #3
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	461a      	mov	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4413      	add	r3, r2
 8008510:	4a27      	ldr	r2, [pc, #156]	; (80085b0 <uxTaskGetSystemState+0x10c>)
 8008512:	6811      	ldr	r1, [r2, #0]
 8008514:	2202      	movs	r2, #2
 8008516:	4618      	mov	r0, r3
 8008518:	f000 fbb4 	bl	8008c84 <prvListTasksWithinSingleList>
 800851c:	4602      	mov	r2, r0
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	4413      	add	r3, r2
 8008522:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	4613      	mov	r3, r2
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	461a      	mov	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	4a1f      	ldr	r2, [pc, #124]	; (80085b4 <uxTaskGetSystemState+0x110>)
 8008536:	6811      	ldr	r1, [r2, #0]
 8008538:	2202      	movs	r2, #2
 800853a:	4618      	mov	r0, r3
 800853c:	f000 fba2 	bl	8008c84 <prvListTasksWithinSingleList>
 8008540:	4602      	mov	r2, r0
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	4413      	add	r3, r2
 8008546:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	4613      	mov	r3, r2
 800854c:	00db      	lsls	r3, r3, #3
 800854e:	4413      	add	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	461a      	mov	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	2204      	movs	r2, #4
 800855a:	4917      	ldr	r1, [pc, #92]	; (80085b8 <uxTaskGetSystemState+0x114>)
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fb91 	bl	8008c84 <prvListTasksWithinSingleList>
 8008562:	4602      	mov	r2, r0
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	4413      	add	r3, r2
 8008568:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	4613      	mov	r3, r2
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	461a      	mov	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	2203      	movs	r2, #3
 800857c:	490f      	ldr	r1, [pc, #60]	; (80085bc <uxTaskGetSystemState+0x118>)
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fb80 	bl	8008c84 <prvListTasksWithinSingleList>
 8008584:	4602      	mov	r2, r0
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	4413      	add	r3, r2
 800858a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <uxTaskGetSystemState+0x11c>)
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800859a:	f7ff fed5 	bl	8008348 <xTaskResumeAll>

		return uxTask;
 800859e:	697b      	ldr	r3, [r7, #20]
	}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20001250 	.word	0x20001250
 80085ac:	20000d80 	.word	0x20000d80
 80085b0:	20001208 	.word	0x20001208
 80085b4:	2000120c 	.word	0x2000120c
 80085b8:	20001224 	.word	0x20001224
 80085bc:	2000123c 	.word	0x2000123c
 80085c0:	2000a0e8 	.word	0x2000a0e8

080085c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085ca:	2300      	movs	r3, #0
 80085cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ce:	4b4f      	ldr	r3, [pc, #316]	; (800870c <xTaskIncrementTick+0x148>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f040 808f 	bne.w	80086f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085d8:	4b4d      	ldr	r3, [pc, #308]	; (8008710 <xTaskIncrementTick+0x14c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3301      	adds	r3, #1
 80085de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085e0:	4a4b      	ldr	r2, [pc, #300]	; (8008710 <xTaskIncrementTick+0x14c>)
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d120      	bne.n	800862e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80085ec:	4b49      	ldr	r3, [pc, #292]	; (8008714 <xTaskIncrementTick+0x150>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <xTaskIncrementTick+0x48>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	603b      	str	r3, [r7, #0]
}
 8008608:	bf00      	nop
 800860a:	e7fe      	b.n	800860a <xTaskIncrementTick+0x46>
 800860c:	4b41      	ldr	r3, [pc, #260]	; (8008714 <xTaskIncrementTick+0x150>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	4b41      	ldr	r3, [pc, #260]	; (8008718 <xTaskIncrementTick+0x154>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a3f      	ldr	r2, [pc, #252]	; (8008714 <xTaskIncrementTick+0x150>)
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	4a3f      	ldr	r2, [pc, #252]	; (8008718 <xTaskIncrementTick+0x154>)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	4b3e      	ldr	r3, [pc, #248]	; (800871c <xTaskIncrementTick+0x158>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3301      	adds	r3, #1
 8008626:	4a3d      	ldr	r2, [pc, #244]	; (800871c <xTaskIncrementTick+0x158>)
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	f000 fbcd 	bl	8008dc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800862e:	4b3c      	ldr	r3, [pc, #240]	; (8008720 <xTaskIncrementTick+0x15c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	429a      	cmp	r2, r3
 8008636:	d349      	bcc.n	80086cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008638:	4b36      	ldr	r3, [pc, #216]	; (8008714 <xTaskIncrementTick+0x150>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008642:	4b37      	ldr	r3, [pc, #220]	; (8008720 <xTaskIncrementTick+0x15c>)
 8008644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008648:	601a      	str	r2, [r3, #0]
					break;
 800864a:	e03f      	b.n	80086cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800864c:	4b31      	ldr	r3, [pc, #196]	; (8008714 <xTaskIncrementTick+0x150>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	429a      	cmp	r2, r3
 8008662:	d203      	bcs.n	800866c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008664:	4a2e      	ldr	r2, [pc, #184]	; (8008720 <xTaskIncrementTick+0x15c>)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800866a:	e02f      	b.n	80086cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	3304      	adds	r3, #4
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe fdc1 	bl	80071f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	2b00      	cmp	r3, #0
 800867c:	d004      	beq.n	8008688 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	3318      	adds	r3, #24
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fdb8 	bl	80071f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4b25      	ldr	r3, [pc, #148]	; (8008724 <xTaskIncrementTick+0x160>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d903      	bls.n	800869c <xTaskIncrementTick+0xd8>
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	4a22      	ldr	r2, [pc, #136]	; (8008724 <xTaskIncrementTick+0x160>)
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4a1f      	ldr	r2, [pc, #124]	; (8008728 <xTaskIncrementTick+0x164>)
 80086aa:	441a      	add	r2, r3
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	3304      	adds	r3, #4
 80086b0:	4619      	mov	r1, r3
 80086b2:	4610      	mov	r0, r2
 80086b4:	f7fe fd43 	bl	800713e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086bc:	4b1b      	ldr	r3, [pc, #108]	; (800872c <xTaskIncrementTick+0x168>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d3b8      	bcc.n	8008638 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80086c6:	2301      	movs	r3, #1
 80086c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086ca:	e7b5      	b.n	8008638 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086cc:	4b17      	ldr	r3, [pc, #92]	; (800872c <xTaskIncrementTick+0x168>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d2:	4915      	ldr	r1, [pc, #84]	; (8008728 <xTaskIncrementTick+0x164>)
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	440b      	add	r3, r1
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d901      	bls.n	80086e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80086e4:	2301      	movs	r3, #1
 80086e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086e8:	4b11      	ldr	r3, [pc, #68]	; (8008730 <xTaskIncrementTick+0x16c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d007      	beq.n	8008700 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80086f0:	2301      	movs	r3, #1
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	e004      	b.n	8008700 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086f6:	4b0f      	ldr	r3, [pc, #60]	; (8008734 <xTaskIncrementTick+0x170>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	4a0d      	ldr	r2, [pc, #52]	; (8008734 <xTaskIncrementTick+0x170>)
 80086fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008700:	697b      	ldr	r3, [r7, #20]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20001278 	.word	0x20001278
 8008710:	20001254 	.word	0x20001254
 8008714:	20001208 	.word	0x20001208
 8008718:	2000120c 	.word	0x2000120c
 800871c:	20001268 	.word	0x20001268
 8008720:	20001270 	.word	0x20001270
 8008724:	20001258 	.word	0x20001258
 8008728:	20000d80 	.word	0x20000d80
 800872c:	20000d7c 	.word	0x20000d7c
 8008730:	20001264 	.word	0x20001264
 8008734:	20001260 	.word	0x20001260

08008738 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800873e:	4b36      	ldr	r3, [pc, #216]	; (8008818 <vTaskSwitchContext+0xe0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008746:	4b35      	ldr	r3, [pc, #212]	; (800881c <vTaskSwitchContext+0xe4>)
 8008748:	2201      	movs	r2, #1
 800874a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800874c:	e05e      	b.n	800880c <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800874e:	4b33      	ldr	r3, [pc, #204]	; (800881c <vTaskSwitchContext+0xe4>)
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008754:	4b32      	ldr	r3, [pc, #200]	; (8008820 <vTaskSwitchContext+0xe8>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a32      	ldr	r2, [pc, #200]	; (8008824 <vTaskSwitchContext+0xec>)
 800875a:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800875c:	4b31      	ldr	r3, [pc, #196]	; (8008824 <vTaskSwitchContext+0xec>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	4b31      	ldr	r3, [pc, #196]	; (8008828 <vTaskSwitchContext+0xf0>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	429a      	cmp	r2, r3
 8008766:	d909      	bls.n	800877c <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008768:	4b30      	ldr	r3, [pc, #192]	; (800882c <vTaskSwitchContext+0xf4>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800876e:	4a2d      	ldr	r2, [pc, #180]	; (8008824 <vTaskSwitchContext+0xec>)
 8008770:	6810      	ldr	r0, [r2, #0]
 8008772:	4a2d      	ldr	r2, [pc, #180]	; (8008828 <vTaskSwitchContext+0xf0>)
 8008774:	6812      	ldr	r2, [r2, #0]
 8008776:	1a82      	subs	r2, r0, r2
 8008778:	440a      	add	r2, r1
 800877a:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800877c:	4b29      	ldr	r3, [pc, #164]	; (8008824 <vTaskSwitchContext+0xec>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a29      	ldr	r2, [pc, #164]	; (8008828 <vTaskSwitchContext+0xf0>)
 8008782:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008784:	4b2a      	ldr	r3, [pc, #168]	; (8008830 <vTaskSwitchContext+0xf8>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	e010      	b.n	80087ae <vTaskSwitchContext+0x76>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10a      	bne.n	80087a8 <vTaskSwitchContext+0x70>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	607b      	str	r3, [r7, #4]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <vTaskSwitchContext+0x6e>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]
 80087ae:	4921      	ldr	r1, [pc, #132]	; (8008834 <vTaskSwitchContext+0xfc>)
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4613      	mov	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	440b      	add	r3, r1
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0e4      	beq.n	800878c <vTaskSwitchContext+0x54>
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4a19      	ldr	r2, [pc, #100]	; (8008834 <vTaskSwitchContext+0xfc>)
 80087ce:	4413      	add	r3, r2
 80087d0:	60bb      	str	r3, [r7, #8]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	605a      	str	r2, [r3, #4]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	3308      	adds	r3, #8
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d104      	bne.n	80087f2 <vTaskSwitchContext+0xba>
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	605a      	str	r2, [r3, #4]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	4a0c      	ldr	r2, [pc, #48]	; (800882c <vTaskSwitchContext+0xf4>)
 80087fa:	6013      	str	r3, [r2, #0]
 80087fc:	4a0c      	ldr	r2, [pc, #48]	; (8008830 <vTaskSwitchContext+0xf8>)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <vTaskSwitchContext+0xf4>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3358      	adds	r3, #88	; 0x58
 8008808:	4a0b      	ldr	r2, [pc, #44]	; (8008838 <vTaskSwitchContext+0x100>)
 800880a:	6013      	str	r3, [r2, #0]
}
 800880c:	bf00      	nop
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	20001278 	.word	0x20001278
 800881c:	20001264 	.word	0x20001264
 8008820:	2000a0e8 	.word	0x2000a0e8
 8008824:	20001280 	.word	0x20001280
 8008828:	2000127c 	.word	0x2000127c
 800882c:	20000d7c 	.word	0x20000d7c
 8008830:	20001258 	.word	0x20001258
 8008834:	20000d80 	.word	0x20000d80
 8008838:	20000184 	.word	0x20000184

0800883c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	60fb      	str	r3, [r7, #12]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008862:	4b07      	ldr	r3, [pc, #28]	; (8008880 <vTaskPlaceOnEventList+0x44>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3318      	adds	r3, #24
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7fe fc8b 	bl	8007186 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008870:	2101      	movs	r1, #1
 8008872:	6838      	ldr	r0, [r7, #0]
 8008874:	f000 fc94 	bl	80091a0 <prvAddCurrentTaskToDelayedList>
}
 8008878:	bf00      	nop
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20000d7c 	.word	0x20000d7c

08008884 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10a      	bne.n	80088ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	617b      	str	r3, [r7, #20]
}
 80088a8:	bf00      	nop
 80088aa:	e7fe      	b.n	80088aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3318      	adds	r3, #24
 80088b2:	4619      	mov	r1, r3
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f7fe fc42 	bl	800713e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80088c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80088c6:	6879      	ldr	r1, [r7, #4]
 80088c8:	68b8      	ldr	r0, [r7, #8]
 80088ca:	f000 fc69 	bl	80091a0 <prvAddCurrentTaskToDelayedList>
	}
 80088ce:	bf00      	nop
 80088d0:	3718      	adds	r7, #24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20000d7c 	.word	0x20000d7c

080088dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10a      	bne.n	8008908 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	60fb      	str	r3, [r7, #12]
}
 8008904:	bf00      	nop
 8008906:	e7fe      	b.n	8008906 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	3318      	adds	r3, #24
 800890c:	4618      	mov	r0, r3
 800890e:	f7fe fc73 	bl	80071f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008912:	4b1e      	ldr	r3, [pc, #120]	; (800898c <xTaskRemoveFromEventList+0xb0>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d11d      	bne.n	8008956 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	3304      	adds	r3, #4
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe fc6a 	bl	80071f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008928:	4b19      	ldr	r3, [pc, #100]	; (8008990 <xTaskRemoveFromEventList+0xb4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	429a      	cmp	r2, r3
 800892e:	d903      	bls.n	8008938 <xTaskRemoveFromEventList+0x5c>
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	4a16      	ldr	r2, [pc, #88]	; (8008990 <xTaskRemoveFromEventList+0xb4>)
 8008936:	6013      	str	r3, [r2, #0]
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4a13      	ldr	r2, [pc, #76]	; (8008994 <xTaskRemoveFromEventList+0xb8>)
 8008946:	441a      	add	r2, r3
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	3304      	adds	r3, #4
 800894c:	4619      	mov	r1, r3
 800894e:	4610      	mov	r0, r2
 8008950:	f7fe fbf5 	bl	800713e <vListInsertEnd>
 8008954:	e005      	b.n	8008962 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	3318      	adds	r3, #24
 800895a:	4619      	mov	r1, r3
 800895c:	480e      	ldr	r0, [pc, #56]	; (8008998 <xTaskRemoveFromEventList+0xbc>)
 800895e:	f7fe fbee 	bl	800713e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008966:	4b0d      	ldr	r3, [pc, #52]	; (800899c <xTaskRemoveFromEventList+0xc0>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	429a      	cmp	r2, r3
 800896e:	d905      	bls.n	800897c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008970:	2301      	movs	r3, #1
 8008972:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008974:	4b0a      	ldr	r3, [pc, #40]	; (80089a0 <xTaskRemoveFromEventList+0xc4>)
 8008976:	2201      	movs	r2, #1
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	e001      	b.n	8008980 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008980:	697b      	ldr	r3, [r7, #20]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20001278 	.word	0x20001278
 8008990:	20001258 	.word	0x20001258
 8008994:	20000d80 	.word	0x20000d80
 8008998:	20001210 	.word	0x20001210
 800899c:	20000d7c 	.word	0x20000d7c
 80089a0:	20001264 	.word	0x20001264

080089a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089ac:	4b06      	ldr	r3, [pc, #24]	; (80089c8 <vTaskInternalSetTimeOutState+0x24>)
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089b4:	4b05      	ldr	r3, [pc, #20]	; (80089cc <vTaskInternalSetTimeOutState+0x28>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	605a      	str	r2, [r3, #4]
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	20001268 	.word	0x20001268
 80089cc:	20001254 	.word	0x20001254

080089d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10a      	bne.n	80089f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	613b      	str	r3, [r7, #16]
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80089fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	60fb      	str	r3, [r7, #12]
}
 8008a0e:	bf00      	nop
 8008a10:	e7fe      	b.n	8008a10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008a12:	f001 f897 	bl	8009b44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a16:	4b1d      	ldr	r3, [pc, #116]	; (8008a8c <xTaskCheckForTimeOut+0xbc>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a2e:	d102      	bne.n	8008a36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	61fb      	str	r3, [r7, #28]
 8008a34:	e023      	b.n	8008a7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	4b15      	ldr	r3, [pc, #84]	; (8008a90 <xTaskCheckForTimeOut+0xc0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d007      	beq.n	8008a52 <xTaskCheckForTimeOut+0x82>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d302      	bcc.n	8008a52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	61fb      	str	r3, [r7, #28]
 8008a50:	e015      	b.n	8008a7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d20b      	bcs.n	8008a74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	1ad2      	subs	r2, r2, r3
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff ff9b 	bl	80089a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	61fb      	str	r3, [r7, #28]
 8008a72:	e004      	b.n	8008a7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2200      	movs	r2, #0
 8008a78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a7e:	f001 f891 	bl	8009ba4 <vPortExitCritical>

	return xReturn;
 8008a82:	69fb      	ldr	r3, [r7, #28]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3720      	adds	r7, #32
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20001254 	.word	0x20001254
 8008a90:	20001268 	.word	0x20001268

08008a94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a98:	4b03      	ldr	r3, [pc, #12]	; (8008aa8 <vTaskMissedYield+0x14>)
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]
}
 8008a9e:	bf00      	nop
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	20001264 	.word	0x20001264

08008aac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ab4:	f000 f852 	bl	8008b5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ab8:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <prvIdleTask+0x28>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d9f9      	bls.n	8008ab4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ac0:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <prvIdleTask+0x2c>)
 8008ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac6:	601a      	str	r2, [r3, #0]
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ad0:	e7f0      	b.n	8008ab4 <prvIdleTask+0x8>
 8008ad2:	bf00      	nop
 8008ad4:	20000d80 	.word	0x20000d80
 8008ad8:	e000ed04 	.word	0xe000ed04

08008adc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	607b      	str	r3, [r7, #4]
 8008ae6:	e00c      	b.n	8008b02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4a12      	ldr	r2, [pc, #72]	; (8008b3c <prvInitialiseTaskLists+0x60>)
 8008af4:	4413      	add	r3, r2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe faf4 	bl	80070e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	3301      	adds	r3, #1
 8008b00:	607b      	str	r3, [r7, #4]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b37      	cmp	r3, #55	; 0x37
 8008b06:	d9ef      	bls.n	8008ae8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b08:	480d      	ldr	r0, [pc, #52]	; (8008b40 <prvInitialiseTaskLists+0x64>)
 8008b0a:	f7fe faeb 	bl	80070e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b0e:	480d      	ldr	r0, [pc, #52]	; (8008b44 <prvInitialiseTaskLists+0x68>)
 8008b10:	f7fe fae8 	bl	80070e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b14:	480c      	ldr	r0, [pc, #48]	; (8008b48 <prvInitialiseTaskLists+0x6c>)
 8008b16:	f7fe fae5 	bl	80070e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b1a:	480c      	ldr	r0, [pc, #48]	; (8008b4c <prvInitialiseTaskLists+0x70>)
 8008b1c:	f7fe fae2 	bl	80070e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b20:	480b      	ldr	r0, [pc, #44]	; (8008b50 <prvInitialiseTaskLists+0x74>)
 8008b22:	f7fe fadf 	bl	80070e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b26:	4b0b      	ldr	r3, [pc, #44]	; (8008b54 <prvInitialiseTaskLists+0x78>)
 8008b28:	4a05      	ldr	r2, [pc, #20]	; (8008b40 <prvInitialiseTaskLists+0x64>)
 8008b2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b2c:	4b0a      	ldr	r3, [pc, #40]	; (8008b58 <prvInitialiseTaskLists+0x7c>)
 8008b2e:	4a05      	ldr	r2, [pc, #20]	; (8008b44 <prvInitialiseTaskLists+0x68>)
 8008b30:	601a      	str	r2, [r3, #0]
}
 8008b32:	bf00      	nop
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20000d80 	.word	0x20000d80
 8008b40:	200011e0 	.word	0x200011e0
 8008b44:	200011f4 	.word	0x200011f4
 8008b48:	20001210 	.word	0x20001210
 8008b4c:	20001224 	.word	0x20001224
 8008b50:	2000123c 	.word	0x2000123c
 8008b54:	20001208 	.word	0x20001208
 8008b58:	2000120c 	.word	0x2000120c

08008b5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b62:	e019      	b.n	8008b98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b64:	f000 ffee 	bl	8009b44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b68:	4b10      	ldr	r3, [pc, #64]	; (8008bac <prvCheckTasksWaitingTermination+0x50>)
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3304      	adds	r3, #4
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe fb3f 	bl	80071f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b7a:	4b0d      	ldr	r3, [pc, #52]	; (8008bb0 <prvCheckTasksWaitingTermination+0x54>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	4a0b      	ldr	r2, [pc, #44]	; (8008bb0 <prvCheckTasksWaitingTermination+0x54>)
 8008b82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b84:	4b0b      	ldr	r3, [pc, #44]	; (8008bb4 <prvCheckTasksWaitingTermination+0x58>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	4a0a      	ldr	r2, [pc, #40]	; (8008bb4 <prvCheckTasksWaitingTermination+0x58>)
 8008b8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b8e:	f001 f809 	bl	8009ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f8e4 	bl	8008d60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b98:	4b06      	ldr	r3, [pc, #24]	; (8008bb4 <prvCheckTasksWaitingTermination+0x58>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e1      	bne.n	8008b64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ba0:	bf00      	nop
 8008ba2:	bf00      	nop
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20001224 	.word	0x20001224
 8008bb0:	20001250 	.word	0x20001250
 8008bb4:	20001238 	.word	0x20001238

08008bb8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <vTaskGetInfo+0x1a>
 8008bcc:	4b2c      	ldr	r3, [pc, #176]	; (8008c80 <vTaskGetInfo+0xc8>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	e000      	b.n	8008bd4 <vTaskGetInfo+0x1c>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8008c0e:	78fb      	ldrb	r3, [r7, #3]
 8008c10:	2b05      	cmp	r3, #5
 8008c12:	d01a      	beq.n	8008c4a <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8008c14:	4b1a      	ldr	r3, [pc, #104]	; (8008c80 <vTaskGetInfo+0xc8>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d103      	bne.n	8008c26 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2200      	movs	r2, #0
 8008c22:	731a      	strb	r2, [r3, #12]
 8008c24:	e018      	b.n	8008c58 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d112      	bne.n	8008c58 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8008c32:	f7ff fb7b 	bl	800832c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2202      	movs	r2, #2
 8008c42:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8008c44:	f7ff fb80 	bl	8008348 <xTaskResumeAll>
 8008c48:	e006      	b.n	8008c58 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8008c4a:	6978      	ldr	r0, [r7, #20]
 8008c4c:	f7ff fa94 	bl	8008178 <eTaskGetState>
 8008c50:	4603      	mov	r3, r0
 8008c52:	461a      	mov	r2, r3
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d009      	beq.n	8008c72 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f860 	bl	8008d28 <prvTaskCheckFreeStackSpace>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8008c70:	e002      	b.n	8008c78 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	2200      	movs	r2, #0
 8008c76:	841a      	strh	r2, [r3, #32]
	}
 8008c78:	bf00      	nop
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	20000d7c 	.word	0x20000d7c

08008c84 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08a      	sub	sp, #40	; 0x28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d03f      	beq.n	8008d1e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	623b      	str	r3, [r7, #32]
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	605a      	str	r2, [r3, #4]
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d104      	bne.n	8008cc2 <prvListTasksWithinSingleList+0x3e>
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	61bb      	str	r3, [r7, #24]
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	605a      	str	r2, [r3, #4]
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	3308      	adds	r3, #8
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d104      	bne.n	8008cee <prvListTasksWithinSingleList+0x6a>
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	685a      	ldr	r2, [r3, #4]
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	605a      	str	r2, [r3, #4]
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8008cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	4413      	add	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	461a      	mov	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	1899      	adds	r1, r3, r2
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	6978      	ldr	r0, [r7, #20]
 8008d0c:	f7ff ff54 	bl	8008bb8 <vTaskGetInfo>
				uxTask++;
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	3301      	adds	r3, #1
 8008d14:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d1d5      	bne.n	8008cca <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3728      	adds	r7, #40	; 0x28
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008d34:	e005      	b.n	8008d42 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	2ba5      	cmp	r3, #165	; 0xa5
 8008d48:	d0f5      	beq.n	8008d36 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	089b      	lsrs	r3, r3, #2
 8008d4e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	b29b      	uxth	r3, r3
	}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	3358      	adds	r3, #88	; 0x58
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f001 ffed 	bl	800ad4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d108      	bne.n	8008d8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 f8cd 	bl	8009f20 <vPortFree>
				vPortFree( pxTCB );
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 f8ca 	bl	8009f20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d8c:	e018      	b.n	8008dc0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d103      	bne.n	8008da0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 f8c1 	bl	8009f20 <vPortFree>
	}
 8008d9e:	e00f      	b.n	8008dc0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d00a      	beq.n	8008dc0 <prvDeleteTCB+0x60>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	60fb      	str	r3, [r7, #12]
}
 8008dbc:	bf00      	nop
 8008dbe:	e7fe      	b.n	8008dbe <prvDeleteTCB+0x5e>
	}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dce:	4b0c      	ldr	r3, [pc, #48]	; (8008e00 <prvResetNextTaskUnblockTime+0x38>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d104      	bne.n	8008de2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <prvResetNextTaskUnblockTime+0x3c>)
 8008dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008de0:	e008      	b.n	8008df4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de2:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <prvResetNextTaskUnblockTime+0x38>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	4a04      	ldr	r2, [pc, #16]	; (8008e04 <prvResetNextTaskUnblockTime+0x3c>)
 8008df2:	6013      	str	r3, [r2, #0]
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	20001208 	.word	0x20001208
 8008e04:	20001270 	.word	0x20001270

08008e08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e0e:	4b0b      	ldr	r3, [pc, #44]	; (8008e3c <xTaskGetSchedulerState+0x34>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d102      	bne.n	8008e1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e16:	2301      	movs	r3, #1
 8008e18:	607b      	str	r3, [r7, #4]
 8008e1a:	e008      	b.n	8008e2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e1c:	4b08      	ldr	r3, [pc, #32]	; (8008e40 <xTaskGetSchedulerState+0x38>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d102      	bne.n	8008e2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e24:	2302      	movs	r3, #2
 8008e26:	607b      	str	r3, [r7, #4]
 8008e28:	e001      	b.n	8008e2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e2e:	687b      	ldr	r3, [r7, #4]
	}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	2000125c 	.word	0x2000125c
 8008e40:	20001278 	.word	0x20001278

08008e44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e50:	2300      	movs	r3, #0
 8008e52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d056      	beq.n	8008f08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e5a:	4b2e      	ldr	r3, [pc, #184]	; (8008f14 <xTaskPriorityDisinherit+0xd0>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d00a      	beq.n	8008e7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	60fb      	str	r3, [r7, #12]
}
 8008e76:	bf00      	nop
 8008e78:	e7fe      	b.n	8008e78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10a      	bne.n	8008e98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	60bb      	str	r3, [r7, #8]
}
 8008e94:	bf00      	nop
 8008e96:	e7fe      	b.n	8008e96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9c:	1e5a      	subs	r2, r3, #1
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d02c      	beq.n	8008f08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d128      	bne.n	8008f08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	3304      	adds	r3, #4
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe f99c 	bl	80071f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed8:	4b0f      	ldr	r3, [pc, #60]	; (8008f18 <xTaskPriorityDisinherit+0xd4>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d903      	bls.n	8008ee8 <xTaskPriorityDisinherit+0xa4>
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	4a0c      	ldr	r2, [pc, #48]	; (8008f18 <xTaskPriorityDisinherit+0xd4>)
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4a09      	ldr	r2, [pc, #36]	; (8008f1c <xTaskPriorityDisinherit+0xd8>)
 8008ef6:	441a      	add	r2, r3
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	3304      	adds	r3, #4
 8008efc:	4619      	mov	r1, r3
 8008efe:	4610      	mov	r0, r2
 8008f00:	f7fe f91d 	bl	800713e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f04:	2301      	movs	r3, #1
 8008f06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f08:	697b      	ldr	r3, [r7, #20]
	}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000d7c 	.word	0x20000d7c
 8008f18:	20001258 	.word	0x20001258
 8008f1c:	20000d80 	.word	0x20000d80

08008f20 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f001 ffa8 	bl	800ae82 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7f7 f94c 	bl	80001d0 <strlen>
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	e007      	b.n	8008f4c <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4413      	add	r3, r2
 8008f42:	2220      	movs	r2, #32
 8008f44:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b0e      	cmp	r3, #14
 8008f50:	d9f4      	bls.n	8008f3c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	2200      	movs	r2, #0
 8008f5a:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4413      	add	r3, r2
	}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8008f6c:	b590      	push	{r4, r7, lr}
 8008f6e:	b089      	sub	sp, #36	; 0x24
 8008f70:	af02      	add	r7, sp, #8
 8008f72:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8008f7a:	4b45      	ldr	r3, [pc, #276]	; (8009090 <vTaskList+0x124>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8008f80:	4b43      	ldr	r3, [pc, #268]	; (8009090 <vTaskList+0x124>)
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fefb 	bl	8009d88 <pvPortMalloc>
 8008f92:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d076      	beq.n	8009088 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	68f9      	ldr	r1, [r7, #12]
 8008f9e:	68b8      	ldr	r0, [r7, #8]
 8008fa0:	f7ff fa80 	bl	80084a4 <uxTaskGetSystemState>
 8008fa4:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	617b      	str	r3, [r7, #20]
 8008faa:	e066      	b.n	800907a <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	4413      	add	r3, r2
 8008fbc:	7b1b      	ldrb	r3, [r3, #12]
 8008fbe:	2b04      	cmp	r3, #4
 8008fc0:	d81b      	bhi.n	8008ffa <vTaskList+0x8e>
 8008fc2:	a201      	add	r2, pc, #4	; (adr r2, 8008fc8 <vTaskList+0x5c>)
 8008fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc8:	08008fdd 	.word	0x08008fdd
 8008fcc:	08008fe3 	.word	0x08008fe3
 8008fd0:	08008fe9 	.word	0x08008fe9
 8008fd4:	08008fef 	.word	0x08008fef
 8008fd8:	08008ff5 	.word	0x08008ff5
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8008fdc:	2358      	movs	r3, #88	; 0x58
 8008fde:	74fb      	strb	r3, [r7, #19]
										break;
 8008fe0:	e00e      	b.n	8009000 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8008fe2:	2352      	movs	r3, #82	; 0x52
 8008fe4:	74fb      	strb	r3, [r7, #19]
										break;
 8008fe6:	e00b      	b.n	8009000 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8008fe8:	2342      	movs	r3, #66	; 0x42
 8008fea:	74fb      	strb	r3, [r7, #19]
										break;
 8008fec:	e008      	b.n	8009000 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8008fee:	2353      	movs	r3, #83	; 0x53
 8008ff0:	74fb      	strb	r3, [r7, #19]
										break;
 8008ff2:	e005      	b.n	8009000 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8008ff4:	2344      	movs	r3, #68	; 0x44
 8008ff6:	74fb      	strb	r3, [r7, #19]
										break;
 8008ff8:	e002      	b.n	8009000 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	74fb      	strb	r3, [r7, #19]
										break;
 8008ffe:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	4613      	mov	r3, r2
 8009004:	00db      	lsls	r3, r3, #3
 8009006:	4413      	add	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	461a      	mov	r2, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	4413      	add	r3, r2
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff ff83 	bl	8008f20 <prvWriteNameToBuffer>
 800901a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800901c:	7cf9      	ldrb	r1, [r7, #19]
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	4613      	mov	r3, r2
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	461a      	mov	r2, r3
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	4413      	add	r3, r2
 800902e:	6918      	ldr	r0, [r3, #16]
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	4613      	mov	r3, r2
 8009034:	00db      	lsls	r3, r3, #3
 8009036:	4413      	add	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	461a      	mov	r2, r3
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	4413      	add	r3, r2
 8009040:	8c1b      	ldrh	r3, [r3, #32]
 8009042:	461c      	mov	r4, r3
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	4613      	mov	r3, r2
 8009048:	00db      	lsls	r3, r3, #3
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	461a      	mov	r2, r3
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	4413      	add	r3, r2
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	9301      	str	r3, [sp, #4]
 8009058:	9400      	str	r4, [sp, #0]
 800905a:	4603      	mov	r3, r0
 800905c:	460a      	mov	r2, r1
 800905e:	490d      	ldr	r1, [pc, #52]	; (8009094 <vTaskList+0x128>)
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f001 fedf 	bl	800ae24 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7f7 f8b2 	bl	80001d0 <strlen>
 800906c:	4602      	mov	r2, r0
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4413      	add	r3, r2
 8009072:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	3301      	adds	r3, #1
 8009078:	617b      	str	r3, [r7, #20]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	429a      	cmp	r2, r3
 8009080:	d394      	bcc.n	8008fac <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8009082:	68b8      	ldr	r0, [r7, #8]
 8009084:	f000 ff4c 	bl	8009f20 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009088:	bf00      	nop
 800908a:	371c      	adds	r7, #28
 800908c:	46bd      	mov	sp, r7
 800908e:	bd90      	pop	{r4, r7, pc}
 8009090:	20001250 	.word	0x20001250
 8009094:	0800b790 	.word	0x0800b790

08009098 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80090a6:	4b3a      	ldr	r3, [pc, #232]	; (8009190 <vTaskGetRunTimeStats+0xf8>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80090ac:	4b38      	ldr	r3, [pc, #224]	; (8009190 <vTaskGetRunTimeStats+0xf8>)
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	4613      	mov	r3, r2
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fe65 	bl	8009d88 <pvPortMalloc>
 80090be:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d05f      	beq.n	8009186 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80090c6:	f107 030c 	add.w	r3, r7, #12
 80090ca:	461a      	mov	r2, r3
 80090cc:	69b9      	ldr	r1, [r7, #24]
 80090ce:	6978      	ldr	r0, [r7, #20]
 80090d0:	f7ff f9e8 	bl	80084a4 <uxTaskGetSystemState>
 80090d4:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	4a2e      	ldr	r2, [pc, #184]	; (8009194 <vTaskGetRunTimeStats+0xfc>)
 80090da:	fba2 2303 	umull	r2, r3, r2, r3
 80090de:	095b      	lsrs	r3, r3, #5
 80090e0:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d04b      	beq.n	8009180 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 80090e8:	2300      	movs	r3, #0
 80090ea:	61fb      	str	r3, [r7, #28]
 80090ec:	e044      	b.n	8009178 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80090ee:	69fa      	ldr	r2, [r7, #28]
 80090f0:	4613      	mov	r3, r2
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	461a      	mov	r2, r3
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	4413      	add	r3, r2
 80090fe:	699a      	ldr	r2, [r3, #24]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	fbb2 f3f3 	udiv	r3, r2, r3
 8009106:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8009108:	69fa      	ldr	r2, [r7, #28]
 800910a:	4613      	mov	r3, r2
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	461a      	mov	r2, r3
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	4413      	add	r3, r2
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7ff feff 	bl	8008f20 <prvWriteNameToBuffer>
 8009122:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00e      	beq.n	8009148 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800912a:	69fa      	ldr	r2, [r7, #28]
 800912c:	4613      	mov	r3, r2
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	4413      	add	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	461a      	mov	r2, r3
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	4413      	add	r3, r2
 800913a:	699a      	ldr	r2, [r3, #24]
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	4916      	ldr	r1, [pc, #88]	; (8009198 <vTaskGetRunTimeStats+0x100>)
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 fe6f 	bl	800ae24 <siprintf>
 8009146:	e00d      	b.n	8009164 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	4613      	mov	r3, r2
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	4413      	add	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	461a      	mov	r2, r3
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	4413      	add	r3, r2
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	461a      	mov	r2, r3
 800915c:	490f      	ldr	r1, [pc, #60]	; (800919c <vTaskGetRunTimeStats+0x104>)
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 fe60 	bl	800ae24 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7f7 f833 	bl	80001d0 <strlen>
 800916a:	4602      	mov	r2, r0
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4413      	add	r3, r2
 8009170:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	3301      	adds	r3, #1
 8009176:	61fb      	str	r3, [r7, #28]
 8009178:	69fa      	ldr	r2, [r7, #28]
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	429a      	cmp	r2, r3
 800917e:	d3b6      	bcc.n	80090ee <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8009180:	6978      	ldr	r0, [r7, #20]
 8009182:	f000 fecd 	bl	8009f20 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009186:	bf00      	nop
 8009188:	3720      	adds	r7, #32
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20001250 	.word	0x20001250
 8009194:	51eb851f 	.word	0x51eb851f
 8009198:	0800b7a0 	.word	0x0800b7a0
 800919c:	0800b7ac 	.word	0x0800b7ac

080091a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091aa:	4b21      	ldr	r3, [pc, #132]	; (8009230 <prvAddCurrentTaskToDelayedList+0x90>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091b0:	4b20      	ldr	r3, [pc, #128]	; (8009234 <prvAddCurrentTaskToDelayedList+0x94>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3304      	adds	r3, #4
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe f81e 	bl	80071f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091c2:	d10a      	bne.n	80091da <prvAddCurrentTaskToDelayedList+0x3a>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d007      	beq.n	80091da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ca:	4b1a      	ldr	r3, [pc, #104]	; (8009234 <prvAddCurrentTaskToDelayedList+0x94>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3304      	adds	r3, #4
 80091d0:	4619      	mov	r1, r3
 80091d2:	4819      	ldr	r0, [pc, #100]	; (8009238 <prvAddCurrentTaskToDelayedList+0x98>)
 80091d4:	f7fd ffb3 	bl	800713e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091d8:	e026      	b.n	8009228 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4413      	add	r3, r2
 80091e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091e2:	4b14      	ldr	r3, [pc, #80]	; (8009234 <prvAddCurrentTaskToDelayedList+0x94>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d209      	bcs.n	8009206 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091f2:	4b12      	ldr	r3, [pc, #72]	; (800923c <prvAddCurrentTaskToDelayedList+0x9c>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <prvAddCurrentTaskToDelayedList+0x94>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3304      	adds	r3, #4
 80091fc:	4619      	mov	r1, r3
 80091fe:	4610      	mov	r0, r2
 8009200:	f7fd ffc1 	bl	8007186 <vListInsert>
}
 8009204:	e010      	b.n	8009228 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009206:	4b0e      	ldr	r3, [pc, #56]	; (8009240 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <prvAddCurrentTaskToDelayedList+0x94>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3304      	adds	r3, #4
 8009210:	4619      	mov	r1, r3
 8009212:	4610      	mov	r0, r2
 8009214:	f7fd ffb7 	bl	8007186 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009218:	4b0a      	ldr	r3, [pc, #40]	; (8009244 <prvAddCurrentTaskToDelayedList+0xa4>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	429a      	cmp	r2, r3
 8009220:	d202      	bcs.n	8009228 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009222:	4a08      	ldr	r2, [pc, #32]	; (8009244 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	6013      	str	r3, [r2, #0]
}
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	20001254 	.word	0x20001254
 8009234:	20000d7c 	.word	0x20000d7c
 8009238:	2000123c 	.word	0x2000123c
 800923c:	2000120c 	.word	0x2000120c
 8009240:	20001208 	.word	0x20001208
 8009244:	20001270 	.word	0x20001270

08009248 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08a      	sub	sp, #40	; 0x28
 800924c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800924e:	2300      	movs	r3, #0
 8009250:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009252:	f000 fb07 	bl	8009864 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009256:	4b1c      	ldr	r3, [pc, #112]	; (80092c8 <xTimerCreateTimerTask+0x80>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d021      	beq.n	80092a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800925e:	2300      	movs	r3, #0
 8009260:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009262:	2300      	movs	r3, #0
 8009264:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009266:	1d3a      	adds	r2, r7, #4
 8009268:	f107 0108 	add.w	r1, r7, #8
 800926c:	f107 030c 	add.w	r3, r7, #12
 8009270:	4618      	mov	r0, r3
 8009272:	f7fd ff1d 	bl	80070b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009276:	6879      	ldr	r1, [r7, #4]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	9202      	str	r2, [sp, #8]
 800927e:	9301      	str	r3, [sp, #4]
 8009280:	2302      	movs	r3, #2
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	2300      	movs	r3, #0
 8009286:	460a      	mov	r2, r1
 8009288:	4910      	ldr	r1, [pc, #64]	; (80092cc <xTimerCreateTimerTask+0x84>)
 800928a:	4811      	ldr	r0, [pc, #68]	; (80092d0 <xTimerCreateTimerTask+0x88>)
 800928c:	f7fe fd84 	bl	8007d98 <xTaskCreateStatic>
 8009290:	4603      	mov	r3, r0
 8009292:	4a10      	ldr	r2, [pc, #64]	; (80092d4 <xTimerCreateTimerTask+0x8c>)
 8009294:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009296:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <xTimerCreateTimerTask+0x8c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800929e:	2301      	movs	r3, #1
 80092a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10a      	bne.n	80092be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	613b      	str	r3, [r7, #16]
}
 80092ba:	bf00      	nop
 80092bc:	e7fe      	b.n	80092bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80092be:	697b      	ldr	r3, [r7, #20]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	200012b4 	.word	0x200012b4
 80092cc:	0800b7b8 	.word	0x0800b7b8
 80092d0:	0800940d 	.word	0x0800940d
 80092d4:	200012b8 	.word	0x200012b8

080092d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08a      	sub	sp, #40	; 0x28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10a      	bne.n	8009306 <xTimerGenericCommand+0x2e>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	623b      	str	r3, [r7, #32]
}
 8009302:	bf00      	nop
 8009304:	e7fe      	b.n	8009304 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009306:	4b1a      	ldr	r3, [pc, #104]	; (8009370 <xTimerGenericCommand+0x98>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d02a      	beq.n	8009364 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b05      	cmp	r3, #5
 800931e:	dc18      	bgt.n	8009352 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009320:	f7ff fd72 	bl	8008e08 <xTaskGetSchedulerState>
 8009324:	4603      	mov	r3, r0
 8009326:	2b02      	cmp	r3, #2
 8009328:	d109      	bne.n	800933e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800932a:	4b11      	ldr	r3, [pc, #68]	; (8009370 <xTimerGenericCommand+0x98>)
 800932c:	6818      	ldr	r0, [r3, #0]
 800932e:	f107 0110 	add.w	r1, r7, #16
 8009332:	2300      	movs	r3, #0
 8009334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009336:	f7fe f8c7 	bl	80074c8 <xQueueGenericSend>
 800933a:	6278      	str	r0, [r7, #36]	; 0x24
 800933c:	e012      	b.n	8009364 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800933e:	4b0c      	ldr	r3, [pc, #48]	; (8009370 <xTimerGenericCommand+0x98>)
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	f107 0110 	add.w	r1, r7, #16
 8009346:	2300      	movs	r3, #0
 8009348:	2200      	movs	r2, #0
 800934a:	f7fe f8bd 	bl	80074c8 <xQueueGenericSend>
 800934e:	6278      	str	r0, [r7, #36]	; 0x24
 8009350:	e008      	b.n	8009364 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009352:	4b07      	ldr	r3, [pc, #28]	; (8009370 <xTimerGenericCommand+0x98>)
 8009354:	6818      	ldr	r0, [r3, #0]
 8009356:	f107 0110 	add.w	r1, r7, #16
 800935a:	2300      	movs	r3, #0
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	f7fe f9b1 	bl	80076c4 <xQueueGenericSendFromISR>
 8009362:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009366:	4618      	mov	r0, r3
 8009368:	3728      	adds	r7, #40	; 0x28
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	200012b4 	.word	0x200012b4

08009374 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af02      	add	r7, sp, #8
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800937e:	4b22      	ldr	r3, [pc, #136]	; (8009408 <prvProcessExpiredTimer+0x94>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	3304      	adds	r3, #4
 800938c:	4618      	mov	r0, r3
 800938e:	f7fd ff33 	bl	80071f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b00      	cmp	r3, #0
 800939e:	d022      	beq.n	80093e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	699a      	ldr	r2, [r3, #24]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	18d1      	adds	r1, r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	6978      	ldr	r0, [r7, #20]
 80093ae:	f000 f8d1 	bl	8009554 <prvInsertTimerInActiveList>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d01f      	beq.n	80093f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093b8:	2300      	movs	r3, #0
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	2300      	movs	r3, #0
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	2100      	movs	r1, #0
 80093c2:	6978      	ldr	r0, [r7, #20]
 80093c4:	f7ff ff88 	bl	80092d8 <xTimerGenericCommand>
 80093c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d113      	bne.n	80093f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	60fb      	str	r3, [r7, #12]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093ec:	f023 0301 	bic.w	r3, r3, #1
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	6a1b      	ldr	r3, [r3, #32]
 80093fc:	6978      	ldr	r0, [r7, #20]
 80093fe:	4798      	blx	r3
}
 8009400:	bf00      	nop
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	200012ac 	.word	0x200012ac

0800940c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009414:	f107 0308 	add.w	r3, r7, #8
 8009418:	4618      	mov	r0, r3
 800941a:	f000 f857 	bl	80094cc <prvGetNextExpireTime>
 800941e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4619      	mov	r1, r3
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 f803 	bl	8009430 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800942a:	f000 f8d5 	bl	80095d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800942e:	e7f1      	b.n	8009414 <prvTimerTask+0x8>

08009430 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800943a:	f7fe ff77 	bl	800832c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800943e:	f107 0308 	add.w	r3, r7, #8
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f866 	bl	8009514 <prvSampleTimeNow>
 8009448:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d130      	bne.n	80094b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10a      	bne.n	800946c <prvProcessTimerOrBlockTask+0x3c>
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	429a      	cmp	r2, r3
 800945c:	d806      	bhi.n	800946c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800945e:	f7fe ff73 	bl	8008348 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009462:	68f9      	ldr	r1, [r7, #12]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7ff ff85 	bl	8009374 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800946a:	e024      	b.n	80094b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d008      	beq.n	8009484 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009472:	4b13      	ldr	r3, [pc, #76]	; (80094c0 <prvProcessTimerOrBlockTask+0x90>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <prvProcessTimerOrBlockTask+0x50>
 800947c:	2301      	movs	r3, #1
 800947e:	e000      	b.n	8009482 <prvProcessTimerOrBlockTask+0x52>
 8009480:	2300      	movs	r3, #0
 8009482:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009484:	4b0f      	ldr	r3, [pc, #60]	; (80094c4 <prvProcessTimerOrBlockTask+0x94>)
 8009486:	6818      	ldr	r0, [r3, #0]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	4619      	mov	r1, r3
 8009492:	f7fe fc4d 	bl	8007d30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009496:	f7fe ff57 	bl	8008348 <xTaskResumeAll>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80094a0:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <prvProcessTimerOrBlockTask+0x98>)
 80094a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	f3bf 8f6f 	isb	sy
}
 80094b0:	e001      	b.n	80094b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80094b2:	f7fe ff49 	bl	8008348 <xTaskResumeAll>
}
 80094b6:	bf00      	nop
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	200012b0 	.word	0x200012b0
 80094c4:	200012b4 	.word	0x200012b4
 80094c8:	e000ed04 	.word	0xe000ed04

080094cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094d4:	4b0e      	ldr	r3, [pc, #56]	; (8009510 <prvGetNextExpireTime+0x44>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <prvGetNextExpireTime+0x16>
 80094de:	2201      	movs	r2, #1
 80094e0:	e000      	b.n	80094e4 <prvGetNextExpireTime+0x18>
 80094e2:	2200      	movs	r2, #0
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d105      	bne.n	80094fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094f0:	4b07      	ldr	r3, [pc, #28]	; (8009510 <prvGetNextExpireTime+0x44>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60fb      	str	r3, [r7, #12]
 80094fa:	e001      	b.n	8009500 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094fc:	2300      	movs	r3, #0
 80094fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009500:	68fb      	ldr	r3, [r7, #12]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	200012ac 	.word	0x200012ac

08009514 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800951c:	f7fe ffb2 	bl	8008484 <xTaskGetTickCount>
 8009520:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009522:	4b0b      	ldr	r3, [pc, #44]	; (8009550 <prvSampleTimeNow+0x3c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	429a      	cmp	r2, r3
 800952a:	d205      	bcs.n	8009538 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800952c:	f000 f936 	bl	800979c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	e002      	b.n	800953e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800953e:	4a04      	ldr	r2, [pc, #16]	; (8009550 <prvSampleTimeNow+0x3c>)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009544:	68fb      	ldr	r3, [r7, #12]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	200012bc 	.word	0x200012bc

08009554 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009562:	2300      	movs	r3, #0
 8009564:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	429a      	cmp	r2, r3
 8009578:	d812      	bhi.n	80095a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	1ad2      	subs	r2, r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	429a      	cmp	r2, r3
 8009586:	d302      	bcc.n	800958e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009588:	2301      	movs	r3, #1
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	e01b      	b.n	80095c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800958e:	4b10      	ldr	r3, [pc, #64]	; (80095d0 <prvInsertTimerInActiveList+0x7c>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3304      	adds	r3, #4
 8009596:	4619      	mov	r1, r3
 8009598:	4610      	mov	r0, r2
 800959a:	f7fd fdf4 	bl	8007186 <vListInsert>
 800959e:	e012      	b.n	80095c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d206      	bcs.n	80095b6 <prvInsertTimerInActiveList+0x62>
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d302      	bcc.n	80095b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80095b0:	2301      	movs	r3, #1
 80095b2:	617b      	str	r3, [r7, #20]
 80095b4:	e007      	b.n	80095c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095b6:	4b07      	ldr	r3, [pc, #28]	; (80095d4 <prvInsertTimerInActiveList+0x80>)
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3304      	adds	r3, #4
 80095be:	4619      	mov	r1, r3
 80095c0:	4610      	mov	r0, r2
 80095c2:	f7fd fde0 	bl	8007186 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095c6:	697b      	ldr	r3, [r7, #20]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	200012b0 	.word	0x200012b0
 80095d4:	200012ac 	.word	0x200012ac

080095d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b08e      	sub	sp, #56	; 0x38
 80095dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095de:	e0ca      	b.n	8009776 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	da18      	bge.n	8009618 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095e6:	1d3b      	adds	r3, r7, #4
 80095e8:	3304      	adds	r3, #4
 80095ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10a      	bne.n	8009608 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	61fb      	str	r3, [r7, #28]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800960e:	6850      	ldr	r0, [r2, #4]
 8009610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009612:	6892      	ldr	r2, [r2, #8]
 8009614:	4611      	mov	r1, r2
 8009616:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	f2c0 80aa 	blt.w	8009774 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	3304      	adds	r3, #4
 8009630:	4618      	mov	r0, r3
 8009632:	f7fd fde1 	bl	80071f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009636:	463b      	mov	r3, r7
 8009638:	4618      	mov	r0, r3
 800963a:	f7ff ff6b 	bl	8009514 <prvSampleTimeNow>
 800963e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b09      	cmp	r3, #9
 8009644:	f200 8097 	bhi.w	8009776 <prvProcessReceivedCommands+0x19e>
 8009648:	a201      	add	r2, pc, #4	; (adr r2, 8009650 <prvProcessReceivedCommands+0x78>)
 800964a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964e:	bf00      	nop
 8009650:	08009679 	.word	0x08009679
 8009654:	08009679 	.word	0x08009679
 8009658:	08009679 	.word	0x08009679
 800965c:	080096ed 	.word	0x080096ed
 8009660:	08009701 	.word	0x08009701
 8009664:	0800974b 	.word	0x0800974b
 8009668:	08009679 	.word	0x08009679
 800966c:	08009679 	.word	0x08009679
 8009670:	080096ed 	.word	0x080096ed
 8009674:	08009701 	.word	0x08009701
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800967e:	f043 0301 	orr.w	r3, r3, #1
 8009682:	b2da      	uxtb	r2, r3
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	18d1      	adds	r1, r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009698:	f7ff ff5c 	bl	8009554 <prvInsertTimerInActiveList>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d069      	beq.n	8009776 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d05e      	beq.n	8009776 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	441a      	add	r2, r3
 80096c0:	2300      	movs	r3, #0
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	2300      	movs	r3, #0
 80096c6:	2100      	movs	r1, #0
 80096c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ca:	f7ff fe05 	bl	80092d8 <xTimerGenericCommand>
 80096ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d14f      	bne.n	8009776 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80096d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096da:	f383 8811 	msr	BASEPRI, r3
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	61bb      	str	r3, [r7, #24]
}
 80096e8:	bf00      	nop
 80096ea:	e7fe      	b.n	80096ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f2:	f023 0301 	bic.w	r3, r3, #1
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80096fe:	e03a      	b.n	8009776 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009706:	f043 0301 	orr.w	r3, r3, #1
 800970a:	b2da      	uxtb	r2, r3
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10a      	bne.n	8009736 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	617b      	str	r3, [r7, #20]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009738:	699a      	ldr	r2, [r3, #24]
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	18d1      	adds	r1, r2, r3
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009744:	f7ff ff06 	bl	8009554 <prvInsertTimerInActiveList>
					break;
 8009748:	e015      	b.n	8009776 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800974a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d103      	bne.n	8009760 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800975a:	f000 fbe1 	bl	8009f20 <vPortFree>
 800975e:	e00a      	b.n	8009776 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009766:	f023 0301 	bic.w	r3, r3, #1
 800976a:	b2da      	uxtb	r2, r3
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009772:	e000      	b.n	8009776 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009774:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009776:	4b08      	ldr	r3, [pc, #32]	; (8009798 <prvProcessReceivedCommands+0x1c0>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	1d39      	adds	r1, r7, #4
 800977c:	2200      	movs	r2, #0
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe f83c 	bl	80077fc <xQueueReceive>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	f47f af2a 	bne.w	80095e0 <prvProcessReceivedCommands+0x8>
	}
}
 800978c:	bf00      	nop
 800978e:	bf00      	nop
 8009790:	3730      	adds	r7, #48	; 0x30
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	200012b4 	.word	0x200012b4

0800979c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097a2:	e048      	b.n	8009836 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097a4:	4b2d      	ldr	r3, [pc, #180]	; (800985c <prvSwitchTimerLists+0xc0>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ae:	4b2b      	ldr	r3, [pc, #172]	; (800985c <prvSwitchTimerLists+0xc0>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3304      	adds	r3, #4
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fd fd1b 	bl	80071f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d02e      	beq.n	8009836 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	4413      	add	r3, r2
 80097e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d90e      	bls.n	8009808 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097f6:	4b19      	ldr	r3, [pc, #100]	; (800985c <prvSwitchTimerLists+0xc0>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3304      	adds	r3, #4
 80097fe:	4619      	mov	r1, r3
 8009800:	4610      	mov	r0, r2
 8009802:	f7fd fcc0 	bl	8007186 <vListInsert>
 8009806:	e016      	b.n	8009836 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009808:	2300      	movs	r3, #0
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	2300      	movs	r3, #0
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	2100      	movs	r1, #0
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f7ff fd60 	bl	80092d8 <xTimerGenericCommand>
 8009818:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	603b      	str	r3, [r7, #0]
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009836:	4b09      	ldr	r3, [pc, #36]	; (800985c <prvSwitchTimerLists+0xc0>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1b1      	bne.n	80097a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009840:	4b06      	ldr	r3, [pc, #24]	; (800985c <prvSwitchTimerLists+0xc0>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009846:	4b06      	ldr	r3, [pc, #24]	; (8009860 <prvSwitchTimerLists+0xc4>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a04      	ldr	r2, [pc, #16]	; (800985c <prvSwitchTimerLists+0xc0>)
 800984c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800984e:	4a04      	ldr	r2, [pc, #16]	; (8009860 <prvSwitchTimerLists+0xc4>)
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	6013      	str	r3, [r2, #0]
}
 8009854:	bf00      	nop
 8009856:	3718      	adds	r7, #24
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	200012ac 	.word	0x200012ac
 8009860:	200012b0 	.word	0x200012b0

08009864 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800986a:	f000 f96b 	bl	8009b44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800986e:	4b15      	ldr	r3, [pc, #84]	; (80098c4 <prvCheckForValidListAndQueue+0x60>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d120      	bne.n	80098b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009876:	4814      	ldr	r0, [pc, #80]	; (80098c8 <prvCheckForValidListAndQueue+0x64>)
 8009878:	f7fd fc34 	bl	80070e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800987c:	4813      	ldr	r0, [pc, #76]	; (80098cc <prvCheckForValidListAndQueue+0x68>)
 800987e:	f7fd fc31 	bl	80070e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009882:	4b13      	ldr	r3, [pc, #76]	; (80098d0 <prvCheckForValidListAndQueue+0x6c>)
 8009884:	4a10      	ldr	r2, [pc, #64]	; (80098c8 <prvCheckForValidListAndQueue+0x64>)
 8009886:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009888:	4b12      	ldr	r3, [pc, #72]	; (80098d4 <prvCheckForValidListAndQueue+0x70>)
 800988a:	4a10      	ldr	r2, [pc, #64]	; (80098cc <prvCheckForValidListAndQueue+0x68>)
 800988c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800988e:	2300      	movs	r3, #0
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	4b11      	ldr	r3, [pc, #68]	; (80098d8 <prvCheckForValidListAndQueue+0x74>)
 8009894:	4a11      	ldr	r2, [pc, #68]	; (80098dc <prvCheckForValidListAndQueue+0x78>)
 8009896:	2110      	movs	r1, #16
 8009898:	200a      	movs	r0, #10
 800989a:	f7fd fd3f 	bl	800731c <xQueueGenericCreateStatic>
 800989e:	4603      	mov	r3, r0
 80098a0:	4a08      	ldr	r2, [pc, #32]	; (80098c4 <prvCheckForValidListAndQueue+0x60>)
 80098a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098a4:	4b07      	ldr	r3, [pc, #28]	; (80098c4 <prvCheckForValidListAndQueue+0x60>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d005      	beq.n	80098b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098ac:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <prvCheckForValidListAndQueue+0x60>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	490b      	ldr	r1, [pc, #44]	; (80098e0 <prvCheckForValidListAndQueue+0x7c>)
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe fa12 	bl	8007cdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098b8:	f000 f974 	bl	8009ba4 <vPortExitCritical>
}
 80098bc:	bf00      	nop
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	200012b4 	.word	0x200012b4
 80098c8:	20001284 	.word	0x20001284
 80098cc:	20001298 	.word	0x20001298
 80098d0:	200012ac 	.word	0x200012ac
 80098d4:	200012b0 	.word	0x200012b0
 80098d8:	20001360 	.word	0x20001360
 80098dc:	200012c0 	.word	0x200012c0
 80098e0:	0800b7c0 	.word	0x0800b7c0

080098e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	3b04      	subs	r3, #4
 80098f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3b04      	subs	r3, #4
 8009902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	f023 0201 	bic.w	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3b04      	subs	r3, #4
 8009912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009914:	4a0c      	ldr	r2, [pc, #48]	; (8009948 <pxPortInitialiseStack+0x64>)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3b14      	subs	r3, #20
 800991e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3b04      	subs	r3, #4
 800992a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f06f 0202 	mvn.w	r2, #2
 8009932:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	3b20      	subs	r3, #32
 8009938:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800993a:	68fb      	ldr	r3, [r7, #12]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	0800994d 	.word	0x0800994d

0800994c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009956:	4b12      	ldr	r3, [pc, #72]	; (80099a0 <prvTaskExitError+0x54>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800995e:	d00a      	beq.n	8009976 <prvTaskExitError+0x2a>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	60fb      	str	r3, [r7, #12]
}
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <prvTaskExitError+0x28>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	60bb      	str	r3, [r7, #8]
}
 8009988:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800998a:	bf00      	nop
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0fc      	beq.n	800998c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009992:	bf00      	nop
 8009994:	bf00      	nop
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	2000011c 	.word	0x2000011c
	...

080099b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099b0:	4b07      	ldr	r3, [pc, #28]	; (80099d0 <pxCurrentTCBConst2>)
 80099b2:	6819      	ldr	r1, [r3, #0]
 80099b4:	6808      	ldr	r0, [r1, #0]
 80099b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ba:	f380 8809 	msr	PSP, r0
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f04f 0000 	mov.w	r0, #0
 80099c6:	f380 8811 	msr	BASEPRI, r0
 80099ca:	4770      	bx	lr
 80099cc:	f3af 8000 	nop.w

080099d0 <pxCurrentTCBConst2>:
 80099d0:	20000d7c 	.word	0x20000d7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop

080099d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099d8:	4808      	ldr	r0, [pc, #32]	; (80099fc <prvPortStartFirstTask+0x24>)
 80099da:	6800      	ldr	r0, [r0, #0]
 80099dc:	6800      	ldr	r0, [r0, #0]
 80099de:	f380 8808 	msr	MSP, r0
 80099e2:	f04f 0000 	mov.w	r0, #0
 80099e6:	f380 8814 	msr	CONTROL, r0
 80099ea:	b662      	cpsie	i
 80099ec:	b661      	cpsie	f
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	df00      	svc	0
 80099f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099fa:	bf00      	nop
 80099fc:	e000ed08 	.word	0xe000ed08

08009a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a06:	4b46      	ldr	r3, [pc, #280]	; (8009b20 <xPortStartScheduler+0x120>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a46      	ldr	r2, [pc, #280]	; (8009b24 <xPortStartScheduler+0x124>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d10a      	bne.n	8009a26 <xPortStartScheduler+0x26>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	613b      	str	r3, [r7, #16]
}
 8009a22:	bf00      	nop
 8009a24:	e7fe      	b.n	8009a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a26:	4b3e      	ldr	r3, [pc, #248]	; (8009b20 <xPortStartScheduler+0x120>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a3f      	ldr	r2, [pc, #252]	; (8009b28 <xPortStartScheduler+0x128>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d10a      	bne.n	8009a46 <xPortStartScheduler+0x46>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	60fb      	str	r3, [r7, #12]
}
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a46:	4b39      	ldr	r3, [pc, #228]	; (8009b2c <xPortStartScheduler+0x12c>)
 8009a48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	22ff      	movs	r2, #255	; 0xff
 8009a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	4b31      	ldr	r3, [pc, #196]	; (8009b30 <xPortStartScheduler+0x130>)
 8009a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a6e:	4b31      	ldr	r3, [pc, #196]	; (8009b34 <xPortStartScheduler+0x134>)
 8009a70:	2207      	movs	r2, #7
 8009a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a74:	e009      	b.n	8009a8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a76:	4b2f      	ldr	r3, [pc, #188]	; (8009b34 <xPortStartScheduler+0x134>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	4a2d      	ldr	r2, [pc, #180]	; (8009b34 <xPortStartScheduler+0x134>)
 8009a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a92:	2b80      	cmp	r3, #128	; 0x80
 8009a94:	d0ef      	beq.n	8009a76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a96:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <xPortStartScheduler+0x134>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f1c3 0307 	rsb	r3, r3, #7
 8009a9e:	2b04      	cmp	r3, #4
 8009aa0:	d00a      	beq.n	8009ab8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	60bb      	str	r3, [r7, #8]
}
 8009ab4:	bf00      	nop
 8009ab6:	e7fe      	b.n	8009ab6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ab8:	4b1e      	ldr	r3, [pc, #120]	; (8009b34 <xPortStartScheduler+0x134>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	021b      	lsls	r3, r3, #8
 8009abe:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <xPortStartScheduler+0x134>)
 8009ac0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ac2:	4b1c      	ldr	r3, [pc, #112]	; (8009b34 <xPortStartScheduler+0x134>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009aca:	4a1a      	ldr	r2, [pc, #104]	; (8009b34 <xPortStartScheduler+0x134>)
 8009acc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ad6:	4b18      	ldr	r3, [pc, #96]	; (8009b38 <xPortStartScheduler+0x138>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a17      	ldr	r2, [pc, #92]	; (8009b38 <xPortStartScheduler+0x138>)
 8009adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ae2:	4b15      	ldr	r3, [pc, #84]	; (8009b38 <xPortStartScheduler+0x138>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a14      	ldr	r2, [pc, #80]	; (8009b38 <xPortStartScheduler+0x138>)
 8009ae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009aec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009aee:	f000 f8dd 	bl	8009cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009af2:	4b12      	ldr	r3, [pc, #72]	; (8009b3c <xPortStartScheduler+0x13c>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009af8:	f000 f8fc 	bl	8009cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009afc:	4b10      	ldr	r3, [pc, #64]	; (8009b40 <xPortStartScheduler+0x140>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a0f      	ldr	r2, [pc, #60]	; (8009b40 <xPortStartScheduler+0x140>)
 8009b02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b08:	f7ff ff66 	bl	80099d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b0c:	f7fe fe14 	bl	8008738 <vTaskSwitchContext>
	prvTaskExitError();
 8009b10:	f7ff ff1c 	bl	800994c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	e000ed00 	.word	0xe000ed00
 8009b24:	410fc271 	.word	0x410fc271
 8009b28:	410fc270 	.word	0x410fc270
 8009b2c:	e000e400 	.word	0xe000e400
 8009b30:	200013b0 	.word	0x200013b0
 8009b34:	200013b4 	.word	0x200013b4
 8009b38:	e000ed20 	.word	0xe000ed20
 8009b3c:	2000011c 	.word	0x2000011c
 8009b40:	e000ef34 	.word	0xe000ef34

08009b44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	607b      	str	r3, [r7, #4]
}
 8009b5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <vPortEnterCritical+0x58>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3301      	adds	r3, #1
 8009b64:	4a0d      	ldr	r2, [pc, #52]	; (8009b9c <vPortEnterCritical+0x58>)
 8009b66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b68:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <vPortEnterCritical+0x58>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d10f      	bne.n	8009b90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <vPortEnterCritical+0x5c>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	603b      	str	r3, [r7, #0]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <vPortEnterCritical+0x4a>
	}
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	2000011c 	.word	0x2000011c
 8009ba0:	e000ed04 	.word	0xe000ed04

08009ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009baa:	4b12      	ldr	r3, [pc, #72]	; (8009bf4 <vPortExitCritical+0x50>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10a      	bne.n	8009bc8 <vPortExitCritical+0x24>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	607b      	str	r3, [r7, #4]
}
 8009bc4:	bf00      	nop
 8009bc6:	e7fe      	b.n	8009bc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bc8:	4b0a      	ldr	r3, [pc, #40]	; (8009bf4 <vPortExitCritical+0x50>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	4a09      	ldr	r2, [pc, #36]	; (8009bf4 <vPortExitCritical+0x50>)
 8009bd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bd2:	4b08      	ldr	r3, [pc, #32]	; (8009bf4 <vPortExitCritical+0x50>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d105      	bne.n	8009be6 <vPortExitCritical+0x42>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	f383 8811 	msr	BASEPRI, r3
}
 8009be4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	2000011c 	.word	0x2000011c
	...

08009c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c00:	f3ef 8009 	mrs	r0, PSP
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <pxCurrentTCBConst>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	f01e 0f10 	tst.w	lr, #16
 8009c10:	bf08      	it	eq
 8009c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1a:	6010      	str	r0, [r2, #0]
 8009c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c24:	f380 8811 	msr	BASEPRI, r0
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f7fe fd82 	bl	8008738 <vTaskSwitchContext>
 8009c34:	f04f 0000 	mov.w	r0, #0
 8009c38:	f380 8811 	msr	BASEPRI, r0
 8009c3c:	bc09      	pop	{r0, r3}
 8009c3e:	6819      	ldr	r1, [r3, #0]
 8009c40:	6808      	ldr	r0, [r1, #0]
 8009c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c46:	f01e 0f10 	tst.w	lr, #16
 8009c4a:	bf08      	it	eq
 8009c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c50:	f380 8809 	msr	PSP, r0
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	f3af 8000 	nop.w

08009c60 <pxCurrentTCBConst>:
 8009c60:	20000d7c 	.word	0x20000d7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop

08009c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	607b      	str	r3, [r7, #4]
}
 8009c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c82:	f7fe fc9f 	bl	80085c4 <xTaskIncrementTick>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c8c:	4b06      	ldr	r3, [pc, #24]	; (8009ca8 <xPortSysTickHandler+0x40>)
 8009c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	2300      	movs	r3, #0
 8009c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	f383 8811 	msr	BASEPRI, r3
}
 8009c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	e000ed04 	.word	0xe000ed04

08009cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cac:	b480      	push	{r7}
 8009cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <vPortSetupTimerInterrupt+0x34>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cb6:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <vPortSetupTimerInterrupt+0x38>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	; (8009ce8 <vPortSetupTimerInterrupt+0x3c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a0a      	ldr	r2, [pc, #40]	; (8009cec <vPortSetupTimerInterrupt+0x40>)
 8009cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc6:	099b      	lsrs	r3, r3, #6
 8009cc8:	4a09      	ldr	r2, [pc, #36]	; (8009cf0 <vPortSetupTimerInterrupt+0x44>)
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cce:	4b04      	ldr	r3, [pc, #16]	; (8009ce0 <vPortSetupTimerInterrupt+0x34>)
 8009cd0:	2207      	movs	r2, #7
 8009cd2:	601a      	str	r2, [r3, #0]
}
 8009cd4:	bf00      	nop
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	e000e010 	.word	0xe000e010
 8009ce4:	e000e018 	.word	0xe000e018
 8009ce8:	20000000 	.word	0x20000000
 8009cec:	10624dd3 	.word	0x10624dd3
 8009cf0:	e000e014 	.word	0xe000e014

08009cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d04 <vPortEnableVFP+0x10>
 8009cf8:	6801      	ldr	r1, [r0, #0]
 8009cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cfe:	6001      	str	r1, [r0, #0]
 8009d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d02:	bf00      	nop
 8009d04:	e000ed88 	.word	0xe000ed88

08009d08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d0e:	f3ef 8305 	mrs	r3, IPSR
 8009d12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b0f      	cmp	r3, #15
 8009d18:	d914      	bls.n	8009d44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d1a:	4a17      	ldr	r2, [pc, #92]	; (8009d78 <vPortValidateInterruptPriority+0x70>)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4413      	add	r3, r2
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d24:	4b15      	ldr	r3, [pc, #84]	; (8009d7c <vPortValidateInterruptPriority+0x74>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	7afa      	ldrb	r2, [r7, #11]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d20a      	bcs.n	8009d44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	607b      	str	r3, [r7, #4]
}
 8009d40:	bf00      	nop
 8009d42:	e7fe      	b.n	8009d42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d44:	4b0e      	ldr	r3, [pc, #56]	; (8009d80 <vPortValidateInterruptPriority+0x78>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d4c:	4b0d      	ldr	r3, [pc, #52]	; (8009d84 <vPortValidateInterruptPriority+0x7c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d90a      	bls.n	8009d6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	603b      	str	r3, [r7, #0]
}
 8009d66:	bf00      	nop
 8009d68:	e7fe      	b.n	8009d68 <vPortValidateInterruptPriority+0x60>
	}
 8009d6a:	bf00      	nop
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	e000e3f0 	.word	0xe000e3f0
 8009d7c:	200013b0 	.word	0x200013b0
 8009d80:	e000ed0c 	.word	0xe000ed0c
 8009d84:	200013b4 	.word	0x200013b4

08009d88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08a      	sub	sp, #40	; 0x28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d90:	2300      	movs	r3, #0
 8009d92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d94:	f7fe faca 	bl	800832c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d98:	4b5b      	ldr	r3, [pc, #364]	; (8009f08 <pvPortMalloc+0x180>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009da0:	f000 f92c 	bl	8009ffc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009da4:	4b59      	ldr	r3, [pc, #356]	; (8009f0c <pvPortMalloc+0x184>)
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4013      	ands	r3, r2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f040 8093 	bne.w	8009ed8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d01d      	beq.n	8009df4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009db8:	2208      	movs	r2, #8
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f003 0307 	and.w	r3, r3, #7
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d014      	beq.n	8009df4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f023 0307 	bic.w	r3, r3, #7
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f003 0307 	and.w	r3, r3, #7
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00a      	beq.n	8009df4 <pvPortMalloc+0x6c>
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	617b      	str	r3, [r7, #20]
}
 8009df0:	bf00      	nop
 8009df2:	e7fe      	b.n	8009df2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d06e      	beq.n	8009ed8 <pvPortMalloc+0x150>
 8009dfa:	4b45      	ldr	r3, [pc, #276]	; (8009f10 <pvPortMalloc+0x188>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d869      	bhi.n	8009ed8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e04:	4b43      	ldr	r3, [pc, #268]	; (8009f14 <pvPortMalloc+0x18c>)
 8009e06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e08:	4b42      	ldr	r3, [pc, #264]	; (8009f14 <pvPortMalloc+0x18c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e0e:	e004      	b.n	8009e1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d903      	bls.n	8009e2c <pvPortMalloc+0xa4>
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1f1      	bne.n	8009e10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e2c:	4b36      	ldr	r3, [pc, #216]	; (8009f08 <pvPortMalloc+0x180>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d050      	beq.n	8009ed8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2208      	movs	r2, #8
 8009e3c:	4413      	add	r3, r2
 8009e3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	1ad2      	subs	r2, r2, r3
 8009e50:	2308      	movs	r3, #8
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d91f      	bls.n	8009e98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <pvPortMalloc+0xf8>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	613b      	str	r3, [r7, #16]
}
 8009e7c:	bf00      	nop
 8009e7e:	e7fe      	b.n	8009e7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	685a      	ldr	r2, [r3, #4]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	1ad2      	subs	r2, r2, r3
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e92:	69b8      	ldr	r0, [r7, #24]
 8009e94:	f000 f914 	bl	800a0c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e98:	4b1d      	ldr	r3, [pc, #116]	; (8009f10 <pvPortMalloc+0x188>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	4a1b      	ldr	r2, [pc, #108]	; (8009f10 <pvPortMalloc+0x188>)
 8009ea4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ea6:	4b1a      	ldr	r3, [pc, #104]	; (8009f10 <pvPortMalloc+0x188>)
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	4b1b      	ldr	r3, [pc, #108]	; (8009f18 <pvPortMalloc+0x190>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d203      	bcs.n	8009eba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009eb2:	4b17      	ldr	r3, [pc, #92]	; (8009f10 <pvPortMalloc+0x188>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a18      	ldr	r2, [pc, #96]	; (8009f18 <pvPortMalloc+0x190>)
 8009eb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <pvPortMalloc+0x184>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	431a      	orrs	r2, r3
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ece:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <pvPortMalloc+0x194>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	4a11      	ldr	r2, [pc, #68]	; (8009f1c <pvPortMalloc+0x194>)
 8009ed6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ed8:	f7fe fa36 	bl	8008348 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00a      	beq.n	8009efc <pvPortMalloc+0x174>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	60fb      	str	r3, [r7, #12]
}
 8009ef8:	bf00      	nop
 8009efa:	e7fe      	b.n	8009efa <pvPortMalloc+0x172>
	return pvReturn;
 8009efc:	69fb      	ldr	r3, [r7, #28]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3728      	adds	r7, #40	; 0x28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	20004fc0 	.word	0x20004fc0
 8009f0c:	20004fd4 	.word	0x20004fd4
 8009f10:	20004fc4 	.word	0x20004fc4
 8009f14:	20004fb8 	.word	0x20004fb8
 8009f18:	20004fc8 	.word	0x20004fc8
 8009f1c:	20004fcc 	.word	0x20004fcc

08009f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d04d      	beq.n	8009fce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f32:	2308      	movs	r3, #8
 8009f34:	425b      	negs	r3, r3
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	4413      	add	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	685a      	ldr	r2, [r3, #4]
 8009f44:	4b24      	ldr	r3, [pc, #144]	; (8009fd8 <vPortFree+0xb8>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4013      	ands	r3, r2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10a      	bne.n	8009f64 <vPortFree+0x44>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	60fb      	str	r3, [r7, #12]
}
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00a      	beq.n	8009f82 <vPortFree+0x62>
	__asm volatile
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	60bb      	str	r3, [r7, #8]
}
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	685a      	ldr	r2, [r3, #4]
 8009f86:	4b14      	ldr	r3, [pc, #80]	; (8009fd8 <vPortFree+0xb8>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d01e      	beq.n	8009fce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d11a      	bne.n	8009fce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	4b0e      	ldr	r3, [pc, #56]	; (8009fd8 <vPortFree+0xb8>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	43db      	mvns	r3, r3
 8009fa2:	401a      	ands	r2, r3
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fa8:	f7fe f9c0 	bl	800832c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	; (8009fdc <vPortFree+0xbc>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	4a09      	ldr	r2, [pc, #36]	; (8009fdc <vPortFree+0xbc>)
 8009fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fba:	6938      	ldr	r0, [r7, #16]
 8009fbc:	f000 f880 	bl	800a0c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <vPortFree+0xc0>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	4a06      	ldr	r2, [pc, #24]	; (8009fe0 <vPortFree+0xc0>)
 8009fc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009fca:	f7fe f9bd 	bl	8008348 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fce:	bf00      	nop
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20004fd4 	.word	0x20004fd4
 8009fdc:	20004fc4 	.word	0x20004fc4
 8009fe0:	20004fd0 	.word	0x20004fd0

08009fe4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8009fe8:	4b03      	ldr	r3, [pc, #12]	; (8009ff8 <xPortGetFreeHeapSize+0x14>)
 8009fea:	681b      	ldr	r3, [r3, #0]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	20004fc4 	.word	0x20004fc4

08009ffc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a002:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a006:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a008:	4b27      	ldr	r3, [pc, #156]	; (800a0a8 <prvHeapInit+0xac>)
 800a00a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f003 0307 	and.w	r3, r3, #7
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00c      	beq.n	800a030 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	3307      	adds	r3, #7
 800a01a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f023 0307 	bic.w	r3, r3, #7
 800a022:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	4a1f      	ldr	r2, [pc, #124]	; (800a0a8 <prvHeapInit+0xac>)
 800a02c:	4413      	add	r3, r2
 800a02e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a034:	4a1d      	ldr	r2, [pc, #116]	; (800a0ac <prvHeapInit+0xb0>)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a03a:	4b1c      	ldr	r3, [pc, #112]	; (800a0ac <prvHeapInit+0xb0>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	4413      	add	r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a048:	2208      	movs	r2, #8
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	1a9b      	subs	r3, r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 0307 	bic.w	r3, r3, #7
 800a056:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4a15      	ldr	r2, [pc, #84]	; (800a0b0 <prvHeapInit+0xb4>)
 800a05c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a05e:	4b14      	ldr	r3, [pc, #80]	; (800a0b0 <prvHeapInit+0xb4>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2200      	movs	r2, #0
 800a064:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a066:	4b12      	ldr	r3, [pc, #72]	; (800a0b0 <prvHeapInit+0xb4>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2200      	movs	r2, #0
 800a06c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	1ad2      	subs	r2, r2, r3
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a07c:	4b0c      	ldr	r3, [pc, #48]	; (800a0b0 <prvHeapInit+0xb4>)
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	4a0a      	ldr	r2, [pc, #40]	; (800a0b4 <prvHeapInit+0xb8>)
 800a08a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	4a09      	ldr	r2, [pc, #36]	; (800a0b8 <prvHeapInit+0xbc>)
 800a092:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a094:	4b09      	ldr	r3, [pc, #36]	; (800a0bc <prvHeapInit+0xc0>)
 800a096:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a09a:	601a      	str	r2, [r3, #0]
}
 800a09c:	bf00      	nop
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	200013b8 	.word	0x200013b8
 800a0ac:	20004fb8 	.word	0x20004fb8
 800a0b0:	20004fc0 	.word	0x20004fc0
 800a0b4:	20004fc8 	.word	0x20004fc8
 800a0b8:	20004fc4 	.word	0x20004fc4
 800a0bc:	20004fd4 	.word	0x20004fd4

0800a0c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0c8:	4b28      	ldr	r3, [pc, #160]	; (800a16c <prvInsertBlockIntoFreeList+0xac>)
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	e002      	b.n	800a0d4 <prvInsertBlockIntoFreeList+0x14>
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	60fb      	str	r3, [r7, #12]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d8f7      	bhi.n	800a0ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d108      	bne.n	800a102 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	441a      	add	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	441a      	add	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	429a      	cmp	r2, r3
 800a114:	d118      	bne.n	800a148 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	4b15      	ldr	r3, [pc, #84]	; (800a170 <prvInsertBlockIntoFreeList+0xb0>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d00d      	beq.n	800a13e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	441a      	add	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	e008      	b.n	800a150 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a13e:	4b0c      	ldr	r3, [pc, #48]	; (800a170 <prvInsertBlockIntoFreeList+0xb0>)
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	e003      	b.n	800a150 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	429a      	cmp	r2, r3
 800a156:	d002      	beq.n	800a15e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a15e:	bf00      	nop
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	20004fb8 	.word	0x20004fb8
 800a170:	20004fc0 	.word	0x20004fc0

0800a174 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a178:	2200      	movs	r2, #0
 800a17a:	4912      	ldr	r1, [pc, #72]	; (800a1c4 <MX_USB_DEVICE_Init+0x50>)
 800a17c:	4812      	ldr	r0, [pc, #72]	; (800a1c8 <MX_USB_DEVICE_Init+0x54>)
 800a17e:	f7fb fba7 	bl	80058d0 <USBD_Init>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a188:	f7f6 fdfa 	bl	8000d80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a18c:	490f      	ldr	r1, [pc, #60]	; (800a1cc <MX_USB_DEVICE_Init+0x58>)
 800a18e:	480e      	ldr	r0, [pc, #56]	; (800a1c8 <MX_USB_DEVICE_Init+0x54>)
 800a190:	f7fb fbce 	bl	8005930 <USBD_RegisterClass>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a19a:	f7f6 fdf1 	bl	8000d80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a19e:	490c      	ldr	r1, [pc, #48]	; (800a1d0 <MX_USB_DEVICE_Init+0x5c>)
 800a1a0:	4809      	ldr	r0, [pc, #36]	; (800a1c8 <MX_USB_DEVICE_Init+0x54>)
 800a1a2:	f7fb faef 	bl	8005784 <USBD_CDC_RegisterInterface>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1ac:	f7f6 fde8 	bl	8000d80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1b0:	4805      	ldr	r0, [pc, #20]	; (800a1c8 <MX_USB_DEVICE_Init+0x54>)
 800a1b2:	f7fb fbe4 	bl	800597e <USBD_Start>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a1bc:	f7f6 fde0 	bl	8000d80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1c0:	bf00      	nop
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	20000134 	.word	0x20000134
 800a1c8:	2000a23c 	.word	0x2000a23c
 800a1cc:	20000018 	.word	0x20000018
 800a1d0:	20000120 	.word	0x20000120

0800a1d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1d8:	2200      	movs	r2, #0
 800a1da:	4905      	ldr	r1, [pc, #20]	; (800a1f0 <CDC_Init_FS+0x1c>)
 800a1dc:	4805      	ldr	r0, [pc, #20]	; (800a1f4 <CDC_Init_FS+0x20>)
 800a1de:	f7fb fae6 	bl	80057ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a1e2:	4905      	ldr	r1, [pc, #20]	; (800a1f8 <CDC_Init_FS+0x24>)
 800a1e4:	4803      	ldr	r0, [pc, #12]	; (800a1f4 <CDC_Init_FS+0x20>)
 800a1e6:	f7fb fb00 	bl	80057ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	2000ad0c 	.word	0x2000ad0c
 800a1f4:	2000a23c 	.word	0x2000a23c
 800a1f8:	2000a50c 	.word	0x2000a50c

0800a1fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a200:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a202:	4618      	mov	r0, r3
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	4603      	mov	r3, r0
 800a214:	6039      	str	r1, [r7, #0]
 800a216:	71fb      	strb	r3, [r7, #7]
 800a218:	4613      	mov	r3, r2
 800a21a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a21c:	79fb      	ldrb	r3, [r7, #7]
 800a21e:	2b23      	cmp	r3, #35	; 0x23
 800a220:	d84a      	bhi.n	800a2b8 <CDC_Control_FS+0xac>
 800a222:	a201      	add	r2, pc, #4	; (adr r2, 800a228 <CDC_Control_FS+0x1c>)
 800a224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a228:	0800a2b9 	.word	0x0800a2b9
 800a22c:	0800a2b9 	.word	0x0800a2b9
 800a230:	0800a2b9 	.word	0x0800a2b9
 800a234:	0800a2b9 	.word	0x0800a2b9
 800a238:	0800a2b9 	.word	0x0800a2b9
 800a23c:	0800a2b9 	.word	0x0800a2b9
 800a240:	0800a2b9 	.word	0x0800a2b9
 800a244:	0800a2b9 	.word	0x0800a2b9
 800a248:	0800a2b9 	.word	0x0800a2b9
 800a24c:	0800a2b9 	.word	0x0800a2b9
 800a250:	0800a2b9 	.word	0x0800a2b9
 800a254:	0800a2b9 	.word	0x0800a2b9
 800a258:	0800a2b9 	.word	0x0800a2b9
 800a25c:	0800a2b9 	.word	0x0800a2b9
 800a260:	0800a2b9 	.word	0x0800a2b9
 800a264:	0800a2b9 	.word	0x0800a2b9
 800a268:	0800a2b9 	.word	0x0800a2b9
 800a26c:	0800a2b9 	.word	0x0800a2b9
 800a270:	0800a2b9 	.word	0x0800a2b9
 800a274:	0800a2b9 	.word	0x0800a2b9
 800a278:	0800a2b9 	.word	0x0800a2b9
 800a27c:	0800a2b9 	.word	0x0800a2b9
 800a280:	0800a2b9 	.word	0x0800a2b9
 800a284:	0800a2b9 	.word	0x0800a2b9
 800a288:	0800a2b9 	.word	0x0800a2b9
 800a28c:	0800a2b9 	.word	0x0800a2b9
 800a290:	0800a2b9 	.word	0x0800a2b9
 800a294:	0800a2b9 	.word	0x0800a2b9
 800a298:	0800a2b9 	.word	0x0800a2b9
 800a29c:	0800a2b9 	.word	0x0800a2b9
 800a2a0:	0800a2b9 	.word	0x0800a2b9
 800a2a4:	0800a2b9 	.word	0x0800a2b9
 800a2a8:	0800a2b9 	.word	0x0800a2b9
 800a2ac:	0800a2b9 	.word	0x0800a2b9
 800a2b0:	0800a2b9 	.word	0x0800a2b9
 800a2b4:	0800a2b9 	.word	0x0800a2b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a2b8:	bf00      	nop
  }

  return (USBD_OK);
 800a2ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a2d2:	6879      	ldr	r1, [r7, #4]
 800a2d4:	4805      	ldr	r0, [pc, #20]	; (800a2ec <CDC_Receive_FS+0x24>)
 800a2d6:	f7fb fa88 	bl	80057ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2da:	4804      	ldr	r0, [pc, #16]	; (800a2ec <CDC_Receive_FS+0x24>)
 800a2dc:	f7fb face 	bl	800587c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	2000a23c 	.word	0x2000a23c

0800a2f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a300:	4b0d      	ldr	r3, [pc, #52]	; (800a338 <CDC_Transmit_FS+0x48>)
 800a302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a306:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a312:	2301      	movs	r3, #1
 800a314:	e00b      	b.n	800a32e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a316:	887b      	ldrh	r3, [r7, #2]
 800a318:	461a      	mov	r2, r3
 800a31a:	6879      	ldr	r1, [r7, #4]
 800a31c:	4806      	ldr	r0, [pc, #24]	; (800a338 <CDC_Transmit_FS+0x48>)
 800a31e:	f7fb fa46 	bl	80057ae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a322:	4805      	ldr	r0, [pc, #20]	; (800a338 <CDC_Transmit_FS+0x48>)
 800a324:	f7fb fa7a 	bl	800581c <USBD_CDC_TransmitPacket>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	2000a23c 	.word	0x2000a23c

0800a33c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	4613      	mov	r3, r2
 800a348:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a34e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a352:	4618      	mov	r0, r3
 800a354:	371c      	adds	r7, #28
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
	...

0800a360 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	6039      	str	r1, [r7, #0]
 800a36a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2212      	movs	r2, #18
 800a370:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a372:	4b03      	ldr	r3, [pc, #12]	; (800a380 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a374:	4618      	mov	r0, r3
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	20000150 	.word	0x20000150

0800a384 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	4603      	mov	r3, r0
 800a38c:	6039      	str	r1, [r7, #0]
 800a38e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	2204      	movs	r2, #4
 800a394:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a396:	4b03      	ldr	r3, [pc, #12]	; (800a3a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	20000164 	.word	0x20000164

0800a3a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	6039      	str	r1, [r7, #0]
 800a3b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3b4:	79fb      	ldrb	r3, [r7, #7]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d105      	bne.n	800a3c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	4907      	ldr	r1, [pc, #28]	; (800a3dc <USBD_FS_ProductStrDescriptor+0x34>)
 800a3be:	4808      	ldr	r0, [pc, #32]	; (800a3e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3c0:	f7fc fb0f 	bl	80069e2 <USBD_GetString>
 800a3c4:	e004      	b.n	800a3d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	4904      	ldr	r1, [pc, #16]	; (800a3dc <USBD_FS_ProductStrDescriptor+0x34>)
 800a3ca:	4805      	ldr	r0, [pc, #20]	; (800a3e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3cc:	f7fc fb09 	bl	80069e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3d0:	4b02      	ldr	r3, [pc, #8]	; (800a3dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	2000b50c 	.word	0x2000b50c
 800a3e0:	0800b7c8 	.word	0x0800b7c8

0800a3e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	6039      	str	r1, [r7, #0]
 800a3ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	4904      	ldr	r1, [pc, #16]	; (800a404 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a3f4:	4804      	ldr	r0, [pc, #16]	; (800a408 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a3f6:	f7fc faf4 	bl	80069e2 <USBD_GetString>
  return USBD_StrDesc;
 800a3fa:	4b02      	ldr	r3, [pc, #8]	; (800a404 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	2000b50c 	.word	0x2000b50c
 800a408:	0800b7e0 	.word	0x0800b7e0

0800a40c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	4603      	mov	r3, r0
 800a414:	6039      	str	r1, [r7, #0]
 800a416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	221a      	movs	r2, #26
 800a41c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a41e:	f000 f843 	bl	800a4a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a422:	4b02      	ldr	r3, [pc, #8]	; (800a42c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a424:	4618      	mov	r0, r3
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	20000168 	.word	0x20000168

0800a430 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	6039      	str	r1, [r7, #0]
 800a43a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a43c:	79fb      	ldrb	r3, [r7, #7]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d105      	bne.n	800a44e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	4907      	ldr	r1, [pc, #28]	; (800a464 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a446:	4808      	ldr	r0, [pc, #32]	; (800a468 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a448:	f7fc facb 	bl	80069e2 <USBD_GetString>
 800a44c:	e004      	b.n	800a458 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	4904      	ldr	r1, [pc, #16]	; (800a464 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a452:	4805      	ldr	r0, [pc, #20]	; (800a468 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a454:	f7fc fac5 	bl	80069e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a458:	4b02      	ldr	r3, [pc, #8]	; (800a464 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	2000b50c 	.word	0x2000b50c
 800a468:	0800b7f4 	.word	0x0800b7f4

0800a46c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	6039      	str	r1, [r7, #0]
 800a476:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a478:	79fb      	ldrb	r3, [r7, #7]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d105      	bne.n	800a48a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	4907      	ldr	r1, [pc, #28]	; (800a4a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a482:	4808      	ldr	r0, [pc, #32]	; (800a4a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a484:	f7fc faad 	bl	80069e2 <USBD_GetString>
 800a488:	e004      	b.n	800a494 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	4904      	ldr	r1, [pc, #16]	; (800a4a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a48e:	4805      	ldr	r0, [pc, #20]	; (800a4a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a490:	f7fc faa7 	bl	80069e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a494:	4b02      	ldr	r3, [pc, #8]	; (800a4a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a496:	4618      	mov	r0, r3
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	2000b50c 	.word	0x2000b50c
 800a4a4:	0800b800 	.word	0x0800b800

0800a4a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a4ae:	4b0f      	ldr	r3, [pc, #60]	; (800a4ec <Get_SerialNum+0x44>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4b4:	4b0e      	ldr	r3, [pc, #56]	; (800a4f0 <Get_SerialNum+0x48>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a4ba:	4b0e      	ldr	r3, [pc, #56]	; (800a4f4 <Get_SerialNum+0x4c>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d009      	beq.n	800a4e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a4ce:	2208      	movs	r2, #8
 800a4d0:	4909      	ldr	r1, [pc, #36]	; (800a4f8 <Get_SerialNum+0x50>)
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 f814 	bl	800a500 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4d8:	2204      	movs	r2, #4
 800a4da:	4908      	ldr	r1, [pc, #32]	; (800a4fc <Get_SerialNum+0x54>)
 800a4dc:	68b8      	ldr	r0, [r7, #8]
 800a4de:	f000 f80f 	bl	800a500 <IntToUnicode>
  }
}
 800a4e2:	bf00      	nop
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	1fff7a10 	.word	0x1fff7a10
 800a4f0:	1fff7a14 	.word	0x1fff7a14
 800a4f4:	1fff7a18 	.word	0x1fff7a18
 800a4f8:	2000016a 	.word	0x2000016a
 800a4fc:	2000017a 	.word	0x2000017a

0800a500 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a500:	b480      	push	{r7}
 800a502:	b087      	sub	sp, #28
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	4613      	mov	r3, r2
 800a50c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a50e:	2300      	movs	r3, #0
 800a510:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a512:	2300      	movs	r3, #0
 800a514:	75fb      	strb	r3, [r7, #23]
 800a516:	e027      	b.n	800a568 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	0f1b      	lsrs	r3, r3, #28
 800a51c:	2b09      	cmp	r3, #9
 800a51e:	d80b      	bhi.n	800a538 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	0f1b      	lsrs	r3, r3, #28
 800a524:	b2da      	uxtb	r2, r3
 800a526:	7dfb      	ldrb	r3, [r7, #23]
 800a528:	005b      	lsls	r3, r3, #1
 800a52a:	4619      	mov	r1, r3
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	440b      	add	r3, r1
 800a530:	3230      	adds	r2, #48	; 0x30
 800a532:	b2d2      	uxtb	r2, r2
 800a534:	701a      	strb	r2, [r3, #0]
 800a536:	e00a      	b.n	800a54e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	0f1b      	lsrs	r3, r3, #28
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	4619      	mov	r1, r3
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	440b      	add	r3, r1
 800a548:	3237      	adds	r2, #55	; 0x37
 800a54a:	b2d2      	uxtb	r2, r2
 800a54c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	011b      	lsls	r3, r3, #4
 800a552:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a554:	7dfb      	ldrb	r3, [r7, #23]
 800a556:	005b      	lsls	r3, r3, #1
 800a558:	3301      	adds	r3, #1
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	4413      	add	r3, r2
 800a55e:	2200      	movs	r2, #0
 800a560:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a562:	7dfb      	ldrb	r3, [r7, #23]
 800a564:	3301      	adds	r3, #1
 800a566:	75fb      	strb	r3, [r7, #23]
 800a568:	7dfa      	ldrb	r2, [r7, #23]
 800a56a:	79fb      	ldrb	r3, [r7, #7]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d3d3      	bcc.n	800a518 <IntToUnicode+0x18>
  }
}
 800a570:	bf00      	nop
 800a572:	bf00      	nop
 800a574:	371c      	adds	r7, #28
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
	...

0800a580 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b08a      	sub	sp, #40	; 0x28
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a588:	f107 0314 	add.w	r3, r7, #20
 800a58c:	2200      	movs	r2, #0
 800a58e:	601a      	str	r2, [r3, #0]
 800a590:	605a      	str	r2, [r3, #4]
 800a592:	609a      	str	r2, [r3, #8]
 800a594:	60da      	str	r2, [r3, #12]
 800a596:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5a0:	d147      	bne.n	800a632 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	613b      	str	r3, [r7, #16]
 800a5a6:	4b25      	ldr	r3, [pc, #148]	; (800a63c <HAL_PCD_MspInit+0xbc>)
 800a5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5aa:	4a24      	ldr	r2, [pc, #144]	; (800a63c <HAL_PCD_MspInit+0xbc>)
 800a5ac:	f043 0301 	orr.w	r3, r3, #1
 800a5b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a5b2:	4b22      	ldr	r3, [pc, #136]	; (800a63c <HAL_PCD_MspInit+0xbc>)
 800a5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	613b      	str	r3, [r7, #16]
 800a5bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a5be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a5cc:	f107 0314 	add.w	r3, r7, #20
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	481b      	ldr	r0, [pc, #108]	; (800a640 <HAL_PCD_MspInit+0xc0>)
 800a5d4:	f7f6 fe76 	bl	80012c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a5d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a5dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5de:	2302      	movs	r3, #2
 800a5e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5ea:	230a      	movs	r3, #10
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5ee:	f107 0314 	add.w	r3, r7, #20
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4812      	ldr	r0, [pc, #72]	; (800a640 <HAL_PCD_MspInit+0xc0>)
 800a5f6:	f7f6 fe65 	bl	80012c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a5fa:	4b10      	ldr	r3, [pc, #64]	; (800a63c <HAL_PCD_MspInit+0xbc>)
 800a5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5fe:	4a0f      	ldr	r2, [pc, #60]	; (800a63c <HAL_PCD_MspInit+0xbc>)
 800a600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a604:	6353      	str	r3, [r2, #52]	; 0x34
 800a606:	2300      	movs	r3, #0
 800a608:	60fb      	str	r3, [r7, #12]
 800a60a:	4b0c      	ldr	r3, [pc, #48]	; (800a63c <HAL_PCD_MspInit+0xbc>)
 800a60c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a60e:	4a0b      	ldr	r2, [pc, #44]	; (800a63c <HAL_PCD_MspInit+0xbc>)
 800a610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a614:	6453      	str	r3, [r2, #68]	; 0x44
 800a616:	4b09      	ldr	r3, [pc, #36]	; (800a63c <HAL_PCD_MspInit+0xbc>)
 800a618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a61a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a61e:	60fb      	str	r3, [r7, #12]
 800a620:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a622:	2200      	movs	r2, #0
 800a624:	2105      	movs	r1, #5
 800a626:	2043      	movs	r0, #67	; 0x43
 800a628:	f7f6 fe22 	bl	8001270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a62c:	2043      	movs	r0, #67	; 0x43
 800a62e:	f7f6 fe3b 	bl	80012a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a632:	bf00      	nop
 800a634:	3728      	adds	r7, #40	; 0x28
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	40023800 	.word	0x40023800
 800a640:	40020000 	.word	0x40020000

0800a644 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a658:	4619      	mov	r1, r3
 800a65a:	4610      	mov	r0, r2
 800a65c:	f7fb f9da 	bl	8005a14 <USBD_LL_SetupStage>
}
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a67a:	78fa      	ldrb	r2, [r7, #3]
 800a67c:	6879      	ldr	r1, [r7, #4]
 800a67e:	4613      	mov	r3, r2
 800a680:	00db      	lsls	r3, r3, #3
 800a682:	1a9b      	subs	r3, r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	440b      	add	r3, r1
 800a688:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	78fb      	ldrb	r3, [r7, #3]
 800a690:	4619      	mov	r1, r3
 800a692:	f7fb fa14 	bl	8005abe <USBD_LL_DataOutStage>
}
 800a696:	bf00      	nop
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a6b0:	78fa      	ldrb	r2, [r7, #3]
 800a6b2:	6879      	ldr	r1, [r7, #4]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	00db      	lsls	r3, r3, #3
 800a6b8:	1a9b      	subs	r3, r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	440b      	add	r3, r1
 800a6be:	3348      	adds	r3, #72	; 0x48
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	78fb      	ldrb	r3, [r7, #3]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	f7fb fa5d 	bl	8005b84 <USBD_LL_DataInStage>
}
 800a6ca:	bf00      	nop
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fb fb71 	bl	8005dc8 <USBD_LL_SOF>
}
 800a6e6:	bf00      	nop
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d102      	bne.n	800a708 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a702:	2300      	movs	r3, #0
 800a704:	73fb      	strb	r3, [r7, #15]
 800a706:	e008      	b.n	800a71a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d102      	bne.n	800a716 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a710:	2301      	movs	r3, #1
 800a712:	73fb      	strb	r3, [r7, #15]
 800a714:	e001      	b.n	800a71a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a716:	f7f6 fb33 	bl	8000d80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a720:	7bfa      	ldrb	r2, [r7, #15]
 800a722:	4611      	mov	r1, r2
 800a724:	4618      	mov	r0, r3
 800a726:	f7fb fb11 	bl	8005d4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a730:	4618      	mov	r0, r3
 800a732:	f7fb fabd 	bl	8005cb0 <USBD_LL_Reset>
}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
	...

0800a740 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fb fb0c 	bl	8005d6c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	6812      	ldr	r2, [r2, #0]
 800a762:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a766:	f043 0301 	orr.w	r3, r3, #1
 800a76a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a1b      	ldr	r3, [r3, #32]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d005      	beq.n	800a780 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a774:	4b04      	ldr	r3, [pc, #16]	; (800a788 <HAL_PCD_SuspendCallback+0x48>)
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	4a03      	ldr	r2, [pc, #12]	; (800a788 <HAL_PCD_SuspendCallback+0x48>)
 800a77a:	f043 0306 	orr.w	r3, r3, #6
 800a77e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a780:	bf00      	nop
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	e000ed00 	.word	0xe000ed00

0800a78c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fb fafc 	bl	8005d98 <USBD_LL_Resume>
}
 800a7a0:	bf00      	nop
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a7ba:	78fa      	ldrb	r2, [r7, #3]
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fb fb4a 	bl	8005e58 <USBD_LL_IsoOUTIncomplete>
}
 800a7c4:	bf00      	nop
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a7de:	78fa      	ldrb	r2, [r7, #3]
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fb fb12 	bl	8005e0c <USBD_LL_IsoINIncomplete>
}
 800a7e8:	bf00      	nop
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fb fb50 	bl	8005ea4 <USBD_LL_DevConnected>
}
 800a804:	bf00      	nop
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fb fb4d 	bl	8005eba <USBD_LL_DevDisconnected>
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d13c      	bne.n	800a8b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a838:	4a20      	ldr	r2, [pc, #128]	; (800a8bc <USBD_LL_Init+0x94>)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a1e      	ldr	r2, [pc, #120]	; (800a8bc <USBD_LL_Init+0x94>)
 800a844:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a848:	4b1c      	ldr	r3, [pc, #112]	; (800a8bc <USBD_LL_Init+0x94>)
 800a84a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a84e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a850:	4b1a      	ldr	r3, [pc, #104]	; (800a8bc <USBD_LL_Init+0x94>)
 800a852:	2204      	movs	r2, #4
 800a854:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a856:	4b19      	ldr	r3, [pc, #100]	; (800a8bc <USBD_LL_Init+0x94>)
 800a858:	2202      	movs	r2, #2
 800a85a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a85c:	4b17      	ldr	r3, [pc, #92]	; (800a8bc <USBD_LL_Init+0x94>)
 800a85e:	2200      	movs	r2, #0
 800a860:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a862:	4b16      	ldr	r3, [pc, #88]	; (800a8bc <USBD_LL_Init+0x94>)
 800a864:	2202      	movs	r2, #2
 800a866:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a868:	4b14      	ldr	r3, [pc, #80]	; (800a8bc <USBD_LL_Init+0x94>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a86e:	4b13      	ldr	r3, [pc, #76]	; (800a8bc <USBD_LL_Init+0x94>)
 800a870:	2200      	movs	r2, #0
 800a872:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a874:	4b11      	ldr	r3, [pc, #68]	; (800a8bc <USBD_LL_Init+0x94>)
 800a876:	2200      	movs	r2, #0
 800a878:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a87a:	4b10      	ldr	r3, [pc, #64]	; (800a8bc <USBD_LL_Init+0x94>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a880:	4b0e      	ldr	r3, [pc, #56]	; (800a8bc <USBD_LL_Init+0x94>)
 800a882:	2200      	movs	r2, #0
 800a884:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a886:	480d      	ldr	r0, [pc, #52]	; (800a8bc <USBD_LL_Init+0x94>)
 800a888:	f7f6 feeb 	bl	8001662 <HAL_PCD_Init>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a892:	f7f6 fa75 	bl	8000d80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a896:	2180      	movs	r1, #128	; 0x80
 800a898:	4808      	ldr	r0, [pc, #32]	; (800a8bc <USBD_LL_Init+0x94>)
 800a89a:	f7f8 f848 	bl	800292e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a89e:	2240      	movs	r2, #64	; 0x40
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	4806      	ldr	r0, [pc, #24]	; (800a8bc <USBD_LL_Init+0x94>)
 800a8a4:	f7f7 fffc 	bl	80028a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a8a8:	2280      	movs	r2, #128	; 0x80
 800a8aa:	2101      	movs	r1, #1
 800a8ac:	4803      	ldr	r0, [pc, #12]	; (800a8bc <USBD_LL_Init+0x94>)
 800a8ae:	f7f7 fff7 	bl	80028a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	2000b70c 	.word	0x2000b70c

0800a8c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7f6 ffe0 	bl	800189c <HAL_PCD_Start>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f000 f942 	bl	800ab6c <USBD_Get_USB_Status>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b084      	sub	sp, #16
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
 800a8fe:	4608      	mov	r0, r1
 800a900:	4611      	mov	r1, r2
 800a902:	461a      	mov	r2, r3
 800a904:	4603      	mov	r3, r0
 800a906:	70fb      	strb	r3, [r7, #3]
 800a908:	460b      	mov	r3, r1
 800a90a:	70bb      	strb	r3, [r7, #2]
 800a90c:	4613      	mov	r3, r2
 800a90e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a91e:	78bb      	ldrb	r3, [r7, #2]
 800a920:	883a      	ldrh	r2, [r7, #0]
 800a922:	78f9      	ldrb	r1, [r7, #3]
 800a924:	f7f7 fbc4 	bl	80020b0 <HAL_PCD_EP_Open>
 800a928:	4603      	mov	r3, r0
 800a92a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 f91c 	bl	800ab6c <USBD_Get_USB_Status>
 800a934:	4603      	mov	r3, r0
 800a936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a938:	7bbb      	ldrb	r3, [r7, #14]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	460b      	mov	r3, r1
 800a94c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a95c:	78fa      	ldrb	r2, [r7, #3]
 800a95e:	4611      	mov	r1, r2
 800a960:	4618      	mov	r0, r3
 800a962:	f7f7 fc0d 	bl	8002180 <HAL_PCD_EP_Close>
 800a966:	4603      	mov	r3, r0
 800a968:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a96a:	7bfb      	ldrb	r3, [r7, #15]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f000 f8fd 	bl	800ab6c <USBD_Get_USB_Status>
 800a972:	4603      	mov	r3, r0
 800a974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a976:	7bbb      	ldrb	r3, [r7, #14]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	460b      	mov	r3, r1
 800a98a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a99a:	78fa      	ldrb	r2, [r7, #3]
 800a99c:	4611      	mov	r1, r2
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7f7 fce5 	bl	800236e <HAL_PCD_EP_SetStall>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 f8de 	bl	800ab6c <USBD_Get_USB_Status>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9d8:	78fa      	ldrb	r2, [r7, #3]
 800a9da:	4611      	mov	r1, r2
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7f7 fd2a 	bl	8002436 <HAL_PCD_EP_ClrStall>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 f8bf 	bl	800ab6c <USBD_Get_USB_Status>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	460b      	mov	r3, r1
 800aa06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	da0b      	bge.n	800aa30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa1e:	68f9      	ldr	r1, [r7, #12]
 800aa20:	4613      	mov	r3, r2
 800aa22:	00db      	lsls	r3, r3, #3
 800aa24:	1a9b      	subs	r3, r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	440b      	add	r3, r1
 800aa2a:	333e      	adds	r3, #62	; 0x3e
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	e00b      	b.n	800aa48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa30:	78fb      	ldrb	r3, [r7, #3]
 800aa32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa36:	68f9      	ldr	r1, [r7, #12]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	00db      	lsls	r3, r3, #3
 800aa3c:	1a9b      	subs	r3, r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	440b      	add	r3, r1
 800aa42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa6e:	78fa      	ldrb	r2, [r7, #3]
 800aa70:	4611      	mov	r1, r2
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7f7 faf7 	bl	8002066 <HAL_PCD_SetAddress>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 f874 	bl	800ab6c <USBD_Get_USB_Status>
 800aa84:	4603      	mov	r3, r0
 800aa86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa88:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b086      	sub	sp, #24
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	60f8      	str	r0, [r7, #12]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aab0:	7af9      	ldrb	r1, [r7, #11]
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	f7f7 fc10 	bl	80022da <HAL_PCD_EP_Transmit>
 800aaba:	4603      	mov	r3, r0
 800aabc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 f853 	bl	800ab6c <USBD_Get_USB_Status>
 800aac6:	4603      	mov	r3, r0
 800aac8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aaca:	7dbb      	ldrb	r3, [r7, #22]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	607a      	str	r2, [r7, #4]
 800aade:	603b      	str	r3, [r7, #0]
 800aae0:	460b      	mov	r3, r1
 800aae2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aaf2:	7af9      	ldrb	r1, [r7, #11]
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	f7f7 fb8c 	bl	8002214 <HAL_PCD_EP_Receive>
 800aafc:	4603      	mov	r3, r0
 800aafe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab00:	7dfb      	ldrb	r3, [r7, #23]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 f832 	bl	800ab6c <USBD_Get_USB_Status>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab0c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b082      	sub	sp, #8
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab28:	78fa      	ldrb	r2, [r7, #3]
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7f7 fbbc 	bl	80022aa <HAL_PCD_EP_GetRxCount>
 800ab32:	4603      	mov	r3, r0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab44:	4b03      	ldr	r3, [pc, #12]	; (800ab54 <USBD_static_malloc+0x18>)
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	20004fd8 	.word	0x20004fd8

0800ab58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]

}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab7a:	79fb      	ldrb	r3, [r7, #7]
 800ab7c:	2b03      	cmp	r3, #3
 800ab7e:	d817      	bhi.n	800abb0 <USBD_Get_USB_Status+0x44>
 800ab80:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <USBD_Get_USB_Status+0x1c>)
 800ab82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab86:	bf00      	nop
 800ab88:	0800ab99 	.word	0x0800ab99
 800ab8c:	0800ab9f 	.word	0x0800ab9f
 800ab90:	0800aba5 	.word	0x0800aba5
 800ab94:	0800abab 	.word	0x0800abab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab9c:	e00b      	b.n	800abb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	73fb      	strb	r3, [r7, #15]
    break;
 800aba2:	e008      	b.n	800abb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aba4:	2301      	movs	r3, #1
 800aba6:	73fb      	strb	r3, [r7, #15]
    break;
 800aba8:	e005      	b.n	800abb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abaa:	2303      	movs	r3, #3
 800abac:	73fb      	strb	r3, [r7, #15]
    break;
 800abae:	e002      	b.n	800abb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abb0:	2303      	movs	r3, #3
 800abb2:	73fb      	strb	r3, [r7, #15]
    break;
 800abb4:	bf00      	nop
  }
  return usb_status;
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <__errno>:
 800abc4:	4b01      	ldr	r3, [pc, #4]	; (800abcc <__errno+0x8>)
 800abc6:	6818      	ldr	r0, [r3, #0]
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	20000184 	.word	0x20000184

0800abd0 <__libc_init_array>:
 800abd0:	b570      	push	{r4, r5, r6, lr}
 800abd2:	4d0d      	ldr	r5, [pc, #52]	; (800ac08 <__libc_init_array+0x38>)
 800abd4:	4c0d      	ldr	r4, [pc, #52]	; (800ac0c <__libc_init_array+0x3c>)
 800abd6:	1b64      	subs	r4, r4, r5
 800abd8:	10a4      	asrs	r4, r4, #2
 800abda:	2600      	movs	r6, #0
 800abdc:	42a6      	cmp	r6, r4
 800abde:	d109      	bne.n	800abf4 <__libc_init_array+0x24>
 800abe0:	4d0b      	ldr	r5, [pc, #44]	; (800ac10 <__libc_init_array+0x40>)
 800abe2:	4c0c      	ldr	r4, [pc, #48]	; (800ac14 <__libc_init_array+0x44>)
 800abe4:	f000 fd2c 	bl	800b640 <_init>
 800abe8:	1b64      	subs	r4, r4, r5
 800abea:	10a4      	asrs	r4, r4, #2
 800abec:	2600      	movs	r6, #0
 800abee:	42a6      	cmp	r6, r4
 800abf0:	d105      	bne.n	800abfe <__libc_init_array+0x2e>
 800abf2:	bd70      	pop	{r4, r5, r6, pc}
 800abf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf8:	4798      	blx	r3
 800abfa:	3601      	adds	r6, #1
 800abfc:	e7ee      	b.n	800abdc <__libc_init_array+0xc>
 800abfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac02:	4798      	blx	r3
 800ac04:	3601      	adds	r6, #1
 800ac06:	e7f2      	b.n	800abee <__libc_init_array+0x1e>
 800ac08:	0800b990 	.word	0x0800b990
 800ac0c:	0800b990 	.word	0x0800b990
 800ac10:	0800b990 	.word	0x0800b990
 800ac14:	0800b994 	.word	0x0800b994

0800ac18 <__itoa>:
 800ac18:	1e93      	subs	r3, r2, #2
 800ac1a:	2b22      	cmp	r3, #34	; 0x22
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	460c      	mov	r4, r1
 800ac20:	d904      	bls.n	800ac2c <__itoa+0x14>
 800ac22:	2300      	movs	r3, #0
 800ac24:	700b      	strb	r3, [r1, #0]
 800ac26:	461c      	mov	r4, r3
 800ac28:	4620      	mov	r0, r4
 800ac2a:	bd10      	pop	{r4, pc}
 800ac2c:	2a0a      	cmp	r2, #10
 800ac2e:	d109      	bne.n	800ac44 <__itoa+0x2c>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	da07      	bge.n	800ac44 <__itoa+0x2c>
 800ac34:	232d      	movs	r3, #45	; 0x2d
 800ac36:	700b      	strb	r3, [r1, #0]
 800ac38:	4240      	negs	r0, r0
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	4421      	add	r1, r4
 800ac3e:	f000 f929 	bl	800ae94 <__utoa>
 800ac42:	e7f1      	b.n	800ac28 <__itoa+0x10>
 800ac44:	2100      	movs	r1, #0
 800ac46:	e7f9      	b.n	800ac3c <__itoa+0x24>

0800ac48 <itoa>:
 800ac48:	f7ff bfe6 	b.w	800ac18 <__itoa>

0800ac4c <__retarget_lock_acquire_recursive>:
 800ac4c:	4770      	bx	lr

0800ac4e <__retarget_lock_release_recursive>:
 800ac4e:	4770      	bx	lr

0800ac50 <memcpy>:
 800ac50:	440a      	add	r2, r1
 800ac52:	4291      	cmp	r1, r2
 800ac54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac58:	d100      	bne.n	800ac5c <memcpy+0xc>
 800ac5a:	4770      	bx	lr
 800ac5c:	b510      	push	{r4, lr}
 800ac5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac66:	4291      	cmp	r1, r2
 800ac68:	d1f9      	bne.n	800ac5e <memcpy+0xe>
 800ac6a:	bd10      	pop	{r4, pc}

0800ac6c <memset>:
 800ac6c:	4402      	add	r2, r0
 800ac6e:	4603      	mov	r3, r0
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d100      	bne.n	800ac76 <memset+0xa>
 800ac74:	4770      	bx	lr
 800ac76:	f803 1b01 	strb.w	r1, [r3], #1
 800ac7a:	e7f9      	b.n	800ac70 <memset+0x4>

0800ac7c <_malloc_r>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	1ccd      	adds	r5, r1, #3
 800ac80:	f025 0503 	bic.w	r5, r5, #3
 800ac84:	3508      	adds	r5, #8
 800ac86:	2d0c      	cmp	r5, #12
 800ac88:	bf38      	it	cc
 800ac8a:	250c      	movcc	r5, #12
 800ac8c:	2d00      	cmp	r5, #0
 800ac8e:	4606      	mov	r6, r0
 800ac90:	db01      	blt.n	800ac96 <_malloc_r+0x1a>
 800ac92:	42a9      	cmp	r1, r5
 800ac94:	d903      	bls.n	800ac9e <_malloc_r+0x22>
 800ac96:	230c      	movs	r3, #12
 800ac98:	6033      	str	r3, [r6, #0]
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac9e:	f000 f93b 	bl	800af18 <__malloc_lock>
 800aca2:	4921      	ldr	r1, [pc, #132]	; (800ad28 <_malloc_r+0xac>)
 800aca4:	680a      	ldr	r2, [r1, #0]
 800aca6:	4614      	mov	r4, r2
 800aca8:	b99c      	cbnz	r4, 800acd2 <_malloc_r+0x56>
 800acaa:	4f20      	ldr	r7, [pc, #128]	; (800ad2c <_malloc_r+0xb0>)
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	b923      	cbnz	r3, 800acba <_malloc_r+0x3e>
 800acb0:	4621      	mov	r1, r4
 800acb2:	4630      	mov	r0, r6
 800acb4:	f000 f8a6 	bl	800ae04 <_sbrk_r>
 800acb8:	6038      	str	r0, [r7, #0]
 800acba:	4629      	mov	r1, r5
 800acbc:	4630      	mov	r0, r6
 800acbe:	f000 f8a1 	bl	800ae04 <_sbrk_r>
 800acc2:	1c43      	adds	r3, r0, #1
 800acc4:	d123      	bne.n	800ad0e <_malloc_r+0x92>
 800acc6:	230c      	movs	r3, #12
 800acc8:	6033      	str	r3, [r6, #0]
 800acca:	4630      	mov	r0, r6
 800accc:	f000 f92a 	bl	800af24 <__malloc_unlock>
 800acd0:	e7e3      	b.n	800ac9a <_malloc_r+0x1e>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	1b5b      	subs	r3, r3, r5
 800acd6:	d417      	bmi.n	800ad08 <_malloc_r+0x8c>
 800acd8:	2b0b      	cmp	r3, #11
 800acda:	d903      	bls.n	800ace4 <_malloc_r+0x68>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	441c      	add	r4, r3
 800ace0:	6025      	str	r5, [r4, #0]
 800ace2:	e004      	b.n	800acee <_malloc_r+0x72>
 800ace4:	6863      	ldr	r3, [r4, #4]
 800ace6:	42a2      	cmp	r2, r4
 800ace8:	bf0c      	ite	eq
 800acea:	600b      	streq	r3, [r1, #0]
 800acec:	6053      	strne	r3, [r2, #4]
 800acee:	4630      	mov	r0, r6
 800acf0:	f000 f918 	bl	800af24 <__malloc_unlock>
 800acf4:	f104 000b 	add.w	r0, r4, #11
 800acf8:	1d23      	adds	r3, r4, #4
 800acfa:	f020 0007 	bic.w	r0, r0, #7
 800acfe:	1ac2      	subs	r2, r0, r3
 800ad00:	d0cc      	beq.n	800ac9c <_malloc_r+0x20>
 800ad02:	1a1b      	subs	r3, r3, r0
 800ad04:	50a3      	str	r3, [r4, r2]
 800ad06:	e7c9      	b.n	800ac9c <_malloc_r+0x20>
 800ad08:	4622      	mov	r2, r4
 800ad0a:	6864      	ldr	r4, [r4, #4]
 800ad0c:	e7cc      	b.n	800aca8 <_malloc_r+0x2c>
 800ad0e:	1cc4      	adds	r4, r0, #3
 800ad10:	f024 0403 	bic.w	r4, r4, #3
 800ad14:	42a0      	cmp	r0, r4
 800ad16:	d0e3      	beq.n	800ace0 <_malloc_r+0x64>
 800ad18:	1a21      	subs	r1, r4, r0
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f000 f872 	bl	800ae04 <_sbrk_r>
 800ad20:	3001      	adds	r0, #1
 800ad22:	d1dd      	bne.n	800ace0 <_malloc_r+0x64>
 800ad24:	e7cf      	b.n	800acc6 <_malloc_r+0x4a>
 800ad26:	bf00      	nop
 800ad28:	200051f8 	.word	0x200051f8
 800ad2c:	200051fc 	.word	0x200051fc

0800ad30 <cleanup_glue>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	460c      	mov	r4, r1
 800ad34:	6809      	ldr	r1, [r1, #0]
 800ad36:	4605      	mov	r5, r0
 800ad38:	b109      	cbz	r1, 800ad3e <cleanup_glue+0xe>
 800ad3a:	f7ff fff9 	bl	800ad30 <cleanup_glue>
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4628      	mov	r0, r5
 800ad42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad46:	f000 b8f3 	b.w	800af30 <_free_r>
	...

0800ad4c <_reclaim_reent>:
 800ad4c:	4b2c      	ldr	r3, [pc, #176]	; (800ae00 <_reclaim_reent+0xb4>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4283      	cmp	r3, r0
 800ad52:	b570      	push	{r4, r5, r6, lr}
 800ad54:	4604      	mov	r4, r0
 800ad56:	d051      	beq.n	800adfc <_reclaim_reent+0xb0>
 800ad58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ad5a:	b143      	cbz	r3, 800ad6e <_reclaim_reent+0x22>
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d14a      	bne.n	800adf8 <_reclaim_reent+0xac>
 800ad62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad64:	6819      	ldr	r1, [r3, #0]
 800ad66:	b111      	cbz	r1, 800ad6e <_reclaim_reent+0x22>
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f000 f8e1 	bl	800af30 <_free_r>
 800ad6e:	6961      	ldr	r1, [r4, #20]
 800ad70:	b111      	cbz	r1, 800ad78 <_reclaim_reent+0x2c>
 800ad72:	4620      	mov	r0, r4
 800ad74:	f000 f8dc 	bl	800af30 <_free_r>
 800ad78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ad7a:	b111      	cbz	r1, 800ad82 <_reclaim_reent+0x36>
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 f8d7 	bl	800af30 <_free_r>
 800ad82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ad84:	b111      	cbz	r1, 800ad8c <_reclaim_reent+0x40>
 800ad86:	4620      	mov	r0, r4
 800ad88:	f000 f8d2 	bl	800af30 <_free_r>
 800ad8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ad8e:	b111      	cbz	r1, 800ad96 <_reclaim_reent+0x4a>
 800ad90:	4620      	mov	r0, r4
 800ad92:	f000 f8cd 	bl	800af30 <_free_r>
 800ad96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ad98:	b111      	cbz	r1, 800ada0 <_reclaim_reent+0x54>
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 f8c8 	bl	800af30 <_free_r>
 800ada0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ada2:	b111      	cbz	r1, 800adaa <_reclaim_reent+0x5e>
 800ada4:	4620      	mov	r0, r4
 800ada6:	f000 f8c3 	bl	800af30 <_free_r>
 800adaa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800adac:	b111      	cbz	r1, 800adb4 <_reclaim_reent+0x68>
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 f8be 	bl	800af30 <_free_r>
 800adb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adb6:	b111      	cbz	r1, 800adbe <_reclaim_reent+0x72>
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 f8b9 	bl	800af30 <_free_r>
 800adbe:	69a3      	ldr	r3, [r4, #24]
 800adc0:	b1e3      	cbz	r3, 800adfc <_reclaim_reent+0xb0>
 800adc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800adc4:	4620      	mov	r0, r4
 800adc6:	4798      	blx	r3
 800adc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800adca:	b1b9      	cbz	r1, 800adfc <_reclaim_reent+0xb0>
 800adcc:	4620      	mov	r0, r4
 800adce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800add2:	f7ff bfad 	b.w	800ad30 <cleanup_glue>
 800add6:	5949      	ldr	r1, [r1, r5]
 800add8:	b941      	cbnz	r1, 800adec <_reclaim_reent+0xa0>
 800adda:	3504      	adds	r5, #4
 800addc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adde:	2d80      	cmp	r5, #128	; 0x80
 800ade0:	68d9      	ldr	r1, [r3, #12]
 800ade2:	d1f8      	bne.n	800add6 <_reclaim_reent+0x8a>
 800ade4:	4620      	mov	r0, r4
 800ade6:	f000 f8a3 	bl	800af30 <_free_r>
 800adea:	e7ba      	b.n	800ad62 <_reclaim_reent+0x16>
 800adec:	680e      	ldr	r6, [r1, #0]
 800adee:	4620      	mov	r0, r4
 800adf0:	f000 f89e 	bl	800af30 <_free_r>
 800adf4:	4631      	mov	r1, r6
 800adf6:	e7ef      	b.n	800add8 <_reclaim_reent+0x8c>
 800adf8:	2500      	movs	r5, #0
 800adfa:	e7ef      	b.n	800addc <_reclaim_reent+0x90>
 800adfc:	bd70      	pop	{r4, r5, r6, pc}
 800adfe:	bf00      	nop
 800ae00:	20000184 	.word	0x20000184

0800ae04 <_sbrk_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4d06      	ldr	r5, [pc, #24]	; (800ae20 <_sbrk_r+0x1c>)
 800ae08:	2300      	movs	r3, #0
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	4608      	mov	r0, r1
 800ae0e:	602b      	str	r3, [r5, #0]
 800ae10:	f7f6 f89e 	bl	8000f50 <_sbrk>
 800ae14:	1c43      	adds	r3, r0, #1
 800ae16:	d102      	bne.n	800ae1e <_sbrk_r+0x1a>
 800ae18:	682b      	ldr	r3, [r5, #0]
 800ae1a:	b103      	cbz	r3, 800ae1e <_sbrk_r+0x1a>
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	bd38      	pop	{r3, r4, r5, pc}
 800ae20:	2000bb20 	.word	0x2000bb20

0800ae24 <siprintf>:
 800ae24:	b40e      	push	{r1, r2, r3}
 800ae26:	b500      	push	{lr}
 800ae28:	b09c      	sub	sp, #112	; 0x70
 800ae2a:	ab1d      	add	r3, sp, #116	; 0x74
 800ae2c:	9002      	str	r0, [sp, #8]
 800ae2e:	9006      	str	r0, [sp, #24]
 800ae30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae34:	4809      	ldr	r0, [pc, #36]	; (800ae5c <siprintf+0x38>)
 800ae36:	9107      	str	r1, [sp, #28]
 800ae38:	9104      	str	r1, [sp, #16]
 800ae3a:	4909      	ldr	r1, [pc, #36]	; (800ae60 <siprintf+0x3c>)
 800ae3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae40:	9105      	str	r1, [sp, #20]
 800ae42:	6800      	ldr	r0, [r0, #0]
 800ae44:	9301      	str	r3, [sp, #4]
 800ae46:	a902      	add	r1, sp, #8
 800ae48:	f000 f91e 	bl	800b088 <_svfiprintf_r>
 800ae4c:	9b02      	ldr	r3, [sp, #8]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	701a      	strb	r2, [r3, #0]
 800ae52:	b01c      	add	sp, #112	; 0x70
 800ae54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae58:	b003      	add	sp, #12
 800ae5a:	4770      	bx	lr
 800ae5c:	20000184 	.word	0x20000184
 800ae60:	ffff0208 	.word	0xffff0208

0800ae64 <strcat>:
 800ae64:	b510      	push	{r4, lr}
 800ae66:	4602      	mov	r2, r0
 800ae68:	7814      	ldrb	r4, [r2, #0]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	3201      	adds	r2, #1
 800ae6e:	2c00      	cmp	r4, #0
 800ae70:	d1fa      	bne.n	800ae68 <strcat+0x4>
 800ae72:	3b01      	subs	r3, #1
 800ae74:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae78:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae7c:	2a00      	cmp	r2, #0
 800ae7e:	d1f9      	bne.n	800ae74 <strcat+0x10>
 800ae80:	bd10      	pop	{r4, pc}

0800ae82 <strcpy>:
 800ae82:	4603      	mov	r3, r0
 800ae84:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae88:	f803 2b01 	strb.w	r2, [r3], #1
 800ae8c:	2a00      	cmp	r2, #0
 800ae8e:	d1f9      	bne.n	800ae84 <strcpy+0x2>
 800ae90:	4770      	bx	lr
	...

0800ae94 <__utoa>:
 800ae94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae96:	4c1f      	ldr	r4, [pc, #124]	; (800af14 <__utoa+0x80>)
 800ae98:	b08b      	sub	sp, #44	; 0x2c
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	466e      	mov	r6, sp
 800aea0:	f104 0c20 	add.w	ip, r4, #32
 800aea4:	6820      	ldr	r0, [r4, #0]
 800aea6:	6861      	ldr	r1, [r4, #4]
 800aea8:	4637      	mov	r7, r6
 800aeaa:	c703      	stmia	r7!, {r0, r1}
 800aeac:	3408      	adds	r4, #8
 800aeae:	4564      	cmp	r4, ip
 800aeb0:	463e      	mov	r6, r7
 800aeb2:	d1f7      	bne.n	800aea4 <__utoa+0x10>
 800aeb4:	7921      	ldrb	r1, [r4, #4]
 800aeb6:	7139      	strb	r1, [r7, #4]
 800aeb8:	1e91      	subs	r1, r2, #2
 800aeba:	6820      	ldr	r0, [r4, #0]
 800aebc:	6038      	str	r0, [r7, #0]
 800aebe:	2922      	cmp	r1, #34	; 0x22
 800aec0:	f04f 0100 	mov.w	r1, #0
 800aec4:	d904      	bls.n	800aed0 <__utoa+0x3c>
 800aec6:	7019      	strb	r1, [r3, #0]
 800aec8:	460b      	mov	r3, r1
 800aeca:	4618      	mov	r0, r3
 800aecc:	b00b      	add	sp, #44	; 0x2c
 800aece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed0:	1e58      	subs	r0, r3, #1
 800aed2:	4684      	mov	ip, r0
 800aed4:	fbb5 f7f2 	udiv	r7, r5, r2
 800aed8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800aedc:	fb02 5617 	mls	r6, r2, r7, r5
 800aee0:	4476      	add	r6, lr
 800aee2:	460c      	mov	r4, r1
 800aee4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800aee8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800aeec:	462e      	mov	r6, r5
 800aeee:	42b2      	cmp	r2, r6
 800aef0:	f101 0101 	add.w	r1, r1, #1
 800aef4:	463d      	mov	r5, r7
 800aef6:	d9ed      	bls.n	800aed4 <__utoa+0x40>
 800aef8:	2200      	movs	r2, #0
 800aefa:	545a      	strb	r2, [r3, r1]
 800aefc:	1919      	adds	r1, r3, r4
 800aefe:	1aa5      	subs	r5, r4, r2
 800af00:	42aa      	cmp	r2, r5
 800af02:	dae2      	bge.n	800aeca <__utoa+0x36>
 800af04:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800af08:	780e      	ldrb	r6, [r1, #0]
 800af0a:	7006      	strb	r6, [r0, #0]
 800af0c:	3201      	adds	r2, #1
 800af0e:	f801 5901 	strb.w	r5, [r1], #-1
 800af12:	e7f4      	b.n	800aefe <__utoa+0x6a>
 800af14:	0800b930 	.word	0x0800b930

0800af18 <__malloc_lock>:
 800af18:	4801      	ldr	r0, [pc, #4]	; (800af20 <__malloc_lock+0x8>)
 800af1a:	f7ff be97 	b.w	800ac4c <__retarget_lock_acquire_recursive>
 800af1e:	bf00      	nop
 800af20:	2000bb18 	.word	0x2000bb18

0800af24 <__malloc_unlock>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__malloc_unlock+0x8>)
 800af26:	f7ff be92 	b.w	800ac4e <__retarget_lock_release_recursive>
 800af2a:	bf00      	nop
 800af2c:	2000bb18 	.word	0x2000bb18

0800af30 <_free_r>:
 800af30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af32:	2900      	cmp	r1, #0
 800af34:	d048      	beq.n	800afc8 <_free_r+0x98>
 800af36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af3a:	9001      	str	r0, [sp, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f1a1 0404 	sub.w	r4, r1, #4
 800af42:	bfb8      	it	lt
 800af44:	18e4      	addlt	r4, r4, r3
 800af46:	f7ff ffe7 	bl	800af18 <__malloc_lock>
 800af4a:	4a20      	ldr	r2, [pc, #128]	; (800afcc <_free_r+0x9c>)
 800af4c:	9801      	ldr	r0, [sp, #4]
 800af4e:	6813      	ldr	r3, [r2, #0]
 800af50:	4615      	mov	r5, r2
 800af52:	b933      	cbnz	r3, 800af62 <_free_r+0x32>
 800af54:	6063      	str	r3, [r4, #4]
 800af56:	6014      	str	r4, [r2, #0]
 800af58:	b003      	add	sp, #12
 800af5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af5e:	f7ff bfe1 	b.w	800af24 <__malloc_unlock>
 800af62:	42a3      	cmp	r3, r4
 800af64:	d90b      	bls.n	800af7e <_free_r+0x4e>
 800af66:	6821      	ldr	r1, [r4, #0]
 800af68:	1862      	adds	r2, r4, r1
 800af6a:	4293      	cmp	r3, r2
 800af6c:	bf04      	itt	eq
 800af6e:	681a      	ldreq	r2, [r3, #0]
 800af70:	685b      	ldreq	r3, [r3, #4]
 800af72:	6063      	str	r3, [r4, #4]
 800af74:	bf04      	itt	eq
 800af76:	1852      	addeq	r2, r2, r1
 800af78:	6022      	streq	r2, [r4, #0]
 800af7a:	602c      	str	r4, [r5, #0]
 800af7c:	e7ec      	b.n	800af58 <_free_r+0x28>
 800af7e:	461a      	mov	r2, r3
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	b10b      	cbz	r3, 800af88 <_free_r+0x58>
 800af84:	42a3      	cmp	r3, r4
 800af86:	d9fa      	bls.n	800af7e <_free_r+0x4e>
 800af88:	6811      	ldr	r1, [r2, #0]
 800af8a:	1855      	adds	r5, r2, r1
 800af8c:	42a5      	cmp	r5, r4
 800af8e:	d10b      	bne.n	800afa8 <_free_r+0x78>
 800af90:	6824      	ldr	r4, [r4, #0]
 800af92:	4421      	add	r1, r4
 800af94:	1854      	adds	r4, r2, r1
 800af96:	42a3      	cmp	r3, r4
 800af98:	6011      	str	r1, [r2, #0]
 800af9a:	d1dd      	bne.n	800af58 <_free_r+0x28>
 800af9c:	681c      	ldr	r4, [r3, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	6053      	str	r3, [r2, #4]
 800afa2:	4421      	add	r1, r4
 800afa4:	6011      	str	r1, [r2, #0]
 800afa6:	e7d7      	b.n	800af58 <_free_r+0x28>
 800afa8:	d902      	bls.n	800afb0 <_free_r+0x80>
 800afaa:	230c      	movs	r3, #12
 800afac:	6003      	str	r3, [r0, #0]
 800afae:	e7d3      	b.n	800af58 <_free_r+0x28>
 800afb0:	6825      	ldr	r5, [r4, #0]
 800afb2:	1961      	adds	r1, r4, r5
 800afb4:	428b      	cmp	r3, r1
 800afb6:	bf04      	itt	eq
 800afb8:	6819      	ldreq	r1, [r3, #0]
 800afba:	685b      	ldreq	r3, [r3, #4]
 800afbc:	6063      	str	r3, [r4, #4]
 800afbe:	bf04      	itt	eq
 800afc0:	1949      	addeq	r1, r1, r5
 800afc2:	6021      	streq	r1, [r4, #0]
 800afc4:	6054      	str	r4, [r2, #4]
 800afc6:	e7c7      	b.n	800af58 <_free_r+0x28>
 800afc8:	b003      	add	sp, #12
 800afca:	bd30      	pop	{r4, r5, pc}
 800afcc:	200051f8 	.word	0x200051f8

0800afd0 <__ssputs_r>:
 800afd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd4:	688e      	ldr	r6, [r1, #8]
 800afd6:	429e      	cmp	r6, r3
 800afd8:	4682      	mov	sl, r0
 800afda:	460c      	mov	r4, r1
 800afdc:	4690      	mov	r8, r2
 800afde:	461f      	mov	r7, r3
 800afe0:	d838      	bhi.n	800b054 <__ssputs_r+0x84>
 800afe2:	898a      	ldrh	r2, [r1, #12]
 800afe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800afe8:	d032      	beq.n	800b050 <__ssputs_r+0x80>
 800afea:	6825      	ldr	r5, [r4, #0]
 800afec:	6909      	ldr	r1, [r1, #16]
 800afee:	eba5 0901 	sub.w	r9, r5, r1
 800aff2:	6965      	ldr	r5, [r4, #20]
 800aff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800affc:	3301      	adds	r3, #1
 800affe:	444b      	add	r3, r9
 800b000:	106d      	asrs	r5, r5, #1
 800b002:	429d      	cmp	r5, r3
 800b004:	bf38      	it	cc
 800b006:	461d      	movcc	r5, r3
 800b008:	0553      	lsls	r3, r2, #21
 800b00a:	d531      	bpl.n	800b070 <__ssputs_r+0xa0>
 800b00c:	4629      	mov	r1, r5
 800b00e:	f7ff fe35 	bl	800ac7c <_malloc_r>
 800b012:	4606      	mov	r6, r0
 800b014:	b950      	cbnz	r0, 800b02c <__ssputs_r+0x5c>
 800b016:	230c      	movs	r3, #12
 800b018:	f8ca 3000 	str.w	r3, [sl]
 800b01c:	89a3      	ldrh	r3, [r4, #12]
 800b01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b022:	81a3      	strh	r3, [r4, #12]
 800b024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b02c:	6921      	ldr	r1, [r4, #16]
 800b02e:	464a      	mov	r2, r9
 800b030:	f7ff fe0e 	bl	800ac50 <memcpy>
 800b034:	89a3      	ldrh	r3, [r4, #12]
 800b036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b03e:	81a3      	strh	r3, [r4, #12]
 800b040:	6126      	str	r6, [r4, #16]
 800b042:	6165      	str	r5, [r4, #20]
 800b044:	444e      	add	r6, r9
 800b046:	eba5 0509 	sub.w	r5, r5, r9
 800b04a:	6026      	str	r6, [r4, #0]
 800b04c:	60a5      	str	r5, [r4, #8]
 800b04e:	463e      	mov	r6, r7
 800b050:	42be      	cmp	r6, r7
 800b052:	d900      	bls.n	800b056 <__ssputs_r+0x86>
 800b054:	463e      	mov	r6, r7
 800b056:	4632      	mov	r2, r6
 800b058:	6820      	ldr	r0, [r4, #0]
 800b05a:	4641      	mov	r1, r8
 800b05c:	f000 faa8 	bl	800b5b0 <memmove>
 800b060:	68a3      	ldr	r3, [r4, #8]
 800b062:	6822      	ldr	r2, [r4, #0]
 800b064:	1b9b      	subs	r3, r3, r6
 800b066:	4432      	add	r2, r6
 800b068:	60a3      	str	r3, [r4, #8]
 800b06a:	6022      	str	r2, [r4, #0]
 800b06c:	2000      	movs	r0, #0
 800b06e:	e7db      	b.n	800b028 <__ssputs_r+0x58>
 800b070:	462a      	mov	r2, r5
 800b072:	f000 fab7 	bl	800b5e4 <_realloc_r>
 800b076:	4606      	mov	r6, r0
 800b078:	2800      	cmp	r0, #0
 800b07a:	d1e1      	bne.n	800b040 <__ssputs_r+0x70>
 800b07c:	6921      	ldr	r1, [r4, #16]
 800b07e:	4650      	mov	r0, sl
 800b080:	f7ff ff56 	bl	800af30 <_free_r>
 800b084:	e7c7      	b.n	800b016 <__ssputs_r+0x46>
	...

0800b088 <_svfiprintf_r>:
 800b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08c:	4698      	mov	r8, r3
 800b08e:	898b      	ldrh	r3, [r1, #12]
 800b090:	061b      	lsls	r3, r3, #24
 800b092:	b09d      	sub	sp, #116	; 0x74
 800b094:	4607      	mov	r7, r0
 800b096:	460d      	mov	r5, r1
 800b098:	4614      	mov	r4, r2
 800b09a:	d50e      	bpl.n	800b0ba <_svfiprintf_r+0x32>
 800b09c:	690b      	ldr	r3, [r1, #16]
 800b09e:	b963      	cbnz	r3, 800b0ba <_svfiprintf_r+0x32>
 800b0a0:	2140      	movs	r1, #64	; 0x40
 800b0a2:	f7ff fdeb 	bl	800ac7c <_malloc_r>
 800b0a6:	6028      	str	r0, [r5, #0]
 800b0a8:	6128      	str	r0, [r5, #16]
 800b0aa:	b920      	cbnz	r0, 800b0b6 <_svfiprintf_r+0x2e>
 800b0ac:	230c      	movs	r3, #12
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0b4:	e0d1      	b.n	800b25a <_svfiprintf_r+0x1d2>
 800b0b6:	2340      	movs	r3, #64	; 0x40
 800b0b8:	616b      	str	r3, [r5, #20]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b0be:	2320      	movs	r3, #32
 800b0c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0c8:	2330      	movs	r3, #48	; 0x30
 800b0ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b274 <_svfiprintf_r+0x1ec>
 800b0ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0d2:	f04f 0901 	mov.w	r9, #1
 800b0d6:	4623      	mov	r3, r4
 800b0d8:	469a      	mov	sl, r3
 800b0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0de:	b10a      	cbz	r2, 800b0e4 <_svfiprintf_r+0x5c>
 800b0e0:	2a25      	cmp	r2, #37	; 0x25
 800b0e2:	d1f9      	bne.n	800b0d8 <_svfiprintf_r+0x50>
 800b0e4:	ebba 0b04 	subs.w	fp, sl, r4
 800b0e8:	d00b      	beq.n	800b102 <_svfiprintf_r+0x7a>
 800b0ea:	465b      	mov	r3, fp
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	4638      	mov	r0, r7
 800b0f2:	f7ff ff6d 	bl	800afd0 <__ssputs_r>
 800b0f6:	3001      	adds	r0, #1
 800b0f8:	f000 80aa 	beq.w	800b250 <_svfiprintf_r+0x1c8>
 800b0fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0fe:	445a      	add	r2, fp
 800b100:	9209      	str	r2, [sp, #36]	; 0x24
 800b102:	f89a 3000 	ldrb.w	r3, [sl]
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 80a2 	beq.w	800b250 <_svfiprintf_r+0x1c8>
 800b10c:	2300      	movs	r3, #0
 800b10e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b116:	f10a 0a01 	add.w	sl, sl, #1
 800b11a:	9304      	str	r3, [sp, #16]
 800b11c:	9307      	str	r3, [sp, #28]
 800b11e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b122:	931a      	str	r3, [sp, #104]	; 0x68
 800b124:	4654      	mov	r4, sl
 800b126:	2205      	movs	r2, #5
 800b128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b12c:	4851      	ldr	r0, [pc, #324]	; (800b274 <_svfiprintf_r+0x1ec>)
 800b12e:	f7f5 f857 	bl	80001e0 <memchr>
 800b132:	9a04      	ldr	r2, [sp, #16]
 800b134:	b9d8      	cbnz	r0, 800b16e <_svfiprintf_r+0xe6>
 800b136:	06d0      	lsls	r0, r2, #27
 800b138:	bf44      	itt	mi
 800b13a:	2320      	movmi	r3, #32
 800b13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b140:	0711      	lsls	r1, r2, #28
 800b142:	bf44      	itt	mi
 800b144:	232b      	movmi	r3, #43	; 0x2b
 800b146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b14a:	f89a 3000 	ldrb.w	r3, [sl]
 800b14e:	2b2a      	cmp	r3, #42	; 0x2a
 800b150:	d015      	beq.n	800b17e <_svfiprintf_r+0xf6>
 800b152:	9a07      	ldr	r2, [sp, #28]
 800b154:	4654      	mov	r4, sl
 800b156:	2000      	movs	r0, #0
 800b158:	f04f 0c0a 	mov.w	ip, #10
 800b15c:	4621      	mov	r1, r4
 800b15e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b162:	3b30      	subs	r3, #48	; 0x30
 800b164:	2b09      	cmp	r3, #9
 800b166:	d94e      	bls.n	800b206 <_svfiprintf_r+0x17e>
 800b168:	b1b0      	cbz	r0, 800b198 <_svfiprintf_r+0x110>
 800b16a:	9207      	str	r2, [sp, #28]
 800b16c:	e014      	b.n	800b198 <_svfiprintf_r+0x110>
 800b16e:	eba0 0308 	sub.w	r3, r0, r8
 800b172:	fa09 f303 	lsl.w	r3, r9, r3
 800b176:	4313      	orrs	r3, r2
 800b178:	9304      	str	r3, [sp, #16]
 800b17a:	46a2      	mov	sl, r4
 800b17c:	e7d2      	b.n	800b124 <_svfiprintf_r+0x9c>
 800b17e:	9b03      	ldr	r3, [sp, #12]
 800b180:	1d19      	adds	r1, r3, #4
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	9103      	str	r1, [sp, #12]
 800b186:	2b00      	cmp	r3, #0
 800b188:	bfbb      	ittet	lt
 800b18a:	425b      	neglt	r3, r3
 800b18c:	f042 0202 	orrlt.w	r2, r2, #2
 800b190:	9307      	strge	r3, [sp, #28]
 800b192:	9307      	strlt	r3, [sp, #28]
 800b194:	bfb8      	it	lt
 800b196:	9204      	strlt	r2, [sp, #16]
 800b198:	7823      	ldrb	r3, [r4, #0]
 800b19a:	2b2e      	cmp	r3, #46	; 0x2e
 800b19c:	d10c      	bne.n	800b1b8 <_svfiprintf_r+0x130>
 800b19e:	7863      	ldrb	r3, [r4, #1]
 800b1a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b1a2:	d135      	bne.n	800b210 <_svfiprintf_r+0x188>
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	1d1a      	adds	r2, r3, #4
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	9203      	str	r2, [sp, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	bfb8      	it	lt
 800b1b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b1b4:	3402      	adds	r4, #2
 800b1b6:	9305      	str	r3, [sp, #20]
 800b1b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b284 <_svfiprintf_r+0x1fc>
 800b1bc:	7821      	ldrb	r1, [r4, #0]
 800b1be:	2203      	movs	r2, #3
 800b1c0:	4650      	mov	r0, sl
 800b1c2:	f7f5 f80d 	bl	80001e0 <memchr>
 800b1c6:	b140      	cbz	r0, 800b1da <_svfiprintf_r+0x152>
 800b1c8:	2340      	movs	r3, #64	; 0x40
 800b1ca:	eba0 000a 	sub.w	r0, r0, sl
 800b1ce:	fa03 f000 	lsl.w	r0, r3, r0
 800b1d2:	9b04      	ldr	r3, [sp, #16]
 800b1d4:	4303      	orrs	r3, r0
 800b1d6:	3401      	adds	r4, #1
 800b1d8:	9304      	str	r3, [sp, #16]
 800b1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1de:	4826      	ldr	r0, [pc, #152]	; (800b278 <_svfiprintf_r+0x1f0>)
 800b1e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1e4:	2206      	movs	r2, #6
 800b1e6:	f7f4 fffb 	bl	80001e0 <memchr>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d038      	beq.n	800b260 <_svfiprintf_r+0x1d8>
 800b1ee:	4b23      	ldr	r3, [pc, #140]	; (800b27c <_svfiprintf_r+0x1f4>)
 800b1f0:	bb1b      	cbnz	r3, 800b23a <_svfiprintf_r+0x1b2>
 800b1f2:	9b03      	ldr	r3, [sp, #12]
 800b1f4:	3307      	adds	r3, #7
 800b1f6:	f023 0307 	bic.w	r3, r3, #7
 800b1fa:	3308      	adds	r3, #8
 800b1fc:	9303      	str	r3, [sp, #12]
 800b1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b200:	4433      	add	r3, r6
 800b202:	9309      	str	r3, [sp, #36]	; 0x24
 800b204:	e767      	b.n	800b0d6 <_svfiprintf_r+0x4e>
 800b206:	fb0c 3202 	mla	r2, ip, r2, r3
 800b20a:	460c      	mov	r4, r1
 800b20c:	2001      	movs	r0, #1
 800b20e:	e7a5      	b.n	800b15c <_svfiprintf_r+0xd4>
 800b210:	2300      	movs	r3, #0
 800b212:	3401      	adds	r4, #1
 800b214:	9305      	str	r3, [sp, #20]
 800b216:	4619      	mov	r1, r3
 800b218:	f04f 0c0a 	mov.w	ip, #10
 800b21c:	4620      	mov	r0, r4
 800b21e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b222:	3a30      	subs	r2, #48	; 0x30
 800b224:	2a09      	cmp	r2, #9
 800b226:	d903      	bls.n	800b230 <_svfiprintf_r+0x1a8>
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d0c5      	beq.n	800b1b8 <_svfiprintf_r+0x130>
 800b22c:	9105      	str	r1, [sp, #20]
 800b22e:	e7c3      	b.n	800b1b8 <_svfiprintf_r+0x130>
 800b230:	fb0c 2101 	mla	r1, ip, r1, r2
 800b234:	4604      	mov	r4, r0
 800b236:	2301      	movs	r3, #1
 800b238:	e7f0      	b.n	800b21c <_svfiprintf_r+0x194>
 800b23a:	ab03      	add	r3, sp, #12
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	462a      	mov	r2, r5
 800b240:	4b0f      	ldr	r3, [pc, #60]	; (800b280 <_svfiprintf_r+0x1f8>)
 800b242:	a904      	add	r1, sp, #16
 800b244:	4638      	mov	r0, r7
 800b246:	f3af 8000 	nop.w
 800b24a:	1c42      	adds	r2, r0, #1
 800b24c:	4606      	mov	r6, r0
 800b24e:	d1d6      	bne.n	800b1fe <_svfiprintf_r+0x176>
 800b250:	89ab      	ldrh	r3, [r5, #12]
 800b252:	065b      	lsls	r3, r3, #25
 800b254:	f53f af2c 	bmi.w	800b0b0 <_svfiprintf_r+0x28>
 800b258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b25a:	b01d      	add	sp, #116	; 0x74
 800b25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b260:	ab03      	add	r3, sp, #12
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	462a      	mov	r2, r5
 800b266:	4b06      	ldr	r3, [pc, #24]	; (800b280 <_svfiprintf_r+0x1f8>)
 800b268:	a904      	add	r1, sp, #16
 800b26a:	4638      	mov	r0, r7
 800b26c:	f000 f87a 	bl	800b364 <_printf_i>
 800b270:	e7eb      	b.n	800b24a <_svfiprintf_r+0x1c2>
 800b272:	bf00      	nop
 800b274:	0800b955 	.word	0x0800b955
 800b278:	0800b95f 	.word	0x0800b95f
 800b27c:	00000000 	.word	0x00000000
 800b280:	0800afd1 	.word	0x0800afd1
 800b284:	0800b95b 	.word	0x0800b95b

0800b288 <_printf_common>:
 800b288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b28c:	4616      	mov	r6, r2
 800b28e:	4699      	mov	r9, r3
 800b290:	688a      	ldr	r2, [r1, #8]
 800b292:	690b      	ldr	r3, [r1, #16]
 800b294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b298:	4293      	cmp	r3, r2
 800b29a:	bfb8      	it	lt
 800b29c:	4613      	movlt	r3, r2
 800b29e:	6033      	str	r3, [r6, #0]
 800b2a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2a4:	4607      	mov	r7, r0
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	b10a      	cbz	r2, 800b2ae <_printf_common+0x26>
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	6033      	str	r3, [r6, #0]
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	0699      	lsls	r1, r3, #26
 800b2b2:	bf42      	ittt	mi
 800b2b4:	6833      	ldrmi	r3, [r6, #0]
 800b2b6:	3302      	addmi	r3, #2
 800b2b8:	6033      	strmi	r3, [r6, #0]
 800b2ba:	6825      	ldr	r5, [r4, #0]
 800b2bc:	f015 0506 	ands.w	r5, r5, #6
 800b2c0:	d106      	bne.n	800b2d0 <_printf_common+0x48>
 800b2c2:	f104 0a19 	add.w	sl, r4, #25
 800b2c6:	68e3      	ldr	r3, [r4, #12]
 800b2c8:	6832      	ldr	r2, [r6, #0]
 800b2ca:	1a9b      	subs	r3, r3, r2
 800b2cc:	42ab      	cmp	r3, r5
 800b2ce:	dc26      	bgt.n	800b31e <_printf_common+0x96>
 800b2d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2d4:	1e13      	subs	r3, r2, #0
 800b2d6:	6822      	ldr	r2, [r4, #0]
 800b2d8:	bf18      	it	ne
 800b2da:	2301      	movne	r3, #1
 800b2dc:	0692      	lsls	r2, r2, #26
 800b2de:	d42b      	bmi.n	800b338 <_printf_common+0xb0>
 800b2e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2e4:	4649      	mov	r1, r9
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	47c0      	blx	r8
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	d01e      	beq.n	800b32c <_printf_common+0xa4>
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	68e5      	ldr	r5, [r4, #12]
 800b2f2:	6832      	ldr	r2, [r6, #0]
 800b2f4:	f003 0306 	and.w	r3, r3, #6
 800b2f8:	2b04      	cmp	r3, #4
 800b2fa:	bf08      	it	eq
 800b2fc:	1aad      	subeq	r5, r5, r2
 800b2fe:	68a3      	ldr	r3, [r4, #8]
 800b300:	6922      	ldr	r2, [r4, #16]
 800b302:	bf0c      	ite	eq
 800b304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b308:	2500      	movne	r5, #0
 800b30a:	4293      	cmp	r3, r2
 800b30c:	bfc4      	itt	gt
 800b30e:	1a9b      	subgt	r3, r3, r2
 800b310:	18ed      	addgt	r5, r5, r3
 800b312:	2600      	movs	r6, #0
 800b314:	341a      	adds	r4, #26
 800b316:	42b5      	cmp	r5, r6
 800b318:	d11a      	bne.n	800b350 <_printf_common+0xc8>
 800b31a:	2000      	movs	r0, #0
 800b31c:	e008      	b.n	800b330 <_printf_common+0xa8>
 800b31e:	2301      	movs	r3, #1
 800b320:	4652      	mov	r2, sl
 800b322:	4649      	mov	r1, r9
 800b324:	4638      	mov	r0, r7
 800b326:	47c0      	blx	r8
 800b328:	3001      	adds	r0, #1
 800b32a:	d103      	bne.n	800b334 <_printf_common+0xac>
 800b32c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b334:	3501      	adds	r5, #1
 800b336:	e7c6      	b.n	800b2c6 <_printf_common+0x3e>
 800b338:	18e1      	adds	r1, r4, r3
 800b33a:	1c5a      	adds	r2, r3, #1
 800b33c:	2030      	movs	r0, #48	; 0x30
 800b33e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b342:	4422      	add	r2, r4
 800b344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b348:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b34c:	3302      	adds	r3, #2
 800b34e:	e7c7      	b.n	800b2e0 <_printf_common+0x58>
 800b350:	2301      	movs	r3, #1
 800b352:	4622      	mov	r2, r4
 800b354:	4649      	mov	r1, r9
 800b356:	4638      	mov	r0, r7
 800b358:	47c0      	blx	r8
 800b35a:	3001      	adds	r0, #1
 800b35c:	d0e6      	beq.n	800b32c <_printf_common+0xa4>
 800b35e:	3601      	adds	r6, #1
 800b360:	e7d9      	b.n	800b316 <_printf_common+0x8e>
	...

0800b364 <_printf_i>:
 800b364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b368:	460c      	mov	r4, r1
 800b36a:	4691      	mov	r9, r2
 800b36c:	7e27      	ldrb	r7, [r4, #24]
 800b36e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b370:	2f78      	cmp	r7, #120	; 0x78
 800b372:	4680      	mov	r8, r0
 800b374:	469a      	mov	sl, r3
 800b376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b37a:	d807      	bhi.n	800b38c <_printf_i+0x28>
 800b37c:	2f62      	cmp	r7, #98	; 0x62
 800b37e:	d80a      	bhi.n	800b396 <_printf_i+0x32>
 800b380:	2f00      	cmp	r7, #0
 800b382:	f000 80d8 	beq.w	800b536 <_printf_i+0x1d2>
 800b386:	2f58      	cmp	r7, #88	; 0x58
 800b388:	f000 80a3 	beq.w	800b4d2 <_printf_i+0x16e>
 800b38c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b394:	e03a      	b.n	800b40c <_printf_i+0xa8>
 800b396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b39a:	2b15      	cmp	r3, #21
 800b39c:	d8f6      	bhi.n	800b38c <_printf_i+0x28>
 800b39e:	a001      	add	r0, pc, #4	; (adr r0, 800b3a4 <_printf_i+0x40>)
 800b3a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b3a4:	0800b3fd 	.word	0x0800b3fd
 800b3a8:	0800b411 	.word	0x0800b411
 800b3ac:	0800b38d 	.word	0x0800b38d
 800b3b0:	0800b38d 	.word	0x0800b38d
 800b3b4:	0800b38d 	.word	0x0800b38d
 800b3b8:	0800b38d 	.word	0x0800b38d
 800b3bc:	0800b411 	.word	0x0800b411
 800b3c0:	0800b38d 	.word	0x0800b38d
 800b3c4:	0800b38d 	.word	0x0800b38d
 800b3c8:	0800b38d 	.word	0x0800b38d
 800b3cc:	0800b38d 	.word	0x0800b38d
 800b3d0:	0800b51d 	.word	0x0800b51d
 800b3d4:	0800b441 	.word	0x0800b441
 800b3d8:	0800b4ff 	.word	0x0800b4ff
 800b3dc:	0800b38d 	.word	0x0800b38d
 800b3e0:	0800b38d 	.word	0x0800b38d
 800b3e4:	0800b53f 	.word	0x0800b53f
 800b3e8:	0800b38d 	.word	0x0800b38d
 800b3ec:	0800b441 	.word	0x0800b441
 800b3f0:	0800b38d 	.word	0x0800b38d
 800b3f4:	0800b38d 	.word	0x0800b38d
 800b3f8:	0800b507 	.word	0x0800b507
 800b3fc:	680b      	ldr	r3, [r1, #0]
 800b3fe:	1d1a      	adds	r2, r3, #4
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	600a      	str	r2, [r1, #0]
 800b404:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b40c:	2301      	movs	r3, #1
 800b40e:	e0a3      	b.n	800b558 <_printf_i+0x1f4>
 800b410:	6825      	ldr	r5, [r4, #0]
 800b412:	6808      	ldr	r0, [r1, #0]
 800b414:	062e      	lsls	r6, r5, #24
 800b416:	f100 0304 	add.w	r3, r0, #4
 800b41a:	d50a      	bpl.n	800b432 <_printf_i+0xce>
 800b41c:	6805      	ldr	r5, [r0, #0]
 800b41e:	600b      	str	r3, [r1, #0]
 800b420:	2d00      	cmp	r5, #0
 800b422:	da03      	bge.n	800b42c <_printf_i+0xc8>
 800b424:	232d      	movs	r3, #45	; 0x2d
 800b426:	426d      	negs	r5, r5
 800b428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b42c:	485e      	ldr	r0, [pc, #376]	; (800b5a8 <_printf_i+0x244>)
 800b42e:	230a      	movs	r3, #10
 800b430:	e019      	b.n	800b466 <_printf_i+0x102>
 800b432:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b436:	6805      	ldr	r5, [r0, #0]
 800b438:	600b      	str	r3, [r1, #0]
 800b43a:	bf18      	it	ne
 800b43c:	b22d      	sxthne	r5, r5
 800b43e:	e7ef      	b.n	800b420 <_printf_i+0xbc>
 800b440:	680b      	ldr	r3, [r1, #0]
 800b442:	6825      	ldr	r5, [r4, #0]
 800b444:	1d18      	adds	r0, r3, #4
 800b446:	6008      	str	r0, [r1, #0]
 800b448:	0628      	lsls	r0, r5, #24
 800b44a:	d501      	bpl.n	800b450 <_printf_i+0xec>
 800b44c:	681d      	ldr	r5, [r3, #0]
 800b44e:	e002      	b.n	800b456 <_printf_i+0xf2>
 800b450:	0669      	lsls	r1, r5, #25
 800b452:	d5fb      	bpl.n	800b44c <_printf_i+0xe8>
 800b454:	881d      	ldrh	r5, [r3, #0]
 800b456:	4854      	ldr	r0, [pc, #336]	; (800b5a8 <_printf_i+0x244>)
 800b458:	2f6f      	cmp	r7, #111	; 0x6f
 800b45a:	bf0c      	ite	eq
 800b45c:	2308      	moveq	r3, #8
 800b45e:	230a      	movne	r3, #10
 800b460:	2100      	movs	r1, #0
 800b462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b466:	6866      	ldr	r6, [r4, #4]
 800b468:	60a6      	str	r6, [r4, #8]
 800b46a:	2e00      	cmp	r6, #0
 800b46c:	bfa2      	ittt	ge
 800b46e:	6821      	ldrge	r1, [r4, #0]
 800b470:	f021 0104 	bicge.w	r1, r1, #4
 800b474:	6021      	strge	r1, [r4, #0]
 800b476:	b90d      	cbnz	r5, 800b47c <_printf_i+0x118>
 800b478:	2e00      	cmp	r6, #0
 800b47a:	d04d      	beq.n	800b518 <_printf_i+0x1b4>
 800b47c:	4616      	mov	r6, r2
 800b47e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b482:	fb03 5711 	mls	r7, r3, r1, r5
 800b486:	5dc7      	ldrb	r7, [r0, r7]
 800b488:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b48c:	462f      	mov	r7, r5
 800b48e:	42bb      	cmp	r3, r7
 800b490:	460d      	mov	r5, r1
 800b492:	d9f4      	bls.n	800b47e <_printf_i+0x11a>
 800b494:	2b08      	cmp	r3, #8
 800b496:	d10b      	bne.n	800b4b0 <_printf_i+0x14c>
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	07df      	lsls	r7, r3, #31
 800b49c:	d508      	bpl.n	800b4b0 <_printf_i+0x14c>
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	6861      	ldr	r1, [r4, #4]
 800b4a2:	4299      	cmp	r1, r3
 800b4a4:	bfde      	ittt	le
 800b4a6:	2330      	movle	r3, #48	; 0x30
 800b4a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4ac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b4b0:	1b92      	subs	r2, r2, r6
 800b4b2:	6122      	str	r2, [r4, #16]
 800b4b4:	f8cd a000 	str.w	sl, [sp]
 800b4b8:	464b      	mov	r3, r9
 800b4ba:	aa03      	add	r2, sp, #12
 800b4bc:	4621      	mov	r1, r4
 800b4be:	4640      	mov	r0, r8
 800b4c0:	f7ff fee2 	bl	800b288 <_printf_common>
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	d14c      	bne.n	800b562 <_printf_i+0x1fe>
 800b4c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4cc:	b004      	add	sp, #16
 800b4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d2:	4835      	ldr	r0, [pc, #212]	; (800b5a8 <_printf_i+0x244>)
 800b4d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	680e      	ldr	r6, [r1, #0]
 800b4dc:	061f      	lsls	r7, r3, #24
 800b4de:	f856 5b04 	ldr.w	r5, [r6], #4
 800b4e2:	600e      	str	r6, [r1, #0]
 800b4e4:	d514      	bpl.n	800b510 <_printf_i+0x1ac>
 800b4e6:	07d9      	lsls	r1, r3, #31
 800b4e8:	bf44      	itt	mi
 800b4ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b4ee:	6023      	strmi	r3, [r4, #0]
 800b4f0:	b91d      	cbnz	r5, 800b4fa <_printf_i+0x196>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	f023 0320 	bic.w	r3, r3, #32
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	2310      	movs	r3, #16
 800b4fc:	e7b0      	b.n	800b460 <_printf_i+0xfc>
 800b4fe:	6823      	ldr	r3, [r4, #0]
 800b500:	f043 0320 	orr.w	r3, r3, #32
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	2378      	movs	r3, #120	; 0x78
 800b508:	4828      	ldr	r0, [pc, #160]	; (800b5ac <_printf_i+0x248>)
 800b50a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b50e:	e7e3      	b.n	800b4d8 <_printf_i+0x174>
 800b510:	065e      	lsls	r6, r3, #25
 800b512:	bf48      	it	mi
 800b514:	b2ad      	uxthmi	r5, r5
 800b516:	e7e6      	b.n	800b4e6 <_printf_i+0x182>
 800b518:	4616      	mov	r6, r2
 800b51a:	e7bb      	b.n	800b494 <_printf_i+0x130>
 800b51c:	680b      	ldr	r3, [r1, #0]
 800b51e:	6826      	ldr	r6, [r4, #0]
 800b520:	6960      	ldr	r0, [r4, #20]
 800b522:	1d1d      	adds	r5, r3, #4
 800b524:	600d      	str	r5, [r1, #0]
 800b526:	0635      	lsls	r5, r6, #24
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	d501      	bpl.n	800b530 <_printf_i+0x1cc>
 800b52c:	6018      	str	r0, [r3, #0]
 800b52e:	e002      	b.n	800b536 <_printf_i+0x1d2>
 800b530:	0671      	lsls	r1, r6, #25
 800b532:	d5fb      	bpl.n	800b52c <_printf_i+0x1c8>
 800b534:	8018      	strh	r0, [r3, #0]
 800b536:	2300      	movs	r3, #0
 800b538:	6123      	str	r3, [r4, #16]
 800b53a:	4616      	mov	r6, r2
 800b53c:	e7ba      	b.n	800b4b4 <_printf_i+0x150>
 800b53e:	680b      	ldr	r3, [r1, #0]
 800b540:	1d1a      	adds	r2, r3, #4
 800b542:	600a      	str	r2, [r1, #0]
 800b544:	681e      	ldr	r6, [r3, #0]
 800b546:	6862      	ldr	r2, [r4, #4]
 800b548:	2100      	movs	r1, #0
 800b54a:	4630      	mov	r0, r6
 800b54c:	f7f4 fe48 	bl	80001e0 <memchr>
 800b550:	b108      	cbz	r0, 800b556 <_printf_i+0x1f2>
 800b552:	1b80      	subs	r0, r0, r6
 800b554:	6060      	str	r0, [r4, #4]
 800b556:	6863      	ldr	r3, [r4, #4]
 800b558:	6123      	str	r3, [r4, #16]
 800b55a:	2300      	movs	r3, #0
 800b55c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b560:	e7a8      	b.n	800b4b4 <_printf_i+0x150>
 800b562:	6923      	ldr	r3, [r4, #16]
 800b564:	4632      	mov	r2, r6
 800b566:	4649      	mov	r1, r9
 800b568:	4640      	mov	r0, r8
 800b56a:	47d0      	blx	sl
 800b56c:	3001      	adds	r0, #1
 800b56e:	d0ab      	beq.n	800b4c8 <_printf_i+0x164>
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	079b      	lsls	r3, r3, #30
 800b574:	d413      	bmi.n	800b59e <_printf_i+0x23a>
 800b576:	68e0      	ldr	r0, [r4, #12]
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	4298      	cmp	r0, r3
 800b57c:	bfb8      	it	lt
 800b57e:	4618      	movlt	r0, r3
 800b580:	e7a4      	b.n	800b4cc <_printf_i+0x168>
 800b582:	2301      	movs	r3, #1
 800b584:	4632      	mov	r2, r6
 800b586:	4649      	mov	r1, r9
 800b588:	4640      	mov	r0, r8
 800b58a:	47d0      	blx	sl
 800b58c:	3001      	adds	r0, #1
 800b58e:	d09b      	beq.n	800b4c8 <_printf_i+0x164>
 800b590:	3501      	adds	r5, #1
 800b592:	68e3      	ldr	r3, [r4, #12]
 800b594:	9903      	ldr	r1, [sp, #12]
 800b596:	1a5b      	subs	r3, r3, r1
 800b598:	42ab      	cmp	r3, r5
 800b59a:	dcf2      	bgt.n	800b582 <_printf_i+0x21e>
 800b59c:	e7eb      	b.n	800b576 <_printf_i+0x212>
 800b59e:	2500      	movs	r5, #0
 800b5a0:	f104 0619 	add.w	r6, r4, #25
 800b5a4:	e7f5      	b.n	800b592 <_printf_i+0x22e>
 800b5a6:	bf00      	nop
 800b5a8:	0800b966 	.word	0x0800b966
 800b5ac:	0800b977 	.word	0x0800b977

0800b5b0 <memmove>:
 800b5b0:	4288      	cmp	r0, r1
 800b5b2:	b510      	push	{r4, lr}
 800b5b4:	eb01 0402 	add.w	r4, r1, r2
 800b5b8:	d902      	bls.n	800b5c0 <memmove+0x10>
 800b5ba:	4284      	cmp	r4, r0
 800b5bc:	4623      	mov	r3, r4
 800b5be:	d807      	bhi.n	800b5d0 <memmove+0x20>
 800b5c0:	1e43      	subs	r3, r0, #1
 800b5c2:	42a1      	cmp	r1, r4
 800b5c4:	d008      	beq.n	800b5d8 <memmove+0x28>
 800b5c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5ce:	e7f8      	b.n	800b5c2 <memmove+0x12>
 800b5d0:	4402      	add	r2, r0
 800b5d2:	4601      	mov	r1, r0
 800b5d4:	428a      	cmp	r2, r1
 800b5d6:	d100      	bne.n	800b5da <memmove+0x2a>
 800b5d8:	bd10      	pop	{r4, pc}
 800b5da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5e2:	e7f7      	b.n	800b5d4 <memmove+0x24>

0800b5e4 <_realloc_r>:
 800b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e6:	4607      	mov	r7, r0
 800b5e8:	4614      	mov	r4, r2
 800b5ea:	460e      	mov	r6, r1
 800b5ec:	b921      	cbnz	r1, 800b5f8 <_realloc_r+0x14>
 800b5ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	f7ff bb42 	b.w	800ac7c <_malloc_r>
 800b5f8:	b922      	cbnz	r2, 800b604 <_realloc_r+0x20>
 800b5fa:	f7ff fc99 	bl	800af30 <_free_r>
 800b5fe:	4625      	mov	r5, r4
 800b600:	4628      	mov	r0, r5
 800b602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b604:	f000 f814 	bl	800b630 <_malloc_usable_size_r>
 800b608:	42a0      	cmp	r0, r4
 800b60a:	d20f      	bcs.n	800b62c <_realloc_r+0x48>
 800b60c:	4621      	mov	r1, r4
 800b60e:	4638      	mov	r0, r7
 800b610:	f7ff fb34 	bl	800ac7c <_malloc_r>
 800b614:	4605      	mov	r5, r0
 800b616:	2800      	cmp	r0, #0
 800b618:	d0f2      	beq.n	800b600 <_realloc_r+0x1c>
 800b61a:	4631      	mov	r1, r6
 800b61c:	4622      	mov	r2, r4
 800b61e:	f7ff fb17 	bl	800ac50 <memcpy>
 800b622:	4631      	mov	r1, r6
 800b624:	4638      	mov	r0, r7
 800b626:	f7ff fc83 	bl	800af30 <_free_r>
 800b62a:	e7e9      	b.n	800b600 <_realloc_r+0x1c>
 800b62c:	4635      	mov	r5, r6
 800b62e:	e7e7      	b.n	800b600 <_realloc_r+0x1c>

0800b630 <_malloc_usable_size_r>:
 800b630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b634:	1f18      	subs	r0, r3, #4
 800b636:	2b00      	cmp	r3, #0
 800b638:	bfbc      	itt	lt
 800b63a:	580b      	ldrlt	r3, [r1, r0]
 800b63c:	18c0      	addlt	r0, r0, r3
 800b63e:	4770      	bx	lr

0800b640 <_init>:
 800b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b642:	bf00      	nop
 800b644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b646:	bc08      	pop	{r3}
 800b648:	469e      	mov	lr, r3
 800b64a:	4770      	bx	lr

0800b64c <_fini>:
 800b64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64e:	bf00      	nop
 800b650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b652:	bc08      	pop	{r3}
 800b654:	469e      	mov	lr, r3
 800b656:	4770      	bx	lr
