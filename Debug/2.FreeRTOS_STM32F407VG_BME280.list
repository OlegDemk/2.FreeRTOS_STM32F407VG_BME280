
2.FreeRTOS_STM32F407VG_BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  08011458  08011458  00021458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b24  08011b24  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08011b24  08011b24  00021b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b2c  08011b2c  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b2c  08011b2c  00021b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b30  08011b30  00021b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08011b34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030354  2**0
                  CONTENTS
 10 .bss          0000dab0  20000358  20000358  00030358  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000de08  2000de08  00030358  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c3ed  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005553  00000000  00000000  0005c771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d88  00000000  00000000  00061cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b98  00000000  00000000  00063a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000902a  00000000  00000000  000655e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000253cc  00000000  00000000  0006e612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc384  00000000  00000000  000939de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016fd62  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008f34  00000000  00000000  0016fdb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801143c 	.word	0x0801143c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0801143c 	.word	0x0801143c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 f9ef 	bl	8002334 <null_ptr_check>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d133      	bne.n	8000fca <bme280_init+0x8a>
		while (try_count) {
 8000f62:	e028      	b.n	8000fb6 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f64:	f107 010d 	add.w	r1, r7, #13
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	20d0      	movs	r0, #208	; 0xd0
 8000f6e:	f000 f832 	bl	8000fd6 <bme280_get_regs>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d114      	bne.n	8000fa8 <bme280_init+0x68>
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	2b60      	cmp	r3, #96	; 0x60
 8000f82:	d111      	bne.n	8000fa8 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000f84:	7b7a      	ldrb	r2, [r7, #13]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f976 	bl	800127c <bme280_soft_reset>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d110      	bne.n	8000fbe <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f001 f83f 	bl	8002020 <get_calib_data>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000fa6:	e00a      	b.n	8000fbe <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2001      	movs	r0, #1
 8000fae:	4798      	blx	r3
			--try_count;
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1d3      	bne.n	8000f64 <bme280_init+0x24>
 8000fbc:	e000      	b.n	8000fc0 <bme280_init+0x80>
				break;
 8000fbe:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000fc6:	23fe      	movs	r3, #254	; 0xfe
 8000fc8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000fd6:	b590      	push	{r4, r7, lr}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f001 f9a3 	bl	8002334 <null_ptr_check>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d117      	bne.n	800102a <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	789b      	ldrb	r3, [r3, #2]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d003      	beq.n	800100a <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001008:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685c      	ldr	r4, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7858      	ldrb	r0, [r3, #1]
 8001012:	89bb      	ldrh	r3, [r7, #12]
 8001014:	7bf9      	ldrb	r1, [r7, #15]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	47a0      	blx	r4
 800101a:	4603      	mov	r3, r0
 800101c:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800101e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8001026:	23fc      	movs	r3, #252	; 0xfc
 8001028:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800102a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800102e:	4618      	mov	r0, r3
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}

08001036 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b08d      	sub	sp, #52	; 0x34
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b0a      	cmp	r3, #10
 800104a:	d901      	bls.n	8001050 <bme280_set_regs+0x1a>
		len = 10;
 800104c:	230a      	movs	r3, #10
 800104e:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f001 f96f 	bl	8002334 <null_ptr_check>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 800105c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001060:	2b00      	cmp	r3, #0
 8001062:	d154      	bne.n	800110e <bme280_set_regs+0xd8>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d051      	beq.n	800110e <bme280_set_regs+0xd8>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d04e      	beq.n	800110e <bme280_set_regs+0xd8>
		if (len != 0) {
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d047      	beq.n	8001106 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d01a      	beq.n	80010ba <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001084:	2300      	movs	r3, #0
 8001086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800108a:	e011      	b.n	80010b0 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800108c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	440b      	add	r3, r1
 800109e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010aa:	3301      	adds	r3, #1
 80010ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3e8      	bcc.n	800108c <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d90b      	bls.n	80010d8 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f107 0114 	add.w	r1, r7, #20
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 ffee 	bl	80020aa <interleave_reg_addr>
				temp_len = len * 2;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010d6:	e001      	b.n	80010dc <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689c      	ldr	r4, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	7858      	ldrb	r0, [r3, #1]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	7819      	ldrb	r1, [r3, #0]
 80010e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010ea:	f107 0214 	add.w	r2, r7, #20
 80010ee:	47a0      	blx	r4
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80010f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 80010fe:	23fc      	movs	r3, #252	; 0xfc
 8001100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001104:	e007      	b.n	8001116 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8001106:	23fd      	movs	r3, #253	; 0xfd
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800110c:	e003      	b.n	8001116 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800110e:	23ff      	movs	r3, #255	; 0xff
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001114:	e000      	b.n	8001118 <bme280_set_regs+0xe2>
		if (len != 0) {
 8001116:	bf00      	nop
	}


	return rslt;
 8001118:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800111c:	4618      	mov	r0, r3
 800111e:	3734      	adds	r7, #52	; 0x34
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f001 f8ff 	bl	8002334 <null_ptr_check>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d13f      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001142:	f107 030e 	add.w	r3, r7, #14
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f874 	bl	8001236 <bme280_get_sensor_mode>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <bme280_set_sensor_settings+0x46>
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f000 fb4e 	bl	8001802 <put_device_to_sleep>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d127      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	2007      	movs	r0, #7
 8001178:	f001 f8c0 	bl	80022fc <are_settings_changed>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f98a 	bl	80014a6 <set_osr_settings>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d111      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4619      	mov	r1, r3
 80011a2:	2018      	movs	r0, #24
 80011a4:	f001 f8aa 	bl	80022fc <are_settings_changed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fa11 	bl	80015e0 <set_filter_standby_settings>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	6039      	str	r1, [r7, #0]
 80011d8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f001 f8aa 	bl	8002334 <null_ptr_check>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80011e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d11e      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80011ec:	f107 030e 	add.w	r3, r7, #14
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f81f 	bl	8001236 <bme280_get_sensor_mode>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <bme280_set_sensor_mode+0x46>
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f000 faf9 	bl	8001802 <put_device_to_sleep>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fabb 	bl	800179c <write_power_mode>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f001 f877 	bl	8002334 <null_ptr_check>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10e      	bne.n	8001270 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	20f4      	movs	r0, #244	; 0xf4
 800125a:	f7ff febc 	bl	8000fd6 <bme280_get_regs>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	b2da      	uxtb	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001284:	23e0      	movs	r3, #224	; 0xe0
 8001286:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001288:	23b6      	movs	r3, #182	; 0xb6
 800128a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 f851 	bl	8002334 <null_ptr_check>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10d      	bne.n	80012ba <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800129e:	f107 010d 	add.w	r1, r7, #13
 80012a2:	f107 000e 	add.w	r0, r7, #14
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f7ff fec4 	bl	8001036 <bme280_set_regs>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2002      	movs	r0, #2
 80012b8:	4798      	blx	r3
	}

	return rslt;
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b08a      	sub	sp, #40	; 0x28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f001 f823 	bl	8002334 <null_ptr_check>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80012f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d124      	bne.n	8001346 <bme280_get_sensor_data+0x80>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d021      	beq.n	8001346 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001302:	f107 011c 	add.w	r1, r7, #28
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2208      	movs	r2, #8
 800130a:	20f7      	movs	r0, #247	; 0xf7
 800130c:	f7ff fe63 	bl	8000fd6 <bme280_get_regs>
 8001310:	4603      	mov	r3, r0
 8001312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8001316:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f815 	bl	8001358 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3310      	adds	r3, #16
 8001332:	f107 0110 	add.w	r1, r7, #16
 8001336:	7bf8      	ldrb	r0, [r7, #15]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	f000 f853 	bl	80013e4 <bme280_compensate_data>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001344:	e002      	b.n	800134c <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001346:	23ff      	movs	r3, #255	; 0xff
 8001348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 800134c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001350:	4618      	mov	r0, r3
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	031b      	lsls	r3, r3, #12
 8001368:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3301      	adds	r3, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3302      	adds	r3, #2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	b2db      	uxtb	r3, r3
 800137e:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	431a      	orrs	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	431a      	orrs	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3303      	adds	r3, #3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	031b      	lsls	r3, r3, #12
 8001396:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3304      	adds	r3, #4
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3305      	adds	r3, #5
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3306      	adds	r3, #6
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3307      	adds	r3, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	609a      	str	r2, [r3, #8]
}
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d04b      	beq.n	8001496 <bme280_compensate_data+0xb2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d048      	beq.n	8001496 <bme280_compensate_data+0xb2>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d045      	beq.n	8001496 <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00a      	beq.n	8001454 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f000 fa2b 	bl	800189c <compensate_temperature>
 8001446:	eeb0 7a40 	vmov.f32	s14, s0
 800144a:	eef0 7a60 	vmov.f32	s15, s1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f000 faed 	bl	8001a40 <compensate_pressure>
 8001466:	eeb0 7a40 	vmov.f32	s14, s0
 800146a:	eef0 7a60 	vmov.f32	s15, s1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00d      	beq.n	800149a <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f000 fcad 	bl	8001de0 <compensate_humidity>
 8001486:	eeb0 7a40 	vmov.f32	s14, s0
 800148a:	eef0 7a60 	vmov.f32	s15, s1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8001494:	e001      	b.n	800149a <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001496:	23ff      	movs	r3, #255	; 0xff
 8001498:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800149a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80014b4:	2301      	movs	r3, #1
 80014b6:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f000 f815 	bl	80014f4 <set_osr_humidity_settings>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f842 	bl	8001568 <set_osr_press_temp_settings>
 80014e4:	4603      	mov	r3, r0
 80014e6:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80014e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80014fe:	23f2      	movs	r3, #242	; 0xf2
 8001500:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	789b      	ldrb	r3, [r3, #2]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800150e:	f107 010e 	add.w	r1, r7, #14
 8001512:	f107 000c 	add.w	r0, r7, #12
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	f7ff fd8c 	bl	8001036 <bme280_set_regs>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800152a:	23f4      	movs	r3, #244	; 0xf4
 800152c:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800152e:	7b38      	ldrb	r0, [r7, #12]
 8001530:	f107 010d 	add.w	r1, r7, #13
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	f7ff fd4d 	bl	8000fd6 <bme280_get_regs>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001548:	f107 010d 	add.w	r1, r7, #13
 800154c:	f107 000c 	add.w	r0, r7, #12
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	f7ff fd6f 	bl	8001036 <bme280_set_regs>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001576:	23f4      	movs	r3, #244	; 0xf4
 8001578:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800157a:	7db8      	ldrb	r0, [r7, #22]
 800157c:	f107 0115 	add.w	r1, r7, #21
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f7ff fd27 	bl	8000fd6 <bme280_get_regs>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800158c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11f      	bne.n	80015d4 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800159e:	f107 0315 	add.w	r3, r7, #21
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f88e 	bl	80016c6 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80015b4:	f107 0315 	add.w	r3, r7, #21
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f8a0 	bl	8001700 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80015c0:	f107 0115 	add.w	r1, r7, #21
 80015c4:	f107 0016 	add.w	r0, r7, #22
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f7ff fd33 	bl	8001036 <bme280_set_regs>
 80015d0:	4603      	mov	r3, r0
 80015d2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80015ee:	23f5      	movs	r3, #245	; 0xf5
 80015f0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015f2:	7db8      	ldrb	r0, [r7, #22]
 80015f4:	f107 0115 	add.w	r1, r7, #21
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f7ff fceb 	bl	8000fd6 <bme280_get_regs>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11f      	bne.n	800164c <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8001616:	f107 0315 	add.w	r3, r7, #21
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f81b 	bl	8001658 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 800162c:	f107 0315 	add.w	r3, r7, #21
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f82d 	bl	8001692 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001638:	f107 0115 	add.w	r1, r7, #21
 800163c:	f107 0016 	add.w	r0, r7, #22
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f7ff fcf7 	bl	8001036 <bme280_set_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	f023 031c 	bic.w	r3, r3, #28
 800166c:	b25a      	sxtb	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	f003 031c 	and.w	r3, r3, #28
 800167a:	b25b      	sxtb	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	701a      	strb	r2, [r3, #0]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	791b      	ldrb	r3, [r3, #4]
 80016ac:	015b      	lsls	r3, r3, #5
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	701a      	strb	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	f023 031c 	bic.w	r3, r3, #28
 80016da:	b25a      	sxtb	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	f003 031c 	and.w	r3, r3, #28
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b25b      	sxtb	r3, r3
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	b25a      	sxtb	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	b25b      	sxtb	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	b2da      	uxtb	r2, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3302      	adds	r3, #2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	109b      	asrs	r3, r3, #2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	b2da      	uxtb	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3302      	adds	r3, #2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2da      	uxtb	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3303      	adds	r3, #3
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	109b      	asrs	r3, r3, #2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	b2da      	uxtb	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	095b      	lsrs	r3, r3, #5
 800178a:	b2da      	uxtb	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	711a      	strb	r2, [r3, #4]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80017a8:	23f4      	movs	r3, #244	; 0xf4
 80017aa:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80017ac:	7bb8      	ldrb	r0, [r7, #14]
 80017ae:	f107 010d 	add.w	r1, r7, #13
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f7ff fc0e 	bl	8000fd6 <bme280_get_regs>
 80017ba:	4603      	mov	r3, r0
 80017bc:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d117      	bne.n	80017f6 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80017c6:	7b7b      	ldrb	r3, [r7, #13]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80017e2:	f107 010d 	add.w	r1, r7, #13
 80017e6:	f107 000e 	add.w	r0, r7, #14
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f7ff fc22 	bl	8001036 <bme280_set_regs>
 80017f2:	4603      	mov	r3, r0
 80017f4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800180a:	f107 0110 	add.w	r1, r7, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	20f2      	movs	r0, #242	; 0xf2
 8001814:	f7ff fbdf 	bl	8000fd6 <bme280_get_regs>
 8001818:	4603      	mov	r3, r0
 800181a:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 800181c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001824:	f107 0208 	add.w	r2, r7, #8
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff80 	bl	8001734 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fd21 	bl	800127c <bme280_soft_reset>
 800183a:	4603      	mov	r3, r0
 800183c:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800183e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f808 	bl	8001862 <reload_device_settings>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	201f      	movs	r0, #31
 8001872:	f7ff fe18 	bl	80014a6 <set_osr_settings>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	201f      	movs	r0, #31
 8001888:	f7ff feaa 	bl	80015e0 <set_filter_standby_settings>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <compensate_temperature+0x18c>)
 80018ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <compensate_temperature+0x190>)
 80018b6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe20 	bl	8000504 <__aeabi_ui2d>
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <compensate_temperature+0x194>)
 80018ca:	f7fe ffbf 	bl	800084c <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe12 	bl	8000504 <__aeabi_ui2d>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <compensate_temperature+0x198>)
 80018e6:	f7fe ffb1 	bl	800084c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7fe fcc9 	bl	8000288 <__aeabi_dsub>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe0d 	bl	8000524 <__aeabi_i2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001912:	f7fe fe71 	bl	80005f8 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fdee 	bl	8000504 <__aeabi_ui2d>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001930:	f7fe ff8c 	bl	800084c <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fddf 	bl	8000504 <__aeabi_ui2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <compensate_temperature+0x19c>)
 800194c:	f7fe ff7e 	bl	800084c <__aeabi_ddiv>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fc96 	bl	8000288 <__aeabi_dsub>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8001964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001968:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800196c:	f7fe fe44 	bl	80005f8 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4614      	mov	r4, r2
 8001976:	461d      	mov	r5, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fdd0 	bl	8000524 <__aeabi_i2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fe34 	bl	80005f8 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8001998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800199c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019a0:	f7fe fc74 	bl	800028c <__adddf3>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f8d4 	bl	8000b58 <__aeabi_d2iz>
 80019b0:	4602      	mov	r2, r0
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80019b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019be:	f7fe fc65 	bl	800028c <__adddf3>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <compensate_temperature+0x1a0>)
 80019d0:	f7fe ff3c 	bl	800084c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80019dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019e4:	f7ff f87a 	bl	8000adc <__aeabi_dcmplt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <compensate_temperature+0x15c>
		temperature = temperature_min;
 80019ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019f6:	e00c      	b.n	8001a12 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80019f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a00:	f7ff f88a 	bl	8000b18 <__aeabi_dcmpgt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <compensate_temperature+0x176>
		temperature = temperature_max;
 8001a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8001a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a16:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a1e:	eef0 0a67 	vmov.f32	s1, s15
 8001a22:	3730      	adds	r7, #48	; 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bdb0      	pop	{r4, r5, r7, pc}
 8001a28:	c0440000 	.word	0xc0440000
 8001a2c:	40554000 	.word	0x40554000
 8001a30:	40d00000 	.word	0x40d00000
 8001a34:	40900000 	.word	0x40900000
 8001a38:	40c00000 	.word	0x40c00000
 8001a3c:	40b40000 	.word	0x40b40000

08001a40 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8001a4a:	a3d9      	add	r3, pc, #868	; (adr r3, 8001db0 <compensate_pressure+0x370>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8001a54:	a3d8      	add	r3, pc, #864	; (adr r3, 8001db8 <compensate_pressure+0x378>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd5e 	bl	8000524 <__aeabi_i2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a70:	f7fe feec 	bl	800084c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4bc1      	ldr	r3, [pc, #772]	; (8001d88 <compensate_pressure+0x348>)
 8001a82:	f7fe fc01 	bl	8000288 <__aeabi_dsub>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a96:	f7fe fdaf 	bl	80005f8 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd3b 	bl	8000524 <__aeabi_i2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fd9f 	bl	80005f8 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4bb1      	ldr	r3, [pc, #708]	; (8001d8c <compensate_pressure+0x34c>)
 8001ac8:	f7fe fec0 	bl	800084c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd22 	bl	8000524 <__aeabi_i2d>
 8001ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae4:	f7fe fd88 	bl	80005f8 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	f7fe fbca 	bl	800028c <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b00:	f7fe fbc4 	bl	800028c <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b9f      	ldr	r3, [pc, #636]	; (8001d90 <compensate_pressure+0x350>)
 8001b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b16:	f7fe fe99 	bl	800084c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	461d      	mov	r5, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcfb 	bl	8000524 <__aeabi_i2d>
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b98      	ldr	r3, [pc, #608]	; (8001d94 <compensate_pressure+0x354>)
 8001b34:	f7fe fd60 	bl	80005f8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fba4 	bl	800028c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fce6 	bl	8000524 <__aeabi_i2d>
 8001b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5c:	f7fe fd4c 	bl	80005f8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6c:	f7fe fd44 	bl	80005f8 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b86      	ldr	r3, [pc, #536]	; (8001d98 <compensate_pressure+0x358>)
 8001b7e:	f7fe fe65 	bl	800084c <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcc7 	bl	8000524 <__aeabi_i2d>
 8001b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9a:	f7fe fd2d 	bl	80005f8 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001baa:	f7fe fb6f 	bl	800028c <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <compensate_pressure+0x358>)
 8001bbc:	f7fe fe46 	bl	800084c <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <compensate_pressure+0x34c>)
 8001bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bd2:	f7fe fe3b 	bl	800084c <__aeabi_ddiv>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <compensate_pressure+0x35c>)
 8001be4:	f7fe fb52 	bl	800028c <__adddf3>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4614      	mov	r4, r2
 8001bee:	461d      	mov	r5, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	88db      	ldrh	r3, [r3, #6]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc85 	bl	8000504 <__aeabi_ui2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fcf9 	bl	80005f8 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c1a:	f7fe ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 80cd 	bne.w	8001dc0 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc6a 	bl	8000504 <__aeabi_ui2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	4959      	ldr	r1, [pc, #356]	; (8001da0 <compensate_pressure+0x360>)
 8001c3a:	f7fe fb25 	bl	8000288 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <compensate_pressure+0x364>)
 8001c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c50:	f7fe fdfc 	bl	800084c <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c5c:	f7fe fb14 	bl	8000288 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	a345      	add	r3, pc, #276	; (adr r3, 8001d80 <compensate_pressure+0x340>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7e:	f7fe fde5 	bl	800084c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc47 	bl	8000524 <__aeabi_i2d>
 8001c96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c9a:	f7fe fcad 	bl	80005f8 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001caa:	f7fe fca5 	bl	80005f8 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <compensate_pressure+0x368>)
 8001cbc:	f7fe fdc6 	bl	800084c <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc28 	bl	8000524 <__aeabi_i2d>
 8001cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <compensate_pressure+0x34c>)
 8001cea:	f7fe fdaf 	bl	800084c <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001cf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cfe:	f7fe fac5 	bl	800028c <__adddf3>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	461d      	mov	r5, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc07 	bl	8000524 <__aeabi_i2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fab5 	bl	800028c <__adddf3>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <compensate_pressure+0x36c>)
 8001d30:	f7fe fd8c 	bl	800084c <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d3c:	f7fe faa6 	bl	800028c <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8001d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d50:	f7fe fec4 	bl	8000adc <__aeabi_dcmplt>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <compensate_pressure+0x324>
			pressure = pressure_min;
 8001d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d62:	e031      	b.n	8001dc8 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8001d64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d6c:	f7fe fed4 	bl	8000b18 <__aeabi_dcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d028      	beq.n	8001dc8 <compensate_pressure+0x388>
			pressure = pressure_max;
 8001d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d7e:	e023      	b.n	8001dc8 <compensate_pressure+0x388>
 8001d80:	00000000 	.word	0x00000000
 8001d84:	40b86a00 	.word	0x40b86a00
 8001d88:	40ef4000 	.word	0x40ef4000
 8001d8c:	40e00000 	.word	0x40e00000
 8001d90:	40100000 	.word	0x40100000
 8001d94:	40f00000 	.word	0x40f00000
 8001d98:	41200000 	.word	0x41200000
 8001d9c:	3ff00000 	.word	0x3ff00000
 8001da0:	41300000 	.word	0x41300000
 8001da4:	40b00000 	.word	0x40b00000
 8001da8:	41e00000 	.word	0x41e00000
 8001dac:	40300000 	.word	0x40300000
 8001db0:	00000000 	.word	0x00000000
 8001db4:	40dd4c00 	.word	0x40dd4c00
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8001dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dc4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8001dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dcc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd4:	eef0 0a67 	vmov.f32	s1, s15
 8001dd8:	3738      	adds	r7, #56	; 0x38
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dde:	bf00      	nop

08001de0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b094      	sub	sp, #80	; 0x50
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <compensate_humidity+0x220>)
 8001dfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb8d 	bl	8000524 <__aeabi_i2d>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b7d      	ldr	r3, [pc, #500]	; (8002004 <compensate_humidity+0x224>)
 8001e10:	f7fe fa3a 	bl	8000288 <__aeabi_dsub>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb7e 	bl	8000524 <__aeabi_i2d>
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b76      	ldr	r3, [pc, #472]	; (8002008 <compensate_humidity+0x228>)
 8001e2e:	f7fe fbe3 	bl	80005f8 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4614      	mov	r4, r2
 8001e38:	461d      	mov	r5, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <compensate_humidity+0x22c>)
 8001e4c:	f7fe fcfe 	bl	800084c <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e5c:	f7fe fbcc 	bl	80005f8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4620      	mov	r0, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	f7fe fa10 	bl	800028c <__adddf3>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb43 	bl	8000504 <__aeabi_ui2d>
 8001e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e82:	f7fe fa01 	bl	8000288 <__aeabi_dsub>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <compensate_humidity+0x230>)
 8001ea0:	f7fe fcd4 	bl	800084c <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	7f1b      	ldrb	r3, [r3, #28]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb27 	bl	8000504 <__aeabi_ui2d>
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b56      	ldr	r3, [pc, #344]	; (8002014 <compensate_humidity+0x234>)
 8001ebc:	f7fe fcc6 	bl	800084c <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ecc:	f7fe fb94 	bl	80005f8 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <compensate_humidity+0x238>)
 8001ede:	f7fe f9d5 	bl	800028c <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb17 	bl	8000524 <__aeabi_i2d>
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b46      	ldr	r3, [pc, #280]	; (8002014 <compensate_humidity+0x234>)
 8001efc:	f7fe fca6 	bl	800084c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f1c:	f7fe fb6c 	bl	80005f8 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <compensate_humidity+0x238>)
 8001f2e:	f7fe f9ad 	bl	800028c <__adddf3>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8001f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f42:	f7fe fb59 	bl	80005f8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f56:	f7fe fb4f 	bl	80005f8 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe fb49 	bl	80005f8 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7e1b      	ldrb	r3, [r3, #24]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fac6 	bl	8000504 <__aeabi_ui2d>
 8001f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f7c:	f7fe fb3c 	bl	80005f8 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <compensate_humidity+0x23c>)
 8001f8e:	f7fe fc5d 	bl	800084c <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	f04f 0000 	mov.w	r0, #0
 8001f9a:	491f      	ldr	r1, [pc, #124]	; (8002018 <compensate_humidity+0x238>)
 8001f9c:	f7fe f974 	bl	8000288 <__aeabi_dsub>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa8:	f7fe fb26 	bl	80005f8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8001fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fbc:	f7fe fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8001fc6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fce:	e00c      	b.n	8001fea <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8001fd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fd4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fd8:	f7fe fd80 	bl	8000adc <__aeabi_dcmplt>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <compensate_humidity+0x20a>
		humidity = humidity_min;
 8001fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fe6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8001fea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff6:	eef0 0a67 	vmov.f32	s1, s15
 8001ffa:	3750      	adds	r7, #80	; 0x50
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	40590000 	.word	0x40590000
 8002004:	40f2c000 	.word	0x40f2c000
 8002008:	40500000 	.word	0x40500000
 800200c:	40d00000 	.word	0x40d00000
 8002010:	40f00000 	.word	0x40f00000
 8002014:	41900000 	.word	0x41900000
 8002018:	3ff00000 	.word	0x3ff00000
 800201c:	41200000 	.word	0x41200000

08002020 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002028:	2388      	movs	r3, #136	; 0x88
 800202a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002044:	f107 010c 	add.w	r1, r7, #12
 8002048:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	221a      	movs	r2, #26
 8002050:	f7fe ffc1 	bl	8000fd6 <bme280_get_regs>
 8002054:	4603      	mov	r3, r0
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800205a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11d      	bne.n	800209e <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 f84a 	bl	8002102 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800206e:	23e1      	movs	r3, #225	; 0xe1
 8002070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002074:	f107 010c 	add.w	r1, r7, #12
 8002078:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2207      	movs	r2, #7
 8002080:	f7fe ffa9 	bl	8000fd6 <bme280_get_regs>
 8002084:	4603      	mov	r3, r0
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800208a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f8e1 	bl	8002260 <parse_humidity_calib_data>
		}
	}

	return rslt;
 800209e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80020b8:	2301      	movs	r3, #1
 80020ba:	75fb      	strb	r3, [r7, #23]
 80020bc:	e016      	b.n	80020ec <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	441a      	add	r2, r3
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	440b      	add	r3, r1
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	441a      	add	r2, r3
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4619      	mov	r1, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	440b      	add	r3, r1
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	3301      	adds	r3, #1
 80020ea:	75fb      	strb	r3, [r7, #23]
 80020ec:	7dfa      	ldrb	r2, [r7, #23]
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3e4      	bcc.n	80020be <interleave_reg_addr+0x14>
	}
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	3310      	adds	r3, #16
 8002110:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3301      	adds	r3, #1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21a      	sxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3303      	adds	r3, #3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3302      	adds	r3, #2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21a      	sxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3305      	adds	r3, #5
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3304      	adds	r3, #4
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21a      	sxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3307      	adds	r3, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3306      	adds	r3, #6
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3309      	adds	r3, #9
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	b21a      	sxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3308      	adds	r3, #8
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21a      	sxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	330b      	adds	r3, #11
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	330a      	adds	r3, #10
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	330d      	adds	r3, #13
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	330c      	adds	r3, #12
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	330f      	adds	r3, #15
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	330e      	adds	r3, #14
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b21b      	sxth	r3, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	b21a      	sxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3311      	adds	r3, #17
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3310      	adds	r3, #16
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3313      	adds	r3, #19
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b21a      	sxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3312      	adds	r3, #18
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21a      	sxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3315      	adds	r3, #21
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	b21a      	sxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3314      	adds	r3, #20
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b21b      	sxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b21a      	sxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3317      	adds	r3, #23
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b21a      	sxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3316      	adds	r3, #22
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b21a      	sxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e5a      	ldrb	r2, [r3, #25]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	761a      	strb	r2, [r3, #24]

}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	3310      	adds	r3, #16
 800226e:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b21b      	sxth	r3, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	b21a      	sxth	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	789a      	ldrb	r2, [r3, #2]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3303      	adds	r3, #3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b25b      	sxtb	r3, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	b29b      	uxth	r3, r3
 800229e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80022ae:	8a7a      	ldrh	r2, [r7, #18]
 80022b0:	8a3b      	ldrh	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3305      	adds	r3, #5
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80022d6:	89fa      	ldrh	r2, [r7, #14]
 80022d8:	89bb      	ldrh	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	b21a      	sxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3306      	adds	r3, #6
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b25a      	sxtb	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	4013      	ands	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e001      	b.n	8002326 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <null_ptr_check+0x26>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <null_ptr_check+0x26>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <null_ptr_check+0x26>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 800235a:	23ff      	movs	r3, #255	; 0xff
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e001      	b.n	8002364 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af02      	add	r7, sp, #8
 800237a:	603a      	str	r2, [r7, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
 8002382:	460b      	mov	r3, r1
 8002384:	71bb      	strb	r3, [r7, #6]
 8002386:	4613      	mov	r3, r2
 8002388:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	b29b      	uxth	r3, r3
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	b299      	uxth	r1, r3
 8002392:	1dba      	adds	r2, r7, #6
 8002394:	230a      	movs	r3, #10
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2301      	movs	r3, #1
 800239a:	4811      	ldr	r0, [pc, #68]	; (80023e0 <user_i2c_read+0x6c>)
 800239c:	f001 fc82 	bl	8003ca4 <HAL_I2C_Master_Transmit>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <user_i2c_read+0x38>
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023aa:	e014      	b.n	80023d6 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	b299      	uxth	r1, r3
 80023ba:	88bb      	ldrh	r3, [r7, #4]
 80023bc:	220a      	movs	r2, #10
 80023be:	9200      	str	r2, [sp, #0]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	4807      	ldr	r0, [pc, #28]	; (80023e0 <user_i2c_read+0x6c>)
 80023c4:	f001 fd6c 	bl	8003ea0 <HAL_I2C_Master_Receive>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <user_i2c_read+0x60>
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d2:	e000      	b.n	80023d6 <user_i2c_read+0x62>

  return 0;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20005474 	.word	0x20005474

080023e4 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f001 f859 	bl	80034a4 <HAL_Delay>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af02      	add	r7, sp, #8
 8002402:	603a      	str	r2, [r7, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
 800240a:	460b      	mov	r3, r1
 800240c:	71bb      	strb	r3, [r7, #6]
 800240e:	4613      	mov	r3, r2
 8002410:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8002412:	88bb      	ldrh	r3, [r7, #4]
 8002414:	3301      	adds	r3, #1
 8002416:	4618      	mov	r0, r3
 8002418:	f00c f9a2 	bl	800e760 <malloc>
 800241c:	4603      	mov	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8002420:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3301      	adds	r3, #1
 800242c:	88ba      	ldrh	r2, [r7, #4]
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f00c f9a5 	bl	800e780 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	b29b      	uxth	r3, r3
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	b299      	uxth	r1, r3
 800243e:	88bb      	ldrh	r3, [r7, #4]
 8002440:	3301      	adds	r3, #1
 8002442:	b29b      	uxth	r3, r3
 8002444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002448:	9200      	str	r2, [sp, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4808      	ldr	r0, [pc, #32]	; (8002470 <user_i2c_write+0x74>)
 800244e:	f001 fc29 	bl	8003ca4 <HAL_I2C_Master_Transmit>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <user_i2c_write+0x62>
 8002458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800245c:	e003      	b.n	8002466 <user_i2c_write+0x6a>

  free(buf);
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f00c f986 	bl	800e770 <free>
  return 0;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20005474 	.word	0x20005474

08002474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002478:	f000 ffd2 	bl	8003420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800247c:	f000 f864 	bl	8002548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002480:	f000 f948 	bl	8002714 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002484:	f000 f8f8 	bl	8002678 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002488:	f000 f8c8 	bl	800261c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 800248c:	481c      	ldr	r0, [pc, #112]	; (8002500 <main+0x8c>)
 800248e:	f004 fbe1 	bl	8006c54 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002492:	f008 f85f 	bl	800a554 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8002496:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <main+0x90>)
 8002498:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800249c:	200a      	movs	r0, #10
 800249e:	f008 f950 	bl	800a742 <osMessageQueueNew>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a18      	ldr	r2, [pc, #96]	; (8002508 <main+0x94>)
 80024a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <main+0x98>)
 80024aa:	2100      	movs	r1, #0
 80024ac:	4818      	ldr	r0, [pc, #96]	; (8002510 <main+0x9c>)
 80024ae:	f008 f89b 	bl	800a5e8 <osThreadNew>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a17      	ldr	r2, [pc, #92]	; (8002514 <main+0xa0>)
 80024b6:	6013      	str	r3, [r2, #0]

  /* creation of Blue_LED_Blink */
  Blue_LED_BlinkHandle = osThreadNew(Start_Blue_LED_Blink, NULL, &Blue_LED_Blink_attributes);
 80024b8:	4a17      	ldr	r2, [pc, #92]	; (8002518 <main+0xa4>)
 80024ba:	2100      	movs	r1, #0
 80024bc:	4817      	ldr	r0, [pc, #92]	; (800251c <main+0xa8>)
 80024be:	f008 f893 	bl	800a5e8 <osThreadNew>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a16      	ldr	r2, [pc, #88]	; (8002520 <main+0xac>)
 80024c6:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 80024c8:	4a16      	ldr	r2, [pc, #88]	; (8002524 <main+0xb0>)
 80024ca:	2100      	movs	r1, #0
 80024cc:	4816      	ldr	r0, [pc, #88]	; (8002528 <main+0xb4>)
 80024ce:	f008 f88b 	bl	800a5e8 <osThreadNew>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4a15      	ldr	r2, [pc, #84]	; (800252c <main+0xb8>)
 80024d6:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 80024d8:	4a15      	ldr	r2, [pc, #84]	; (8002530 <main+0xbc>)
 80024da:	2100      	movs	r1, #0
 80024dc:	4815      	ldr	r0, [pc, #84]	; (8002534 <main+0xc0>)
 80024de:	f008 f883 	bl	800a5e8 <osThreadNew>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4a14      	ldr	r2, [pc, #80]	; (8002538 <main+0xc4>)
 80024e6:	6013      	str	r3, [r2, #0]

  /* creation of bme280 */
  bme280Handle = osThreadNew(Start_bme280, NULL, &bme280_attributes);
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <main+0xc8>)
 80024ea:	2100      	movs	r1, #0
 80024ec:	4814      	ldr	r0, [pc, #80]	; (8002540 <main+0xcc>)
 80024ee:	f008 f87b 	bl	800a5e8 <osThreadNew>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4a13      	ldr	r2, [pc, #76]	; (8002544 <main+0xd0>)
 80024f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80024f8:	f008 f850 	bl	800a59c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <main+0x88>
 80024fe:	bf00      	nop
 8002500:	2000b0bc 	.word	0x2000b0bc
 8002504:	080116e8 	.word	0x080116e8
 8002508:	200086b8 	.word	0x200086b8
 800250c:	08011634 	.word	0x08011634
 8002510:	08002995 	.word	0x08002995
 8002514:	20005430 	.word	0x20005430
 8002518:	08011658 	.word	0x08011658
 800251c:	080029a9 	.word	0x080029a9
 8002520:	20007518 	.word	0x20007518
 8002524:	0801167c 	.word	0x0801167c
 8002528:	080029dd 	.word	0x080029dd
 800252c:	2000c30c 	.word	0x2000c30c
 8002530:	080116a0 	.word	0x080116a0
 8002534:	08002c4d 	.word	0x08002c4d
 8002538:	2000b104 	.word	0x2000b104
 800253c:	080116c4 	.word	0x080116c4
 8002540:	08002ca9 	.word	0x08002ca9
 8002544:	2000c490 	.word	0x2000c490

08002548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b094      	sub	sp, #80	; 0x50
 800254c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800254e:	f107 0320 	add.w	r3, r7, #32
 8002552:	2230      	movs	r2, #48	; 0x30
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f00c f920 	bl	800e79c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	4b28      	ldr	r3, [pc, #160]	; (8002614 <SystemClock_Config+0xcc>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	4a27      	ldr	r2, [pc, #156]	; (8002614 <SystemClock_Config+0xcc>)
 8002576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257a:	6413      	str	r3, [r2, #64]	; 0x40
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <SystemClock_Config+0xcc>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002588:	2300      	movs	r3, #0
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	4b22      	ldr	r3, [pc, #136]	; (8002618 <SystemClock_Config+0xd0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a21      	ldr	r2, [pc, #132]	; (8002618 <SystemClock_Config+0xd0>)
 8002592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <SystemClock_Config+0xd0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ae:	2302      	movs	r3, #2
 80025b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025b8:	2308      	movs	r3, #8
 80025ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80025bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025c2:	2302      	movs	r3, #2
 80025c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025c6:	2307      	movs	r3, #7
 80025c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ca:	f107 0320 	add.w	r3, r7, #32
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 fe4a 	bl	8006268 <HAL_RCC_OscConfig>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80025da:	f000 fccd 	bl	8002f78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025de:	230f      	movs	r3, #15
 80025e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025e2:	2302      	movs	r3, #2
 80025e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025f6:	f107 030c 	add.w	r3, r7, #12
 80025fa:	2105      	movs	r1, #5
 80025fc:	4618      	mov	r0, r3
 80025fe:	f004 f8ab 	bl	8006758 <HAL_RCC_ClockConfig>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002608:	f000 fcb6 	bl	8002f78 <Error_Handler>
  }
}
 800260c:	bf00      	nop
 800260e:	3750      	adds	r7, #80	; 0x50
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	40007000 	.word	0x40007000

0800261c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <MX_I2C3_Init+0x50>)
 8002622:	4a13      	ldr	r2, [pc, #76]	; (8002670 <MX_I2C3_Init+0x54>)
 8002624:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <MX_I2C3_Init+0x50>)
 8002628:	4a12      	ldr	r2, [pc, #72]	; (8002674 <MX_I2C3_Init+0x58>)
 800262a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <MX_I2C3_Init+0x50>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <MX_I2C3_Init+0x50>)
 8002634:	2200      	movs	r2, #0
 8002636:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <MX_I2C3_Init+0x50>)
 800263a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800263e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <MX_I2C3_Init+0x50>)
 8002642:	2200      	movs	r2, #0
 8002644:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <MX_I2C3_Init+0x50>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <MX_I2C3_Init+0x50>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <MX_I2C3_Init+0x50>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002658:	4804      	ldr	r0, [pc, #16]	; (800266c <MX_I2C3_Init+0x50>)
 800265a:	f001 f9df 	bl	8003a1c <HAL_I2C_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002664:	f000 fc88 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20005474 	.word	0x20005474
 8002670:	40005c00 	.word	0x40005c00
 8002674:	000186a0 	.word	0x000186a0

08002678 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267e:	f107 0308 	add.w	r3, r7, #8
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268c:	463b      	mov	r3, r7
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <MX_TIM3_Init+0x94>)
 8002696:	4a1e      	ldr	r2, [pc, #120]	; (8002710 <MX_TIM3_Init+0x98>)
 8002698:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 800269a:	4b1c      	ldr	r3, [pc, #112]	; (800270c <MX_TIM3_Init+0x94>)
 800269c:	f240 3247 	movw	r2, #839	; 0x347
 80026a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	; (800270c <MX_TIM3_Init+0x94>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <MX_TIM3_Init+0x94>)
 80026aa:	220a      	movs	r2, #10
 80026ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <MX_TIM3_Init+0x94>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026b4:	4b15      	ldr	r3, [pc, #84]	; (800270c <MX_TIM3_Init+0x94>)
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026ba:	4814      	ldr	r0, [pc, #80]	; (800270c <MX_TIM3_Init+0x94>)
 80026bc:	f004 fa7a 	bl	8006bb4 <HAL_TIM_Base_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80026c6:	f000 fc57 	bl	8002f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026d0:	f107 0308 	add.w	r3, r7, #8
 80026d4:	4619      	mov	r1, r3
 80026d6:	480d      	ldr	r0, [pc, #52]	; (800270c <MX_TIM3_Init+0x94>)
 80026d8:	f004 fc34 	bl	8006f44 <HAL_TIM_ConfigClockSource>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80026e2:	f000 fc49 	bl	8002f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026ee:	463b      	mov	r3, r7
 80026f0:	4619      	mov	r1, r3
 80026f2:	4806      	ldr	r0, [pc, #24]	; (800270c <MX_TIM3_Init+0x94>)
 80026f4:	f004 fe50 	bl	8007398 <HAL_TIMEx_MasterConfigSynchronization>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80026fe:	f000 fc3b 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002702:	bf00      	nop
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000b0bc 	.word	0x2000b0bc
 8002710:	40000400 	.word	0x40000400

08002714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271a:	f107 031c 	add.w	r3, r7, #28
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	4b93      	ldr	r3, [pc, #588]	; (800297c <MX_GPIO_Init+0x268>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a92      	ldr	r2, [pc, #584]	; (800297c <MX_GPIO_Init+0x268>)
 8002734:	f043 0310 	orr.w	r3, r3, #16
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b90      	ldr	r3, [pc, #576]	; (800297c <MX_GPIO_Init+0x268>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	4b8c      	ldr	r3, [pc, #560]	; (800297c <MX_GPIO_Init+0x268>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a8b      	ldr	r2, [pc, #556]	; (800297c <MX_GPIO_Init+0x268>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b89      	ldr	r3, [pc, #548]	; (800297c <MX_GPIO_Init+0x268>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	4b85      	ldr	r3, [pc, #532]	; (800297c <MX_GPIO_Init+0x268>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a84      	ldr	r2, [pc, #528]	; (800297c <MX_GPIO_Init+0x268>)
 800276c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b82      	ldr	r3, [pc, #520]	; (800297c <MX_GPIO_Init+0x268>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b7e      	ldr	r3, [pc, #504]	; (800297c <MX_GPIO_Init+0x268>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a7d      	ldr	r2, [pc, #500]	; (800297c <MX_GPIO_Init+0x268>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b7b      	ldr	r3, [pc, #492]	; (800297c <MX_GPIO_Init+0x268>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	4b77      	ldr	r3, [pc, #476]	; (800297c <MX_GPIO_Init+0x268>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a76      	ldr	r2, [pc, #472]	; (800297c <MX_GPIO_Init+0x268>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b74      	ldr	r3, [pc, #464]	; (800297c <MX_GPIO_Init+0x268>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	4b70      	ldr	r3, [pc, #448]	; (800297c <MX_GPIO_Init+0x268>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a6f      	ldr	r2, [pc, #444]	; (800297c <MX_GPIO_Init+0x268>)
 80027c0:	f043 0308 	orr.w	r3, r3, #8
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b6d      	ldr	r3, [pc, #436]	; (800297c <MX_GPIO_Init+0x268>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2108      	movs	r1, #8
 80027d6:	486a      	ldr	r0, [pc, #424]	; (8002980 <MX_GPIO_Init+0x26c>)
 80027d8:	f001 f906 	bl	80039e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80027dc:	2201      	movs	r2, #1
 80027de:	2101      	movs	r1, #1
 80027e0:	4868      	ldr	r0, [pc, #416]	; (8002984 <MX_GPIO_Init+0x270>)
 80027e2:	f001 f901 	bl	80039e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80027e6:	2200      	movs	r2, #0
 80027e8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80027ec:	4866      	ldr	r0, [pc, #408]	; (8002988 <MX_GPIO_Init+0x274>)
 80027ee:	f001 f8fb 	bl	80039e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80027f2:	2308      	movs	r3, #8
 80027f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f6:	2301      	movs	r3, #1
 80027f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	4619      	mov	r1, r3
 8002808:	485d      	ldr	r0, [pc, #372]	; (8002980 <MX_GPIO_Init+0x26c>)
 800280a:	f000 ff51 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800280e:	2301      	movs	r3, #1
 8002810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002812:	2301      	movs	r3, #1
 8002814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	4857      	ldr	r0, [pc, #348]	; (8002984 <MX_GPIO_Init+0x270>)
 8002826:	f000 ff43 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800282a:	2308      	movs	r3, #8
 800282c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800283a:	2305      	movs	r3, #5
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	4619      	mov	r1, r3
 8002844:	484f      	ldr	r0, [pc, #316]	; (8002984 <MX_GPIO_Init+0x270>)
 8002846:	f000 ff33 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800284a:	2301      	movs	r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800284e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	4619      	mov	r1, r3
 800285e:	484b      	ldr	r0, [pc, #300]	; (800298c <MX_GPIO_Init+0x278>)
 8002860:	f000 ff26 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002864:	2310      	movs	r3, #16
 8002866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002874:	2306      	movs	r3, #6
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	4843      	ldr	r0, [pc, #268]	; (800298c <MX_GPIO_Init+0x278>)
 8002880:	f000 ff16 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002884:	23e0      	movs	r3, #224	; 0xe0
 8002886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002894:	2305      	movs	r3, #5
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	4619      	mov	r1, r3
 800289e:	483b      	ldr	r0, [pc, #236]	; (800298c <MX_GPIO_Init+0x278>)
 80028a0:	f000 ff06 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80028a4:	2304      	movs	r3, #4
 80028a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a8:	2300      	movs	r3, #0
 80028aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	4836      	ldr	r0, [pc, #216]	; (8002990 <MX_GPIO_Init+0x27c>)
 80028b8:	f000 fefa 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80028bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028ce:	2305      	movs	r3, #5
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80028d2:	f107 031c 	add.w	r3, r7, #28
 80028d6:	4619      	mov	r1, r3
 80028d8:	482d      	ldr	r0, [pc, #180]	; (8002990 <MX_GPIO_Init+0x27c>)
 80028da:	f000 fee9 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80028de:	f24f 0310 	movw	r3, #61456	; 0xf010
 80028e2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e4:	2301      	movs	r3, #1
 80028e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	4619      	mov	r1, r3
 80028f6:	4824      	ldr	r0, [pc, #144]	; (8002988 <MX_GPIO_Init+0x274>)
 80028f8:	f000 feda 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80028fc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800290e:	2306      	movs	r3, #6
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002912:	f107 031c 	add.w	r3, r7, #28
 8002916:	4619      	mov	r1, r3
 8002918:	481a      	ldr	r0, [pc, #104]	; (8002984 <MX_GPIO_Init+0x270>)
 800291a:	f000 fec9 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800291e:	2320      	movs	r3, #32
 8002920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	4815      	ldr	r0, [pc, #84]	; (8002988 <MX_GPIO_Init+0x274>)
 8002932:	f000 febd 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002936:	f44f 7310 	mov.w	r3, #576	; 0x240
 800293a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800293c:	2312      	movs	r3, #18
 800293e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002940:	2301      	movs	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002948:	2304      	movs	r3, #4
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4619      	mov	r1, r3
 8002952:	480f      	ldr	r0, [pc, #60]	; (8002990 <MX_GPIO_Init+0x27c>)
 8002954:	f000 feac 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002958:	2302      	movs	r3, #2
 800295a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800295c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002966:	f107 031c 	add.w	r3, r7, #28
 800296a:	4619      	mov	r1, r3
 800296c:	4804      	ldr	r0, [pc, #16]	; (8002980 <MX_GPIO_Init+0x26c>)
 800296e:	f000 fe9f 	bl	80036b0 <HAL_GPIO_Init>

}
 8002972:	bf00      	nop
 8002974:	3730      	adds	r7, #48	; 0x30
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	40021000 	.word	0x40021000
 8002984:	40020800 	.word	0x40020800
 8002988:	40020c00 	.word	0x40020c00
 800298c:	40020000 	.word	0x40020000
 8002990:	40020400 	.word	0x40020400

08002994 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800299c:	f00b f87a 	bl	800da94 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80029a0:	2001      	movs	r0, #1
 80029a2:	f007 feb3 	bl	800a70c <osDelay>
 80029a6:	e7fb      	b.n	80029a0 <StartDefaultTask+0xc>

080029a8 <Start_Blue_LED_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Blue_LED_Blink */
void Start_Blue_LED_Blink(void *argument)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Blue_LED_Blink */
  /* Infinite loop */
	static uint8_t i = 1;
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 80029b0:	2201      	movs	r2, #1
 80029b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b6:	4808      	ldr	r0, [pc, #32]	; (80029d8 <Start_Blue_LED_Blink+0x30>)
 80029b8:	f001 f816 	bl	80039e8 <HAL_GPIO_WritePin>
		osDelay(100);
 80029bc:	2064      	movs	r0, #100	; 0x64
 80029be:	f007 fea5 	bl	800a70c <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 80029c2:	2200      	movs	r2, #0
 80029c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029c8:	4803      	ldr	r0, [pc, #12]	; (80029d8 <Start_Blue_LED_Blink+0x30>)
 80029ca:	f001 f80d 	bl	80039e8 <HAL_GPIO_WritePin>
		osDelay(900);
 80029ce:	f44f 7061 	mov.w	r0, #900	; 0x384
 80029d2:	f007 fe9b 	bl	800a70c <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 80029d6:	e7eb      	b.n	80029b0 <Start_Blue_LED_Blink+0x8>
 80029d8:	40020c00 	.word	0x40020c00

080029dc <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 80029dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029de:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 80029e8:	f241 3088 	movw	r0, #5000	; 0x1388
 80029ec:	f007 fe8e 	bl	800a70c <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 80029f0:	4a8d      	ldr	r2, [pc, #564]	; (8002c28 <Start_Show_Resources+0x24c>)
 80029f2:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	4611      	mov	r1, r2
 80029fa:	8019      	strh	r1, [r3, #0]
 80029fc:	3302      	adds	r3, #2
 80029fe:	0c12      	lsrs	r2, r2, #16
 8002a00:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8002a02:	232d      	movs	r3, #45	; 0x2d
 8002a04:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	  char buff[10] = {0};
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8002a0e:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8002a18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f00b feba 	bl	800e79c <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8002a28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fbcf 	bl	80001d0 <strlen>
 8002a32:	4603      	mov	r3, r0
 8002a34:	461a      	mov	r2, r3
 8002a36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a7b      	ldr	r2, [pc, #492]	; (8002c2c <Start_Show_Resources+0x250>)
 8002a3e:	461d      	mov	r5, r3
 8002a40:	4614      	mov	r4, r2
 8002a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a44:	6028      	str	r0, [r5, #0]
 8002a46:	6069      	str	r1, [r5, #4]
 8002a48:	60aa      	str	r2, [r5, #8]
 8002a4a:	60eb      	str	r3, [r5, #12]
 8002a4c:	cc03      	ldmia	r4!, {r0, r1}
 8002a4e:	6128      	str	r0, [r5, #16]
 8002a50:	6169      	str	r1, [r5, #20]
 8002a52:	7823      	ldrb	r3, [r4, #0]
 8002a54:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8002a56:	f00a ff55 	bl	800d904 <xPortGetFreeHeapSize>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b74      	ldr	r3, [pc, #464]	; (8002c30 <Start_Show_Resources+0x254>)
 8002a60:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8002a62:	4b73      	ldr	r3, [pc, #460]	; (8002c30 <Start_Show_Resources+0x254>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8002a6a:	220a      	movs	r2, #10
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f00b fe71 	bl	800e754 <itoa>
	  strcat(msg.Buf, buff);
 8002a72:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002a76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f00c fc86 	bl	800f38e <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8002a82:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8002a86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f00c fc7e 	bl	800f38e <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME           | STATUS |   PRIOR	|  STACK  |    NUM  |\n\r\0");
 8002a92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fb9a 	bl	80001d0 <strlen>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4a63      	ldr	r2, [pc, #396]	; (8002c34 <Start_Show_Resources+0x258>)
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	4611      	mov	r1, r2
 8002aac:	2341      	movs	r3, #65	; 0x41
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f00b fe66 	bl	800e780 <memcpy>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8002ab4:	4860      	ldr	r0, [pc, #384]	; (8002c38 <Start_Show_Resources+0x25c>)
 8002ab6:	f009 feed 	bl	800c894 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8002ac0:	e004      	b.n	8002acc <Start_Show_Resources+0xf0>
	  {
	  	buffer_size ++;
 8002ac2:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8002acc:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8002ad0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002ad4:	5cd3      	ldrb	r3, [r2, r3]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f3      	bne.n	8002ac2 <Start_Show_Resources+0xe6>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002ae6:	e011      	b.n	8002b0c <Start_Show_Resources+0x130>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002ae8:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8002aec:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002af0:	4413      	add	r3, r2
 8002af2:	4951      	ldr	r1, [pc, #324]	; (8002c38 <Start_Show_Resources+0x25c>)
 8002af4:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8002af8:	440a      	add	r2, r1
 8002afa:	7811      	ldrb	r1, [r2, #0]
 8002afc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002b00:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002b02:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002b06:	3301      	adds	r3, #1
 8002b08:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002b0c:	4a4a      	ldr	r2, [pc, #296]	; (8002c38 <Start_Show_Resources+0x25c>)
 8002b0e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e6      	bne.n	8002ae8 <Start_Show_Resources+0x10c>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8002b1a:	4b48      	ldr	r3, [pc, #288]	; (8002c3c <Start_Show_Resources+0x260>)
 8002b1c:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 8002b20:	461d      	mov	r5, r3
 8002b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b2a:	c403      	stmia	r4!, {r0, r1}
 8002b2c:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME           | ABS TIME |              TASK TIME% |\n\r"};
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	4a43      	ldr	r2, [pc, #268]	; (8002c40 <Start_Show_Resources+0x264>)
 8002b34:	461c      	mov	r4, r3
 8002b36:	4615      	mov	r5, r2
 8002b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b48:	c407      	stmia	r4!, {r0, r1, r2}
 8002b4a:	8023      	strh	r3, [r4, #0]
 8002b4c:	3402      	adds	r4, #2
 8002b4e:	0c1b      	lsrs	r3, r3, #16
 8002b50:	7023      	strb	r3, [r4, #0]
	  strcat(msg.Buf, str_line);
 8002b52:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8002b56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f00c fc16 	bl	800f38e <strcat>
	  strcat(msg.Buf, str_head_2);
 8002b62:	f107 020c 	add.w	r2, r7, #12
 8002b66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f00c fc0e 	bl	800f38e <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8002b72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b76:	2100      	movs	r1, #0
 8002b78:	482f      	ldr	r0, [pc, #188]	; (8002c38 <Start_Show_Resources+0x25c>)
 8002b7a:	f00b fe0f 	bl	800e79c <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8002b7e:	482e      	ldr	r0, [pc, #184]	; (8002c38 <Start_Show_Resources+0x25c>)
 8002b80:	f009 ff1e 	bl	800c9c0 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);           // НЕ ВИВОДИТЬ СТРОКУ !!!!!!!!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<
 8002b84:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8002b8e:	4413      	add	r3, r2
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3357      	adds	r3, #87	; 0x57
 8002b94:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002b9e:	e011      	b.n	8002bc4 <Start_Show_Resources+0x1e8>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002ba0:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8002ba4:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002ba8:	4413      	add	r3, r2
 8002baa:	4923      	ldr	r1, [pc, #140]	; (8002c38 <Start_Show_Resources+0x25c>)
 8002bac:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8002bb0:	440a      	add	r2, r1
 8002bb2:	7811      	ldrb	r1, [r2, #0]
 8002bb4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002bb8:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002bba:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <Start_Show_Resources+0x25c>)
 8002bc6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002bca:	4413      	add	r3, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e6      	bne.n	8002ba0 <Start_Show_Resources+0x1c4>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8002bd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fafa 	bl	80001d0 <strlen>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	461a      	mov	r2, r3
 8002be0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002be4:	4413      	add	r3, r2
 8002be6:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <Start_Show_Resources+0x268>)
 8002be8:	4614      	mov	r4, r2
 8002bea:	469c      	mov	ip, r3
 8002bec:	f104 0e20 	add.w	lr, r4, #32
 8002bf0:	4665      	mov	r5, ip
 8002bf2:	4626      	mov	r6, r4
 8002bf4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002bf6:	6028      	str	r0, [r5, #0]
 8002bf8:	6069      	str	r1, [r5, #4]
 8002bfa:	60aa      	str	r2, [r5, #8]
 8002bfc:	60eb      	str	r3, [r5, #12]
 8002bfe:	3410      	adds	r4, #16
 8002c00:	f10c 0c10 	add.w	ip, ip, #16
 8002c04:	4574      	cmp	r4, lr
 8002c06:	d1f3      	bne.n	8002bf0 <Start_Show_Resources+0x214>
 8002c08:	4665      	mov	r5, ip
 8002c0a:	4623      	mov	r3, r4
 8002c0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c0e:	6028      	str	r0, [r5, #0]
 8002c10:	6069      	str	r1, [r5, #4]
 8002c12:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <Start_Show_Resources+0x26c>)
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c20:	2200      	movs	r2, #0
 8002c22:	f007 fe01 	bl	800a828 <osMessageQueuePut>
  {
 8002c26:	e6df      	b.n	80029e8 <Start_Show_Resources+0xc>
 8002c28:	08011530 	.word	0x08011530
 8002c2c:	080114a4 	.word	0x080114a4
 8002c30:	2000075c 	.word	0x2000075c
 8002c34:	080114c0 	.word	0x080114c0
 8002c38:	20000374 	.word	0x20000374
 8002c3c:	08011534 	.word	0x08011534
 8002c40:	08011550 	.word	0x08011550
 8002c44:	08011504 	.word	0x08011504
 8002c48:	200086b8 	.word	0x200086b8

08002c4c <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <Start_UART_Task+0x58>)
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	f107 010c 	add.w	r1, r7, #12
 8002c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c64:	2200      	movs	r2, #0
 8002c66:	f007 fe3f 	bl	800a8e8 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002c70:	e004      	b.n	8002c7c <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8002c72:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002c76:	3301      	adds	r3, #1
 8002c78:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002c7c:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002c80:	f107 020c 	add.w	r2, r7, #12
 8002c84:	5cd3      	ldrb	r3, [r2, r3]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f3      	bne.n	8002c72 <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8002c8a:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f00a ffbb 	bl	800dc10 <CDC_Transmit_FS>
    osDelay(1);
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f007 fd36 	bl	800a70c <osDelay>
  {
 8002ca0:	e7da      	b.n	8002c58 <Start_UART_Task+0xc>
 8002ca2:	bf00      	nop
 8002ca4:	200086b8 	.word	0x200086b8

08002ca8 <Start_bme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_bme280 */
void Start_bme280(void *argument)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 8002cae:	af04      	add	r7, sp, #16
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_bme280 */
  /* Infinite loop */

	QUEUE_t msg;
	memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8002cb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f00b fd6c 	bl	800e79c <memset>

	uint16_t STATUS=0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	uint16_t addres_device = 0x76;  		 	// BME280
 8002cca:	2376      	movs	r3, #118	; 0x76
 8002ccc:	f8a7 3464 	strh.w	r3, [r7, #1124]	; 0x464
	uint16_t id_addr = 0xD0;
 8002cd0:	23d0      	movs	r3, #208	; 0xd0
 8002cd2:	f8a7 3462 	strh.w	r3, [r7, #1122]	; 0x462
	uint8_t id = 96;							// in hex form
 8002cd6:	2360      	movs	r3, #96	; 0x60
 8002cd8:	f887 3461 	strb.w	r3, [r7, #1121]	; 0x461
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8002cdc:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8002ce4:	f8b7 3464 	ldrh.w	r3, [r7, #1124]	; 0x464
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	b299      	uxth	r1, r3
 8002cec:	f8b7 2462 	ldrh.w	r2, [r7, #1122]	; 0x462
 8002cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf4:	9302      	str	r3, [sp, #8]
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2301      	movs	r3, #1
 8002d02:	4881      	ldr	r0, [pc, #516]	; (8002f08 <Start_bme280+0x260>)
 8002d04:	f001 faf2 	bl	80042ec <HAL_I2C_Mem_Read>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 8002d0e:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	f897 2461 	ldrb.w	r2, [r7, #1121]	; 0x461
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d107      	bne.n	8002d2c <Start_bme280+0x84>
 8002d1c:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d103      	bne.n	8002d2c <Start_bme280+0x84>
	{
		//i2c_device.BME280_ready_status = true;
		int ggg = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	{
 8002d2a:	e002      	b.n	8002d32 <Start_bme280+0x8a>
	}
	else
	{
		int fff = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	}



	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002d32:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <Start_bme280+0x264>)
 8002d34:	2276      	movs	r2, #118	; 0x76
 8002d36:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8002d38:	4b74      	ldr	r3, [pc, #464]	; (8002f0c <Start_bme280+0x264>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <Start_bme280+0x264>)
 8002d40:	4a73      	ldr	r2, [pc, #460]	; (8002f10 <Start_bme280+0x268>)
 8002d42:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8002d44:	4b71      	ldr	r3, [pc, #452]	; (8002f0c <Start_bme280+0x264>)
 8002d46:	4a73      	ldr	r2, [pc, #460]	; (8002f14 <Start_bme280+0x26c>)
 8002d48:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8002d4a:	4b70      	ldr	r3, [pc, #448]	; (8002f0c <Start_bme280+0x264>)
 8002d4c:	4a72      	ldr	r2, [pc, #456]	; (8002f18 <Start_bme280+0x270>)
 8002d4e:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8002d50:	486e      	ldr	r0, [pc, #440]	; (8002f0c <Start_bme280+0x264>)
 8002d52:	f7fe f8f5 	bl	8000f40 <bme280_init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b70      	ldr	r3, [pc, #448]	; (8002f1c <Start_bme280+0x274>)
 8002d5c:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002d5e:	4b6b      	ldr	r3, [pc, #428]	; (8002f0c <Start_bme280+0x264>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002d66:	4b69      	ldr	r3, [pc, #420]	; (8002f0c <Start_bme280+0x264>)
 8002d68:	2205      	movs	r2, #5
 8002d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002d6e:	4b67      	ldr	r3, [pc, #412]	; (8002f0c <Start_bme280+0x264>)
 8002d70:	2202      	movs	r2, #2
 8002d72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8002d76:	4b65      	ldr	r3, [pc, #404]	; (8002f0c <Start_bme280+0x264>)
 8002d78:	2204      	movs	r2, #4
 8002d7a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8002d7e:	4963      	ldr	r1, [pc, #396]	; (8002f0c <Start_bme280+0x264>)
 8002d80:	200f      	movs	r0, #15
 8002d82:	f7fe f9cf 	bl	8001124 <bme280_set_sensor_settings>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b64      	ldr	r3, [pc, #400]	; (8002f1c <Start_bme280+0x274>)
 8002d8c:	701a      	strb	r2, [r3, #0]

	//	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8002d8e:	495f      	ldr	r1, [pc, #380]	; (8002f0c <Start_bme280+0x264>)
 8002d90:	2003      	movs	r0, #3
 8002d92:	f7fe fa1c 	bl	80011ce <bme280_set_sensor_mode>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b60      	ldr	r3, [pc, #384]	; (8002f1c <Start_bme280+0x274>)
 8002d9c:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8002d9e:	4b5b      	ldr	r3, [pc, #364]	; (8002f0c <Start_bme280+0x264>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2028      	movs	r0, #40	; 0x28
 8002da4:	4798      	blx	r3

  for(;;)
  {
	  osDelay(1000);
 8002da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002daa:	f007 fcaf 	bl	800a70c <osDelay>
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8002dae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f00b fcef 	bl	800e79c <memset>
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002dbe:	4a53      	ldr	r2, [pc, #332]	; (8002f0c <Start_bme280+0x264>)
 8002dc0:	4957      	ldr	r1, [pc, #348]	; (8002f20 <Start_bme280+0x278>)
 8002dc2:	2007      	movs	r0, #7
 8002dc4:	f7fe fa7f 	bl	80012c6 <bme280_get_sensor_data>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <Start_bme280+0x274>)
 8002dce:	701a      	strb	r2, [r3, #0]

	  if(rslt == BME280_OK)
 8002dd0:	4b52      	ldr	r3, [pc, #328]	; (8002f1c <Start_bme280+0x274>)
 8002dd2:	f993 3000 	ldrsb.w	r3, [r3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e5      	bne.n	8002da6 <Start_bme280+0xfe>
	  {
	  		// Save data in main structure
	  		float BME280_temperature = comp_data.temperature;
 8002dda:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <Start_bme280+0x278>)
 8002ddc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	f7fd fee0 	bl	8000ba8 <__aeabi_d2f>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8002dee:	6013      	str	r3, [r2, #0]
	  		float BME280_humidity = comp_data.humidity;
 8002df0:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <Start_bme280+0x278>)
 8002df2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f7fd fed5 	bl	8000ba8 <__aeabi_d2f>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8002e04:	6013      	str	r3, [r2, #0]
	  		float BME280_preasure = comp_data.pressure;
 8002e06:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <Start_bme280+0x278>)
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f7fd feca 	bl	8000ba8 <__aeabi_d2f>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8002e1a:	6013      	str	r3, [r2, #0]

	  		char str_t_h_and_p[50] = {0};
 8002e1c:	f107 0308 	add.w	r3, r7, #8
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	3304      	adds	r3, #4
 8002e26:	222e      	movs	r2, #46	; 0x2e
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f00b fcb6 	bl	800e79c <memset>
	  		char str_thp_buffer[12] = {0};
 8002e30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
	  		//strcat(str_t_h_and_p, "BEE280: \n\r\0");

	  		//НЕ ЗАПИСУЄТЬСЯ В ЧЕРГУ !!!
	  		strcat(msg.Buf, "BEE280: \n\r");
 8002e40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd f9c3 	bl	80001d0 <strlen>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e52:	4413      	add	r3, r2
 8002e54:	4933      	ldr	r1, [pc, #204]	; (8002f24 <Start_bme280+0x27c>)
 8002e56:	461a      	mov	r2, r3
 8002e58:	460b      	mov	r3, r1
 8002e5a:	cb03      	ldmia	r3!, {r0, r1}
 8002e5c:	6010      	str	r0, [r2, #0]
 8002e5e:	6051      	str	r1, [r2, #4]
 8002e60:	8819      	ldrh	r1, [r3, #0]
 8002e62:	789b      	ldrb	r3, [r3, #2]
 8002e64:	8111      	strh	r1, [r2, #8]
 8002e66:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_h_and_p, "T: ");
 8002e68:	f107 0308 	add.w	r3, r7, #8
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fd f9af 	bl	80001d0 <strlen>
 8002e72:	4603      	mov	r3, r0
 8002e74:	461a      	mov	r2, r3
 8002e76:	f107 0308 	add.w	r3, r7, #8
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4a2a      	ldr	r2, [pc, #168]	; (8002f28 <Start_bme280+0x280>)
 8002e7e:	6810      	ldr	r0, [r2, #0]
 8002e80:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_temperature);
 8002e82:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	f7fd fb5e 	bl	8000548 <__aeabi_f2d>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002e94:	4925      	ldr	r1, [pc, #148]	; (8002f2c <Start_bme280+0x284>)
 8002e96:	f00c fa17 	bl	800f2c8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8002e9a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002e9e:	f107 0308 	add.w	r3, r7, #8
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f00c fa72 	bl	800f38e <strcat>
	  		strcat(str_t_h_and_p, " C\n\r\0");
 8002eaa:	f107 0308 	add.w	r3, r7, #8
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd f98e 	bl	80001d0 <strlen>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f107 0308 	add.w	r3, r7, #8
 8002ebc:	4413      	add	r3, r2
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <Start_bme280+0x288>)
 8002ec0:	6810      	ldr	r0, [r2, #0]
 8002ec2:	6018      	str	r0, [r3, #0]
 8002ec4:	7912      	ldrb	r2, [r2, #4]
 8002ec6:	711a      	strb	r2, [r3, #4]
	  		strcat(msg.Buf, str_t_h_and_p);
 8002ec8:	f107 0208 	add.w	r2, r7, #8
 8002ecc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f00c fa5b 	bl	800f38e <strcat>

	  		memset(str_thp_buffer,0, sizeof(str_thp_buffer));
 8002ed8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002edc:	220c      	movs	r2, #12
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f00b fc5b 	bl	800e79c <memset>
	  		memset(str_t_h_and_p,0, sizeof(str_t_h_and_p));
 8002ee6:	f107 0308 	add.w	r3, r7, #8
 8002eea:	2232      	movs	r2, #50	; 0x32
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f00b fc54 	bl	800e79c <memset>
//	  		strcat(str_t_h_and_p, " %\n\r\0");
//	  		strcat(msg.Buf, str_t_h_and_p);



	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <Start_bme280+0x28c>)
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f00:	2200      	movs	r2, #0
 8002f02:	f007 fc91 	bl	800a828 <osMessageQueuePut>
	  osDelay(1000);
 8002f06:	e74e      	b.n	8002da6 <Start_bme280+0xfe>
 8002f08:	20005474 	.word	0x20005474
 8002f0c:	20005434 	.word	0x20005434
 8002f10:	08002375 	.word	0x08002375
 8002f14:	080023fd 	.word	0x080023fd
 8002f18:	080023e5 	.word	0x080023e5
 8002f1c:	2000751c 	.word	0x2000751c
 8002f20:	20007520 	.word	0x20007520
 8002f24:	08011590 	.word	0x08011590
 8002f28:	0801159c 	.word	0x0801159c
 8002f2c:	080115a0 	.word	0x080115a0
 8002f30:	080115a4 	.word	0x080115a4
 8002f34:	200086b8 	.word	0x200086b8

08002f38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM3)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d104      	bne.n	8002f54 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	4a07      	ldr	r2, [pc, #28]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002f52:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a06      	ldr	r2, [pc, #24]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8002f5e:	f000 fa81 	bl	8003464 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	2000c308 	.word	0x2000c308
 8002f74:	40010000 	.word	0x40010000

08002f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f7c:	b672      	cpsid	i
}
 8002f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <Error_Handler+0x8>
	...

08002f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_MspInit+0x54>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <HAL_MspInit+0x54>)
 8002f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f98:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9a:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <HAL_MspInit+0x54>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa2:	607b      	str	r3, [r7, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_MspInit+0x54>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_MspInit+0x54>)
 8002fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_MspInit+0x54>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	210f      	movs	r1, #15
 8002fc6:	f06f 0001 	mvn.w	r0, #1
 8002fca:	f000 fb47 	bl	800365c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800

08002fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	; 0x28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a29      	ldr	r2, [pc, #164]	; (80030a0 <HAL_I2C_MspInit+0xc4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d14b      	bne.n	8003096 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <HAL_I2C_MspInit+0xc8>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a27      	ldr	r2, [pc, #156]	; (80030a4 <HAL_I2C_MspInit+0xc8>)
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <HAL_I2C_MspInit+0xc8>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <HAL_I2C_MspInit+0xc8>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <HAL_I2C_MspInit+0xc8>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_I2C_MspInit+0xc8>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800303a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800303c:	2312      	movs	r3, #18
 800303e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003044:	2303      	movs	r3, #3
 8003046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003048:	2304      	movs	r3, #4
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4619      	mov	r1, r3
 8003052:	4815      	ldr	r0, [pc, #84]	; (80030a8 <HAL_I2C_MspInit+0xcc>)
 8003054:	f000 fb2c 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800305c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800305e:	2312      	movs	r3, #18
 8003060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003066:	2303      	movs	r3, #3
 8003068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800306a:	2304      	movs	r3, #4
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 0314 	add.w	r3, r7, #20
 8003072:	4619      	mov	r1, r3
 8003074:	480d      	ldr	r0, [pc, #52]	; (80030ac <HAL_I2C_MspInit+0xd0>)
 8003076:	f000 fb1b 	bl	80036b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_I2C_MspInit+0xc8>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	4a08      	ldr	r2, [pc, #32]	; (80030a4 <HAL_I2C_MspInit+0xc8>)
 8003084:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_I2C_MspInit+0xc8>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003096:	bf00      	nop
 8003098:	3728      	adds	r7, #40	; 0x28
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40005c00 	.word	0x40005c00
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40020800 	.word	0x40020800
 80030ac:	40020000 	.word	0x40020000

080030b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <HAL_TIM_Base_MspInit+0x48>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d115      	bne.n	80030ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <HAL_TIM_Base_MspInit+0x4c>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a0c      	ldr	r2, [pc, #48]	; (80030fc <HAL_TIM_Base_MspInit+0x4c>)
 80030cc:	f043 0302 	orr.w	r3, r3, #2
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_TIM_Base_MspInit+0x4c>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	2105      	movs	r1, #5
 80030e2:	201d      	movs	r0, #29
 80030e4:	f000 faba 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030e8:	201d      	movs	r0, #29
 80030ea:	f000 fad3 	bl	8003694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40023800 	.word	0x40023800

08003100 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08c      	sub	sp, #48	; 0x30
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003110:	2200      	movs	r2, #0
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	2019      	movs	r0, #25
 8003116:	f000 faa1 	bl	800365c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800311a:	2019      	movs	r0, #25
 800311c:	f000 faba 	bl	8003694 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <HAL_InitTick+0xa4>)
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <HAL_InitTick+0xa4>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6453      	str	r3, [r2, #68]	; 0x44
 8003130:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <HAL_InitTick+0xa4>)
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800313c:	f107 0210 	add.w	r2, r7, #16
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f003 fd02 	bl	8006b50 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800314c:	f003 fcec 	bl	8006b28 <HAL_RCC_GetPCLK2Freq>
 8003150:	4603      	mov	r3, r0
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <HAL_InitTick+0xa8>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	0c9b      	lsrs	r3, r3, #18
 8003160:	3b01      	subs	r3, #1
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <HAL_InitTick+0xac>)
 8003166:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <HAL_InitTick+0xb0>)
 8003168:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_InitTick+0xac>)
 800316c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003170:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003172:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <HAL_InitTick+0xac>)
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <HAL_InitTick+0xac>)
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317e:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <HAL_InitTick+0xac>)
 8003180:	2200      	movs	r2, #0
 8003182:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003184:	4809      	ldr	r0, [pc, #36]	; (80031ac <HAL_InitTick+0xac>)
 8003186:	f003 fd15 	bl	8006bb4 <HAL_TIM_Base_Init>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d104      	bne.n	800319a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003190:	4806      	ldr	r0, [pc, #24]	; (80031ac <HAL_InitTick+0xac>)
 8003192:	f003 fd5f 	bl	8006c54 <HAL_TIM_Base_Start_IT>
 8003196:	4603      	mov	r3, r0
 8003198:	e000      	b.n	800319c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
}
 800319c:	4618      	mov	r0, r3
 800319e:	3730      	adds	r7, #48	; 0x30
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40023800 	.word	0x40023800
 80031a8:	431bde83 	.word	0x431bde83
 80031ac:	2000c494 	.word	0x2000c494
 80031b0:	40010000 	.word	0x40010000

080031b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <NMI_Handler+0x4>

080031ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031be:	e7fe      	b.n	80031be <HardFault_Handler+0x4>

080031c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c4:	e7fe      	b.n	80031c4 <MemManage_Handler+0x4>

080031c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ca:	e7fe      	b.n	80031ca <BusFault_Handler+0x4>

080031cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031d0:	e7fe      	b.n	80031d0 <UsageFault_Handler+0x4>

080031d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031e4:	4802      	ldr	r0, [pc, #8]	; (80031f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80031e6:	f003 fda5 	bl	8006d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	2000c494 	.word	0x2000c494

080031f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031f8:	4802      	ldr	r0, [pc, #8]	; (8003204 <TIM3_IRQHandler+0x10>)
 80031fa:	f003 fd9b 	bl	8006d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	2000b0bc 	.word	0x2000b0bc

08003208 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800320c:	4802      	ldr	r0, [pc, #8]	; (8003218 <OTG_FS_IRQHandler+0x10>)
 800320e:	f001 fff8 	bl	8005202 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	2000d9f0 	.word	0x2000d9f0

0800321c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
	return 1;
 8003220:	2301      	movs	r3, #1
}
 8003222:	4618      	mov	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <_kill>:

int _kill(int pid, int sig)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003236:	f00b f955 	bl	800e4e4 <__errno>
 800323a:	4603      	mov	r3, r0
 800323c:	2216      	movs	r2, #22
 800323e:	601a      	str	r2, [r3, #0]
	return -1;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_exit>:

void _exit (int status)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003254:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff ffe7 	bl	800322c <_kill>
	while (1) {}		/* Make sure we hang here */
 800325e:	e7fe      	b.n	800325e <_exit+0x12>

08003260 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	e00a      	b.n	8003288 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003272:	f3af 8000 	nop.w
 8003276:	4601      	mov	r1, r0
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	60ba      	str	r2, [r7, #8]
 800327e:	b2ca      	uxtb	r2, r1
 8003280:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	3301      	adds	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	dbf0      	blt.n	8003272 <_read+0x12>
	}

return len;
 8003290:	687b      	ldr	r3, [r7, #4]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b086      	sub	sp, #24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e009      	b.n	80032c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	60ba      	str	r2, [r7, #8]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	3301      	adds	r3, #1
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	dbf1      	blt.n	80032ac <_write+0x12>
	}
	return len;
 80032c8:	687b      	ldr	r3, [r7, #4]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <_close>:

int _close(int file)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
	return -1;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032fa:	605a      	str	r2, [r3, #4]
	return 0;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <_isatty>:

int _isatty(int file)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
	return 1;
 8003312:	2301      	movs	r3, #1
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
	return 0;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003344:	4a14      	ldr	r2, [pc, #80]	; (8003398 <_sbrk+0x5c>)
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <_sbrk+0x60>)
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003350:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <_sbrk+0x64>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d102      	bne.n	800335e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <_sbrk+0x64>)
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <_sbrk+0x68>)
 800335c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <_sbrk+0x64>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	429a      	cmp	r2, r3
 800336a:	d207      	bcs.n	800337c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800336c:	f00b f8ba 	bl	800e4e4 <__errno>
 8003370:	4603      	mov	r3, r0
 8003372:	220c      	movs	r2, #12
 8003374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800337a:	e009      	b.n	8003390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <_sbrk+0x64>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <_sbrk+0x64>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	4a05      	ldr	r2, [pc, #20]	; (80033a0 <_sbrk+0x64>)
 800338c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800338e:	68fb      	ldr	r3, [r7, #12]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20020000 	.word	0x20020000
 800339c:	00000400 	.word	0x00000400
 80033a0:	20000760 	.word	0x20000760
 80033a4:	2000de08 	.word	0x2000de08

080033a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <SystemInit+0x20>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <SystemInit+0x20>)
 80033b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033d0:	480d      	ldr	r0, [pc, #52]	; (8003408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033d2:	490e      	ldr	r1, [pc, #56]	; (800340c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033d4:	4a0e      	ldr	r2, [pc, #56]	; (8003410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033d8:	e002      	b.n	80033e0 <LoopCopyDataInit>

080033da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033de:	3304      	adds	r3, #4

080033e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e4:	d3f9      	bcc.n	80033da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033e6:	4a0b      	ldr	r2, [pc, #44]	; (8003414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033e8:	4c0b      	ldr	r4, [pc, #44]	; (8003418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033ec:	e001      	b.n	80033f2 <LoopFillZerobss>

080033ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f0:	3204      	adds	r2, #4

080033f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f4:	d3fb      	bcc.n	80033ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033f6:	f7ff ffd7 	bl	80033a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033fa:	f00b f96f 	bl	800e6dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033fe:	f7ff f839 	bl	8002474 <main>
  bx  lr    
 8003402:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800340c:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8003410:	08011b34 	.word	0x08011b34
  ldr r2, =_sbss
 8003414:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8003418:	2000de08 	.word	0x2000de08

0800341c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800341c:	e7fe      	b.n	800341c <ADC_IRQHandler>
	...

08003420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003424:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <HAL_Init+0x40>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <HAL_Init+0x40>)
 800342a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800342e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_Init+0x40>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <HAL_Init+0x40>)
 8003436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800343a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <HAL_Init+0x40>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a07      	ldr	r2, [pc, #28]	; (8003460 <HAL_Init+0x40>)
 8003442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003448:	2003      	movs	r0, #3
 800344a:	f000 f8fc 	bl	8003646 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800344e:	200f      	movs	r0, #15
 8003450:	f7ff fe56 	bl	8003100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003454:	f7ff fd96 	bl	8002f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40023c00 	.word	0x40023c00

08003464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_IncTick+0x20>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_IncTick+0x24>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4413      	add	r3, r2
 8003474:	4a04      	ldr	r2, [pc, #16]	; (8003488 <HAL_IncTick+0x24>)
 8003476:	6013      	str	r3, [r2, #0]
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000008 	.word	0x20000008
 8003488:	2000c4dc 	.word	0x2000c4dc

0800348c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return uwTick;
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_GetTick+0x14>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	2000c4dc 	.word	0x2000c4dc

080034a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034ac:	f7ff ffee 	bl	800348c <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034bc:	d005      	beq.n	80034ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <HAL_Delay+0x44>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034ca:	bf00      	nop
 80034cc:	f7ff ffde 	bl	800348c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d8f7      	bhi.n	80034cc <HAL_Delay+0x28>
  {
  }
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000008 	.word	0x20000008

080034ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003508:	4013      	ands	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351e:	4a04      	ldr	r2, [pc, #16]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	60d3      	str	r3, [r2, #12]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <__NVIC_GetPriorityGrouping+0x18>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 0307 	and.w	r3, r3, #7
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	2b00      	cmp	r3, #0
 8003560:	db0b      	blt.n	800357a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	4907      	ldr	r1, [pc, #28]	; (8003588 <__NVIC_EnableIRQ+0x38>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2001      	movs	r0, #1
 8003572:	fa00 f202 	lsl.w	r2, r0, r2
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	e000e100 	.word	0xe000e100

0800358c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db0a      	blt.n	80035b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	490c      	ldr	r1, [pc, #48]	; (80035d8 <__NVIC_SetPriority+0x4c>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	440b      	add	r3, r1
 80035b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b4:	e00a      	b.n	80035cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4908      	ldr	r1, [pc, #32]	; (80035dc <__NVIC_SetPriority+0x50>)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3b04      	subs	r3, #4
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	440b      	add	r3, r1
 80035ca:	761a      	strb	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f1c3 0307 	rsb	r3, r3, #7
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf28      	it	cs
 80035fe:	2304      	movcs	r3, #4
 8003600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3304      	adds	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d902      	bls.n	8003610 <NVIC_EncodePriority+0x30>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3b03      	subs	r3, #3
 800360e:	e000      	b.n	8003612 <NVIC_EncodePriority+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43d9      	mvns	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	4313      	orrs	r3, r2
         );
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ff4c 	bl	80034ec <__NVIC_SetPriorityGrouping>
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800366e:	f7ff ff61 	bl	8003534 <__NVIC_GetPriorityGrouping>
 8003672:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	6978      	ldr	r0, [r7, #20]
 800367a:	f7ff ffb1 	bl	80035e0 <NVIC_EncodePriority>
 800367e:	4602      	mov	r2, r0
 8003680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ff80 	bl	800358c <__NVIC_SetPriority>
}
 800368c:	bf00      	nop
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ff54 	bl	8003550 <__NVIC_EnableIRQ>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	; 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	e16b      	b.n	80039a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	f040 815a 	bne.w	800399e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d005      	beq.n	8003702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d130      	bne.n	8003764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	2203      	movs	r2, #3
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003738:	2201      	movs	r2, #1
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 0201 	and.w	r2, r3, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b03      	cmp	r3, #3
 800376e:	d017      	beq.n	80037a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d123      	bne.n	80037f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	08da      	lsrs	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3208      	adds	r2, #8
 80037b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	220f      	movs	r2, #15
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	08da      	lsrs	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3208      	adds	r2, #8
 80037ee:	69b9      	ldr	r1, [r7, #24]
 80037f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0203 	and.w	r2, r3, #3
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80b4 	beq.w	800399e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b60      	ldr	r3, [pc, #384]	; (80039bc <HAL_GPIO_Init+0x30c>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	4a5f      	ldr	r2, [pc, #380]	; (80039bc <HAL_GPIO_Init+0x30c>)
 8003840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003844:	6453      	str	r3, [r2, #68]	; 0x44
 8003846:	4b5d      	ldr	r3, [pc, #372]	; (80039bc <HAL_GPIO_Init+0x30c>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003852:	4a5b      	ldr	r2, [pc, #364]	; (80039c0 <HAL_GPIO_Init+0x310>)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	220f      	movs	r2, #15
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_GPIO_Init+0x314>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d02b      	beq.n	80038d6 <HAL_GPIO_Init+0x226>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a51      	ldr	r2, [pc, #324]	; (80039c8 <HAL_GPIO_Init+0x318>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d025      	beq.n	80038d2 <HAL_GPIO_Init+0x222>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a50      	ldr	r2, [pc, #320]	; (80039cc <HAL_GPIO_Init+0x31c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01f      	beq.n	80038ce <HAL_GPIO_Init+0x21e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4f      	ldr	r2, [pc, #316]	; (80039d0 <HAL_GPIO_Init+0x320>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d019      	beq.n	80038ca <HAL_GPIO_Init+0x21a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4e      	ldr	r2, [pc, #312]	; (80039d4 <HAL_GPIO_Init+0x324>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_GPIO_Init+0x216>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4d      	ldr	r2, [pc, #308]	; (80039d8 <HAL_GPIO_Init+0x328>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00d      	beq.n	80038c2 <HAL_GPIO_Init+0x212>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4c      	ldr	r2, [pc, #304]	; (80039dc <HAL_GPIO_Init+0x32c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <HAL_GPIO_Init+0x20e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4b      	ldr	r2, [pc, #300]	; (80039e0 <HAL_GPIO_Init+0x330>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <HAL_GPIO_Init+0x20a>
 80038b6:	2307      	movs	r3, #7
 80038b8:	e00e      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038ba:	2308      	movs	r3, #8
 80038bc:	e00c      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038be:	2306      	movs	r3, #6
 80038c0:	e00a      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038c2:	2305      	movs	r3, #5
 80038c4:	e008      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038c6:	2304      	movs	r3, #4
 80038c8:	e006      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038ca:	2303      	movs	r3, #3
 80038cc:	e004      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e002      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038d6:	2300      	movs	r3, #0
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f002 0203 	and.w	r2, r2, #3
 80038de:	0092      	lsls	r2, r2, #2
 80038e0:	4093      	lsls	r3, r2
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e8:	4935      	ldr	r1, [pc, #212]	; (80039c0 <HAL_GPIO_Init+0x310>)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038f6:	4b3b      	ldr	r3, [pc, #236]	; (80039e4 <HAL_GPIO_Init+0x334>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800391a:	4a32      	ldr	r2, [pc, #200]	; (80039e4 <HAL_GPIO_Init+0x334>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003920:	4b30      	ldr	r3, [pc, #192]	; (80039e4 <HAL_GPIO_Init+0x334>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003944:	4a27      	ldr	r2, [pc, #156]	; (80039e4 <HAL_GPIO_Init+0x334>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800394a:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <HAL_GPIO_Init+0x334>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800396e:	4a1d      	ldr	r2, [pc, #116]	; (80039e4 <HAL_GPIO_Init+0x334>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <HAL_GPIO_Init+0x334>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003998:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <HAL_GPIO_Init+0x334>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3301      	adds	r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	f67f ae90 	bls.w	80036cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3724      	adds	r7, #36	; 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40013800 	.word	0x40013800
 80039c4:	40020000 	.word	0x40020000
 80039c8:	40020400 	.word	0x40020400
 80039cc:	40020800 	.word	0x40020800
 80039d0:	40020c00 	.word	0x40020c00
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40021400 	.word	0x40021400
 80039dc:	40021800 	.word	0x40021800
 80039e0:	40021c00 	.word	0x40021c00
 80039e4:	40013c00 	.word	0x40013c00

080039e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]
 80039f4:	4613      	mov	r3, r2
 80039f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039f8:	787b      	ldrb	r3, [r7, #1]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039fe:	887a      	ldrh	r2, [r7, #2]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a04:	e003      	b.n	8003a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	041a      	lsls	r2, r3, #16
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	619a      	str	r2, [r3, #24]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e12b      	b.n	8003c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff faca 	bl	8002fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2224      	movs	r2, #36	; 0x24
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a80:	f003 f83e 	bl	8006b00 <HAL_RCC_GetPCLK1Freq>
 8003a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4a81      	ldr	r2, [pc, #516]	; (8003c90 <HAL_I2C_Init+0x274>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d807      	bhi.n	8003aa0 <HAL_I2C_Init+0x84>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a80      	ldr	r2, [pc, #512]	; (8003c94 <HAL_I2C_Init+0x278>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bf94      	ite	ls
 8003a98:	2301      	movls	r3, #1
 8003a9a:	2300      	movhi	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e006      	b.n	8003aae <HAL_I2C_Init+0x92>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a7d      	ldr	r2, [pc, #500]	; (8003c98 <HAL_I2C_Init+0x27c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	bf94      	ite	ls
 8003aa8:	2301      	movls	r3, #1
 8003aaa:	2300      	movhi	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0e7      	b.n	8003c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a78      	ldr	r2, [pc, #480]	; (8003c9c <HAL_I2C_Init+0x280>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	0c9b      	lsrs	r3, r3, #18
 8003ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a6a      	ldr	r2, [pc, #424]	; (8003c90 <HAL_I2C_Init+0x274>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d802      	bhi.n	8003af0 <HAL_I2C_Init+0xd4>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3301      	adds	r3, #1
 8003aee:	e009      	b.n	8003b04 <HAL_I2C_Init+0xe8>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	4a69      	ldr	r2, [pc, #420]	; (8003ca0 <HAL_I2C_Init+0x284>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	3301      	adds	r3, #1
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	495c      	ldr	r1, [pc, #368]	; (8003c90 <HAL_I2C_Init+0x274>)
 8003b20:	428b      	cmp	r3, r1
 8003b22:	d819      	bhi.n	8003b58 <HAL_I2C_Init+0x13c>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e59      	subs	r1, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b32:	1c59      	adds	r1, r3, #1
 8003b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b38:	400b      	ands	r3, r1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_I2C_Init+0x138>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1e59      	subs	r1, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b52:	e051      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003b54:	2304      	movs	r3, #4
 8003b56:	e04f      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d111      	bne.n	8003b84 <HAL_I2C_Init+0x168>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1e58      	subs	r0, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	440b      	add	r3, r1
 8003b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b72:	3301      	adds	r3, #1
 8003b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e012      	b.n	8003baa <HAL_I2C_Init+0x18e>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1e58      	subs	r0, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	0099      	lsls	r1, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_Init+0x196>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e022      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_I2C_Init+0x1bc>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1e58      	subs	r0, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	440b      	add	r3, r1
 8003bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd6:	e00f      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1e58      	subs	r0, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	0099      	lsls	r1, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	6809      	ldr	r1, [r1, #0]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6911      	ldr	r1, [r2, #16]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68d2      	ldr	r2, [r2, #12]
 8003c32:	4311      	orrs	r1, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	000186a0 	.word	0x000186a0
 8003c94:	001e847f 	.word	0x001e847f
 8003c98:	003d08ff 	.word	0x003d08ff
 8003c9c:	431bde83 	.word	0x431bde83
 8003ca0:	10624dd3 	.word	0x10624dd3

08003ca4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	817b      	strh	r3, [r7, #10]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cb8:	f7ff fbe8 	bl	800348c <HAL_GetTick>
 8003cbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	f040 80e0 	bne.w	8003e8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2319      	movs	r3, #25
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4970      	ldr	r1, [pc, #448]	; (8003e98 <HAL_I2C_Master_Transmit+0x1f4>)
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 ff66 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e0d3      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_I2C_Master_Transmit+0x50>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e0cc      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x1ea>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d007      	beq.n	8003d1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2210      	movs	r2, #16
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	893a      	ldrh	r2, [r7, #8]
 8003d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a50      	ldr	r2, [pc, #320]	; (8003e9c <HAL_I2C_Master_Transmit+0x1f8>)
 8003d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d5c:	8979      	ldrh	r1, [r7, #10]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 fce8 	bl	8004738 <I2C_MasterRequestWrite>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e08d      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d88:	e066      	b.n	8003e58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	6a39      	ldr	r1, [r7, #32]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 ffe0 	bl	8004d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d107      	bne.n	8003db2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e06b      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d11b      	bne.n	8003e2c <HAL_I2C_Master_Transmit+0x188>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d017      	beq.n	8003e2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	6a39      	ldr	r1, [r7, #32]
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 ffd0 	bl	8004dd6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d107      	bne.n	8003e54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e01a      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d194      	bne.n	8003d8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	00100002 	.word	0x00100002
 8003e9c:	ffff0000 	.word	0xffff0000

08003ea0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08c      	sub	sp, #48	; 0x30
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	460b      	mov	r3, r1
 8003eae:	817b      	strh	r3, [r7, #10]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eb4:	f7ff faea 	bl	800348c <HAL_GetTick>
 8003eb8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	f040 820b 	bne.w	80042de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	2319      	movs	r3, #25
 8003ece:	2201      	movs	r2, #1
 8003ed0:	497c      	ldr	r1, [pc, #496]	; (80040c4 <HAL_I2C_Master_Receive+0x224>)
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fe68 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e1fe      	b.n	80042e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_I2C_Master_Receive+0x50>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e1f7      	b.n	80042e0 <HAL_I2C_Master_Receive+0x440>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d007      	beq.n	8003f16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2222      	movs	r2, #34	; 0x22
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2210      	movs	r2, #16
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	893a      	ldrh	r2, [r7, #8]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a5c      	ldr	r2, [pc, #368]	; (80040c8 <HAL_I2C_Master_Receive+0x228>)
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f58:	8979      	ldrh	r1, [r7, #10]
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fc6c 	bl	800483c <I2C_MasterRequestRead>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e1b8      	b.n	80042e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d113      	bne.n	8003f9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f76:	2300      	movs	r3, #0
 8003f78:	623b      	str	r3, [r7, #32]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	623b      	str	r3, [r7, #32]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	e18c      	b.n	80042b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d11b      	bne.n	8003fde <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e16c      	b.n	80042b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d11b      	bne.n	800401e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	e14c      	b.n	80042b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800402c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004044:	e138      	b.n	80042b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404a:	2b03      	cmp	r3, #3
 800404c:	f200 80f1 	bhi.w	8004232 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004054:	2b01      	cmp	r3, #1
 8004056:	d123      	bne.n	80040a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 fefb 	bl	8004e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e139      	b.n	80042e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800409e:	e10b      	b.n	80042b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d14e      	bne.n	8004146 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	2200      	movs	r2, #0
 80040b0:	4906      	ldr	r1, [pc, #24]	; (80040cc <HAL_I2C_Master_Receive+0x22c>)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fd78 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e10e      	b.n	80042e0 <HAL_I2C_Master_Receive+0x440>
 80040c2:	bf00      	nop
 80040c4:	00100002 	.word	0x00100002
 80040c8:	ffff0000 	.word	0xffff0000
 80040cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004144:	e0b8      	b.n	80042b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	2200      	movs	r2, #0
 800414e:	4966      	ldr	r1, [pc, #408]	; (80042e8 <HAL_I2C_Master_Receive+0x448>)
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fd29 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0bf      	b.n	80042e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	2200      	movs	r2, #0
 80041aa:	494f      	ldr	r1, [pc, #316]	; (80042e8 <HAL_I2C_Master_Receive+0x448>)
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fcfb 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e091      	b.n	80042e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004230:	e042      	b.n	80042b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fe0e 	bl	8004e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e04c      	b.n	80042e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b04      	cmp	r3, #4
 8004284:	d118      	bne.n	80042b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f47f aec2 	bne.w	8004046 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3728      	adds	r7, #40	; 0x28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	00010004 	.word	0x00010004

080042ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08c      	sub	sp, #48	; 0x30
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	4608      	mov	r0, r1
 80042f6:	4611      	mov	r1, r2
 80042f8:	461a      	mov	r2, r3
 80042fa:	4603      	mov	r3, r0
 80042fc:	817b      	strh	r3, [r7, #10]
 80042fe:	460b      	mov	r3, r1
 8004300:	813b      	strh	r3, [r7, #8]
 8004302:	4613      	mov	r3, r2
 8004304:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004306:	f7ff f8c1 	bl	800348c <HAL_GetTick>
 800430a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b20      	cmp	r3, #32
 8004316:	f040 8208 	bne.w	800472a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	2319      	movs	r3, #25
 8004320:	2201      	movs	r2, #1
 8004322:	497b      	ldr	r1, [pc, #492]	; (8004510 <HAL_I2C_Mem_Read+0x224>)
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fc3f 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
 8004332:	e1fb      	b.n	800472c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_I2C_Mem_Read+0x56>
 800433e:	2302      	movs	r3, #2
 8004340:	e1f4      	b.n	800472c <HAL_I2C_Mem_Read+0x440>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b01      	cmp	r3, #1
 8004356:	d007      	beq.n	8004368 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004376:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2222      	movs	r2, #34	; 0x22
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2240      	movs	r2, #64	; 0x40
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a5b      	ldr	r2, [pc, #364]	; (8004514 <HAL_I2C_Mem_Read+0x228>)
 80043a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043aa:	88f8      	ldrh	r0, [r7, #6]
 80043ac:	893a      	ldrh	r2, [r7, #8]
 80043ae:	8979      	ldrh	r1, [r7, #10]
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	4603      	mov	r3, r0
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fb0c 	bl	80049d8 <I2C_RequestMemoryRead>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e1b0      	b.n	800472c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d113      	bne.n	80043fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d2:	2300      	movs	r3, #0
 80043d4:	623b      	str	r3, [r7, #32]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	623b      	str	r3, [r7, #32]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	623b      	str	r3, [r7, #32]
 80043e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	e184      	b.n	8004704 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d11b      	bne.n	800443a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e164      	b.n	8004704 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	2b02      	cmp	r3, #2
 8004440:	d11b      	bne.n	800447a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004450:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004460:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004462:	2300      	movs	r3, #0
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	e144      	b.n	8004704 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004490:	e138      	b.n	8004704 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004496:	2b03      	cmp	r3, #3
 8004498:	f200 80f1 	bhi.w	800467e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d123      	bne.n	80044ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fcd5 	bl	8004e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e139      	b.n	800472c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ea:	e10b      	b.n	8004704 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d14e      	bne.n	8004592 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	2200      	movs	r2, #0
 80044fc:	4906      	ldr	r1, [pc, #24]	; (8004518 <HAL_I2C_Mem_Read+0x22c>)
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fb52 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e10e      	b.n	800472c <HAL_I2C_Mem_Read+0x440>
 800450e:	bf00      	nop
 8004510:	00100002 	.word	0x00100002
 8004514:	ffff0000 	.word	0xffff0000
 8004518:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004590:	e0b8      	b.n	8004704 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004598:	2200      	movs	r2, #0
 800459a:	4966      	ldr	r1, [pc, #408]	; (8004734 <HAL_I2C_Mem_Read+0x448>)
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fb03 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0bf      	b.n	800472c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	2200      	movs	r2, #0
 80045f6:	494f      	ldr	r1, [pc, #316]	; (8004734 <HAL_I2C_Mem_Read+0x448>)
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 fad5 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e091      	b.n	800472c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800467c:	e042      	b.n	8004704 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800467e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fbe8 	bl	8004e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e04c      	b.n	800472c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d118      	bne.n	8004704 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004708:	2b00      	cmp	r3, #0
 800470a:	f47f aec2 	bne.w	8004492 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	e000      	b.n	800472c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800472a:	2302      	movs	r3, #2
  }
}
 800472c:	4618      	mov	r0, r3
 800472e:	3728      	adds	r7, #40	; 0x28
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	00010004 	.word	0x00010004

08004738 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	460b      	mov	r3, r1
 8004746:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d006      	beq.n	8004762 <I2C_MasterRequestWrite+0x2a>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d003      	beq.n	8004762 <I2C_MasterRequestWrite+0x2a>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004760:	d108      	bne.n	8004774 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e00b      	b.n	800478c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	2b12      	cmp	r3, #18
 800477a:	d107      	bne.n	800478c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800478a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fa05 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00d      	beq.n	80047c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b2:	d103      	bne.n	80047bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e035      	b.n	800482c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047c8:	d108      	bne.n	80047dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ca:	897b      	ldrh	r3, [r7, #10]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047d8:	611a      	str	r2, [r3, #16]
 80047da:	e01b      	b.n	8004814 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047dc:	897b      	ldrh	r3, [r7, #10]
 80047de:	11db      	asrs	r3, r3, #7
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f003 0306 	and.w	r3, r3, #6
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f063 030f 	orn	r3, r3, #15
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	490e      	ldr	r1, [pc, #56]	; (8004834 <I2C_MasterRequestWrite+0xfc>)
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fa2b 	bl	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e010      	b.n	800482c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800480a:	897b      	ldrh	r3, [r7, #10]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	4907      	ldr	r1, [pc, #28]	; (8004838 <I2C_MasterRequestWrite+0x100>)
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fa1b 	bl	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	00010008 	.word	0x00010008
 8004838:	00010002 	.word	0x00010002

0800483c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	460b      	mov	r3, r1
 800484a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004860:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d006      	beq.n	8004876 <I2C_MasterRequestRead+0x3a>
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d003      	beq.n	8004876 <I2C_MasterRequestRead+0x3a>
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004874:	d108      	bne.n	8004888 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	e00b      	b.n	80048a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	2b11      	cmp	r3, #17
 800488e:	d107      	bne.n	80048a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800489e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f97b 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00d      	beq.n	80048d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c6:	d103      	bne.n	80048d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e079      	b.n	80049c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048dc:	d108      	bne.n	80048f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048de:	897b      	ldrh	r3, [r7, #10]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	611a      	str	r2, [r3, #16]
 80048ee:	e05f      	b.n	80049b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048f0:	897b      	ldrh	r3, [r7, #10]
 80048f2:	11db      	asrs	r3, r3, #7
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f003 0306 	and.w	r3, r3, #6
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f063 030f 	orn	r3, r3, #15
 8004900:	b2da      	uxtb	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4930      	ldr	r1, [pc, #192]	; (80049d0 <I2C_MasterRequestRead+0x194>)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f9a1 	bl	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e054      	b.n	80049c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800491e:	897b      	ldrh	r3, [r7, #10]
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4929      	ldr	r1, [pc, #164]	; (80049d4 <I2C_MasterRequestRead+0x198>)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f991 	bl	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e044      	b.n	80049c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004962:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f919 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00d      	beq.n	8004998 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498a:	d103      	bne.n	8004994 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004992:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e017      	b.n	80049c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004998:	897b      	ldrh	r3, [r7, #10]
 800499a:	11db      	asrs	r3, r3, #7
 800499c:	b2db      	uxtb	r3, r3
 800499e:	f003 0306 	and.w	r3, r3, #6
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f063 030e 	orn	r3, r3, #14
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	4907      	ldr	r1, [pc, #28]	; (80049d4 <I2C_MasterRequestRead+0x198>)
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f94d 	bl	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	00010008 	.word	0x00010008
 80049d4:	00010002 	.word	0x00010002

080049d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	4608      	mov	r0, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	461a      	mov	r2, r3
 80049e6:	4603      	mov	r3, r0
 80049e8:	817b      	strh	r3, [r7, #10]
 80049ea:	460b      	mov	r3, r1
 80049ec:	813b      	strh	r3, [r7, #8]
 80049ee:	4613      	mov	r3, r2
 80049f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f8c2 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00d      	beq.n	8004a46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a38:	d103      	bne.n	8004a42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e0aa      	b.n	8004b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a46:	897b      	ldrh	r3, [r7, #10]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	6a3a      	ldr	r2, [r7, #32]
 8004a5a:	4952      	ldr	r1, [pc, #328]	; (8004ba4 <I2C_RequestMemoryRead+0x1cc>)
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f8fa 	bl	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e097      	b.n	8004b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a84:	6a39      	ldr	r1, [r7, #32]
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f964 	bl	8004d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00d      	beq.n	8004aae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d107      	bne.n	8004aaa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e076      	b.n	8004b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d105      	bne.n	8004ac0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab4:	893b      	ldrh	r3, [r7, #8]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	611a      	str	r2, [r3, #16]
 8004abe:	e021      	b.n	8004b04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ac0:	893b      	ldrh	r3, [r7, #8]
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad0:	6a39      	ldr	r1, [r7, #32]
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f93e 	bl	8004d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00d      	beq.n	8004afa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d107      	bne.n	8004af6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e050      	b.n	8004b9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004afa:	893b      	ldrh	r3, [r7, #8]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b06:	6a39      	ldr	r1, [r7, #32]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f923 	bl	8004d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00d      	beq.n	8004b30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d107      	bne.n	8004b2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e035      	b.n	8004b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f82b 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00d      	beq.n	8004b74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b66:	d103      	bne.n	8004b70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e013      	b.n	8004b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b74:	897b      	ldrh	r3, [r7, #10]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f043 0301 	orr.w	r3, r3, #1
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	6a3a      	ldr	r2, [r7, #32]
 8004b88:	4906      	ldr	r1, [pc, #24]	; (8004ba4 <I2C_RequestMemoryRead+0x1cc>)
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f863 	bl	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	00010002 	.word	0x00010002

08004ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb8:	e025      	b.n	8004c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc0:	d021      	beq.n	8004c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc2:	f7fe fc63 	bl	800348c <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d302      	bcc.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d116      	bne.n	8004c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f043 0220 	orr.w	r2, r3, #32
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e023      	b.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10d      	bne.n	8004c2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	43da      	mvns	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf0c      	ite	eq
 8004c22:	2301      	moveq	r3, #1
 8004c24:	2300      	movne	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	e00c      	b.n	8004c46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	43da      	mvns	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4013      	ands	r3, r2
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bf0c      	ite	eq
 8004c3e:	2301      	moveq	r3, #1
 8004c40:	2300      	movne	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d0b6      	beq.n	8004bba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c64:	e051      	b.n	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c74:	d123      	bne.n	8004cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f043 0204 	orr.w	r2, r3, #4
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e046      	b.n	8004d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc4:	d021      	beq.n	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc6:	f7fe fbe1 	bl	800348c <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d302      	bcc.n	8004cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d116      	bne.n	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	f043 0220 	orr.w	r2, r3, #32
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e020      	b.n	8004d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	0c1b      	lsrs	r3, r3, #16
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d10c      	bne.n	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	43da      	mvns	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bf14      	ite	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	2300      	moveq	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	e00b      	b.n	8004d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	43da      	mvns	r2, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d18d      	bne.n	8004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d60:	e02d      	b.n	8004dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f8ce 	bl	8004f04 <I2C_IsAcknowledgeFailed>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e02d      	b.n	8004dce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d78:	d021      	beq.n	8004dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fe fb87 	bl	800348c <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d116      	bne.n	8004dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f043 0220 	orr.w	r2, r3, #32
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e007      	b.n	8004dce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc8:	2b80      	cmp	r3, #128	; 0x80
 8004dca:	d1ca      	bne.n	8004d62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004de2:	e02d      	b.n	8004e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f88d 	bl	8004f04 <I2C_IsAcknowledgeFailed>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e02d      	b.n	8004e50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dfa:	d021      	beq.n	8004e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfc:	f7fe fb46 	bl	800348c <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d302      	bcc.n	8004e12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d116      	bne.n	8004e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	f043 0220 	orr.w	r2, r3, #32
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e007      	b.n	8004e50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d1ca      	bne.n	8004de4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e64:	e042      	b.n	8004eec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d119      	bne.n	8004ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0210 	mvn.w	r2, #16
 8004e7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e029      	b.n	8004efc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea8:	f7fe faf0 	bl	800348c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d302      	bcc.n	8004ebe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d116      	bne.n	8004eec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f043 0220 	orr.w	r2, r3, #32
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e007      	b.n	8004efc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b40      	cmp	r3, #64	; 0x40
 8004ef8:	d1b5      	bne.n	8004e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1a:	d11b      	bne.n	8004f54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	f043 0204 	orr.w	r2, r3, #4
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f64:	b08f      	sub	sp, #60	; 0x3c
 8004f66:	af0a      	add	r7, sp, #40	; 0x28
 8004f68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e10f      	b.n	8005194 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f008 ff86 	bl	800dea0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2203      	movs	r2, #3
 8004f98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f002 fb95 	bl	80076e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	687e      	ldr	r6, [r7, #4]
 8004fc0:	466d      	mov	r5, sp
 8004fc2:	f106 0410 	add.w	r4, r6, #16
 8004fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fd6:	1d33      	adds	r3, r6, #4
 8004fd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fda:	6838      	ldr	r0, [r7, #0]
 8004fdc:	f002 fa6c 	bl	80074b8 <USB_CoreInit>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0d0      	b.n	8005194 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f002 fb83 	bl	8007704 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
 8005002:	e04a      	b.n	800509a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005004:	7bfa      	ldrb	r2, [r7, #15]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	333d      	adds	r3, #61	; 0x3d
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005018:	7bfa      	ldrb	r2, [r7, #15]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	333c      	adds	r3, #60	; 0x3c
 8005028:	7bfa      	ldrb	r2, [r7, #15]
 800502a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800502c:	7bfa      	ldrb	r2, [r7, #15]
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	b298      	uxth	r0, r3
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	3342      	adds	r3, #66	; 0x42
 8005040:	4602      	mov	r2, r0
 8005042:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	333f      	adds	r3, #63	; 0x3f
 8005054:	2200      	movs	r2, #0
 8005056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005058:	7bfa      	ldrb	r2, [r7, #15]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	3344      	adds	r3, #68	; 0x44
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800506c:	7bfa      	ldrb	r2, [r7, #15]
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	3348      	adds	r3, #72	; 0x48
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005080:	7bfa      	ldrb	r2, [r7, #15]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	3350      	adds	r3, #80	; 0x50
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	3301      	adds	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
 800509a:	7bfa      	ldrb	r2, [r7, #15]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d3af      	bcc.n	8005004 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a4:	2300      	movs	r3, #0
 80050a6:	73fb      	strb	r3, [r7, #15]
 80050a8:	e044      	b.n	8005134 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050aa:	7bfa      	ldrb	r2, [r7, #15]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050c0:	7bfa      	ldrb	r2, [r7, #15]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80050d2:	7bfa      	ldrb	r2, [r7, #15]
 80050d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050d6:	7bfa      	ldrb	r2, [r7, #15]
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050ec:	7bfa      	ldrb	r2, [r7, #15]
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	4613      	mov	r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005102:	7bfa      	ldrb	r2, [r7, #15]
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005118:	7bfa      	ldrb	r2, [r7, #15]
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	4613      	mov	r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	3301      	adds	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
 8005134:	7bfa      	ldrb	r2, [r7, #15]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	429a      	cmp	r2, r3
 800513c:	d3b5      	bcc.n	80050aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	687e      	ldr	r6, [r7, #4]
 8005146:	466d      	mov	r5, sp
 8005148:	f106 0410 	add.w	r4, r6, #16
 800514c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800514e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005154:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005158:	e885 0003 	stmia.w	r5, {r0, r1}
 800515c:	1d33      	adds	r3, r6, #4
 800515e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005160:	6838      	ldr	r0, [r7, #0]
 8005162:	f002 fb1b 	bl	800779c <USB_DevInit>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e00d      	b.n	8005194 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4618      	mov	r0, r3
 800518e:	f003 fb97 	bl	80088c0 <USB_DevDisconnect>

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800519c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_PCD_Start+0x1c>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e020      	b.n	80051fa <HAL_PCD_Start+0x5e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d109      	bne.n	80051dc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d005      	beq.n	80051dc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f002 fa6d 	bl	80076c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f003 fb47 	bl	800887e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005202:	b590      	push	{r4, r7, lr}
 8005204:	b08d      	sub	sp, #52	; 0x34
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f003 fc05 	bl	8008a28 <USB_GetMode>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 839d 	bne.w	8005960 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f003 fb69 	bl	8008902 <USB_ReadInterrupts>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8393 	beq.w	800595e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f003 fb60 	bl	8008902 <USB_ReadInterrupts>
 8005242:	4603      	mov	r3, r0
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b02      	cmp	r3, #2
 800524a:	d107      	bne.n	800525c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f002 0202 	and.w	r2, r2, #2
 800525a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f003 fb4e 	bl	8008902 <USB_ReadInterrupts>
 8005266:	4603      	mov	r3, r0
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b10      	cmp	r3, #16
 800526e:	d161      	bne.n	8005334 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0210 	bic.w	r2, r2, #16
 800527e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	f003 020f 	and.w	r2, r3, #15
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	4413      	add	r3, r2
 800529c:	3304      	adds	r3, #4
 800529e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	0c5b      	lsrs	r3, r3, #17
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d124      	bne.n	80052f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d035      	beq.n	8005324 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	6a38      	ldr	r0, [r7, #32]
 80052cc:	f003 f985 	bl	80085da <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	091b      	lsrs	r3, r3, #4
 80052d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052dc:	441a      	add	r2, r3
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	091b      	lsrs	r3, r3, #4
 80052ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ee:	441a      	add	r2, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	619a      	str	r2, [r3, #24]
 80052f4:	e016      	b.n	8005324 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	0c5b      	lsrs	r3, r3, #17
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	2b06      	cmp	r3, #6
 8005300:	d110      	bne.n	8005324 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005308:	2208      	movs	r2, #8
 800530a:	4619      	mov	r1, r3
 800530c:	6a38      	ldr	r0, [r7, #32]
 800530e:	f003 f964 	bl	80085da <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800531e:	441a      	add	r2, r3
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0210 	orr.w	r2, r2, #16
 8005332:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4618      	mov	r0, r3
 800533a:	f003 fae2 	bl	8008902 <USB_ReadInterrupts>
 800533e:	4603      	mov	r3, r0
 8005340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005344:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005348:	d16e      	bne.n	8005428 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f003 fae8 	bl	8008928 <USB_ReadDevAllOutEpInterrupt>
 8005358:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800535a:	e062      	b.n	8005422 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d057      	beq.n	8005416 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f003 fb0d 	bl	8008990 <USB_ReadDevOutEPInterrupt>
 8005376:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538e:	461a      	mov	r2, r3
 8005390:	2301      	movs	r3, #1
 8005392:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fdb0 	bl	8005efc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00c      	beq.n	80053c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b2:	461a      	mov	r2, r3
 80053b4:	2308      	movs	r3, #8
 80053b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80053b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 feaa 	bl	8006114 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d008      	beq.n	80053dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d6:	461a      	mov	r2, r3
 80053d8:	2310      	movs	r3, #16
 80053da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d008      	beq.n	80053f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f2:	461a      	mov	r2, r3
 80053f4:	2320      	movs	r3, #32
 80053f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540e:	461a      	mov	r2, r3
 8005410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005414:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	3301      	adds	r3, #1
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	2b00      	cmp	r3, #0
 8005426:	d199      	bne.n	800535c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f003 fa68 	bl	8008902 <USB_ReadInterrupts>
 8005432:	4603      	mov	r3, r0
 8005434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005438:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800543c:	f040 80c0 	bne.w	80055c0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4618      	mov	r0, r3
 8005446:	f003 fa89 	bl	800895c <USB_ReadDevAllInEpInterrupt>
 800544a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005450:	e0b2      	b.n	80055b8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80a7 	beq.w	80055ac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	4611      	mov	r1, r2
 8005468:	4618      	mov	r0, r3
 800546a:	f003 faaf 	bl	80089cc <USB_ReadDevInEPInterrupt>
 800546e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d057      	beq.n	800552a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	2201      	movs	r2, #1
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	43db      	mvns	r3, r3
 8005494:	69f9      	ldr	r1, [r7, #28]
 8005496:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800549a:	4013      	ands	r3, r2
 800549c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	461a      	mov	r2, r3
 80054ac:	2301      	movs	r3, #1
 80054ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d132      	bne.n	800551e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054bc:	4613      	mov	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	3348      	adds	r3, #72	; 0x48
 80054c8:	6819      	ldr	r1, [r3, #0]
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ce:	4613      	mov	r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	1a9b      	subs	r3, r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4403      	add	r3, r0
 80054d8:	3344      	adds	r3, #68	; 0x44
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4419      	add	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e2:	4613      	mov	r3, r2
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	1a9b      	subs	r3, r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4403      	add	r3, r0
 80054ec:	3348      	adds	r3, #72	; 0x48
 80054ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d113      	bne.n	800551e <HAL_PCD_IRQHandler+0x31c>
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	4613      	mov	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	3350      	adds	r3, #80	; 0x50
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d108      	bne.n	800551e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005516:	461a      	mov	r2, r3
 8005518:	2101      	movs	r1, #1
 800551a:	f003 fab7 	bl	8008a8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	b2db      	uxtb	r3, r3
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f008 fd4a 	bl	800dfbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d008      	beq.n	8005546 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	461a      	mov	r2, r3
 8005542:	2308      	movs	r3, #8
 8005544:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	461a      	mov	r2, r3
 800555e:	2310      	movs	r3, #16
 8005560:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	461a      	mov	r2, r3
 800557a:	2340      	movs	r3, #64	; 0x40
 800557c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005594:	461a      	mov	r2, r3
 8005596:	2302      	movs	r3, #2
 8005598:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80055a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fc1b 	bl	8005de2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	3301      	adds	r3, #1
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	085b      	lsrs	r3, r3, #1
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f47f af49 	bne.w	8005452 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f003 f99c 	bl	8008902 <USB_ReadInterrupts>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055d4:	d122      	bne.n	800561c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d108      	bne.n	8005606 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80055fc:	2100      	movs	r1, #0
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fe26 	bl	8006250 <HAL_PCDEx_LPM_Callback>
 8005604:	e002      	b.n	800560c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f008 fd50 	bl	800e0ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800561a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f003 f96e 	bl	8008902 <USB_ReadInterrupts>
 8005626:	4603      	mov	r3, r0
 8005628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800562c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005630:	d112      	bne.n	8005658 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b01      	cmp	r3, #1
 8005640:	d102      	bne.n	8005648 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f008 fd0c 	bl	800e060 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005656:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f003 f950 	bl	8008902 <USB_ReadInterrupts>
 8005662:	4603      	mov	r3, r0
 8005664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566c:	f040 80c7 	bne.w	80057fe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800567e:	f023 0301 	bic.w	r3, r3, #1
 8005682:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2110      	movs	r1, #16
 800568a:	4618      	mov	r0, r3
 800568c:	f002 f9ea 	bl	8007a64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005690:	2300      	movs	r3, #0
 8005692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005694:	e056      	b.n	8005744 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a2:	461a      	mov	r2, r3
 80056a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056c8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005718:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800571c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005738:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800573c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	3301      	adds	r3, #1
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800574a:	429a      	cmp	r2, r3
 800574c:	d3a3      	bcc.n	8005696 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800575c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005760:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	2b00      	cmp	r3, #0
 8005768:	d016      	beq.n	8005798 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800577a:	f043 030b 	orr.w	r3, r3, #11
 800577e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005790:	f043 030b 	orr.w	r3, r3, #11
 8005794:	6453      	str	r3, [r2, #68]	; 0x44
 8005796:	e015      	b.n	80057c4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80057ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057be:	f043 030b 	orr.w	r3, r3, #11
 80057c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80057d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057e8:	461a      	mov	r2, r3
 80057ea:	f003 f94f 	bl	8008a8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695a      	ldr	r2, [r3, #20]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80057fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f003 f87d 	bl	8008902 <USB_ReadInterrupts>
 8005808:	4603      	mov	r3, r0
 800580a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800580e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005812:	d124      	bne.n	800585e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f003 f913 	bl	8008a44 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f002 f97b 	bl	8007b1e <USB_GetDevSpeed>
 8005828:	4603      	mov	r3, r0
 800582a:	461a      	mov	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681c      	ldr	r4, [r3, #0]
 8005834:	f001 f958 	bl	8006ae8 <HAL_RCC_GetHCLKFreq>
 8005838:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800583e:	b2db      	uxtb	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	4620      	mov	r0, r4
 8005844:	f001 fe9a 	bl	800757c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f008 fbe0 	bl	800e00e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695a      	ldr	r2, [r3, #20]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800585c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f003 f84d 	bl	8008902 <USB_ReadInterrupts>
 8005868:	4603      	mov	r3, r0
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b08      	cmp	r3, #8
 8005870:	d10a      	bne.n	8005888 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f008 fbbd 	bl	800dff2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695a      	ldr	r2, [r3, #20]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f002 0208 	and.w	r2, r2, #8
 8005886:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f003 f838 	bl	8008902 <USB_ReadInterrupts>
 8005892:	4603      	mov	r3, r0
 8005894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589c:	d10f      	bne.n	80058be <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f008 fc1f 	bl	800e0ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695a      	ldr	r2, [r3, #20]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80058bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f003 f81d 	bl	8008902 <USB_ReadInterrupts>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058d2:	d10f      	bne.n	80058f4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	4619      	mov	r1, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f008 fbf2 	bl	800e0c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80058f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f003 f802 	bl	8008902 <USB_ReadInterrupts>
 80058fe:	4603      	mov	r3, r0
 8005900:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005908:	d10a      	bne.n	8005920 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f008 fc00 	bl	800e110 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695a      	ldr	r2, [r3, #20]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800591e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f002 ffec 	bl	8008902 <USB_ReadInterrupts>
 800592a:	4603      	mov	r3, r0
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b04      	cmp	r3, #4
 8005932:	d115      	bne.n	8005960 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f008 fbf0 	bl	800e12c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6859      	ldr	r1, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	430a      	orrs	r2, r1
 800595a:	605a      	str	r2, [r3, #4]
 800595c:	e000      	b.n	8005960 <HAL_PCD_IRQHandler+0x75e>
      return;
 800595e:	bf00      	nop
    }
  }
}
 8005960:	3734      	adds	r7, #52	; 0x34
 8005962:	46bd      	mov	sp, r7
 8005964:	bd90      	pop	{r4, r7, pc}

08005966 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_PCD_SetAddress+0x1a>
 800597c:	2302      	movs	r3, #2
 800597e:	e013      	b.n	80059a8 <HAL_PCD_SetAddress+0x42>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	4611      	mov	r1, r2
 8005998:	4618      	mov	r0, r3
 800599a:	f002 ff4a 	bl	8008832 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	4608      	mov	r0, r1
 80059ba:	4611      	mov	r1, r2
 80059bc:	461a      	mov	r2, r3
 80059be:	4603      	mov	r3, r0
 80059c0:	70fb      	strb	r3, [r7, #3]
 80059c2:	460b      	mov	r3, r1
 80059c4:	803b      	strh	r3, [r7, #0]
 80059c6:	4613      	mov	r3, r2
 80059c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	da0f      	bge.n	80059f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	f003 020f 	and.w	r2, r3, #15
 80059dc:	4613      	mov	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	3338      	adds	r3, #56	; 0x38
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	4413      	add	r3, r2
 80059ea:	3304      	adds	r3, #4
 80059ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	705a      	strb	r2, [r3, #1]
 80059f4:	e00f      	b.n	8005a16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	f003 020f 	and.w	r2, r3, #15
 80059fc:	4613      	mov	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a16:	78fb      	ldrb	r3, [r7, #3]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a22:	883a      	ldrh	r2, [r7, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	78ba      	ldrb	r2, [r7, #2]
 8005a2c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d004      	beq.n	8005a40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a40:	78bb      	ldrb	r3, [r7, #2]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d102      	bne.n	8005a4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_PCD_EP_Open+0xaa>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e00e      	b.n	8005a78 <HAL_PCD_EP_Open+0xc8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68f9      	ldr	r1, [r7, #12]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f002 f87d 	bl	8007b68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005a76:	7afb      	ldrb	r3, [r7, #11]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da0f      	bge.n	8005ab4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	f003 020f 	and.w	r2, r3, #15
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	1a9b      	subs	r3, r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	3338      	adds	r3, #56	; 0x38
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	705a      	strb	r2, [r3, #1]
 8005ab2:	e00f      	b.n	8005ad4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	f003 020f 	and.w	r2, r3, #15
 8005aba:	4613      	mov	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	1a9b      	subs	r3, r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	4413      	add	r3, r2
 8005aca:	3304      	adds	r3, #4
 8005acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_PCD_EP_Close+0x6e>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e00e      	b.n	8005b0c <HAL_PCD_EP_Close+0x8c>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f002 f8bb 	bl	8007c78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	460b      	mov	r3, r1
 8005b22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b24:	7afb      	ldrb	r3, [r7, #11]
 8005b26:	f003 020f 	and.w	r2, r3, #15
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2200      	movs	r2, #0
 8005b54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b56:	7afb      	ldrb	r3, [r7, #11]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d102      	bne.n	8005b70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b70:	7afb      	ldrb	r3, [r7, #11]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d109      	bne.n	8005b8e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6818      	ldr	r0, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	6979      	ldr	r1, [r7, #20]
 8005b88:	f002 fb96 	bl	80082b8 <USB_EP0StartXfer>
 8005b8c:	e008      	b.n	8005ba0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6979      	ldr	r1, [r7, #20]
 8005b9c:	f002 f948 	bl	8007e30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	f003 020f 	and.w	r2, r3, #15
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	1a9b      	subs	r3, r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005bcc:	681b      	ldr	r3, [r3, #0]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	460b      	mov	r3, r1
 8005be8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bea:	7afb      	ldrb	r3, [r7, #11]
 8005bec:	f003 020f 	and.w	r2, r3, #15
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	3338      	adds	r3, #56	; 0x38
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	3304      	adds	r3, #4
 8005c00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2201      	movs	r2, #1
 8005c18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c1a:	7afb      	ldrb	r3, [r7, #11]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d102      	bne.n	8005c34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c34:	7afb      	ldrb	r3, [r7, #11]
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6979      	ldr	r1, [r7, #20]
 8005c4c:	f002 fb34 	bl	80082b8 <USB_EP0StartXfer>
 8005c50:	e008      	b.n	8005c64 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6979      	ldr	r1, [r7, #20]
 8005c60:	f002 f8e6 	bl	8007e30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	f003 020f 	and.w	r2, r3, #15
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d901      	bls.n	8005c8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e050      	b.n	8005d2e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	da0f      	bge.n	8005cb4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	f003 020f 	and.w	r2, r3, #15
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	3338      	adds	r3, #56	; 0x38
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3304      	adds	r3, #4
 8005caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	705a      	strb	r2, [r3, #1]
 8005cb2:	e00d      	b.n	8005cd0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_PCD_EP_SetStall+0x82>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e01e      	b.n	8005d2e <HAL_PCD_EP_SetStall+0xc0>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68f9      	ldr	r1, [r7, #12]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f002 fcc3 	bl	800868a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	b2d9      	uxtb	r1, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f002 feb4 	bl	8008a8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	f003 020f 	and.w	r2, r3, #15
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d901      	bls.n	8005d54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e042      	b.n	8005dda <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	da0f      	bge.n	8005d7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	f003 020f 	and.w	r2, r3, #15
 8005d62:	4613      	mov	r3, r2
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	3338      	adds	r3, #56	; 0x38
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	4413      	add	r3, r2
 8005d70:	3304      	adds	r3, #4
 8005d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	705a      	strb	r2, [r3, #1]
 8005d7a:	e00f      	b.n	8005d9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	f003 020f 	and.w	r2, r3, #15
 8005d82:	4613      	mov	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	1a9b      	subs	r3, r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	4413      	add	r3, r2
 8005d92:	3304      	adds	r3, #4
 8005d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_PCD_EP_ClrStall+0x86>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e00e      	b.n	8005dda <HAL_PCD_EP_ClrStall+0xa4>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68f9      	ldr	r1, [r7, #12]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f002 fccb 	bl	8008766 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b08a      	sub	sp, #40	; 0x28
 8005de6:	af02      	add	r7, sp, #8
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	3338      	adds	r3, #56	; 0x38
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	3304      	adds	r3, #4
 8005e08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d901      	bls.n	8005e1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e06c      	b.n	8005ef4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	695a      	ldr	r2, [r3, #20]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d902      	bls.n	8005e36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	3303      	adds	r3, #3
 8005e3a:	089b      	lsrs	r3, r3, #2
 8005e3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e3e:	e02b      	b.n	8005e98 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	695a      	ldr	r2, [r3, #20]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d902      	bls.n	8005e5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	3303      	adds	r3, #3
 8005e60:	089b      	lsrs	r3, r3, #2
 8005e62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68d9      	ldr	r1, [r3, #12]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	4603      	mov	r3, r0
 8005e7a:	6978      	ldr	r0, [r7, #20]
 8005e7c:	f002 fb6f 	bl	800855e <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	441a      	add	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	441a      	add	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d809      	bhi.n	8005ec2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d203      	bcs.n	8005ec2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1be      	bne.n	8005e40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	695a      	ldr	r2, [r3, #20]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d811      	bhi.n	8005ef2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	6939      	ldr	r1, [r7, #16]
 8005eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eee:	4013      	ands	r3, r2
 8005ef0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3720      	adds	r7, #32
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	333c      	adds	r3, #60	; 0x3c
 8005f14:	3304      	adds	r3, #4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	f040 80a0 	bne.w	8006074 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d015      	beq.n	8005f6a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4a72      	ldr	r2, [pc, #456]	; (800610c <PCD_EP_OutXfrComplete_int+0x210>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	f240 80dd 	bls.w	8006102 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 80d7 	beq.w	8006102 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	461a      	mov	r2, r3
 8005f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f66:	6093      	str	r3, [r2, #8]
 8005f68:	e0cb      	b.n	8006102 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	461a      	mov	r2, r3
 8005f82:	2320      	movs	r3, #32
 8005f84:	6093      	str	r3, [r2, #8]
 8005f86:	e0bc      	b.n	8006102 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 80b7 	bne.w	8006102 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4a5d      	ldr	r2, [pc, #372]	; (800610c <PCD_EP_OutXfrComplete_int+0x210>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d90f      	bls.n	8005fbc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb8:	6093      	str	r3, [r2, #8]
 8005fba:	e0a2      	b.n	8006102 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	1a9b      	subs	r3, r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005fce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	0159      	lsls	r1, r3, #5
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	440b      	add	r3, r1
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005fe2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4403      	add	r3, r0
 8005ff2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005ff6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800600a:	6819      	ldr	r1, [r3, #0]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	4613      	mov	r3, r2
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4403      	add	r3, r0
 800601a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4419      	add	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	4613      	mov	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4403      	add	r3, r0
 8006030:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006034:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d114      	bne.n	8006066 <PCD_EP_OutXfrComplete_int+0x16a>
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d108      	bne.n	8006066 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6818      	ldr	r0, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800605e:	461a      	mov	r2, r3
 8006060:	2101      	movs	r1, #1
 8006062:	f002 fd13 	bl	8008a8c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f007 ff8b 	bl	800df88 <HAL_PCD_DataOutStageCallback>
 8006072:	e046      	b.n	8006102 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4a26      	ldr	r2, [pc, #152]	; (8006110 <PCD_EP_OutXfrComplete_int+0x214>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d124      	bne.n	80060c6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006092:	461a      	mov	r2, r3
 8006094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006098:	6093      	str	r3, [r2, #8]
 800609a:	e032      	b.n	8006102 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b2:	461a      	mov	r2, r3
 80060b4:	2320      	movs	r3, #32
 80060b6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f007 ff62 	bl	800df88 <HAL_PCD_DataOutStageCallback>
 80060c4:	e01d      	b.n	8006102 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d114      	bne.n	80060f6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	4613      	mov	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	440b      	add	r3, r1
 80060da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d108      	bne.n	80060f6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6818      	ldr	r0, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80060ee:	461a      	mov	r2, r3
 80060f0:	2100      	movs	r1, #0
 80060f2:	f002 fccb 	bl	8008a8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f007 ff43 	bl	800df88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	4f54300a 	.word	0x4f54300a
 8006110:	4f54310a 	.word	0x4f54310a

08006114 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	333c      	adds	r3, #60	; 0x3c
 800612c:	3304      	adds	r3, #4
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4a15      	ldr	r2, [pc, #84]	; (800619c <PCD_EP_OutSetupPacket_int+0x88>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d90e      	bls.n	8006168 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006150:	2b00      	cmp	r3, #0
 8006152:	d009      	beq.n	8006168 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006160:	461a      	mov	r2, r3
 8006162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006166:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f007 fefb 	bl	800df64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a0a      	ldr	r2, [pc, #40]	; (800619c <PCD_EP_OutSetupPacket_int+0x88>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d90c      	bls.n	8006190 <PCD_EP_OutSetupPacket_int+0x7c>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d108      	bne.n	8006190 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006188:	461a      	mov	r2, r3
 800618a:	2101      	movs	r1, #1
 800618c:	f002 fc7e 	bl	8008a8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	4f54300a 	.word	0x4f54300a

080061a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
 80061ac:	4613      	mov	r3, r2
 80061ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d107      	bne.n	80061ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80061be:	883b      	ldrh	r3, [r7, #0]
 80061c0:	0419      	lsls	r1, r3, #16
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	629a      	str	r2, [r3, #40]	; 0x28
 80061cc:	e028      	b.n	8006220 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	4413      	add	r3, r2
 80061da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]
 80061e0:	e00d      	b.n	80061fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	3340      	adds	r3, #64	; 0x40
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	4413      	add	r3, r2
 80061f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	3301      	adds	r3, #1
 80061fc:	73fb      	strb	r3, [r7, #15]
 80061fe:	7bfa      	ldrb	r2, [r7, #15]
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	3b01      	subs	r3, #1
 8006204:	429a      	cmp	r2, r3
 8006206:	d3ec      	bcc.n	80061e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006208:	883b      	ldrh	r3, [r7, #0]
 800620a:	0418      	lsls	r0, r3, #16
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6819      	ldr	r1, [r3, #0]
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	3b01      	subs	r3, #1
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	4302      	orrs	r2, r0
 8006218:	3340      	adds	r3, #64	; 0x40
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	460b      	mov	r3, r1
 8006238:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	887a      	ldrh	r2, [r7, #2]
 8006240:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e264      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d075      	beq.n	8006372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006286:	4ba3      	ldr	r3, [pc, #652]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 030c 	and.w	r3, r3, #12
 800628e:	2b04      	cmp	r3, #4
 8006290:	d00c      	beq.n	80062ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006292:	4ba0      	ldr	r3, [pc, #640]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800629a:	2b08      	cmp	r3, #8
 800629c:	d112      	bne.n	80062c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800629e:	4b9d      	ldr	r3, [pc, #628]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062aa:	d10b      	bne.n	80062c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ac:	4b99      	ldr	r3, [pc, #612]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d05b      	beq.n	8006370 <HAL_RCC_OscConfig+0x108>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d157      	bne.n	8006370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e23f      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062cc:	d106      	bne.n	80062dc <HAL_RCC_OscConfig+0x74>
 80062ce:	4b91      	ldr	r3, [pc, #580]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a90      	ldr	r2, [pc, #576]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	e01d      	b.n	8006318 <HAL_RCC_OscConfig+0xb0>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062e4:	d10c      	bne.n	8006300 <HAL_RCC_OscConfig+0x98>
 80062e6:	4b8b      	ldr	r3, [pc, #556]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a8a      	ldr	r2, [pc, #552]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4b88      	ldr	r3, [pc, #544]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a87      	ldr	r2, [pc, #540]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e00b      	b.n	8006318 <HAL_RCC_OscConfig+0xb0>
 8006300:	4b84      	ldr	r3, [pc, #528]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a83      	ldr	r2, [pc, #524]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	4b81      	ldr	r3, [pc, #516]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a80      	ldr	r2, [pc, #512]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d013      	beq.n	8006348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006320:	f7fd f8b4 	bl	800348c <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006328:	f7fd f8b0 	bl	800348c <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b64      	cmp	r3, #100	; 0x64
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e204      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633a:	4b76      	ldr	r3, [pc, #472]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f0      	beq.n	8006328 <HAL_RCC_OscConfig+0xc0>
 8006346:	e014      	b.n	8006372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006348:	f7fd f8a0 	bl	800348c <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006350:	f7fd f89c 	bl	800348c <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b64      	cmp	r3, #100	; 0x64
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e1f0      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006362:	4b6c      	ldr	r3, [pc, #432]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0xe8>
 800636e:	e000      	b.n	8006372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d063      	beq.n	8006446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800637e:	4b65      	ldr	r3, [pc, #404]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 030c 	and.w	r3, r3, #12
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800638a:	4b62      	ldr	r3, [pc, #392]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006392:	2b08      	cmp	r3, #8
 8006394:	d11c      	bne.n	80063d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006396:	4b5f      	ldr	r3, [pc, #380]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d116      	bne.n	80063d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063a2:	4b5c      	ldr	r3, [pc, #368]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_RCC_OscConfig+0x152>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d001      	beq.n	80063ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e1c4      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ba:	4b56      	ldr	r3, [pc, #344]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	4952      	ldr	r1, [pc, #328]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ce:	e03a      	b.n	8006446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d020      	beq.n	800641a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063d8:	4b4f      	ldr	r3, [pc, #316]	; (8006518 <HAL_RCC_OscConfig+0x2b0>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063de:	f7fd f855 	bl	800348c <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063e6:	f7fd f851 	bl	800348c <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e1a5      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f8:	4b46      	ldr	r3, [pc, #280]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006404:	4b43      	ldr	r3, [pc, #268]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	4940      	ldr	r1, [pc, #256]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 8006414:	4313      	orrs	r3, r2
 8006416:	600b      	str	r3, [r1, #0]
 8006418:	e015      	b.n	8006446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800641a:	4b3f      	ldr	r3, [pc, #252]	; (8006518 <HAL_RCC_OscConfig+0x2b0>)
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006420:	f7fd f834 	bl	800348c <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006428:	f7fd f830 	bl	800348c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e184      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800643a:	4b36      	ldr	r3, [pc, #216]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1f0      	bne.n	8006428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d030      	beq.n	80064b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d016      	beq.n	8006488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800645a:	4b30      	ldr	r3, [pc, #192]	; (800651c <HAL_RCC_OscConfig+0x2b4>)
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006460:	f7fd f814 	bl	800348c <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006468:	f7fd f810 	bl	800348c <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e164      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800647a:	4b26      	ldr	r3, [pc, #152]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 800647c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0f0      	beq.n	8006468 <HAL_RCC_OscConfig+0x200>
 8006486:	e015      	b.n	80064b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006488:	4b24      	ldr	r3, [pc, #144]	; (800651c <HAL_RCC_OscConfig+0x2b4>)
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800648e:	f7fc fffd 	bl	800348c <HAL_GetTick>
 8006492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006496:	f7fc fff9 	bl	800348c <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e14d      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a8:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1f0      	bne.n	8006496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80a0 	beq.w	8006602 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10f      	bne.n	80064f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064d2:	2300      	movs	r3, #0
 80064d4:	60bb      	str	r3, [r7, #8]
 80064d6:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	4a0e      	ldr	r2, [pc, #56]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e0:	6413      	str	r3, [r2, #64]	; 0x40
 80064e2:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <HAL_RCC_OscConfig+0x2ac>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ea:	60bb      	str	r3, [r7, #8]
 80064ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ee:	2301      	movs	r3, #1
 80064f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064f2:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <HAL_RCC_OscConfig+0x2b8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d121      	bne.n	8006542 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064fe:	4b08      	ldr	r3, [pc, #32]	; (8006520 <HAL_RCC_OscConfig+0x2b8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a07      	ldr	r2, [pc, #28]	; (8006520 <HAL_RCC_OscConfig+0x2b8>)
 8006504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800650a:	f7fc ffbf 	bl	800348c <HAL_GetTick>
 800650e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006510:	e011      	b.n	8006536 <HAL_RCC_OscConfig+0x2ce>
 8006512:	bf00      	nop
 8006514:	40023800 	.word	0x40023800
 8006518:	42470000 	.word	0x42470000
 800651c:	42470e80 	.word	0x42470e80
 8006520:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006524:	f7fc ffb2 	bl	800348c <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e106      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006536:	4b85      	ldr	r3, [pc, #532]	; (800674c <HAL_RCC_OscConfig+0x4e4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0f0      	beq.n	8006524 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d106      	bne.n	8006558 <HAL_RCC_OscConfig+0x2f0>
 800654a:	4b81      	ldr	r3, [pc, #516]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	4a80      	ldr	r2, [pc, #512]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	6713      	str	r3, [r2, #112]	; 0x70
 8006556:	e01c      	b.n	8006592 <HAL_RCC_OscConfig+0x32a>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b05      	cmp	r3, #5
 800655e:	d10c      	bne.n	800657a <HAL_RCC_OscConfig+0x312>
 8006560:	4b7b      	ldr	r3, [pc, #492]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006564:	4a7a      	ldr	r2, [pc, #488]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006566:	f043 0304 	orr.w	r3, r3, #4
 800656a:	6713      	str	r3, [r2, #112]	; 0x70
 800656c:	4b78      	ldr	r3, [pc, #480]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	4a77      	ldr	r2, [pc, #476]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	6713      	str	r3, [r2, #112]	; 0x70
 8006578:	e00b      	b.n	8006592 <HAL_RCC_OscConfig+0x32a>
 800657a:	4b75      	ldr	r3, [pc, #468]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	4a74      	ldr	r2, [pc, #464]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006580:	f023 0301 	bic.w	r3, r3, #1
 8006584:	6713      	str	r3, [r2, #112]	; 0x70
 8006586:	4b72      	ldr	r3, [pc, #456]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	4a71      	ldr	r2, [pc, #452]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 800658c:	f023 0304 	bic.w	r3, r3, #4
 8006590:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d015      	beq.n	80065c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800659a:	f7fc ff77 	bl	800348c <HAL_GetTick>
 800659e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065a0:	e00a      	b.n	80065b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065a2:	f7fc ff73 	bl	800348c <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e0c5      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b8:	4b65      	ldr	r3, [pc, #404]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 80065ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0ee      	beq.n	80065a2 <HAL_RCC_OscConfig+0x33a>
 80065c4:	e014      	b.n	80065f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c6:	f7fc ff61 	bl	800348c <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065cc:	e00a      	b.n	80065e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065ce:	f7fc ff5d 	bl	800348c <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065dc:	4293      	cmp	r3, r2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e0af      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065e4:	4b5a      	ldr	r3, [pc, #360]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 80065e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1ee      	bne.n	80065ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d105      	bne.n	8006602 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065f6:	4b56      	ldr	r3, [pc, #344]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	4a55      	ldr	r2, [pc, #340]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 80065fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006600:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 809b 	beq.w	8006742 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800660c:	4b50      	ldr	r3, [pc, #320]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 030c 	and.w	r3, r3, #12
 8006614:	2b08      	cmp	r3, #8
 8006616:	d05c      	beq.n	80066d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d141      	bne.n	80066a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006620:	4b4c      	ldr	r3, [pc, #304]	; (8006754 <HAL_RCC_OscConfig+0x4ec>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006626:	f7fc ff31 	bl	800348c <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800662e:	f7fc ff2d 	bl	800348c <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e081      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006640:	4b43      	ldr	r3, [pc, #268]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1f0      	bne.n	800662e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69da      	ldr	r2, [r3, #28]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	019b      	lsls	r3, r3, #6
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	3b01      	subs	r3, #1
 8006666:	041b      	lsls	r3, r3, #16
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	061b      	lsls	r3, r3, #24
 8006670:	4937      	ldr	r1, [pc, #220]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006672:	4313      	orrs	r3, r2
 8006674:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006676:	4b37      	ldr	r3, [pc, #220]	; (8006754 <HAL_RCC_OscConfig+0x4ec>)
 8006678:	2201      	movs	r2, #1
 800667a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667c:	f7fc ff06 	bl	800348c <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006684:	f7fc ff02 	bl	800348c <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e056      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006696:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0f0      	beq.n	8006684 <HAL_RCC_OscConfig+0x41c>
 80066a2:	e04e      	b.n	8006742 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066a4:	4b2b      	ldr	r3, [pc, #172]	; (8006754 <HAL_RCC_OscConfig+0x4ec>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066aa:	f7fc feef 	bl	800348c <HAL_GetTick>
 80066ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b0:	e008      	b.n	80066c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066b2:	f7fc feeb 	bl	800348c <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d901      	bls.n	80066c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e03f      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c4:	4b22      	ldr	r3, [pc, #136]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1f0      	bne.n	80066b2 <HAL_RCC_OscConfig+0x44a>
 80066d0:	e037      	b.n	8006742 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e032      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066de:	4b1c      	ldr	r3, [pc, #112]	; (8006750 <HAL_RCC_OscConfig+0x4e8>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d028      	beq.n	800673e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d121      	bne.n	800673e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006704:	429a      	cmp	r2, r3
 8006706:	d11a      	bne.n	800673e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800670e:	4013      	ands	r3, r2
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006714:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006716:	4293      	cmp	r3, r2
 8006718:	d111      	bne.n	800673e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	3b01      	subs	r3, #1
 8006728:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800672a:	429a      	cmp	r2, r3
 800672c:	d107      	bne.n	800673e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800673a:	429a      	cmp	r2, r3
 800673c:	d001      	beq.n	8006742 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40007000 	.word	0x40007000
 8006750:	40023800 	.word	0x40023800
 8006754:	42470060 	.word	0x42470060

08006758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0cc      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800676c:	4b68      	ldr	r3, [pc, #416]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d90c      	bls.n	8006794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677a:	4b65      	ldr	r3, [pc, #404]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006782:	4b63      	ldr	r3, [pc, #396]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d001      	beq.n	8006794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e0b8      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d020      	beq.n	80067e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067ac:	4b59      	ldr	r3, [pc, #356]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	4a58      	ldr	r2, [pc, #352]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067c4:	4b53      	ldr	r3, [pc, #332]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4a52      	ldr	r2, [pc, #328]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d0:	4b50      	ldr	r3, [pc, #320]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	494d      	ldr	r1, [pc, #308]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d044      	beq.n	8006878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d107      	bne.n	8006806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f6:	4b47      	ldr	r3, [pc, #284]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d119      	bne.n	8006836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e07f      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d003      	beq.n	8006816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006812:	2b03      	cmp	r3, #3
 8006814:	d107      	bne.n	8006826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006816:	4b3f      	ldr	r3, [pc, #252]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e06f      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006826:	4b3b      	ldr	r3, [pc, #236]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e067      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006836:	4b37      	ldr	r3, [pc, #220]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f023 0203 	bic.w	r2, r3, #3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4934      	ldr	r1, [pc, #208]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006844:	4313      	orrs	r3, r2
 8006846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006848:	f7fc fe20 	bl	800348c <HAL_GetTick>
 800684c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684e:	e00a      	b.n	8006866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006850:	f7fc fe1c 	bl	800348c <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	f241 3288 	movw	r2, #5000	; 0x1388
 800685e:	4293      	cmp	r3, r2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e04f      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006866:	4b2b      	ldr	r3, [pc, #172]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f003 020c 	and.w	r2, r3, #12
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	429a      	cmp	r2, r3
 8006876:	d1eb      	bne.n	8006850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006878:	4b25      	ldr	r3, [pc, #148]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d20c      	bcs.n	80068a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006886:	4b22      	ldr	r3, [pc, #136]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800688e:	4b20      	ldr	r3, [pc, #128]	; (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d001      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e032      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068ac:	4b19      	ldr	r3, [pc, #100]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4916      	ldr	r1, [pc, #88]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ca:	4b12      	ldr	r3, [pc, #72]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	490e      	ldr	r1, [pc, #56]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068de:	f000 f821 	bl	8006924 <HAL_RCC_GetSysClockFreq>
 80068e2:	4602      	mov	r2, r0
 80068e4:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	091b      	lsrs	r3, r3, #4
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	490a      	ldr	r1, [pc, #40]	; (8006918 <HAL_RCC_ClockConfig+0x1c0>)
 80068f0:	5ccb      	ldrb	r3, [r1, r3]
 80068f2:	fa22 f303 	lsr.w	r3, r2, r3
 80068f6:	4a09      	ldr	r2, [pc, #36]	; (800691c <HAL_RCC_ClockConfig+0x1c4>)
 80068f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068fa:	4b09      	ldr	r3, [pc, #36]	; (8006920 <HAL_RCC_ClockConfig+0x1c8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fc fbfe 	bl	8003100 <HAL_InitTick>

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40023c00 	.word	0x40023c00
 8006914:	40023800 	.word	0x40023800
 8006918:	08011700 	.word	0x08011700
 800691c:	20000000 	.word	0x20000000
 8006920:	20000004 	.word	0x20000004

08006924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006924:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	2300      	movs	r3, #0
 8006936:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800693c:	4b67      	ldr	r3, [pc, #412]	; (8006adc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f003 030c 	and.w	r3, r3, #12
 8006944:	2b08      	cmp	r3, #8
 8006946:	d00d      	beq.n	8006964 <HAL_RCC_GetSysClockFreq+0x40>
 8006948:	2b08      	cmp	r3, #8
 800694a:	f200 80bd 	bhi.w	8006ac8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <HAL_RCC_GetSysClockFreq+0x34>
 8006952:	2b04      	cmp	r3, #4
 8006954:	d003      	beq.n	800695e <HAL_RCC_GetSysClockFreq+0x3a>
 8006956:	e0b7      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006958:	4b61      	ldr	r3, [pc, #388]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800695a:	60bb      	str	r3, [r7, #8]
       break;
 800695c:	e0b7      	b.n	8006ace <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800695e:	4b61      	ldr	r3, [pc, #388]	; (8006ae4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006960:	60bb      	str	r3, [r7, #8]
      break;
 8006962:	e0b4      	b.n	8006ace <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006964:	4b5d      	ldr	r3, [pc, #372]	; (8006adc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800696c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800696e:	4b5b      	ldr	r3, [pc, #364]	; (8006adc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d04d      	beq.n	8006a16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800697a:	4b58      	ldr	r3, [pc, #352]	; (8006adc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	099b      	lsrs	r3, r3, #6
 8006980:	461a      	mov	r2, r3
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	f240 10ff 	movw	r0, #511	; 0x1ff
 800698a:	f04f 0100 	mov.w	r1, #0
 800698e:	ea02 0800 	and.w	r8, r2, r0
 8006992:	ea03 0901 	and.w	r9, r3, r1
 8006996:	4640      	mov	r0, r8
 8006998:	4649      	mov	r1, r9
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	014b      	lsls	r3, r1, #5
 80069a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069a8:	0142      	lsls	r2, r0, #5
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	ebb0 0008 	subs.w	r0, r0, r8
 80069b2:	eb61 0109 	sbc.w	r1, r1, r9
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	018b      	lsls	r3, r1, #6
 80069c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069c4:	0182      	lsls	r2, r0, #6
 80069c6:	1a12      	subs	r2, r2, r0
 80069c8:	eb63 0301 	sbc.w	r3, r3, r1
 80069cc:	f04f 0000 	mov.w	r0, #0
 80069d0:	f04f 0100 	mov.w	r1, #0
 80069d4:	00d9      	lsls	r1, r3, #3
 80069d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069da:	00d0      	lsls	r0, r2, #3
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	eb12 0208 	adds.w	r2, r2, r8
 80069e4:	eb43 0309 	adc.w	r3, r3, r9
 80069e8:	f04f 0000 	mov.w	r0, #0
 80069ec:	f04f 0100 	mov.w	r1, #0
 80069f0:	0259      	lsls	r1, r3, #9
 80069f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80069f6:	0250      	lsls	r0, r2, #9
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4610      	mov	r0, r2
 80069fe:	4619      	mov	r1, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	f7fa f91e 	bl	8000c48 <__aeabi_uldivmod>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4613      	mov	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e04a      	b.n	8006aac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a16:	4b31      	ldr	r3, [pc, #196]	; (8006adc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	099b      	lsrs	r3, r3, #6
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a26:	f04f 0100 	mov.w	r1, #0
 8006a2a:	ea02 0400 	and.w	r4, r2, r0
 8006a2e:	ea03 0501 	and.w	r5, r3, r1
 8006a32:	4620      	mov	r0, r4
 8006a34:	4629      	mov	r1, r5
 8006a36:	f04f 0200 	mov.w	r2, #0
 8006a3a:	f04f 0300 	mov.w	r3, #0
 8006a3e:	014b      	lsls	r3, r1, #5
 8006a40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a44:	0142      	lsls	r2, r0, #5
 8006a46:	4610      	mov	r0, r2
 8006a48:	4619      	mov	r1, r3
 8006a4a:	1b00      	subs	r0, r0, r4
 8006a4c:	eb61 0105 	sbc.w	r1, r1, r5
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	018b      	lsls	r3, r1, #6
 8006a5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a5e:	0182      	lsls	r2, r0, #6
 8006a60:	1a12      	subs	r2, r2, r0
 8006a62:	eb63 0301 	sbc.w	r3, r3, r1
 8006a66:	f04f 0000 	mov.w	r0, #0
 8006a6a:	f04f 0100 	mov.w	r1, #0
 8006a6e:	00d9      	lsls	r1, r3, #3
 8006a70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a74:	00d0      	lsls	r0, r2, #3
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	1912      	adds	r2, r2, r4
 8006a7c:	eb45 0303 	adc.w	r3, r5, r3
 8006a80:	f04f 0000 	mov.w	r0, #0
 8006a84:	f04f 0100 	mov.w	r1, #0
 8006a88:	0299      	lsls	r1, r3, #10
 8006a8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a8e:	0290      	lsls	r0, r2, #10
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4610      	mov	r0, r2
 8006a96:	4619      	mov	r1, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	f04f 0300 	mov.w	r3, #0
 8006aa0:	f7fa f8d2 	bl	8000c48 <__aeabi_uldivmod>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006aac:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	0c1b      	lsrs	r3, r3, #16
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac4:	60bb      	str	r3, [r7, #8]
      break;
 8006ac6:	e002      	b.n	8006ace <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ac8:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006aca:	60bb      	str	r3, [r7, #8]
      break;
 8006acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ace:	68bb      	ldr	r3, [r7, #8]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ada:	bf00      	nop
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	00f42400 	.word	0x00f42400
 8006ae4:	007a1200 	.word	0x007a1200

08006ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006aec:	4b03      	ldr	r3, [pc, #12]	; (8006afc <HAL_RCC_GetHCLKFreq+0x14>)
 8006aee:	681b      	ldr	r3, [r3, #0]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20000000 	.word	0x20000000

08006b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b04:	f7ff fff0 	bl	8006ae8 <HAL_RCC_GetHCLKFreq>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	0a9b      	lsrs	r3, r3, #10
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	4903      	ldr	r1, [pc, #12]	; (8006b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b16:	5ccb      	ldrb	r3, [r1, r3]
 8006b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40023800 	.word	0x40023800
 8006b24:	08011710 	.word	0x08011710

08006b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b2c:	f7ff ffdc 	bl	8006ae8 <HAL_RCC_GetHCLKFreq>
 8006b30:	4602      	mov	r2, r0
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	0b5b      	lsrs	r3, r3, #13
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	4903      	ldr	r1, [pc, #12]	; (8006b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b3e:	5ccb      	ldrb	r3, [r1, r3]
 8006b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	08011710 	.word	0x08011710

08006b50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	220f      	movs	r2, #15
 8006b5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b60:	4b12      	ldr	r3, [pc, #72]	; (8006bac <HAL_RCC_GetClockConfig+0x5c>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f003 0203 	and.w	r2, r3, #3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b6c:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <HAL_RCC_GetClockConfig+0x5c>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <HAL_RCC_GetClockConfig+0x5c>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006b84:	4b09      	ldr	r3, [pc, #36]	; (8006bac <HAL_RCC_GetClockConfig+0x5c>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	08db      	lsrs	r3, r3, #3
 8006b8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b92:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <HAL_RCC_GetClockConfig+0x60>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0207 	and.w	r2, r3, #7
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	601a      	str	r2, [r3, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	40023c00 	.word	0x40023c00

08006bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e041      	b.n	8006c4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fc fa68 	bl	80030b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f000 fa96 	bl	8007124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d001      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e04e      	b.n	8006d0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a23      	ldr	r2, [pc, #140]	; (8006d18 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d022      	beq.n	8006cd4 <HAL_TIM_Base_Start_IT+0x80>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c96:	d01d      	beq.n	8006cd4 <HAL_TIM_Base_Start_IT+0x80>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1f      	ldr	r2, [pc, #124]	; (8006d1c <HAL_TIM_Base_Start_IT+0xc8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d018      	beq.n	8006cd4 <HAL_TIM_Base_Start_IT+0x80>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1e      	ldr	r2, [pc, #120]	; (8006d20 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d013      	beq.n	8006cd4 <HAL_TIM_Base_Start_IT+0x80>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1c      	ldr	r2, [pc, #112]	; (8006d24 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d00e      	beq.n	8006cd4 <HAL_TIM_Base_Start_IT+0x80>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1b      	ldr	r2, [pc, #108]	; (8006d28 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d009      	beq.n	8006cd4 <HAL_TIM_Base_Start_IT+0x80>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a19      	ldr	r2, [pc, #100]	; (8006d2c <HAL_TIM_Base_Start_IT+0xd8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d004      	beq.n	8006cd4 <HAL_TIM_Base_Start_IT+0x80>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a18      	ldr	r2, [pc, #96]	; (8006d30 <HAL_TIM_Base_Start_IT+0xdc>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d111      	bne.n	8006cf8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b06      	cmp	r3, #6
 8006ce4:	d010      	beq.n	8006d08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0201 	orr.w	r2, r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf6:	e007      	b.n	8006d08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40010000 	.word	0x40010000
 8006d1c:	40000400 	.word	0x40000400
 8006d20:	40000800 	.word	0x40000800
 8006d24:	40000c00 	.word	0x40000c00
 8006d28:	40010400 	.word	0x40010400
 8006d2c:	40014000 	.word	0x40014000
 8006d30:	40001800 	.word	0x40001800

08006d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d122      	bne.n	8006d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d11b      	bne.n	8006d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0202 	mvn.w	r2, #2
 8006d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f9b5 	bl	80070e6 <HAL_TIM_IC_CaptureCallback>
 8006d7c:	e005      	b.n	8006d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f9a7 	bl	80070d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f9b8 	bl	80070fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d122      	bne.n	8006de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d11b      	bne.n	8006de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f06f 0204 	mvn.w	r2, #4
 8006db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2202      	movs	r2, #2
 8006dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f98b 	bl	80070e6 <HAL_TIM_IC_CaptureCallback>
 8006dd0:	e005      	b.n	8006dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f97d 	bl	80070d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f98e 	bl	80070fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d122      	bne.n	8006e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d11b      	bne.n	8006e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f06f 0208 	mvn.w	r2, #8
 8006e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2204      	movs	r2, #4
 8006e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f961 	bl	80070e6 <HAL_TIM_IC_CaptureCallback>
 8006e24:	e005      	b.n	8006e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f953 	bl	80070d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f964 	bl	80070fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	f003 0310 	and.w	r3, r3, #16
 8006e42:	2b10      	cmp	r3, #16
 8006e44:	d122      	bne.n	8006e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	2b10      	cmp	r3, #16
 8006e52:	d11b      	bne.n	8006e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f06f 0210 	mvn.w	r2, #16
 8006e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2208      	movs	r2, #8
 8006e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f937 	bl	80070e6 <HAL_TIM_IC_CaptureCallback>
 8006e78:	e005      	b.n	8006e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f929 	bl	80070d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f93a 	bl	80070fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d10e      	bne.n	8006eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d107      	bne.n	8006eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f06f 0201 	mvn.w	r2, #1
 8006eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fc f840 	bl	8002f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec2:	2b80      	cmp	r3, #128	; 0x80
 8006ec4:	d10e      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed0:	2b80      	cmp	r3, #128	; 0x80
 8006ed2:	d107      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fae0 	bl	80074a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eee:	2b40      	cmp	r3, #64	; 0x40
 8006ef0:	d10e      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efc:	2b40      	cmp	r3, #64	; 0x40
 8006efe:	d107      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f8ff 	bl	800710e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	d10e      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d107      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0220 	mvn.w	r2, #32
 8006f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 faaa 	bl	8007490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_TIM_ConfigClockSource+0x1c>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e0b4      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x186>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f98:	d03e      	beq.n	8007018 <HAL_TIM_ConfigClockSource+0xd4>
 8006f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f9e:	f200 8087 	bhi.w	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa6:	f000 8086 	beq.w	80070b6 <HAL_TIM_ConfigClockSource+0x172>
 8006faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fae:	d87f      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb0:	2b70      	cmp	r3, #112	; 0x70
 8006fb2:	d01a      	beq.n	8006fea <HAL_TIM_ConfigClockSource+0xa6>
 8006fb4:	2b70      	cmp	r3, #112	; 0x70
 8006fb6:	d87b      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb8:	2b60      	cmp	r3, #96	; 0x60
 8006fba:	d050      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x11a>
 8006fbc:	2b60      	cmp	r3, #96	; 0x60
 8006fbe:	d877      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc0:	2b50      	cmp	r3, #80	; 0x50
 8006fc2:	d03c      	beq.n	800703e <HAL_TIM_ConfigClockSource+0xfa>
 8006fc4:	2b50      	cmp	r3, #80	; 0x50
 8006fc6:	d873      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc8:	2b40      	cmp	r3, #64	; 0x40
 8006fca:	d058      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x13a>
 8006fcc:	2b40      	cmp	r3, #64	; 0x40
 8006fce:	d86f      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fd0:	2b30      	cmp	r3, #48	; 0x30
 8006fd2:	d064      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x15a>
 8006fd4:	2b30      	cmp	r3, #48	; 0x30
 8006fd6:	d86b      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d060      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x15a>
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	d867      	bhi.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d05c      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x15a>
 8006fe4:	2b10      	cmp	r3, #16
 8006fe6:	d05a      	beq.n	800709e <HAL_TIM_ConfigClockSource+0x15a>
 8006fe8:	e062      	b.n	80070b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6818      	ldr	r0, [r3, #0]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	6899      	ldr	r1, [r3, #8]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f000 f9ad 	bl	8007358 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800700c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	609a      	str	r2, [r3, #8]
      break;
 8007016:	e04f      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	6899      	ldr	r1, [r3, #8]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f000 f996 	bl	8007358 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800703a:	609a      	str	r2, [r3, #8]
      break;
 800703c:	e03c      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6859      	ldr	r1, [r3, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	461a      	mov	r2, r3
 800704c:	f000 f90a 	bl	8007264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2150      	movs	r1, #80	; 0x50
 8007056:	4618      	mov	r0, r3
 8007058:	f000 f963 	bl	8007322 <TIM_ITRx_SetConfig>
      break;
 800705c:	e02c      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6859      	ldr	r1, [r3, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	461a      	mov	r2, r3
 800706c:	f000 f929 	bl	80072c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2160      	movs	r1, #96	; 0x60
 8007076:	4618      	mov	r0, r3
 8007078:	f000 f953 	bl	8007322 <TIM_ITRx_SetConfig>
      break;
 800707c:	e01c      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6818      	ldr	r0, [r3, #0]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	6859      	ldr	r1, [r3, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	461a      	mov	r2, r3
 800708c:	f000 f8ea 	bl	8007264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2140      	movs	r1, #64	; 0x40
 8007096:	4618      	mov	r0, r3
 8007098:	f000 f943 	bl	8007322 <TIM_ITRx_SetConfig>
      break;
 800709c:	e00c      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f000 f93a 	bl	8007322 <TIM_ITRx_SetConfig>
      break;
 80070ae:	e003      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
      break;
 80070b4:	e000      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
	...

08007124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a40      	ldr	r2, [pc, #256]	; (8007238 <TIM_Base_SetConfig+0x114>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d013      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007142:	d00f      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a3d      	ldr	r2, [pc, #244]	; (800723c <TIM_Base_SetConfig+0x118>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00b      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a3c      	ldr	r2, [pc, #240]	; (8007240 <TIM_Base_SetConfig+0x11c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d007      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a3b      	ldr	r2, [pc, #236]	; (8007244 <TIM_Base_SetConfig+0x120>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d003      	beq.n	8007164 <TIM_Base_SetConfig+0x40>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a3a      	ldr	r2, [pc, #232]	; (8007248 <TIM_Base_SetConfig+0x124>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d108      	bne.n	8007176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a2f      	ldr	r2, [pc, #188]	; (8007238 <TIM_Base_SetConfig+0x114>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d02b      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007184:	d027      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a2c      	ldr	r2, [pc, #176]	; (800723c <TIM_Base_SetConfig+0x118>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d023      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2b      	ldr	r2, [pc, #172]	; (8007240 <TIM_Base_SetConfig+0x11c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d01f      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2a      	ldr	r2, [pc, #168]	; (8007244 <TIM_Base_SetConfig+0x120>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d01b      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a29      	ldr	r2, [pc, #164]	; (8007248 <TIM_Base_SetConfig+0x124>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d017      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a28      	ldr	r2, [pc, #160]	; (800724c <TIM_Base_SetConfig+0x128>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a27      	ldr	r2, [pc, #156]	; (8007250 <TIM_Base_SetConfig+0x12c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00f      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a26      	ldr	r2, [pc, #152]	; (8007254 <TIM_Base_SetConfig+0x130>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00b      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a25      	ldr	r2, [pc, #148]	; (8007258 <TIM_Base_SetConfig+0x134>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d007      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a24      	ldr	r2, [pc, #144]	; (800725c <TIM_Base_SetConfig+0x138>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d003      	beq.n	80071d6 <TIM_Base_SetConfig+0xb2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a23      	ldr	r2, [pc, #140]	; (8007260 <TIM_Base_SetConfig+0x13c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d108      	bne.n	80071e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a0a      	ldr	r2, [pc, #40]	; (8007238 <TIM_Base_SetConfig+0x114>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d003      	beq.n	800721c <TIM_Base_SetConfig+0xf8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a0c      	ldr	r2, [pc, #48]	; (8007248 <TIM_Base_SetConfig+0x124>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d103      	bne.n	8007224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	691a      	ldr	r2, [r3, #16]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	615a      	str	r2, [r3, #20]
}
 800722a:	bf00      	nop
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40010000 	.word	0x40010000
 800723c:	40000400 	.word	0x40000400
 8007240:	40000800 	.word	0x40000800
 8007244:	40000c00 	.word	0x40000c00
 8007248:	40010400 	.word	0x40010400
 800724c:	40014000 	.word	0x40014000
 8007250:	40014400 	.word	0x40014400
 8007254:	40014800 	.word	0x40014800
 8007258:	40001800 	.word	0x40001800
 800725c:	40001c00 	.word	0x40001c00
 8007260:	40002000 	.word	0x40002000

08007264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f023 0201 	bic.w	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800728e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f023 030a 	bic.w	r3, r3, #10
 80072a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	621a      	str	r2, [r3, #32]
}
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b087      	sub	sp, #28
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	f023 0210 	bic.w	r2, r3, #16
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	031b      	lsls	r3, r3, #12
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	621a      	str	r2, [r3, #32]
}
 8007316:	bf00      	nop
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007322:	b480      	push	{r7}
 8007324:	b085      	sub	sp, #20
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4313      	orrs	r3, r2
 8007340:	f043 0307 	orr.w	r3, r3, #7
 8007344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	609a      	str	r2, [r3, #8]
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	021a      	lsls	r2, r3, #8
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	431a      	orrs	r2, r3
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4313      	orrs	r3, r2
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	609a      	str	r2, [r3, #8]
}
 800738c:	bf00      	nop
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e05a      	b.n	8007466 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a21      	ldr	r2, [pc, #132]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d022      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fc:	d01d      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1d      	ldr	r2, [pc, #116]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d018      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1b      	ldr	r2, [pc, #108]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d013      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1a      	ldr	r2, [pc, #104]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00e      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a18      	ldr	r2, [pc, #96]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d009      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a17      	ldr	r2, [pc, #92]	; (8007488 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d004      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a15      	ldr	r2, [pc, #84]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d10c      	bne.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	4313      	orrs	r3, r2
 800744a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	40010000 	.word	0x40010000
 8007478:	40000400 	.word	0x40000400
 800747c:	40000800 	.word	0x40000800
 8007480:	40000c00 	.word	0x40000c00
 8007484:	40010400 	.word	0x40010400
 8007488:	40014000 	.word	0x40014000
 800748c:	40001800 	.word	0x40001800

08007490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074b8:	b084      	sub	sp, #16
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	f107 001c 	add.w	r0, r7, #28
 80074c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d122      	bne.n	8007516 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80074e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d105      	bne.n	800750a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 fb1c 	bl	8008b48 <USB_CoreReset>
 8007510:	4603      	mov	r3, r0
 8007512:	73fb      	strb	r3, [r7, #15]
 8007514:	e01a      	b.n	800754c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 fb10 	bl	8008b48 <USB_CoreReset>
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800752c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007536:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	639a      	str	r2, [r3, #56]	; 0x38
 800753e:	e005      	b.n	800754c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	2b01      	cmp	r3, #1
 8007550:	d10b      	bne.n	800756a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f043 0206 	orr.w	r2, r3, #6
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f043 0220 	orr.w	r2, r3, #32
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800756a:	7bfb      	ldrb	r3, [r7, #15]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007576:	b004      	add	sp, #16
 8007578:	4770      	bx	lr
	...

0800757c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	4613      	mov	r3, r2
 8007588:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d165      	bne.n	800765c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4a41      	ldr	r2, [pc, #260]	; (8007698 <USB_SetTurnaroundTime+0x11c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d906      	bls.n	80075a6 <USB_SetTurnaroundTime+0x2a>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4a40      	ldr	r2, [pc, #256]	; (800769c <USB_SetTurnaroundTime+0x120>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d202      	bcs.n	80075a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80075a0:	230f      	movs	r3, #15
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e062      	b.n	800766c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4a3c      	ldr	r2, [pc, #240]	; (800769c <USB_SetTurnaroundTime+0x120>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d306      	bcc.n	80075bc <USB_SetTurnaroundTime+0x40>
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	4a3b      	ldr	r2, [pc, #236]	; (80076a0 <USB_SetTurnaroundTime+0x124>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d202      	bcs.n	80075bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80075b6:	230e      	movs	r3, #14
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	e057      	b.n	800766c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4a38      	ldr	r2, [pc, #224]	; (80076a0 <USB_SetTurnaroundTime+0x124>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d306      	bcc.n	80075d2 <USB_SetTurnaroundTime+0x56>
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4a37      	ldr	r2, [pc, #220]	; (80076a4 <USB_SetTurnaroundTime+0x128>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d202      	bcs.n	80075d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80075cc:	230d      	movs	r3, #13
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	e04c      	b.n	800766c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4a33      	ldr	r2, [pc, #204]	; (80076a4 <USB_SetTurnaroundTime+0x128>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d306      	bcc.n	80075e8 <USB_SetTurnaroundTime+0x6c>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	4a32      	ldr	r2, [pc, #200]	; (80076a8 <USB_SetTurnaroundTime+0x12c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d802      	bhi.n	80075e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80075e2:	230c      	movs	r3, #12
 80075e4:	617b      	str	r3, [r7, #20]
 80075e6:	e041      	b.n	800766c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	4a2f      	ldr	r2, [pc, #188]	; (80076a8 <USB_SetTurnaroundTime+0x12c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d906      	bls.n	80075fe <USB_SetTurnaroundTime+0x82>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	4a2e      	ldr	r2, [pc, #184]	; (80076ac <USB_SetTurnaroundTime+0x130>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d802      	bhi.n	80075fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80075f8:	230b      	movs	r3, #11
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	e036      	b.n	800766c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	4a2a      	ldr	r2, [pc, #168]	; (80076ac <USB_SetTurnaroundTime+0x130>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d906      	bls.n	8007614 <USB_SetTurnaroundTime+0x98>
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	4a29      	ldr	r2, [pc, #164]	; (80076b0 <USB_SetTurnaroundTime+0x134>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d802      	bhi.n	8007614 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800760e:	230a      	movs	r3, #10
 8007610:	617b      	str	r3, [r7, #20]
 8007612:	e02b      	b.n	800766c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	4a26      	ldr	r2, [pc, #152]	; (80076b0 <USB_SetTurnaroundTime+0x134>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d906      	bls.n	800762a <USB_SetTurnaroundTime+0xae>
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4a25      	ldr	r2, [pc, #148]	; (80076b4 <USB_SetTurnaroundTime+0x138>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d202      	bcs.n	800762a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007624:	2309      	movs	r3, #9
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	e020      	b.n	800766c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	4a21      	ldr	r2, [pc, #132]	; (80076b4 <USB_SetTurnaroundTime+0x138>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d306      	bcc.n	8007640 <USB_SetTurnaroundTime+0xc4>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	4a20      	ldr	r2, [pc, #128]	; (80076b8 <USB_SetTurnaroundTime+0x13c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d802      	bhi.n	8007640 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800763a:	2308      	movs	r3, #8
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	e015      	b.n	800766c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	4a1d      	ldr	r2, [pc, #116]	; (80076b8 <USB_SetTurnaroundTime+0x13c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d906      	bls.n	8007656 <USB_SetTurnaroundTime+0xda>
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4a1c      	ldr	r2, [pc, #112]	; (80076bc <USB_SetTurnaroundTime+0x140>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d202      	bcs.n	8007656 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007650:	2307      	movs	r3, #7
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	e00a      	b.n	800766c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007656:	2306      	movs	r3, #6
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	e007      	b.n	800766c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d102      	bne.n	8007668 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007662:	2309      	movs	r3, #9
 8007664:	617b      	str	r3, [r7, #20]
 8007666:	e001      	b.n	800766c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007668:	2309      	movs	r3, #9
 800766a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	029b      	lsls	r3, r3, #10
 8007680:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007684:	431a      	orrs	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	371c      	adds	r7, #28
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	00d8acbf 	.word	0x00d8acbf
 800769c:	00e4e1c0 	.word	0x00e4e1c0
 80076a0:	00f42400 	.word	0x00f42400
 80076a4:	01067380 	.word	0x01067380
 80076a8:	011a499f 	.word	0x011a499f
 80076ac:	01312cff 	.word	0x01312cff
 80076b0:	014ca43f 	.word	0x014ca43f
 80076b4:	016e3600 	.word	0x016e3600
 80076b8:	01a6ab1f 	.word	0x01a6ab1f
 80076bc:	01e84800 	.word	0x01e84800

080076c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f043 0201 	orr.w	r2, r3, #1
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f023 0201 	bic.w	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d115      	bne.n	8007752 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007732:	2001      	movs	r0, #1
 8007734:	f7fb feb6 	bl	80034a4 <HAL_Delay>
      ms++;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3301      	adds	r3, #1
 800773c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 f972 	bl	8008a28 <USB_GetMode>
 8007744:	4603      	mov	r3, r0
 8007746:	2b01      	cmp	r3, #1
 8007748:	d01e      	beq.n	8007788 <USB_SetCurrentMode+0x84>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b31      	cmp	r3, #49	; 0x31
 800774e:	d9f0      	bls.n	8007732 <USB_SetCurrentMode+0x2e>
 8007750:	e01a      	b.n	8007788 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d115      	bne.n	8007784 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007764:	2001      	movs	r0, #1
 8007766:	f7fb fe9d 	bl	80034a4 <HAL_Delay>
      ms++;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f959 	bl	8008a28 <USB_GetMode>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <USB_SetCurrentMode+0x84>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b31      	cmp	r3, #49	; 0x31
 8007780:	d9f0      	bls.n	8007764 <USB_SetCurrentMode+0x60>
 8007782:	e001      	b.n	8007788 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e005      	b.n	8007794 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b32      	cmp	r3, #50	; 0x32
 800778c:	d101      	bne.n	8007792 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800779c:	b084      	sub	sp, #16
 800779e:	b580      	push	{r7, lr}
 80077a0:	b086      	sub	sp, #24
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077b6:	2300      	movs	r3, #0
 80077b8:	613b      	str	r3, [r7, #16]
 80077ba:	e009      	b.n	80077d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	3340      	adds	r3, #64	; 0x40
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	2200      	movs	r2, #0
 80077c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	3301      	adds	r3, #1
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2b0e      	cmp	r3, #14
 80077d4:	d9f2      	bls.n	80077bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d11c      	bne.n	8007816 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077ea:	f043 0302 	orr.w	r3, r3, #2
 80077ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	639a      	str	r2, [r3, #56]	; 0x38
 8007814:	e00b      	b.n	800782e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007834:	461a      	mov	r2, r3
 8007836:	2300      	movs	r3, #0
 8007838:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007840:	4619      	mov	r1, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007848:	461a      	mov	r2, r3
 800784a:	680b      	ldr	r3, [r1, #0]
 800784c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	2b01      	cmp	r3, #1
 8007852:	d10c      	bne.n	800786e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007856:	2b00      	cmp	r3, #0
 8007858:	d104      	bne.n	8007864 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800785a:	2100      	movs	r1, #0
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f945 	bl	8007aec <USB_SetDevSpeed>
 8007862:	e008      	b.n	8007876 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007864:	2101      	movs	r1, #1
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f940 	bl	8007aec <USB_SetDevSpeed>
 800786c:	e003      	b.n	8007876 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800786e:	2103      	movs	r1, #3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f93b 	bl	8007aec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007876:	2110      	movs	r1, #16
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f8f3 	bl	8007a64 <USB_FlushTxFifo>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f90f 	bl	8007aac <USB_FlushRxFifo>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789e:	461a      	mov	r2, r3
 80078a0:	2300      	movs	r3, #0
 80078a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078aa:	461a      	mov	r2, r3
 80078ac:	2300      	movs	r3, #0
 80078ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b6:	461a      	mov	r2, r3
 80078b8:	2300      	movs	r3, #0
 80078ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078bc:	2300      	movs	r3, #0
 80078be:	613b      	str	r3, [r7, #16]
 80078c0:	e043      	b.n	800794a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d8:	d118      	bne.n	800790c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ec:	461a      	mov	r2, r3
 80078ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	e013      	b.n	800791e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007902:	461a      	mov	r2, r3
 8007904:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	e008      	b.n	800791e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007918:	461a      	mov	r2, r3
 800791a:	2300      	movs	r3, #0
 800791c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792a:	461a      	mov	r2, r3
 800792c:	2300      	movs	r3, #0
 800792e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793c:	461a      	mov	r2, r3
 800793e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007942:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	3301      	adds	r3, #1
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	429a      	cmp	r2, r3
 8007950:	d3b7      	bcc.n	80078c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007952:	2300      	movs	r3, #0
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	e043      	b.n	80079e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800796a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800796e:	d118      	bne.n	80079a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007982:	461a      	mov	r2, r3
 8007984:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	e013      	b.n	80079b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007998:	461a      	mov	r2, r3
 800799a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	e008      	b.n	80079b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ae:	461a      	mov	r2, r3
 80079b0:	2300      	movs	r3, #0
 80079b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c0:	461a      	mov	r2, r3
 80079c2:	2300      	movs	r3, #0
 80079c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d2:	461a      	mov	r2, r3
 80079d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	3301      	adds	r3, #1
 80079de:	613b      	str	r3, [r7, #16]
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d3b7      	bcc.n	8007958 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d105      	bne.n	8007a1c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	f043 0210 	orr.w	r2, r3, #16
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699a      	ldr	r2, [r3, #24]
 8007a20:	4b0f      	ldr	r3, [pc, #60]	; (8007a60 <USB_DevInit+0x2c4>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d005      	beq.n	8007a3a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	f043 0208 	orr.w	r2, r3, #8
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d107      	bne.n	8007a50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a48:	f043 0304 	orr.w	r3, r3, #4
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a5c:	b004      	add	sp, #16
 8007a5e:	4770      	bx	lr
 8007a60:	803c3800 	.word	0x803c3800

08007a64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	019b      	lsls	r3, r3, #6
 8007a76:	f043 0220 	orr.w	r2, r3, #32
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3301      	adds	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	4a08      	ldr	r2, [pc, #32]	; (8007aa8 <USB_FlushTxFifo+0x44>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d901      	bls.n	8007a8e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e006      	b.n	8007a9c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b20      	cmp	r3, #32
 8007a98:	d0f1      	beq.n	8007a7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	00030d40 	.word	0x00030d40

08007aac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2210      	movs	r2, #16
 8007abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	4a08      	ldr	r2, [pc, #32]	; (8007ae8 <USB_FlushRxFifo+0x3c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d901      	bls.n	8007ace <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e006      	b.n	8007adc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	f003 0310 	and.w	r3, r3, #16
 8007ad6:	2b10      	cmp	r3, #16
 8007ad8:	d0f1      	beq.n	8007abe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	00030d40 	.word	0x00030d40

08007aec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	78fb      	ldrb	r3, [r7, #3]
 8007b06:	68f9      	ldr	r1, [r7, #12]
 8007b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b087      	sub	sp, #28
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 0306 	and.w	r3, r3, #6
 8007b36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75fb      	strb	r3, [r7, #23]
 8007b42:	e00a      	b.n	8007b5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d002      	beq.n	8007b50 <USB_GetDevSpeed+0x32>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b06      	cmp	r3, #6
 8007b4e:	d102      	bne.n	8007b56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007b50:	2302      	movs	r3, #2
 8007b52:	75fb      	strb	r3, [r7, #23]
 8007b54:	e001      	b.n	8007b5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007b56:	230f      	movs	r3, #15
 8007b58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	371c      	adds	r7, #28
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d13a      	bne.n	8007bfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	69da      	ldr	r2, [r3, #28]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	f003 030f 	and.w	r3, r3, #15
 8007b94:	2101      	movs	r1, #1
 8007b96:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	68f9      	ldr	r1, [r7, #12]
 8007b9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d155      	bne.n	8007c68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	78db      	ldrb	r3, [r3, #3]
 8007bd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	059b      	lsls	r3, r3, #22
 8007bde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007be0:	4313      	orrs	r3, r2
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	e036      	b.n	8007c68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c00:	69da      	ldr	r2, [r3, #28]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c10:	041b      	lsls	r3, r3, #16
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d11a      	bne.n	8007c68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	78db      	ldrb	r3, [r3, #3]
 8007c4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c4e:	430b      	orrs	r3, r1
 8007c50:	4313      	orrs	r3, r2
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	0151      	lsls	r1, r2, #5
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	440a      	add	r2, r1
 8007c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	785b      	ldrb	r3, [r3, #1]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d161      	bne.n	8007d58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007caa:	d11f      	bne.n	8007cec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	0151      	lsls	r1, r2, #5
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	440a      	add	r2, r1
 8007cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	0151      	lsls	r1, r2, #5
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	440a      	add	r2, r1
 8007ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	43db      	mvns	r3, r3
 8007d06:	68f9      	ldr	r1, [r7, #12]
 8007d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d16:	69da      	ldr	r2, [r3, #28]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	f003 030f 	and.w	r3, r3, #15
 8007d20:	2101      	movs	r1, #1
 8007d22:	fa01 f303 	lsl.w	r3, r1, r3
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	68f9      	ldr	r1, [r7, #12]
 8007d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d30:	4013      	ands	r3, r2
 8007d32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	0159      	lsls	r1, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	440b      	add	r3, r1
 8007d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4b35      	ldr	r3, [pc, #212]	; (8007e28 <USB_DeactivateEndpoint+0x1b0>)
 8007d52:	4013      	ands	r3, r2
 8007d54:	600b      	str	r3, [r1, #0]
 8007d56:	e060      	b.n	8007e1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d6e:	d11f      	bne.n	8007db0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	0151      	lsls	r1, r2, #5
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	440a      	add	r2, r1
 8007d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	0151      	lsls	r1, r2, #5
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	440a      	add	r2, r1
 8007da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007daa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc6:	041b      	lsls	r3, r3, #16
 8007dc8:	43db      	mvns	r3, r3
 8007dca:	68f9      	ldr	r1, [r7, #12]
 8007dcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dda:	69da      	ldr	r2, [r3, #28]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	f003 030f 	and.w	r3, r3, #15
 8007de4:	2101      	movs	r1, #1
 8007de6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dea:	041b      	lsls	r3, r3, #16
 8007dec:	43db      	mvns	r3, r3
 8007dee:	68f9      	ldr	r1, [r7, #12]
 8007df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007df4:	4013      	ands	r3, r2
 8007df6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	0159      	lsls	r1, r3, #5
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	440b      	add	r3, r1
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e12:	4619      	mov	r1, r3
 8007e14:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <USB_DeactivateEndpoint+0x1b4>)
 8007e16:	4013      	ands	r3, r2
 8007e18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	ec337800 	.word	0xec337800
 8007e2c:	eff37800 	.word	0xeff37800

08007e30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08a      	sub	sp, #40	; 0x28
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	785b      	ldrb	r3, [r3, #1]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	f040 815c 	bne.w	800810a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d132      	bne.n	8007ec0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	0151      	lsls	r1, r2, #5
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	440a      	add	r2, r1
 8007e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	0151      	lsls	r1, r2, #5
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	440a      	add	r2, r1
 8007e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	0151      	lsls	r1, r2, #5
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	440a      	add	r2, r1
 8007eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb8:	0cdb      	lsrs	r3, r3, #19
 8007eba:	04db      	lsls	r3, r3, #19
 8007ebc:	6113      	str	r3, [r2, #16]
 8007ebe:	e074      	b.n	8007faa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	0151      	lsls	r1, r2, #5
 8007ed2:	69fa      	ldr	r2, [r7, #28]
 8007ed4:	440a      	add	r2, r1
 8007ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eda:	0cdb      	lsrs	r3, r3, #19
 8007edc:	04db      	lsls	r3, r3, #19
 8007ede:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007efa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007efe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f10:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6959      	ldr	r1, [r3, #20]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	440b      	add	r3, r1
 8007f1c:	1e59      	subs	r1, r3, #1
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f26:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f28:	4b9d      	ldr	r3, [pc, #628]	; (80081a0 <USB_EPStartXfer+0x370>)
 8007f2a:	400b      	ands	r3, r1
 8007f2c:	69b9      	ldr	r1, [r7, #24]
 8007f2e:	0148      	lsls	r0, r1, #5
 8007f30:	69f9      	ldr	r1, [r7, #28]
 8007f32:	4401      	add	r1, r0
 8007f34:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f48:	691a      	ldr	r2, [r3, #16]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f52:	69b9      	ldr	r1, [r7, #24]
 8007f54:	0148      	lsls	r0, r1, #5
 8007f56:	69f9      	ldr	r1, [r7, #28]
 8007f58:	4401      	add	r1, r0
 8007f5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	78db      	ldrb	r3, [r3, #3]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d11f      	bne.n	8007faa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	0151      	lsls	r1, r2, #5
 8007f7c:	69fa      	ldr	r2, [r7, #28]
 8007f7e:	440a      	add	r2, r1
 8007f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f84:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007f88:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	0151      	lsls	r1, r2, #5
 8007f9c:	69fa      	ldr	r2, [r7, #28]
 8007f9e:	440a      	add	r2, r1
 8007fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fa8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d14b      	bne.n	8008048 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d009      	beq.n	8007fcc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	78db      	ldrb	r3, [r3, #3]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d128      	bne.n	8008026 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d110      	bne.n	8008006 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	0151      	lsls	r1, r2, #5
 8007ff6:	69fa      	ldr	r2, [r7, #28]
 8007ff8:	440a      	add	r2, r1
 8007ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ffe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	e00f      	b.n	8008026 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	0151      	lsls	r1, r2, #5
 8008018:	69fa      	ldr	r2, [r7, #28]
 800801a:	440a      	add	r2, r1
 800801c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008024:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	0151      	lsls	r1, r2, #5
 8008038:	69fa      	ldr	r2, [r7, #28]
 800803a:	440a      	add	r2, r1
 800803c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008040:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008044:	6013      	str	r3, [r2, #0]
 8008046:	e12f      	b.n	80082a8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	0151      	lsls	r1, r2, #5
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	440a      	add	r2, r1
 800805e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008062:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008066:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	78db      	ldrb	r3, [r3, #3]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d015      	beq.n	800809c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8117 	beq.w	80082a8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	2101      	movs	r1, #1
 800808c:	fa01 f303 	lsl.w	r3, r1, r3
 8008090:	69f9      	ldr	r1, [r7, #28]
 8008092:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008096:	4313      	orrs	r3, r2
 8008098:	634b      	str	r3, [r1, #52]	; 0x34
 800809a:	e105      	b.n	80082a8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d110      	bne.n	80080ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	e00f      	b.n	80080ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	0151      	lsls	r1, r2, #5
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	440a      	add	r2, r1
 80080e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	68d9      	ldr	r1, [r3, #12]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	781a      	ldrb	r2, [r3, #0]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	b298      	uxth	r0, r3
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	4603      	mov	r3, r0
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 fa2b 	bl	800855e <USB_WritePacket>
 8008108:	e0ce      	b.n	80082a8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	0151      	lsls	r1, r2, #5
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	440a      	add	r2, r1
 8008120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008124:	0cdb      	lsrs	r3, r3, #19
 8008126:	04db      	lsls	r3, r3, #19
 8008128:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	440a      	add	r2, r1
 8008140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008144:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008148:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800814c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d126      	bne.n	80081a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008162:	691a      	ldr	r2, [r3, #16]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800816c:	69b9      	ldr	r1, [r7, #24]
 800816e:	0148      	lsls	r0, r1, #5
 8008170:	69f9      	ldr	r1, [r7, #28]
 8008172:	4401      	add	r1, r0
 8008174:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008178:	4313      	orrs	r3, r2
 800817a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	0151      	lsls	r1, r2, #5
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	440a      	add	r2, r1
 8008192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800819a:	6113      	str	r3, [r2, #16]
 800819c:	e036      	b.n	800820c <USB_EPStartXfer+0x3dc>
 800819e:	bf00      	nop
 80081a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	695a      	ldr	r2, [r3, #20]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	4413      	add	r3, r2
 80081ae:	1e5a      	subs	r2, r3, #1
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	8afb      	ldrh	r3, [r7, #22]
 80081ca:	04d9      	lsls	r1, r3, #19
 80081cc:	4b39      	ldr	r3, [pc, #228]	; (80082b4 <USB_EPStartXfer+0x484>)
 80081ce:	400b      	ands	r3, r1
 80081d0:	69b9      	ldr	r1, [r7, #24]
 80081d2:	0148      	lsls	r0, r1, #5
 80081d4:	69f9      	ldr	r1, [r7, #28]
 80081d6:	4401      	add	r1, r0
 80081d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081dc:	4313      	orrs	r3, r2
 80081de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ec:	691a      	ldr	r2, [r3, #16]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	8af9      	ldrh	r1, [r7, #22]
 80081f4:	fb01 f303 	mul.w	r3, r1, r3
 80081f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081fc:	69b9      	ldr	r1, [r7, #24]
 80081fe:	0148      	lsls	r0, r1, #5
 8008200:	69f9      	ldr	r1, [r7, #28]
 8008202:	4401      	add	r1, r0
 8008204:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008208:	4313      	orrs	r3, r2
 800820a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d10d      	bne.n	800822e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d009      	beq.n	800822e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	68d9      	ldr	r1, [r3, #12]
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822a:	460a      	mov	r2, r1
 800822c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	78db      	ldrb	r3, [r3, #3]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d128      	bne.n	8008288 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008242:	2b00      	cmp	r3, #0
 8008244:	d110      	bne.n	8008268 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	0151      	lsls	r1, r2, #5
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	440a      	add	r2, r1
 800825c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008264:	6013      	str	r3, [r2, #0]
 8008266:	e00f      	b.n	8008288 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69ba      	ldr	r2, [r7, #24]
 8008278:	0151      	lsls	r1, r2, #5
 800827a:	69fa      	ldr	r2, [r7, #28]
 800827c:	440a      	add	r2, r1
 800827e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008286:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	440a      	add	r2, r1
 800829e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3720      	adds	r7, #32
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	1ff80000 	.word	0x1ff80000

080082b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	785b      	ldrb	r3, [r3, #1]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	f040 80cd 	bne.w	8008474 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d132      	bne.n	8008348 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	4413      	add	r3, r2
 800830e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	0151      	lsls	r1, r2, #5
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	440a      	add	r2, r1
 800831c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008320:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	440a      	add	r2, r1
 800833c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008340:	0cdb      	lsrs	r3, r3, #19
 8008342:	04db      	lsls	r3, r3, #19
 8008344:	6113      	str	r3, [r2, #16]
 8008346:	e04e      	b.n	80083e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	0151      	lsls	r1, r2, #5
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	440a      	add	r2, r1
 800835e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008362:	0cdb      	lsrs	r3, r3, #19
 8008364:	04db      	lsls	r3, r3, #19
 8008366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008382:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008386:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800838a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	695a      	ldr	r2, [r3, #20]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	429a      	cmp	r2, r3
 8008396:	d903      	bls.n	80083a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	0151      	lsls	r1, r2, #5
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	440a      	add	r2, r1
 80083b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083d6:	6939      	ldr	r1, [r7, #16]
 80083d8:	0148      	lsls	r0, r1, #5
 80083da:	6979      	ldr	r1, [r7, #20]
 80083dc:	4401      	add	r1, r0
 80083de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083e2:	4313      	orrs	r3, r2
 80083e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d11e      	bne.n	800842a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d009      	beq.n	8008408 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008400:	461a      	mov	r2, r3
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	440a      	add	r2, r1
 800841e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008422:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	e092      	b.n	8008550 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	4413      	add	r3, r2
 8008432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	0151      	lsls	r1, r2, #5
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	440a      	add	r2, r1
 8008440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008444:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008448:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d07e      	beq.n	8008550 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f003 030f 	and.w	r3, r3, #15
 8008462:	2101      	movs	r1, #1
 8008464:	fa01 f303 	lsl.w	r3, r1, r3
 8008468:	6979      	ldr	r1, [r7, #20]
 800846a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800846e:	4313      	orrs	r3, r2
 8008470:	634b      	str	r3, [r1, #52]	; 0x34
 8008472:	e06d      	b.n	8008550 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	0151      	lsls	r1, r2, #5
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	440a      	add	r2, r1
 800848a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800848e:	0cdb      	lsrs	r3, r3, #19
 8008490:	04db      	lsls	r3, r3, #19
 8008492:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	0151      	lsls	r1, r2, #5
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	440a      	add	r2, r1
 80084aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084b6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d003      	beq.n	80084c8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f4:	691a      	ldr	r2, [r3, #16]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084fe:	6939      	ldr	r1, [r7, #16]
 8008500:	0148      	lsls	r0, r1, #5
 8008502:	6979      	ldr	r1, [r7, #20]
 8008504:	4401      	add	r1, r0
 8008506:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800850a:	4313      	orrs	r3, r2
 800850c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d10d      	bne.n	8008530 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d009      	beq.n	8008530 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	68d9      	ldr	r1, [r3, #12]
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852c:	460a      	mov	r2, r1
 800852e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	0151      	lsls	r1, r2, #5
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	440a      	add	r2, r1
 8008546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800854a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800854e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800855e:	b480      	push	{r7}
 8008560:	b089      	sub	sp, #36	; 0x24
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	4611      	mov	r1, r2
 800856a:	461a      	mov	r2, r3
 800856c:	460b      	mov	r3, r1
 800856e:	71fb      	strb	r3, [r7, #7]
 8008570:	4613      	mov	r3, r2
 8008572:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800857c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008580:	2b00      	cmp	r3, #0
 8008582:	d123      	bne.n	80085cc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008584:	88bb      	ldrh	r3, [r7, #4]
 8008586:	3303      	adds	r3, #3
 8008588:	089b      	lsrs	r3, r3, #2
 800858a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800858c:	2300      	movs	r3, #0
 800858e:	61bb      	str	r3, [r7, #24]
 8008590:	e018      	b.n	80085c4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	031a      	lsls	r2, r3, #12
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	4413      	add	r3, r2
 800859a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800859e:	461a      	mov	r2, r3
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	3301      	adds	r3, #1
 80085aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	3301      	adds	r3, #1
 80085b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	3301      	adds	r3, #1
 80085b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	3301      	adds	r3, #1
 80085bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	3301      	adds	r3, #1
 80085c2:	61bb      	str	r3, [r7, #24]
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d3e2      	bcc.n	8008592 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3724      	adds	r7, #36	; 0x24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80085da:	b480      	push	{r7}
 80085dc:	b08b      	sub	sp, #44	; 0x2c
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	4613      	mov	r3, r2
 80085e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80085f0:	88fb      	ldrh	r3, [r7, #6]
 80085f2:	089b      	lsrs	r3, r3, #2
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80085f8:	88fb      	ldrh	r3, [r7, #6]
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008600:	2300      	movs	r3, #0
 8008602:	623b      	str	r3, [r7, #32]
 8008604:	e014      	b.n	8008630 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	601a      	str	r2, [r3, #0]
    pDest++;
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	3301      	adds	r3, #1
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	3301      	adds	r3, #1
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	3301      	adds	r3, #1
 8008622:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	3301      	adds	r3, #1
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	3301      	adds	r3, #1
 800862e:	623b      	str	r3, [r7, #32]
 8008630:	6a3a      	ldr	r2, [r7, #32]
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	429a      	cmp	r2, r3
 8008636:	d3e6      	bcc.n	8008606 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008638:	8bfb      	ldrh	r3, [r7, #30]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01e      	beq.n	800867c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800863e:	2300      	movs	r3, #0
 8008640:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008648:	461a      	mov	r2, r3
 800864a:	f107 0310 	add.w	r3, r7, #16
 800864e:	6812      	ldr	r2, [r2, #0]
 8008650:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	b2db      	uxtb	r3, r3
 8008658:	00db      	lsls	r3, r3, #3
 800865a:	fa22 f303 	lsr.w	r3, r2, r3
 800865e:	b2da      	uxtb	r2, r3
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	701a      	strb	r2, [r3, #0]
      i++;
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	3301      	adds	r3, #1
 8008668:	623b      	str	r3, [r7, #32]
      pDest++;
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	3301      	adds	r3, #1
 800866e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008670:	8bfb      	ldrh	r3, [r7, #30]
 8008672:	3b01      	subs	r3, #1
 8008674:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008676:	8bfb      	ldrh	r3, [r7, #30]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1ea      	bne.n	8008652 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800867e:	4618      	mov	r0, r3
 8008680:	372c      	adds	r7, #44	; 0x2c
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800868a:	b480      	push	{r7}
 800868c:	b085      	sub	sp, #20
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	785b      	ldrb	r3, [r3, #1]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d12c      	bne.n	8008700 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	db12      	blt.n	80086de <USB_EPSetStall+0x54>
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00f      	beq.n	80086de <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80086dc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	0151      	lsls	r1, r2, #5
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	440a      	add	r2, r1
 80086f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	e02b      	b.n	8008758 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	db12      	blt.n	8008738 <USB_EPSetStall+0xae>
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00f      	beq.n	8008738 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4413      	add	r3, r2
 8008720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	0151      	lsls	r1, r2, #5
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	440a      	add	r2, r1
 800872e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008732:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008736:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	0151      	lsls	r1, r2, #5
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	440a      	add	r2, r1
 800874e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008756:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008766:	b480      	push	{r7}
 8008768:	b085      	sub	sp, #20
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	785b      	ldrb	r3, [r3, #1]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d128      	bne.n	80087d4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	0151      	lsls	r1, r2, #5
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	440a      	add	r2, r1
 8008798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800879c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	78db      	ldrb	r3, [r3, #3]
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d003      	beq.n	80087b2 <USB_EPClearStall+0x4c>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	78db      	ldrb	r3, [r3, #3]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d138      	bne.n	8008824 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	0151      	lsls	r1, r2, #5
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	440a      	add	r2, r1
 80087c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	e027      	b.n	8008824 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	0151      	lsls	r1, r2, #5
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	440a      	add	r2, r1
 80087ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	78db      	ldrb	r3, [r3, #3]
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d003      	beq.n	8008804 <USB_EPClearStall+0x9e>
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	78db      	ldrb	r3, [r3, #3]
 8008800:	2b02      	cmp	r3, #2
 8008802:	d10f      	bne.n	8008824 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	0151      	lsls	r1, r2, #5
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	440a      	add	r2, r1
 800881a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800881e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008822:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008850:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008854:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008866:	68f9      	ldr	r1, [r7, #12]
 8008868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800886c:	4313      	orrs	r3, r2
 800886e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800887e:	b480      	push	{r7}
 8008880:	b085      	sub	sp, #20
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008898:	f023 0303 	bic.w	r3, r3, #3
 800889c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088ac:	f023 0302 	bic.w	r3, r3, #2
 80088b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088da:	f023 0303 	bic.w	r3, r3, #3
 80088de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088ee:	f043 0302 	orr.w	r3, r3, #2
 80088f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008902:	b480      	push	{r7}
 8008904:	b085      	sub	sp, #20
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	4013      	ands	r3, r2
 8008918:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800891a:	68fb      	ldr	r3, [r7, #12]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	4013      	ands	r3, r2
 800894a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	0c1b      	lsrs	r3, r3, #16
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	4013      	ands	r3, r2
 800897e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	b29b      	uxth	r3, r3
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80089a0:	78fb      	ldrb	r3, [r7, #3]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	4013      	ands	r3, r2
 80089bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089be:	68bb      	ldr	r3, [r7, #8]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	f003 030f 	and.w	r3, r3, #15
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	fa22 f303 	lsr.w	r3, r2, r3
 80089fc:	01db      	lsls	r3, r3, #7
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a06:	78fb      	ldrb	r3, [r7, #3]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	4013      	ands	r3, r2
 8008a18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	371c      	adds	r7, #28
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	f003 0301 	and.w	r3, r3, #1
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a5e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008a62:	f023 0307 	bic.w	r3, r3, #7
 8008a66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
	...

08008a8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	460b      	mov	r3, r1
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	333c      	adds	r3, #60	; 0x3c
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	4a26      	ldr	r2, [pc, #152]	; (8008b44 <USB_EP0_OutStart+0xb8>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d90a      	bls.n	8008ac6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ac0:	d101      	bne.n	8008ac6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	e037      	b.n	8008b36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008acc:	461a      	mov	r2, r3
 8008ace:	2300      	movs	r3, #0
 8008ad0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ae4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008af4:	f043 0318 	orr.w	r3, r3, #24
 8008af8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008b0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b0e:	7afb      	ldrb	r3, [r7, #11]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d10f      	bne.n	8008b34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008b32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	371c      	adds	r7, #28
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	4f54300a 	.word	0x4f54300a

08008b48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b50:	2300      	movs	r3, #0
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3301      	adds	r3, #1
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	4a13      	ldr	r2, [pc, #76]	; (8008ba8 <USB_CoreReset+0x60>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d901      	bls.n	8008b64 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e01a      	b.n	8008b9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	daf3      	bge.n	8008b54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	f043 0201 	orr.w	r2, r3, #1
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	4a09      	ldr	r2, [pc, #36]	; (8008ba8 <USB_CoreReset+0x60>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d901      	bls.n	8008b8c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e006      	b.n	8008b9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d0f1      	beq.n	8008b7c <USB_CoreReset+0x34>

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	00030d40 	.word	0x00030d40

08008bac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008bb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008bbc:	f005 fc4e 	bl	800e45c <USBD_static_malloc>
 8008bc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d105      	bne.n	8008bd4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e066      	b.n	8008ca2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7c1b      	ldrb	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d119      	bne.n	8008c18 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008be8:	2202      	movs	r2, #2
 8008bea:	2181      	movs	r1, #129	; 0x81
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f005 fb12 	bl	800e216 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	2101      	movs	r1, #1
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f005 fb08 	bl	800e216 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2210      	movs	r2, #16
 8008c12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008c16:	e016      	b.n	8008c46 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c18:	2340      	movs	r3, #64	; 0x40
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	2181      	movs	r1, #129	; 0x81
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f005 faf9 	bl	800e216 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	2101      	movs	r1, #1
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f005 faf0 	bl	800e216 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2210      	movs	r2, #16
 8008c42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c46:	2308      	movs	r3, #8
 8008c48:	2203      	movs	r2, #3
 8008c4a:	2182      	movs	r1, #130	; 0x82
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f005 fae2 	bl	800e216 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	7c1b      	ldrb	r3, [r3, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d109      	bne.n	8008c90 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c86:	2101      	movs	r1, #1
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f005 fbb3 	bl	800e3f4 <USBD_LL_PrepareReceive>
 8008c8e:	e007      	b.n	8008ca0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c96:	2340      	movs	r3, #64	; 0x40
 8008c98:	2101      	movs	r1, #1
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f005 fbaa 	bl	800e3f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b082      	sub	sp, #8
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008cb6:	2181      	movs	r1, #129	; 0x81
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f005 fad2 	bl	800e262 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f005 facb 	bl	800e262 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008cd4:	2182      	movs	r1, #130	; 0x82
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f005 fac3 	bl	800e262 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00e      	beq.n	8008d14 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d06:	4618      	mov	r0, r3
 8008d08:	f005 fbb6 	bl	800e478 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008d36:	2300      	movs	r3, #0
 8008d38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e0af      	b.n	8008ea8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d03f      	beq.n	8008dd4 <USBD_CDC_Setup+0xb4>
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	f040 809f 	bne.w	8008e98 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	88db      	ldrh	r3, [r3, #6]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d02e      	beq.n	8008dc0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	b25b      	sxtb	r3, r3
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	da16      	bge.n	8008d9a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008d78:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	88d2      	ldrh	r2, [r2, #6]
 8008d7e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	88db      	ldrh	r3, [r3, #6]
 8008d84:	2b07      	cmp	r3, #7
 8008d86:	bf28      	it	cs
 8008d88:	2307      	movcs	r3, #7
 8008d8a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	89fa      	ldrh	r2, [r7, #14]
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 fb19 	bl	800a3ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008d98:	e085      	b.n	8008ea6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	785a      	ldrb	r2, [r3, #1]
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	88db      	ldrh	r3, [r3, #6]
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008db0:	6939      	ldr	r1, [r7, #16]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	88db      	ldrh	r3, [r3, #6]
 8008db6:	461a      	mov	r2, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 fb32 	bl	800a422 <USBD_CtlPrepareRx>
      break;
 8008dbe:	e072      	b.n	8008ea6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	7850      	ldrb	r0, [r2, #1]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	4798      	blx	r3
      break;
 8008dd2:	e068      	b.n	8008ea6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	785b      	ldrb	r3, [r3, #1]
 8008dd8:	2b0b      	cmp	r3, #11
 8008dda:	d852      	bhi.n	8008e82 <USBD_CDC_Setup+0x162>
 8008ddc:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <USBD_CDC_Setup+0xc4>)
 8008dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de2:	bf00      	nop
 8008de4:	08008e15 	.word	0x08008e15
 8008de8:	08008e91 	.word	0x08008e91
 8008dec:	08008e83 	.word	0x08008e83
 8008df0:	08008e83 	.word	0x08008e83
 8008df4:	08008e83 	.word	0x08008e83
 8008df8:	08008e83 	.word	0x08008e83
 8008dfc:	08008e83 	.word	0x08008e83
 8008e00:	08008e83 	.word	0x08008e83
 8008e04:	08008e83 	.word	0x08008e83
 8008e08:	08008e83 	.word	0x08008e83
 8008e0c:	08008e3f 	.word	0x08008e3f
 8008e10:	08008e69 	.word	0x08008e69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d107      	bne.n	8008e30 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e20:	f107 030a 	add.w	r3, r7, #10
 8008e24:	2202      	movs	r2, #2
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f001 face 	bl	800a3ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e2e:	e032      	b.n	8008e96 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 fa58 	bl	800a2e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e3c:	e02b      	b.n	8008e96 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d107      	bne.n	8008e5a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e4a:	f107 030d 	add.w	r3, r7, #13
 8008e4e:	2201      	movs	r2, #1
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 fab9 	bl	800a3ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e58:	e01d      	b.n	8008e96 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f001 fa43 	bl	800a2e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e62:	2303      	movs	r3, #3
 8008e64:	75fb      	strb	r3, [r7, #23]
          break;
 8008e66:	e016      	b.n	8008e96 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d00f      	beq.n	8008e94 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f001 fa36 	bl	800a2e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e80:	e008      	b.n	8008e94 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f001 fa2f 	bl	800a2e8 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e8e:	e002      	b.n	8008e96 <USBD_CDC_Setup+0x176>
          break;
 8008e90:	bf00      	nop
 8008e92:	e008      	b.n	8008ea6 <USBD_CDC_Setup+0x186>
          break;
 8008e94:	bf00      	nop
      }
      break;
 8008e96:	e006      	b.n	8008ea6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f001 fa24 	bl	800a2e8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea4:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ec2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e04f      	b.n	8008f72 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ed8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008eda:	78fa      	ldrb	r2, [r7, #3]
 8008edc:	6879      	ldr	r1, [r7, #4]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	440b      	add	r3, r1
 8008ee8:	3318      	adds	r3, #24
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d029      	beq.n	8008f44 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	440b      	add	r3, r1
 8008efe:	3318      	adds	r3, #24
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	78f9      	ldrb	r1, [r7, #3]
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	460b      	mov	r3, r1
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	1a5b      	subs	r3, r3, r1
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4403      	add	r3, r0
 8008f10:	3344      	adds	r3, #68	; 0x44
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f18:	fb03 f301 	mul.w	r3, r3, r1
 8008f1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d110      	bne.n	8008f44 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	3318      	adds	r3, #24
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f36:	78f9      	ldrb	r1, [r7, #3]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f005 fa38 	bl	800e3b2 <USBD_LL_Transmit>
 8008f42:	e015      	b.n	8008f70 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00b      	beq.n	8008f70 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008f6c:	78fa      	ldrb	r2, [r7, #3]
 8008f6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	460b      	mov	r3, r1
 8008f84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e015      	b.n	8008fc8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f9c:	78fb      	ldrb	r3, [r7, #3]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f005 fa48 	bl	800e436 <USBD_LL_GetRxDataSize>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fde:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d101      	bne.n	8008fea <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e01b      	b.n	8009022 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d015      	beq.n	8009020 <USBD_CDC_EP0_RxReady+0x50>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ffa:	2bff      	cmp	r3, #255	; 0xff
 8008ffc:	d010      	beq.n	8009020 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800900c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009014:	b292      	uxth	r2, r2
 8009016:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	22ff      	movs	r2, #255	; 0xff
 800901c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2243      	movs	r2, #67	; 0x43
 8009038:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800903a:	4b03      	ldr	r3, [pc, #12]	; (8009048 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800903c:	4618      	mov	r0, r3
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	20000094 	.word	0x20000094

0800904c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2243      	movs	r2, #67	; 0x43
 8009058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800905a:	4b03      	ldr	r3, [pc, #12]	; (8009068 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	20000050 	.word	0x20000050

0800906c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2243      	movs	r2, #67	; 0x43
 8009078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800907a:	4b03      	ldr	r3, [pc, #12]	; (8009088 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	200000d8 	.word	0x200000d8

0800908c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	220a      	movs	r2, #10
 8009098:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800909a:	4b03      	ldr	r3, [pc, #12]	; (80090a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	2000000c 	.word	0x2000000c

080090ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80090bc:	2303      	movs	r3, #3
 80090be:	e004      	b.n	80090ca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b087      	sub	sp, #28
 80090da:	af00      	add	r7, sp, #0
 80090dc:	60f8      	str	r0, [r7, #12]
 80090de:	60b9      	str	r1, [r7, #8]
 80090e0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090e8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e008      	b.n	8009106 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009112:	b480      	push	{r7}
 8009114:	b085      	sub	sp, #20
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009122:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800912a:	2303      	movs	r3, #3
 800912c:	e004      	b.n	8009138 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	683a      	ldr	r2, [r7, #0]
 8009132:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009152:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009154:	2301      	movs	r3, #1
 8009156:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009162:	2303      	movs	r3, #3
 8009164:	e01a      	b.n	800919c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800916c:	2b00      	cmp	r3, #0
 800916e:	d114      	bne.n	800919a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2201      	movs	r2, #1
 8009174:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800918e:	2181      	movs	r1, #129	; 0x81
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f005 f90e 	bl	800e3b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d101      	bne.n	80091c2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80091be:	2303      	movs	r3, #3
 80091c0:	e016      	b.n	80091f0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	7c1b      	ldrb	r3, [r3, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d109      	bne.n	80091de <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091d4:	2101      	movs	r1, #1
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f005 f90c 	bl	800e3f4 <USBD_LL_PrepareReceive>
 80091dc:	e007      	b.n	80091ee <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091e4:	2340      	movs	r3, #64	; 0x40
 80091e6:	2101      	movs	r1, #1
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f005 f903 	bl	800e3f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	4613      	mov	r3, r2
 8009204:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800920c:	2303      	movs	r3, #3
 800920e:	e01f      	b.n	8009250 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	79fa      	ldrb	r2, [r7, #7]
 8009242:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f004 ff7f 	bl	800e148 <USBD_LL_Init>
 800924a:	4603      	mov	r3, r0
 800924c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800924e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800926c:	2303      	movs	r3, #3
 800926e:	e016      	b.n	800929e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00b      	beq.n	800929c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	f107 020e 	add.w	r2, r7, #14
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	4602      	mov	r2, r0
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b082      	sub	sp, #8
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f004 ff96 	bl	800e1e0 <USBD_LL_Start>
 80092b4:	4603      	mov	r3, r0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80092be:	b480      	push	{r7}
 80092c0:	b083      	sub	sp, #12
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092e0:	2303      	movs	r3, #3
 80092e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d009      	beq.n	8009302 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	78fa      	ldrb	r2, [r7, #3]
 80092f8:	4611      	mov	r1, r2
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	4798      	blx	r3
 80092fe:	4603      	mov	r3, r0
 8009300:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931e:	2b00      	cmp	r3, #0
 8009320:	d007      	beq.n	8009332 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	4611      	mov	r1, r2
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	4798      	blx	r3
  }

  return USBD_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	4618      	mov	r0, r3
 8009350:	f000 ff90 	bl	800a274 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009362:	461a      	mov	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009370:	f003 031f 	and.w	r3, r3, #31
 8009374:	2b02      	cmp	r3, #2
 8009376:	d01a      	beq.n	80093ae <USBD_LL_SetupStage+0x72>
 8009378:	2b02      	cmp	r3, #2
 800937a:	d822      	bhi.n	80093c2 <USBD_LL_SetupStage+0x86>
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <USBD_LL_SetupStage+0x4a>
 8009380:	2b01      	cmp	r3, #1
 8009382:	d00a      	beq.n	800939a <USBD_LL_SetupStage+0x5e>
 8009384:	e01d      	b.n	80093c2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa62 	bl	8009858 <USBD_StdDevReq>
 8009394:	4603      	mov	r3, r0
 8009396:	73fb      	strb	r3, [r7, #15]
      break;
 8009398:	e020      	b.n	80093dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fac6 	bl	8009934 <USBD_StdItfReq>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]
      break;
 80093ac:	e016      	b.n	80093dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fb05 	bl	80099c6 <USBD_StdEPReq>
 80093bc:	4603      	mov	r3, r0
 80093be:	73fb      	strb	r3, [r7, #15]
      break;
 80093c0:	e00c      	b.n	80093dc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f004 ff65 	bl	800e2a0 <USBD_LL_StallEP>
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]
      break;
 80093da:	bf00      	nop
  }

  return ret;
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b086      	sub	sp, #24
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	460b      	mov	r3, r1
 80093f0:	607a      	str	r2, [r7, #4]
 80093f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d138      	bne.n	800946c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009400:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009408:	2b03      	cmp	r3, #3
 800940a:	d14a      	bne.n	80094a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	689a      	ldr	r2, [r3, #8]
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	429a      	cmp	r2, r3
 8009416:	d913      	bls.n	8009440 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	1ad2      	subs	r2, r2, r3
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	68da      	ldr	r2, [r3, #12]
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	4293      	cmp	r3, r2
 8009430:	bf28      	it	cs
 8009432:	4613      	movcs	r3, r2
 8009434:	461a      	mov	r2, r3
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f001 f80f 	bl	800a45c <USBD_CtlContinueRx>
 800943e:	e030      	b.n	80094a2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b03      	cmp	r3, #3
 800944a:	d10b      	bne.n	8009464 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d005      	beq.n	8009464 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f001 f80a 	bl	800a47e <USBD_CtlSendStatus>
 800946a:	e01a      	b.n	80094a2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b03      	cmp	r3, #3
 8009476:	d114      	bne.n	80094a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00e      	beq.n	80094a2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	7afa      	ldrb	r2, [r7, #11]
 800948e:	4611      	mov	r1, r2
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	4798      	blx	r3
 8009494:	4603      	mov	r3, r0
 8009496:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	e000      	b.n	80094a4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	460b      	mov	r3, r1
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d16b      	bne.n	8009598 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3314      	adds	r3, #20
 80094c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d156      	bne.n	800957e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d914      	bls.n	8009506 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	1ad2      	subs	r2, r2, r3
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	461a      	mov	r2, r3
 80094f0:	6879      	ldr	r1, [r7, #4]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 ff84 	bl	800a400 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094f8:	2300      	movs	r3, #0
 80094fa:	2200      	movs	r2, #0
 80094fc:	2100      	movs	r1, #0
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f004 ff78 	bl	800e3f4 <USBD_LL_PrepareReceive>
 8009504:	e03b      	b.n	800957e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	68da      	ldr	r2, [r3, #12]
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	429a      	cmp	r2, r3
 8009510:	d11c      	bne.n	800954c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800951a:	429a      	cmp	r2, r3
 800951c:	d316      	bcc.n	800954c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	685a      	ldr	r2, [r3, #4]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009528:	429a      	cmp	r2, r3
 800952a:	d20f      	bcs.n	800954c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800952c:	2200      	movs	r2, #0
 800952e:	2100      	movs	r1, #0
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 ff65 	bl	800a400 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800953e:	2300      	movs	r3, #0
 8009540:	2200      	movs	r2, #0
 8009542:	2100      	movs	r1, #0
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f004 ff55 	bl	800e3f4 <USBD_LL_PrepareReceive>
 800954a:	e018      	b.n	800957e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b03      	cmp	r3, #3
 8009556:	d10b      	bne.n	8009570 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d005      	beq.n	8009570 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009570:	2180      	movs	r1, #128	; 0x80
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f004 fe94 	bl	800e2a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 ff93 	bl	800a4a4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009584:	2b01      	cmp	r3, #1
 8009586:	d122      	bne.n	80095ce <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7ff fe98 	bl	80092be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009596:	e01a      	b.n	80095ce <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	d114      	bne.n	80095ce <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00e      	beq.n	80095ce <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	7afa      	ldrb	r2, [r7, #11]
 80095ba:	4611      	mov	r1, r2
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	4798      	blx	r3
 80095c0:	4603      	mov	r3, r0
 80095c2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	e000      	b.n	80095d0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009608:	2303      	movs	r3, #3
 800960a:	e02f      	b.n	800966c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00f      	beq.n	8009636 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d009      	beq.n	8009636 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	6852      	ldr	r2, [r2, #4]
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	4611      	mov	r1, r2
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009636:	2340      	movs	r3, #64	; 0x40
 8009638:	2200      	movs	r2, #0
 800963a:	2100      	movs	r1, #0
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f004 fdea 	bl	800e216 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2240      	movs	r2, #64	; 0x40
 800964e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009652:	2340      	movs	r3, #64	; 0x40
 8009654:	2200      	movs	r2, #0
 8009656:	2180      	movs	r1, #128	; 0x80
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f004 fddc 	bl	800e216 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2240      	movs	r2, #64	; 0x40
 8009668:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	78fa      	ldrb	r2, [r7, #3]
 8009684:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2204      	movs	r2, #4
 80096ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d106      	bne.n	80096e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009702:	2303      	movs	r3, #3
 8009704:	e012      	b.n	800972c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b03      	cmp	r3, #3
 8009710:	d10b      	bne.n	800972a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d005      	beq.n	800972a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009724:	69db      	ldr	r3, [r3, #28]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800974a:	2303      	movs	r3, #3
 800974c:	e014      	b.n	8009778 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b03      	cmp	r3, #3
 8009758:	d10d      	bne.n	8009776 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d007      	beq.n	8009776 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	78fa      	ldrb	r2, [r7, #3]
 8009770:	4611      	mov	r1, r2
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009796:	2303      	movs	r3, #3
 8009798:	e014      	b.n	80097c4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d10d      	bne.n	80097c2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d007      	beq.n	80097c2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	78fa      	ldrb	r2, [r7, #3]
 80097bc:	4611      	mov	r1, r2
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d009      	beq.n	8009810 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	6852      	ldr	r2, [r2, #4]
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	4611      	mov	r1, r2
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
  }

  return USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800981a:	b480      	push	{r7}
 800981c:	b087      	sub	sp, #28
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	3301      	adds	r3, #1
 8009830:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009838:	8a3b      	ldrh	r3, [r7, #16]
 800983a:	021b      	lsls	r3, r3, #8
 800983c:	b21a      	sxth	r2, r3
 800983e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009842:	4313      	orrs	r3, r2
 8009844:	b21b      	sxth	r3, r3
 8009846:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009848:	89fb      	ldrh	r3, [r7, #14]
}
 800984a:	4618      	mov	r0, r3
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
	...

08009858 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800986e:	2b40      	cmp	r3, #64	; 0x40
 8009870:	d005      	beq.n	800987e <USBD_StdDevReq+0x26>
 8009872:	2b40      	cmp	r3, #64	; 0x40
 8009874:	d853      	bhi.n	800991e <USBD_StdDevReq+0xc6>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00b      	beq.n	8009892 <USBD_StdDevReq+0x3a>
 800987a:	2b20      	cmp	r3, #32
 800987c:	d14f      	bne.n	800991e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	4798      	blx	r3
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
      break;
 8009890:	e04a      	b.n	8009928 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	785b      	ldrb	r3, [r3, #1]
 8009896:	2b09      	cmp	r3, #9
 8009898:	d83b      	bhi.n	8009912 <USBD_StdDevReq+0xba>
 800989a:	a201      	add	r2, pc, #4	; (adr r2, 80098a0 <USBD_StdDevReq+0x48>)
 800989c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a0:	080098f5 	.word	0x080098f5
 80098a4:	08009909 	.word	0x08009909
 80098a8:	08009913 	.word	0x08009913
 80098ac:	080098ff 	.word	0x080098ff
 80098b0:	08009913 	.word	0x08009913
 80098b4:	080098d3 	.word	0x080098d3
 80098b8:	080098c9 	.word	0x080098c9
 80098bc:	08009913 	.word	0x08009913
 80098c0:	080098eb 	.word	0x080098eb
 80098c4:	080098dd 	.word	0x080098dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f9de 	bl	8009c8c <USBD_GetDescriptor>
          break;
 80098d0:	e024      	b.n	800991c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fb43 	bl	8009f60 <USBD_SetAddress>
          break;
 80098da:	e01f      	b.n	800991c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fb82 	bl	8009fe8 <USBD_SetConfig>
 80098e4:	4603      	mov	r3, r0
 80098e6:	73fb      	strb	r3, [r7, #15]
          break;
 80098e8:	e018      	b.n	800991c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fc21 	bl	800a134 <USBD_GetConfig>
          break;
 80098f2:	e013      	b.n	800991c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fc52 	bl	800a1a0 <USBD_GetStatus>
          break;
 80098fc:	e00e      	b.n	800991c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fc81 	bl	800a208 <USBD_SetFeature>
          break;
 8009906:	e009      	b.n	800991c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fc90 	bl	800a230 <USBD_ClrFeature>
          break;
 8009910:	e004      	b.n	800991c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fce7 	bl	800a2e8 <USBD_CtlError>
          break;
 800991a:	bf00      	nop
      }
      break;
 800991c:	e004      	b.n	8009928 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fce1 	bl	800a2e8 <USBD_CtlError>
      break;
 8009926:	bf00      	nop
  }

  return ret;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop

08009934 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800994a:	2b40      	cmp	r3, #64	; 0x40
 800994c:	d005      	beq.n	800995a <USBD_StdItfReq+0x26>
 800994e:	2b40      	cmp	r3, #64	; 0x40
 8009950:	d82f      	bhi.n	80099b2 <USBD_StdItfReq+0x7e>
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <USBD_StdItfReq+0x26>
 8009956:	2b20      	cmp	r3, #32
 8009958:	d12b      	bne.n	80099b2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009960:	b2db      	uxtb	r3, r3
 8009962:	3b01      	subs	r3, #1
 8009964:	2b02      	cmp	r3, #2
 8009966:	d81d      	bhi.n	80099a4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	889b      	ldrh	r3, [r3, #4]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b01      	cmp	r3, #1
 8009970:	d813      	bhi.n	800999a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	4798      	blx	r3
 8009980:	4603      	mov	r3, r0
 8009982:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	88db      	ldrh	r3, [r3, #6]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d110      	bne.n	80099ae <USBD_StdItfReq+0x7a>
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10d      	bne.n	80099ae <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fd73 	bl	800a47e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009998:	e009      	b.n	80099ae <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fca3 	bl	800a2e8 <USBD_CtlError>
          break;
 80099a2:	e004      	b.n	80099ae <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fc9e 	bl	800a2e8 <USBD_CtlError>
          break;
 80099ac:	e000      	b.n	80099b0 <USBD_StdItfReq+0x7c>
          break;
 80099ae:	bf00      	nop
      }
      break;
 80099b0:	e004      	b.n	80099bc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fc97 	bl	800a2e8 <USBD_CtlError>
      break;
 80099ba:	bf00      	nop
  }

  return ret;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b084      	sub	sp, #16
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	889b      	ldrh	r3, [r3, #4]
 80099d8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099e2:	2b40      	cmp	r3, #64	; 0x40
 80099e4:	d007      	beq.n	80099f6 <USBD_StdEPReq+0x30>
 80099e6:	2b40      	cmp	r3, #64	; 0x40
 80099e8:	f200 8145 	bhi.w	8009c76 <USBD_StdEPReq+0x2b0>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00c      	beq.n	8009a0a <USBD_StdEPReq+0x44>
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	f040 8140 	bne.w	8009c76 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	4798      	blx	r3
 8009a04:	4603      	mov	r3, r0
 8009a06:	73fb      	strb	r3, [r7, #15]
      break;
 8009a08:	e13a      	b.n	8009c80 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d007      	beq.n	8009a22 <USBD_StdEPReq+0x5c>
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	f300 8129 	bgt.w	8009c6a <USBD_StdEPReq+0x2a4>
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d07f      	beq.n	8009b1c <USBD_StdEPReq+0x156>
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d03c      	beq.n	8009a9a <USBD_StdEPReq+0xd4>
 8009a20:	e123      	b.n	8009c6a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d002      	beq.n	8009a34 <USBD_StdEPReq+0x6e>
 8009a2e:	2b03      	cmp	r3, #3
 8009a30:	d016      	beq.n	8009a60 <USBD_StdEPReq+0x9a>
 8009a32:	e02c      	b.n	8009a8e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00d      	beq.n	8009a56 <USBD_StdEPReq+0x90>
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	2b80      	cmp	r3, #128	; 0x80
 8009a3e:	d00a      	beq.n	8009a56 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f004 fc2b 	bl	800e2a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a4a:	2180      	movs	r1, #128	; 0x80
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f004 fc27 	bl	800e2a0 <USBD_LL_StallEP>
 8009a52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a54:	e020      	b.n	8009a98 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fc45 	bl	800a2e8 <USBD_CtlError>
              break;
 8009a5e:	e01b      	b.n	8009a98 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	885b      	ldrh	r3, [r3, #2]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10e      	bne.n	8009a86 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00b      	beq.n	8009a86 <USBD_StdEPReq+0xc0>
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	2b80      	cmp	r3, #128	; 0x80
 8009a72:	d008      	beq.n	8009a86 <USBD_StdEPReq+0xc0>
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	88db      	ldrh	r3, [r3, #6]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d104      	bne.n	8009a86 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f004 fc0d 	bl	800e2a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fcf9 	bl	800a47e <USBD_CtlSendStatus>

              break;
 8009a8c:	e004      	b.n	8009a98 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fc29 	bl	800a2e8 <USBD_CtlError>
              break;
 8009a96:	bf00      	nop
          }
          break;
 8009a98:	e0ec      	b.n	8009c74 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d002      	beq.n	8009aac <USBD_StdEPReq+0xe6>
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d016      	beq.n	8009ad8 <USBD_StdEPReq+0x112>
 8009aaa:	e030      	b.n	8009b0e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00d      	beq.n	8009ace <USBD_StdEPReq+0x108>
 8009ab2:	7bbb      	ldrb	r3, [r7, #14]
 8009ab4:	2b80      	cmp	r3, #128	; 0x80
 8009ab6:	d00a      	beq.n	8009ace <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ab8:	7bbb      	ldrb	r3, [r7, #14]
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f004 fbef 	bl	800e2a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ac2:	2180      	movs	r1, #128	; 0x80
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f004 fbeb 	bl	800e2a0 <USBD_LL_StallEP>
 8009aca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009acc:	e025      	b.n	8009b1a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fc09 	bl	800a2e8 <USBD_CtlError>
              break;
 8009ad6:	e020      	b.n	8009b1a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	885b      	ldrh	r3, [r3, #2]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d11b      	bne.n	8009b18 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
 8009ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d004      	beq.n	8009af4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009aea:	7bbb      	ldrb	r3, [r7, #14]
 8009aec:	4619      	mov	r1, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f004 fbf5 	bl	800e2de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fcc2 	bl	800a47e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	4798      	blx	r3
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009b0c:	e004      	b.n	8009b18 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fbe9 	bl	800a2e8 <USBD_CtlError>
              break;
 8009b16:	e000      	b.n	8009b1a <USBD_StdEPReq+0x154>
              break;
 8009b18:	bf00      	nop
          }
          break;
 8009b1a:	e0ab      	b.n	8009c74 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d002      	beq.n	8009b2e <USBD_StdEPReq+0x168>
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d032      	beq.n	8009b92 <USBD_StdEPReq+0x1cc>
 8009b2c:	e097      	b.n	8009c5e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b2e:	7bbb      	ldrb	r3, [r7, #14]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d007      	beq.n	8009b44 <USBD_StdEPReq+0x17e>
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	2b80      	cmp	r3, #128	; 0x80
 8009b38:	d004      	beq.n	8009b44 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fbd3 	bl	800a2e8 <USBD_CtlError>
                break;
 8009b42:	e091      	b.n	8009c68 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	da0b      	bge.n	8009b64 <USBD_StdEPReq+0x19e>
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b52:	4613      	mov	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	3310      	adds	r3, #16
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	4413      	add	r3, r2
 8009b60:	3304      	adds	r3, #4
 8009b62:	e00b      	b.n	8009b7c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4413      	add	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	4413      	add	r3, r2
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2202      	movs	r2, #2
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fc1d 	bl	800a3ca <USBD_CtlSendData>
              break;
 8009b90:	e06a      	b.n	8009c68 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	da11      	bge.n	8009bbe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	f003 020f 	and.w	r2, r3, #15
 8009ba0:	6879      	ldr	r1, [r7, #4]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	440b      	add	r3, r1
 8009bac:	3324      	adds	r3, #36	; 0x24
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d117      	bne.n	8009be4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fb96 	bl	800a2e8 <USBD_CtlError>
                  break;
 8009bbc:	e054      	b.n	8009c68 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009bbe:	7bbb      	ldrb	r3, [r7, #14]
 8009bc0:	f003 020f 	and.w	r2, r3, #15
 8009bc4:	6879      	ldr	r1, [r7, #4]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	440b      	add	r3, r1
 8009bd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d104      	bne.n	8009be4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fb83 	bl	800a2e8 <USBD_CtlError>
                  break;
 8009be2:	e041      	b.n	8009c68 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	da0b      	bge.n	8009c04 <USBD_StdEPReq+0x23e>
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	3310      	adds	r3, #16
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	4413      	add	r3, r2
 8009c00:	3304      	adds	r3, #4
 8009c02:	e00b      	b.n	8009c1c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c04:	7bbb      	ldrb	r3, [r7, #14]
 8009c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	4413      	add	r3, r2
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <USBD_StdEPReq+0x264>
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	2b80      	cmp	r3, #128	; 0x80
 8009c28:	d103      	bne.n	8009c32 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	601a      	str	r2, [r3, #0]
 8009c30:	e00e      	b.n	8009c50 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c32:	7bbb      	ldrb	r3, [r7, #14]
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f004 fb70 	bl	800e31c <USBD_LL_IsStallEP>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d003      	beq.n	8009c4a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2201      	movs	r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	e002      	b.n	8009c50 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	2202      	movs	r2, #2
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fbb7 	bl	800a3ca <USBD_CtlSendData>
              break;
 8009c5c:	e004      	b.n	8009c68 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fb41 	bl	800a2e8 <USBD_CtlError>
              break;
 8009c66:	bf00      	nop
          }
          break;
 8009c68:	e004      	b.n	8009c74 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fb3b 	bl	800a2e8 <USBD_CtlError>
          break;
 8009c72:	bf00      	nop
      }
      break;
 8009c74:	e004      	b.n	8009c80 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fb35 	bl	800a2e8 <USBD_CtlError>
      break;
 8009c7e:	bf00      	nop
  }

  return ret;
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	885b      	ldrh	r3, [r3, #2]
 8009ca6:	0a1b      	lsrs	r3, r3, #8
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	3b01      	subs	r3, #1
 8009cac:	2b06      	cmp	r3, #6
 8009cae:	f200 8128 	bhi.w	8009f02 <USBD_GetDescriptor+0x276>
 8009cb2:	a201      	add	r2, pc, #4	; (adr r2, 8009cb8 <USBD_GetDescriptor+0x2c>)
 8009cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb8:	08009cd5 	.word	0x08009cd5
 8009cbc:	08009ced 	.word	0x08009ced
 8009cc0:	08009d2d 	.word	0x08009d2d
 8009cc4:	08009f03 	.word	0x08009f03
 8009cc8:	08009f03 	.word	0x08009f03
 8009ccc:	08009ea3 	.word	0x08009ea3
 8009cd0:	08009ecf 	.word	0x08009ecf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	7c12      	ldrb	r2, [r2, #16]
 8009ce0:	f107 0108 	add.w	r1, r7, #8
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	4798      	blx	r3
 8009ce8:	60f8      	str	r0, [r7, #12]
      break;
 8009cea:	e112      	b.n	8009f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	7c1b      	ldrb	r3, [r3, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10d      	bne.n	8009d10 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfc:	f107 0208 	add.w	r2, r7, #8
 8009d00:	4610      	mov	r0, r2
 8009d02:	4798      	blx	r3
 8009d04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d0e:	e100      	b.n	8009f12 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d18:	f107 0208 	add.w	r2, r7, #8
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	3301      	adds	r3, #1
 8009d26:	2202      	movs	r2, #2
 8009d28:	701a      	strb	r2, [r3, #0]
      break;
 8009d2a:	e0f2      	b.n	8009f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	885b      	ldrh	r3, [r3, #2]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b05      	cmp	r3, #5
 8009d34:	f200 80ac 	bhi.w	8009e90 <USBD_GetDescriptor+0x204>
 8009d38:	a201      	add	r2, pc, #4	; (adr r2, 8009d40 <USBD_GetDescriptor+0xb4>)
 8009d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3e:	bf00      	nop
 8009d40:	08009d59 	.word	0x08009d59
 8009d44:	08009d8d 	.word	0x08009d8d
 8009d48:	08009dc1 	.word	0x08009dc1
 8009d4c:	08009df5 	.word	0x08009df5
 8009d50:	08009e29 	.word	0x08009e29
 8009d54:	08009e5d 	.word	0x08009e5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00b      	beq.n	8009d7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	7c12      	ldrb	r2, [r2, #16]
 8009d70:	f107 0108 	add.w	r1, r7, #8
 8009d74:	4610      	mov	r0, r2
 8009d76:	4798      	blx	r3
 8009d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d7a:	e091      	b.n	8009ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fab2 	bl	800a2e8 <USBD_CtlError>
            err++;
 8009d84:	7afb      	ldrb	r3, [r7, #11]
 8009d86:	3301      	adds	r3, #1
 8009d88:	72fb      	strb	r3, [r7, #11]
          break;
 8009d8a:	e089      	b.n	8009ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00b      	beq.n	8009db0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	7c12      	ldrb	r2, [r2, #16]
 8009da4:	f107 0108 	add.w	r1, r7, #8
 8009da8:	4610      	mov	r0, r2
 8009daa:	4798      	blx	r3
 8009dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dae:	e077      	b.n	8009ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fa98 	bl	800a2e8 <USBD_CtlError>
            err++;
 8009db8:	7afb      	ldrb	r3, [r7, #11]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8009dbe:	e06f      	b.n	8009ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00b      	beq.n	8009de4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	7c12      	ldrb	r2, [r2, #16]
 8009dd8:	f107 0108 	add.w	r1, r7, #8
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4798      	blx	r3
 8009de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009de2:	e05d      	b.n	8009ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fa7e 	bl	800a2e8 <USBD_CtlError>
            err++;
 8009dec:	7afb      	ldrb	r3, [r7, #11]
 8009dee:	3301      	adds	r3, #1
 8009df0:	72fb      	strb	r3, [r7, #11]
          break;
 8009df2:	e055      	b.n	8009ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00b      	beq.n	8009e18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	7c12      	ldrb	r2, [r2, #16]
 8009e0c:	f107 0108 	add.w	r1, r7, #8
 8009e10:	4610      	mov	r0, r2
 8009e12:	4798      	blx	r3
 8009e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e16:	e043      	b.n	8009ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa64 	bl	800a2e8 <USBD_CtlError>
            err++;
 8009e20:	7afb      	ldrb	r3, [r7, #11]
 8009e22:	3301      	adds	r3, #1
 8009e24:	72fb      	strb	r3, [r7, #11]
          break;
 8009e26:	e03b      	b.n	8009ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e2e:	695b      	ldr	r3, [r3, #20]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00b      	beq.n	8009e4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	7c12      	ldrb	r2, [r2, #16]
 8009e40:	f107 0108 	add.w	r1, r7, #8
 8009e44:	4610      	mov	r0, r2
 8009e46:	4798      	blx	r3
 8009e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e4a:	e029      	b.n	8009ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fa4a 	bl	800a2e8 <USBD_CtlError>
            err++;
 8009e54:	7afb      	ldrb	r3, [r7, #11]
 8009e56:	3301      	adds	r3, #1
 8009e58:	72fb      	strb	r3, [r7, #11]
          break;
 8009e5a:	e021      	b.n	8009ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00b      	beq.n	8009e80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	7c12      	ldrb	r2, [r2, #16]
 8009e74:	f107 0108 	add.w	r1, r7, #8
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4798      	blx	r3
 8009e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e7e:	e00f      	b.n	8009ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa30 	bl	800a2e8 <USBD_CtlError>
            err++;
 8009e88:	7afb      	ldrb	r3, [r7, #11]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e8e:	e007      	b.n	8009ea0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fa28 	bl	800a2e8 <USBD_CtlError>
          err++;
 8009e98:	7afb      	ldrb	r3, [r7, #11]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009e9e:	bf00      	nop
      }
      break;
 8009ea0:	e037      	b.n	8009f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	7c1b      	ldrb	r3, [r3, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d109      	bne.n	8009ebe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb2:	f107 0208 	add.w	r2, r7, #8
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	4798      	blx	r3
 8009eba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ebc:	e029      	b.n	8009f12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fa11 	bl	800a2e8 <USBD_CtlError>
        err++;
 8009ec6:	7afb      	ldrb	r3, [r7, #11]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	72fb      	strb	r3, [r7, #11]
      break;
 8009ecc:	e021      	b.n	8009f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	7c1b      	ldrb	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10d      	bne.n	8009ef2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ede:	f107 0208 	add.w	r2, r7, #8
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	4798      	blx	r3
 8009ee6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3301      	adds	r3, #1
 8009eec:	2207      	movs	r2, #7
 8009eee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ef0:	e00f      	b.n	8009f12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f9f7 	bl	800a2e8 <USBD_CtlError>
        err++;
 8009efa:	7afb      	ldrb	r3, [r7, #11]
 8009efc:	3301      	adds	r3, #1
 8009efe:	72fb      	strb	r3, [r7, #11]
      break;
 8009f00:	e007      	b.n	8009f12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f9ef 	bl	800a2e8 <USBD_CtlError>
      err++;
 8009f0a:	7afb      	ldrb	r3, [r7, #11]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f10:	bf00      	nop
  }

  if (err != 0U)
 8009f12:	7afb      	ldrb	r3, [r7, #11]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d11e      	bne.n	8009f56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	88db      	ldrh	r3, [r3, #6]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d016      	beq.n	8009f4e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009f20:	893b      	ldrh	r3, [r7, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00e      	beq.n	8009f44 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	88da      	ldrh	r2, [r3, #6]
 8009f2a:	893b      	ldrh	r3, [r7, #8]
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	bf28      	it	cs
 8009f30:	4613      	movcs	r3, r2
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f36:	893b      	ldrh	r3, [r7, #8]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	68f9      	ldr	r1, [r7, #12]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fa44 	bl	800a3ca <USBD_CtlSendData>
 8009f42:	e009      	b.n	8009f58 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f9ce 	bl	800a2e8 <USBD_CtlError>
 8009f4c:	e004      	b.n	8009f58 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fa95 	bl	800a47e <USBD_CtlSendStatus>
 8009f54:	e000      	b.n	8009f58 <USBD_GetDescriptor+0x2cc>
    return;
 8009f56:	bf00      	nop
  }
}
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop

08009f60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	889b      	ldrh	r3, [r3, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d131      	bne.n	8009fd6 <USBD_SetAddress+0x76>
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	88db      	ldrh	r3, [r3, #6]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d12d      	bne.n	8009fd6 <USBD_SetAddress+0x76>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	885b      	ldrh	r3, [r3, #2]
 8009f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8009f80:	d829      	bhi.n	8009fd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	885b      	ldrh	r3, [r3, #2]
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d104      	bne.n	8009fa4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f9a3 	bl	800a2e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fa2:	e01d      	b.n	8009fe0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	7bfa      	ldrb	r2, [r7, #15]
 8009fa8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f004 f9df 	bl	800e374 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fa61 	bl	800a47e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d004      	beq.n	8009fcc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fca:	e009      	b.n	8009fe0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd4:	e004      	b.n	8009fe0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f985 	bl	800a2e8 <USBD_CtlError>
  }
}
 8009fde:	bf00      	nop
 8009fe0:	bf00      	nop
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	885b      	ldrh	r3, [r3, #2]
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	4b4c      	ldr	r3, [pc, #304]	; (800a130 <USBD_SetConfig+0x148>)
 8009ffe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a000:	4b4b      	ldr	r3, [pc, #300]	; (800a130 <USBD_SetConfig+0x148>)
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d905      	bls.n	800a014 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f96c 	bl	800a2e8 <USBD_CtlError>
    return USBD_FAIL;
 800a010:	2303      	movs	r3, #3
 800a012:	e088      	b.n	800a126 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d002      	beq.n	800a026 <USBD_SetConfig+0x3e>
 800a020:	2b03      	cmp	r3, #3
 800a022:	d025      	beq.n	800a070 <USBD_SetConfig+0x88>
 800a024:	e071      	b.n	800a10a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a026:	4b42      	ldr	r3, [pc, #264]	; (800a130 <USBD_SetConfig+0x148>)
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d01c      	beq.n	800a068 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a02e:	4b40      	ldr	r3, [pc, #256]	; (800a130 <USBD_SetConfig+0x148>)
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	461a      	mov	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a038:	4b3d      	ldr	r3, [pc, #244]	; (800a130 <USBD_SetConfig+0x148>)
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	4619      	mov	r1, r3
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7ff f948 	bl	80092d4 <USBD_SetClassConfig>
 800a044:	4603      	mov	r3, r0
 800a046:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a048:	7bfb      	ldrb	r3, [r7, #15]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d004      	beq.n	800a058 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a04e:	6839      	ldr	r1, [r7, #0]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 f949 	bl	800a2e8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a056:	e065      	b.n	800a124 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fa10 	bl	800a47e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2203      	movs	r2, #3
 800a062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a066:	e05d      	b.n	800a124 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fa08 	bl	800a47e <USBD_CtlSendStatus>
      break;
 800a06e:	e059      	b.n	800a124 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a070:	4b2f      	ldr	r3, [pc, #188]	; (800a130 <USBD_SetConfig+0x148>)
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d112      	bne.n	800a09e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a080:	4b2b      	ldr	r3, [pc, #172]	; (800a130 <USBD_SetConfig+0x148>)
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	461a      	mov	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a08a:	4b29      	ldr	r3, [pc, #164]	; (800a130 <USBD_SetConfig+0x148>)
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	4619      	mov	r1, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7ff f93b 	bl	800930c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f9f1 	bl	800a47e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a09c:	e042      	b.n	800a124 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a09e:	4b24      	ldr	r3, [pc, #144]	; (800a130 <USBD_SetConfig+0x148>)
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d02a      	beq.n	800a102 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7ff f929 	bl	800930c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a0ba:	4b1d      	ldr	r3, [pc, #116]	; (800a130 <USBD_SetConfig+0x148>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0c4:	4b1a      	ldr	r3, [pc, #104]	; (800a130 <USBD_SetConfig+0x148>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff f902 	bl	80092d4 <USBD_SetClassConfig>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00f      	beq.n	800a0fa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f903 	bl	800a2e8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f7ff f90e 	bl	800930c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a0f8:	e014      	b.n	800a124 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f9bf 	bl	800a47e <USBD_CtlSendStatus>
      break;
 800a100:	e010      	b.n	800a124 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f9bb 	bl	800a47e <USBD_CtlSendStatus>
      break;
 800a108:	e00c      	b.n	800a124 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f8eb 	bl	800a2e8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a112:	4b07      	ldr	r3, [pc, #28]	; (800a130 <USBD_SetConfig+0x148>)
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7ff f8f7 	bl	800930c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a11e:	2303      	movs	r3, #3
 800a120:	73fb      	strb	r3, [r7, #15]
      break;
 800a122:	bf00      	nop
  }

  return ret;
 800a124:	7bfb      	ldrb	r3, [r7, #15]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20000764 	.word	0x20000764

0800a134 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	88db      	ldrh	r3, [r3, #6]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d004      	beq.n	800a150 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f8cd 	bl	800a2e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a14e:	e023      	b.n	800a198 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b02      	cmp	r3, #2
 800a15a:	dc02      	bgt.n	800a162 <USBD_GetConfig+0x2e>
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dc03      	bgt.n	800a168 <USBD_GetConfig+0x34>
 800a160:	e015      	b.n	800a18e <USBD_GetConfig+0x5a>
 800a162:	2b03      	cmp	r3, #3
 800a164:	d00b      	beq.n	800a17e <USBD_GetConfig+0x4a>
 800a166:	e012      	b.n	800a18e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	3308      	adds	r3, #8
 800a172:	2201      	movs	r2, #1
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f927 	bl	800a3ca <USBD_CtlSendData>
        break;
 800a17c:	e00c      	b.n	800a198 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	3304      	adds	r3, #4
 800a182:	2201      	movs	r2, #1
 800a184:	4619      	mov	r1, r3
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f91f 	bl	800a3ca <USBD_CtlSendData>
        break;
 800a18c:	e004      	b.n	800a198 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f8a9 	bl	800a2e8 <USBD_CtlError>
        break;
 800a196:	bf00      	nop
}
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d81e      	bhi.n	800a1f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	88db      	ldrh	r3, [r3, #6]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d004      	beq.n	800a1ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f890 	bl	800a2e8 <USBD_CtlError>
        break;
 800a1c8:	e01a      	b.n	800a200 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d005      	beq.n	800a1e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	f043 0202 	orr.w	r2, r3, #2
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	330c      	adds	r3, #12
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f8eb 	bl	800a3ca <USBD_CtlSendData>
      break;
 800a1f4:	e004      	b.n	800a200 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f875 	bl	800a2e8 <USBD_CtlError>
      break;
 800a1fe:	bf00      	nop
  }
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	885b      	ldrh	r3, [r3, #2]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d106      	bne.n	800a228 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f92b 	bl	800a47e <USBD_CtlSendStatus>
  }
}
 800a228:	bf00      	nop
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a240:	b2db      	uxtb	r3, r3
 800a242:	3b01      	subs	r3, #1
 800a244:	2b02      	cmp	r3, #2
 800a246:	d80b      	bhi.n	800a260 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	885b      	ldrh	r3, [r3, #2]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d10c      	bne.n	800a26a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f910 	bl	800a47e <USBD_CtlSendStatus>
      }
      break;
 800a25e:	e004      	b.n	800a26a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f840 	bl	800a2e8 <USBD_CtlError>
      break;
 800a268:	e000      	b.n	800a26c <USBD_ClrFeature+0x3c>
      break;
 800a26a:	bf00      	nop
  }
}
 800a26c:	bf00      	nop
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	781a      	ldrb	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3301      	adds	r3, #1
 800a28e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	781a      	ldrb	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3301      	adds	r3, #1
 800a29c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f7ff fabb 	bl	800981a <SWAPBYTE>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f7ff faae 	bl	800981a <SWAPBYTE>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f7ff faa1 	bl	800981a <SWAPBYTE>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	461a      	mov	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	80da      	strh	r2, [r3, #6]
}
 800a2e0:	bf00      	nop
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2f2:	2180      	movs	r1, #128	; 0x80
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f003 ffd3 	bl	800e2a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f003 ffcf 	bl	800e2a0 <USBD_LL_StallEP>
}
 800a302:	bf00      	nop
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b086      	sub	sp, #24
 800a30e:	af00      	add	r7, sp, #0
 800a310:	60f8      	str	r0, [r7, #12]
 800a312:	60b9      	str	r1, [r7, #8]
 800a314:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d036      	beq.n	800a38e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a324:	6938      	ldr	r0, [r7, #16]
 800a326:	f000 f836 	bl	800a396 <USBD_GetLen>
 800a32a:	4603      	mov	r3, r0
 800a32c:	3301      	adds	r3, #1
 800a32e:	b29b      	uxth	r3, r3
 800a330:	005b      	lsls	r3, r3, #1
 800a332:	b29a      	uxth	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a338:	7dfb      	ldrb	r3, [r7, #23]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	4413      	add	r3, r2
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	7812      	ldrb	r2, [r2, #0]
 800a342:	701a      	strb	r2, [r3, #0]
  idx++;
 800a344:	7dfb      	ldrb	r3, [r7, #23]
 800a346:	3301      	adds	r3, #1
 800a348:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	4413      	add	r3, r2
 800a350:	2203      	movs	r2, #3
 800a352:	701a      	strb	r2, [r3, #0]
  idx++;
 800a354:	7dfb      	ldrb	r3, [r7, #23]
 800a356:	3301      	adds	r3, #1
 800a358:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a35a:	e013      	b.n	800a384 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a35c:	7dfb      	ldrb	r3, [r7, #23]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	4413      	add	r3, r2
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	7812      	ldrb	r2, [r2, #0]
 800a366:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	3301      	adds	r3, #1
 800a36c:	613b      	str	r3, [r7, #16]
    idx++;
 800a36e:	7dfb      	ldrb	r3, [r7, #23]
 800a370:	3301      	adds	r3, #1
 800a372:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	4413      	add	r3, r2
 800a37a:	2200      	movs	r2, #0
 800a37c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a37e:	7dfb      	ldrb	r3, [r7, #23]
 800a380:	3301      	adds	r3, #1
 800a382:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1e7      	bne.n	800a35c <USBD_GetString+0x52>
 800a38c:	e000      	b.n	800a390 <USBD_GetString+0x86>
    return;
 800a38e:	bf00      	nop
  }
}
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a396:	b480      	push	{r7}
 800a398:	b085      	sub	sp, #20
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a3a6:	e005      	b.n	800a3b4 <USBD_GetLen+0x1e>
  {
    len++;
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1f5      	bne.n	800a3a8 <USBD_GetLen+0x12>
  }

  return len;
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	60f8      	str	r0, [r7, #12]
 800a3d2:	60b9      	str	r1, [r7, #8]
 800a3d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2202      	movs	r2, #2
 800a3da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f003 ffde 	bl	800e3b2 <USBD_LL_Transmit>

  return USBD_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	2100      	movs	r1, #0
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f003 ffcd 	bl	800e3b2 <USBD_LL_Transmit>

  return USBD_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	60f8      	str	r0, [r7, #12]
 800a42a:	60b9      	str	r1, [r7, #8]
 800a42c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2203      	movs	r2, #3
 800a432:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	2100      	movs	r1, #0
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f003 ffd1 	bl	800e3f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	2100      	movs	r1, #0
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f003 ffc0 	bl	800e3f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2204      	movs	r2, #4
 800a48a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a48e:	2300      	movs	r3, #0
 800a490:	2200      	movs	r2, #0
 800a492:	2100      	movs	r1, #0
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f003 ff8c 	bl	800e3b2 <USBD_LL_Transmit>

  return USBD_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2205      	movs	r2, #5
 800a4b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f003 ff9a 	bl	800e3f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
	...

0800a4cc <__NVIC_SetPriority>:
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	6039      	str	r1, [r7, #0]
 800a4d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	db0a      	blt.n	800a4f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	490c      	ldr	r1, [pc, #48]	; (800a518 <__NVIC_SetPriority+0x4c>)
 800a4e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4ea:	0112      	lsls	r2, r2, #4
 800a4ec:	b2d2      	uxtb	r2, r2
 800a4ee:	440b      	add	r3, r1
 800a4f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a4f4:	e00a      	b.n	800a50c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	4908      	ldr	r1, [pc, #32]	; (800a51c <__NVIC_SetPriority+0x50>)
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	f003 030f 	and.w	r3, r3, #15
 800a502:	3b04      	subs	r3, #4
 800a504:	0112      	lsls	r2, r2, #4
 800a506:	b2d2      	uxtb	r2, r2
 800a508:	440b      	add	r3, r1
 800a50a:	761a      	strb	r2, [r3, #24]
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	e000e100 	.word	0xe000e100
 800a51c:	e000ed00 	.word	0xe000ed00

0800a520 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a520:	b580      	push	{r7, lr}
 800a522:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a524:	4b05      	ldr	r3, [pc, #20]	; (800a53c <SysTick_Handler+0x1c>)
 800a526:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a528:	f002 f902 	bl	800c730 <xTaskGetSchedulerState>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d001      	beq.n	800a536 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a532:	f003 f829 	bl	800d588 <xPortSysTickHandler>
  }
}
 800a536:	bf00      	nop
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	e000e010 	.word	0xe000e010

0800a540 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a540:	b580      	push	{r7, lr}
 800a542:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a544:	2100      	movs	r1, #0
 800a546:	f06f 0004 	mvn.w	r0, #4
 800a54a:	f7ff ffbf 	bl	800a4cc <__NVIC_SetPriority>
#endif
}
 800a54e:	bf00      	nop
 800a550:	bd80      	pop	{r7, pc}
	...

0800a554 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a55a:	f3ef 8305 	mrs	r3, IPSR
 800a55e:	603b      	str	r3, [r7, #0]
  return(result);
 800a560:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a566:	f06f 0305 	mvn.w	r3, #5
 800a56a:	607b      	str	r3, [r7, #4]
 800a56c:	e00c      	b.n	800a588 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a56e:	4b0a      	ldr	r3, [pc, #40]	; (800a598 <osKernelInitialize+0x44>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d105      	bne.n	800a582 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a576:	4b08      	ldr	r3, [pc, #32]	; (800a598 <osKernelInitialize+0x44>)
 800a578:	2201      	movs	r2, #1
 800a57a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	607b      	str	r3, [r7, #4]
 800a580:	e002      	b.n	800a588 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a586:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a588:	687b      	ldr	r3, [r7, #4]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	20000768 	.word	0x20000768

0800a59c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5a2:	f3ef 8305 	mrs	r3, IPSR
 800a5a6:	603b      	str	r3, [r7, #0]
  return(result);
 800a5a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a5ae:	f06f 0305 	mvn.w	r3, #5
 800a5b2:	607b      	str	r3, [r7, #4]
 800a5b4:	e010      	b.n	800a5d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a5b6:	4b0b      	ldr	r3, [pc, #44]	; (800a5e4 <osKernelStart+0x48>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d109      	bne.n	800a5d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a5be:	f7ff ffbf 	bl	800a540 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a5c2:	4b08      	ldr	r3, [pc, #32]	; (800a5e4 <osKernelStart+0x48>)
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a5c8:	f001 fad0 	bl	800bb6c <vTaskStartScheduler>
      stat = osOK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	607b      	str	r3, [r7, #4]
 800a5d0:	e002      	b.n	800a5d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a5d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a5d8:	687b      	ldr	r3, [r7, #4]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20000768 	.word	0x20000768

0800a5e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08e      	sub	sp, #56	; 0x38
 800a5ec:	af04      	add	r7, sp, #16
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5f8:	f3ef 8305 	mrs	r3, IPSR
 800a5fc:	617b      	str	r3, [r7, #20]
  return(result);
 800a5fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a600:	2b00      	cmp	r3, #0
 800a602:	d17e      	bne.n	800a702 <osThreadNew+0x11a>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d07b      	beq.n	800a702 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a60a:	2380      	movs	r3, #128	; 0x80
 800a60c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a60e:	2318      	movs	r3, #24
 800a610:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a612:	2300      	movs	r3, #0
 800a614:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a61a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d045      	beq.n	800a6ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <osThreadNew+0x48>
        name = attr->name;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d002      	beq.n	800a63e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d008      	beq.n	800a656 <osThreadNew+0x6e>
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	2b38      	cmp	r3, #56	; 0x38
 800a648:	d805      	bhi.n	800a656 <osThreadNew+0x6e>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <osThreadNew+0x72>
        return (NULL);
 800a656:	2300      	movs	r3, #0
 800a658:	e054      	b.n	800a704 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	089b      	lsrs	r3, r3, #2
 800a668:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00e      	beq.n	800a690 <osThreadNew+0xa8>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	2bbf      	cmp	r3, #191	; 0xbf
 800a678:	d90a      	bls.n	800a690 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d006      	beq.n	800a690 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	695b      	ldr	r3, [r3, #20]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d002      	beq.n	800a690 <osThreadNew+0xa8>
        mem = 1;
 800a68a:	2301      	movs	r3, #1
 800a68c:	61bb      	str	r3, [r7, #24]
 800a68e:	e010      	b.n	800a6b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10c      	bne.n	800a6b2 <osThreadNew+0xca>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d108      	bne.n	800a6b2 <osThreadNew+0xca>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d104      	bne.n	800a6b2 <osThreadNew+0xca>
          mem = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	61bb      	str	r3, [r7, #24]
 800a6ac:	e001      	b.n	800a6b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d110      	bne.n	800a6da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6c0:	9202      	str	r2, [sp, #8]
 800a6c2:	9301      	str	r3, [sp, #4]
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	6a3a      	ldr	r2, [r7, #32]
 800a6cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 fff6 	bl	800b6c0 <xTaskCreateStatic>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	613b      	str	r3, [r7, #16]
 800a6d8:	e013      	b.n	800a702 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d110      	bne.n	800a702 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	f107 0310 	add.w	r3, r7, #16
 800a6e8:	9301      	str	r3, [sp, #4]
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f001 f841 	bl	800b77a <xTaskCreate>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d001      	beq.n	800a702 <osThreadNew+0x11a>
            hTask = NULL;
 800a6fe:	2300      	movs	r3, #0
 800a700:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a702:	693b      	ldr	r3, [r7, #16]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3728      	adds	r7, #40	; 0x28
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a714:	f3ef 8305 	mrs	r3, IPSR
 800a718:	60bb      	str	r3, [r7, #8]
  return(result);
 800a71a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d003      	beq.n	800a728 <osDelay+0x1c>
    stat = osErrorISR;
 800a720:	f06f 0305 	mvn.w	r3, #5
 800a724:	60fb      	str	r3, [r7, #12]
 800a726:	e007      	b.n	800a738 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a728:	2300      	movs	r3, #0
 800a72a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d002      	beq.n	800a738 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f001 f980 	bl	800ba38 <vTaskDelay>
    }
  }

  return (stat);
 800a738:	68fb      	ldr	r3, [r7, #12]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a742:	b580      	push	{r7, lr}
 800a744:	b08a      	sub	sp, #40	; 0x28
 800a746:	af02      	add	r7, sp, #8
 800a748:	60f8      	str	r0, [r7, #12]
 800a74a:	60b9      	str	r1, [r7, #8]
 800a74c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a74e:	2300      	movs	r3, #0
 800a750:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a752:	f3ef 8305 	mrs	r3, IPSR
 800a756:	613b      	str	r3, [r7, #16]
  return(result);
 800a758:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d15f      	bne.n	800a81e <osMessageQueueNew+0xdc>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d05c      	beq.n	800a81e <osMessageQueueNew+0xdc>
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d059      	beq.n	800a81e <osMessageQueueNew+0xdc>
    mem = -1;
 800a76a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a76e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d029      	beq.n	800a7ca <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d012      	beq.n	800a7a4 <osMessageQueueNew+0x62>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	2b4f      	cmp	r3, #79	; 0x4f
 800a784:	d90e      	bls.n	800a7a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00a      	beq.n	800a7a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	695a      	ldr	r2, [r3, #20]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	68b9      	ldr	r1, [r7, #8]
 800a796:	fb01 f303 	mul.w	r3, r1, r3
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d302      	bcc.n	800a7a4 <osMessageQueueNew+0x62>
        mem = 1;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	61bb      	str	r3, [r7, #24]
 800a7a2:	e014      	b.n	800a7ce <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d110      	bne.n	800a7ce <osMessageQueueNew+0x8c>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10c      	bne.n	800a7ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d108      	bne.n	800a7ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d104      	bne.n	800a7ce <osMessageQueueNew+0x8c>
          mem = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	61bb      	str	r3, [r7, #24]
 800a7c8:	e001      	b.n	800a7ce <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d10b      	bne.n	800a7ec <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	691a      	ldr	r2, [r3, #16]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	2100      	movs	r1, #0
 800a7de:	9100      	str	r1, [sp, #0]
 800a7e0:	68b9      	ldr	r1, [r7, #8]
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 fa2e 	bl	800ac44 <xQueueGenericCreateStatic>
 800a7e8:	61f8      	str	r0, [r7, #28]
 800a7ea:	e008      	b.n	800a7fe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d105      	bne.n	800a7fe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	68b9      	ldr	r1, [r7, #8]
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 fa9c 	bl	800ad34 <xQueueGenericCreate>
 800a7fc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00c      	beq.n	800a81e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d003      	beq.n	800a812 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	617b      	str	r3, [r7, #20]
 800a810:	e001      	b.n	800a816 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a812:	2300      	movs	r3, #0
 800a814:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a816:	6979      	ldr	r1, [r7, #20]
 800a818:	69f8      	ldr	r0, [r7, #28]
 800a81a:	f000 fef3 	bl	800b604 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a81e:	69fb      	ldr	r3, [r7, #28]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3720      	adds	r7, #32
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a828:	b580      	push	{r7, lr}
 800a82a:	b088      	sub	sp, #32
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	603b      	str	r3, [r7, #0]
 800a834:	4613      	mov	r3, r2
 800a836:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a840:	f3ef 8305 	mrs	r3, IPSR
 800a844:	617b      	str	r3, [r7, #20]
  return(result);
 800a846:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d028      	beq.n	800a89e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d005      	beq.n	800a85e <osMessageQueuePut+0x36>
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d002      	beq.n	800a85e <osMessageQueuePut+0x36>
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d003      	beq.n	800a866 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a85e:	f06f 0303 	mvn.w	r3, #3
 800a862:	61fb      	str	r3, [r7, #28]
 800a864:	e038      	b.n	800a8d8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a866:	2300      	movs	r3, #0
 800a868:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a86a:	f107 0210 	add.w	r2, r7, #16
 800a86e:	2300      	movs	r3, #0
 800a870:	68b9      	ldr	r1, [r7, #8]
 800a872:	69b8      	ldr	r0, [r7, #24]
 800a874:	f000 fbba 	bl	800afec <xQueueGenericSendFromISR>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d003      	beq.n	800a886 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a87e:	f06f 0302 	mvn.w	r3, #2
 800a882:	61fb      	str	r3, [r7, #28]
 800a884:	e028      	b.n	800a8d8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d025      	beq.n	800a8d8 <osMessageQueuePut+0xb0>
 800a88c:	4b15      	ldr	r3, [pc, #84]	; (800a8e4 <osMessageQueuePut+0xbc>)
 800a88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a892:	601a      	str	r2, [r3, #0]
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	f3bf 8f6f 	isb	sy
 800a89c:	e01c      	b.n	800a8d8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d002      	beq.n	800a8aa <osMessageQueuePut+0x82>
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d103      	bne.n	800a8b2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a8aa:	f06f 0303 	mvn.w	r3, #3
 800a8ae:	61fb      	str	r3, [r7, #28]
 800a8b0:	e012      	b.n	800a8d8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	68b9      	ldr	r1, [r7, #8]
 800a8b8:	69b8      	ldr	r0, [r7, #24]
 800a8ba:	f000 fa99 	bl	800adf0 <xQueueGenericSend>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d009      	beq.n	800a8d8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d003      	beq.n	800a8d2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a8ca:	f06f 0301 	mvn.w	r3, #1
 800a8ce:	61fb      	str	r3, [r7, #28]
 800a8d0:	e002      	b.n	800a8d8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a8d2:	f06f 0302 	mvn.w	r3, #2
 800a8d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a8d8:	69fb      	ldr	r3, [r7, #28]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3720      	adds	r7, #32
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	e000ed04 	.word	0xe000ed04

0800a8e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8fe:	f3ef 8305 	mrs	r3, IPSR
 800a902:	617b      	str	r3, [r7, #20]
  return(result);
 800a904:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a906:	2b00      	cmp	r3, #0
 800a908:	d028      	beq.n	800a95c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d005      	beq.n	800a91c <osMessageQueueGet+0x34>
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d002      	beq.n	800a91c <osMessageQueueGet+0x34>
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a91c:	f06f 0303 	mvn.w	r3, #3
 800a920:	61fb      	str	r3, [r7, #28]
 800a922:	e037      	b.n	800a994 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a924:	2300      	movs	r3, #0
 800a926:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a928:	f107 0310 	add.w	r3, r7, #16
 800a92c:	461a      	mov	r2, r3
 800a92e:	68b9      	ldr	r1, [r7, #8]
 800a930:	69b8      	ldr	r0, [r7, #24]
 800a932:	f000 fcd7 	bl	800b2e4 <xQueueReceiveFromISR>
 800a936:	4603      	mov	r3, r0
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d003      	beq.n	800a944 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a93c:	f06f 0302 	mvn.w	r3, #2
 800a940:	61fb      	str	r3, [r7, #28]
 800a942:	e027      	b.n	800a994 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d024      	beq.n	800a994 <osMessageQueueGet+0xac>
 800a94a:	4b15      	ldr	r3, [pc, #84]	; (800a9a0 <osMessageQueueGet+0xb8>)
 800a94c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	e01b      	b.n	800a994 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d002      	beq.n	800a968 <osMessageQueueGet+0x80>
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d103      	bne.n	800a970 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a968:	f06f 0303 	mvn.w	r3, #3
 800a96c:	61fb      	str	r3, [r7, #28]
 800a96e:	e011      	b.n	800a994 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	68b9      	ldr	r1, [r7, #8]
 800a974:	69b8      	ldr	r0, [r7, #24]
 800a976:	f000 fbd5 	bl	800b124 <xQueueReceive>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d009      	beq.n	800a994 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a986:	f06f 0301 	mvn.w	r3, #1
 800a98a:	61fb      	str	r3, [r7, #28]
 800a98c:	e002      	b.n	800a994 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a98e:	f06f 0302 	mvn.w	r3, #2
 800a992:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a994:	69fb      	ldr	r3, [r7, #28]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3720      	adds	r7, #32
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	e000ed04 	.word	0xe000ed04

0800a9a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4a07      	ldr	r2, [pc, #28]	; (800a9d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a9b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	4a06      	ldr	r2, [pc, #24]	; (800a9d4 <vApplicationGetIdleTaskMemory+0x30>)
 800a9ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2280      	movs	r2, #128	; 0x80
 800a9c0:	601a      	str	r2, [r3, #0]
}
 800a9c2:	bf00      	nop
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	2000076c 	.word	0x2000076c
 800a9d4:	2000082c 	.word	0x2000082c

0800a9d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4a07      	ldr	r2, [pc, #28]	; (800aa04 <vApplicationGetTimerTaskMemory+0x2c>)
 800a9e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	4a06      	ldr	r2, [pc, #24]	; (800aa08 <vApplicationGetTimerTaskMemory+0x30>)
 800a9ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9f6:	601a      	str	r2, [r3, #0]
}
 800a9f8:	bf00      	nop
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	20000a2c 	.word	0x20000a2c
 800aa08:	20000aec 	.word	0x20000aec

0800aa0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f103 0208 	add.w	r2, r3, #8
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f103 0208 	add.w	r2, r3, #8
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f103 0208 	add.w	r2, r3, #8
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa5a:	bf00      	nop
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa66:	b480      	push	{r7}
 800aa68:	b085      	sub	sp, #20
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	689a      	ldr	r2, [r3, #8]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	1c5a      	adds	r2, r3, #1
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	601a      	str	r2, [r3, #0]
}
 800aaa2:	bf00      	nop
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aaae:	b480      	push	{r7}
 800aab0:	b085      	sub	sp, #20
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aac4:	d103      	bne.n	800aace <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	60fb      	str	r3, [r7, #12]
 800aacc:	e00c      	b.n	800aae8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	3308      	adds	r3, #8
 800aad2:	60fb      	str	r3, [r7, #12]
 800aad4:	e002      	b.n	800aadc <vListInsert+0x2e>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d2f6      	bcs.n	800aad6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	683a      	ldr	r2, [r7, #0]
 800ab02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	601a      	str	r2, [r3, #0]
}
 800ab14:	bf00      	nop
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	6892      	ldr	r2, [r2, #8]
 800ab36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	6852      	ldr	r2, [r2, #4]
 800ab40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d103      	bne.n	800ab54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	689a      	ldr	r2, [r3, #8]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	1e5a      	subs	r2, r3, #1
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10a      	bne.n	800ab9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8c:	f383 8811 	msr	BASEPRI, r3
 800ab90:	f3bf 8f6f 	isb	sy
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab9a:	bf00      	nop
 800ab9c:	e7fe      	b.n	800ab9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab9e:	f002 fc61 	bl	800d464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abaa:	68f9      	ldr	r1, [r7, #12]
 800abac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abae:	fb01 f303 	mul.w	r3, r1, r3
 800abb2:	441a      	add	r2, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abce:	3b01      	subs	r3, #1
 800abd0:	68f9      	ldr	r1, [r7, #12]
 800abd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abd4:	fb01 f303 	mul.w	r3, r1, r3
 800abd8:	441a      	add	r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	22ff      	movs	r2, #255	; 0xff
 800abe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	22ff      	movs	r2, #255	; 0xff
 800abea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d114      	bne.n	800ac1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d01a      	beq.n	800ac32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3310      	adds	r3, #16
 800ac00:	4618      	mov	r0, r3
 800ac02:	f001 faff 	bl	800c204 <xTaskRemoveFromEventList>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d012      	beq.n	800ac32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac0c:	4b0c      	ldr	r3, [pc, #48]	; (800ac40 <xQueueGenericReset+0xcc>)
 800ac0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	e009      	b.n	800ac32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	3310      	adds	r3, #16
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7ff fef2 	bl	800aa0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	3324      	adds	r3, #36	; 0x24
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff feed 	bl	800aa0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac32:	f002 fc47 	bl	800d4c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac36:	2301      	movs	r3, #1
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	e000ed04 	.word	0xe000ed04

0800ac44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b08e      	sub	sp, #56	; 0x38
 800ac48:	af02      	add	r7, sp, #8
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
 800ac50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10a      	bne.n	800ac6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac6a:	bf00      	nop
 800ac6c:	e7fe      	b.n	800ac6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10a      	bne.n	800ac8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac86:	bf00      	nop
 800ac88:	e7fe      	b.n	800ac88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <xQueueGenericCreateStatic+0x52>
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <xQueueGenericCreateStatic+0x56>
 800ac96:	2301      	movs	r3, #1
 800ac98:	e000      	b.n	800ac9c <xQueueGenericCreateStatic+0x58>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10a      	bne.n	800acb6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	623b      	str	r3, [r7, #32]
}
 800acb2:	bf00      	nop
 800acb4:	e7fe      	b.n	800acb4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d102      	bne.n	800acc2 <xQueueGenericCreateStatic+0x7e>
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <xQueueGenericCreateStatic+0x82>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e000      	b.n	800acc8 <xQueueGenericCreateStatic+0x84>
 800acc6:	2300      	movs	r3, #0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	61fb      	str	r3, [r7, #28]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ace2:	2350      	movs	r3, #80	; 0x50
 800ace4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2b50      	cmp	r3, #80	; 0x50
 800acea:	d00a      	beq.n	800ad02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	61bb      	str	r3, [r7, #24]
}
 800acfe:	bf00      	nop
 800ad00:	e7fe      	b.n	800ad00 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad02:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00d      	beq.n	800ad2a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	2201      	movs	r2, #1
 800ad12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	68b9      	ldr	r1, [r7, #8]
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f000 f83f 	bl	800ada8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3730      	adds	r7, #48	; 0x30
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08a      	sub	sp, #40	; 0x28
 800ad38:	af02      	add	r7, sp, #8
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10a      	bne.n	800ad5e <xQueueGenericCreate+0x2a>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	613b      	str	r3, [r7, #16]
}
 800ad5a:	bf00      	nop
 800ad5c:	e7fe      	b.n	800ad5c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	fb02 f303 	mul.w	r3, r2, r3
 800ad66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	3350      	adds	r3, #80	; 0x50
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f002 fc9b 	bl	800d6a8 <pvPortMalloc>
 800ad72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d011      	beq.n	800ad9e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	3350      	adds	r3, #80	; 0x50
 800ad82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad8c:	79fa      	ldrb	r2, [r7, #7]
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	4613      	mov	r3, r2
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	68b9      	ldr	r1, [r7, #8]
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 f805 	bl	800ada8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad9e:	69bb      	ldr	r3, [r7, #24]
	}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3720      	adds	r7, #32
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d103      	bne.n	800adc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	69ba      	ldr	r2, [r7, #24]
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	e002      	b.n	800adca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800add6:	2101      	movs	r1, #1
 800add8:	69b8      	ldr	r0, [r7, #24]
 800adda:	f7ff fecb 	bl	800ab74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	78fa      	ldrb	r2, [r7, #3]
 800ade2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ade6:	bf00      	nop
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
	...

0800adf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b08e      	sub	sp, #56	; 0x38
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
 800adfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800adfe:	2300      	movs	r3, #0
 800ae00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10a      	bne.n	800ae22 <xQueueGenericSend+0x32>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae1e:	bf00      	nop
 800ae20:	e7fe      	b.n	800ae20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d103      	bne.n	800ae30 <xQueueGenericSend+0x40>
 800ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <xQueueGenericSend+0x44>
 800ae30:	2301      	movs	r3, #1
 800ae32:	e000      	b.n	800ae36 <xQueueGenericSend+0x46>
 800ae34:	2300      	movs	r3, #0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10a      	bne.n	800ae50 <xQueueGenericSend+0x60>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d103      	bne.n	800ae5e <xQueueGenericSend+0x6e>
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d101      	bne.n	800ae62 <xQueueGenericSend+0x72>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e000      	b.n	800ae64 <xQueueGenericSend+0x74>
 800ae62:	2300      	movs	r3, #0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10a      	bne.n	800ae7e <xQueueGenericSend+0x8e>
	__asm volatile
 800ae68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6c:	f383 8811 	msr	BASEPRI, r3
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	623b      	str	r3, [r7, #32]
}
 800ae7a:	bf00      	nop
 800ae7c:	e7fe      	b.n	800ae7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae7e:	f001 fc57 	bl	800c730 <xTaskGetSchedulerState>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d102      	bne.n	800ae8e <xQueueGenericSend+0x9e>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d101      	bne.n	800ae92 <xQueueGenericSend+0xa2>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e000      	b.n	800ae94 <xQueueGenericSend+0xa4>
 800ae92:	2300      	movs	r3, #0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10a      	bne.n	800aeae <xQueueGenericSend+0xbe>
	__asm volatile
 800ae98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	61fb      	str	r3, [r7, #28]
}
 800aeaa:	bf00      	nop
 800aeac:	e7fe      	b.n	800aeac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aeae:	f002 fad9 	bl	800d464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d302      	bcc.n	800aec4 <xQueueGenericSend+0xd4>
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d129      	bne.n	800af18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	68b9      	ldr	r1, [r7, #8]
 800aec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeca:	f000 fa8b 	bl	800b3e4 <prvCopyDataToQueue>
 800aece:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d010      	beq.n	800aefa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeda:	3324      	adds	r3, #36	; 0x24
 800aedc:	4618      	mov	r0, r3
 800aede:	f001 f991 	bl	800c204 <xTaskRemoveFromEventList>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d013      	beq.n	800af10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aee8:	4b3f      	ldr	r3, [pc, #252]	; (800afe8 <xQueueGenericSend+0x1f8>)
 800aeea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	e00a      	b.n	800af10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d007      	beq.n	800af10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af00:	4b39      	ldr	r3, [pc, #228]	; (800afe8 <xQueueGenericSend+0x1f8>)
 800af02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af06:	601a      	str	r2, [r3, #0]
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af10:	f002 fad8 	bl	800d4c4 <vPortExitCritical>
				return pdPASS;
 800af14:	2301      	movs	r3, #1
 800af16:	e063      	b.n	800afe0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d103      	bne.n	800af26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af1e:	f002 fad1 	bl	800d4c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af22:	2300      	movs	r3, #0
 800af24:	e05c      	b.n	800afe0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d106      	bne.n	800af3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af2c:	f107 0314 	add.w	r3, r7, #20
 800af30:	4618      	mov	r0, r3
 800af32:	f001 f9cb 	bl	800c2cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af36:	2301      	movs	r3, #1
 800af38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af3a:	f002 fac3 	bl	800d4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af3e:	f000 fe89 	bl	800bc54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af42:	f002 fa8f 	bl	800d464 <vPortEnterCritical>
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af4c:	b25b      	sxtb	r3, r3
 800af4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af52:	d103      	bne.n	800af5c <xQueueGenericSend+0x16c>
 800af54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af56:	2200      	movs	r2, #0
 800af58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af62:	b25b      	sxtb	r3, r3
 800af64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af68:	d103      	bne.n	800af72 <xQueueGenericSend+0x182>
 800af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af72:	f002 faa7 	bl	800d4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af76:	1d3a      	adds	r2, r7, #4
 800af78:	f107 0314 	add.w	r3, r7, #20
 800af7c:	4611      	mov	r1, r2
 800af7e:	4618      	mov	r0, r3
 800af80:	f001 f9ba 	bl	800c2f8 <xTaskCheckForTimeOut>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d124      	bne.n	800afd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af8c:	f000 fb22 	bl	800b5d4 <prvIsQueueFull>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d018      	beq.n	800afc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	3310      	adds	r3, #16
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	4611      	mov	r1, r2
 800af9e:	4618      	mov	r0, r3
 800afa0:	f001 f8e0 	bl	800c164 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800afa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afa6:	f000 faad 	bl	800b504 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800afaa:	f000 fe61 	bl	800bc70 <xTaskResumeAll>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f47f af7c 	bne.w	800aeae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800afb6:	4b0c      	ldr	r3, [pc, #48]	; (800afe8 <xQueueGenericSend+0x1f8>)
 800afb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afbc:	601a      	str	r2, [r3, #0]
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	e772      	b.n	800aeae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800afc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afca:	f000 fa9b 	bl	800b504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afce:	f000 fe4f 	bl	800bc70 <xTaskResumeAll>
 800afd2:	e76c      	b.n	800aeae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800afd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afd6:	f000 fa95 	bl	800b504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afda:	f000 fe49 	bl	800bc70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800afde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3738      	adds	r7, #56	; 0x38
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	e000ed04 	.word	0xe000ed04

0800afec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b090      	sub	sp, #64	; 0x40
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
 800aff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10a      	bne.n	800b01a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b016:	bf00      	nop
 800b018:	e7fe      	b.n	800b018 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d103      	bne.n	800b028 <xQueueGenericSendFromISR+0x3c>
 800b020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <xQueueGenericSendFromISR+0x40>
 800b028:	2301      	movs	r3, #1
 800b02a:	e000      	b.n	800b02e <xQueueGenericSendFromISR+0x42>
 800b02c:	2300      	movs	r3, #0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10a      	bne.n	800b048 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b044:	bf00      	nop
 800b046:	e7fe      	b.n	800b046 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d103      	bne.n	800b056 <xQueueGenericSendFromISR+0x6a>
 800b04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b052:	2b01      	cmp	r3, #1
 800b054:	d101      	bne.n	800b05a <xQueueGenericSendFromISR+0x6e>
 800b056:	2301      	movs	r3, #1
 800b058:	e000      	b.n	800b05c <xQueueGenericSendFromISR+0x70>
 800b05a:	2300      	movs	r3, #0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10a      	bne.n	800b076 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	623b      	str	r3, [r7, #32]
}
 800b072:	bf00      	nop
 800b074:	e7fe      	b.n	800b074 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b076:	f002 fad7 	bl	800d628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b07a:	f3ef 8211 	mrs	r2, BASEPRI
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	61fa      	str	r2, [r7, #28]
 800b090:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b092:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b094:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d302      	bcc.n	800b0a8 <xQueueGenericSendFromISR+0xbc>
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	2b02      	cmp	r3, #2
 800b0a6:	d12f      	bne.n	800b108 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0b8:	683a      	ldr	r2, [r7, #0]
 800b0ba:	68b9      	ldr	r1, [r7, #8]
 800b0bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0be:	f000 f991 	bl	800b3e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b0c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0ca:	d112      	bne.n	800b0f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d016      	beq.n	800b102 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d6:	3324      	adds	r3, #36	; 0x24
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f001 f893 	bl	800c204 <xTaskRemoveFromEventList>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00e      	beq.n	800b102 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00b      	beq.n	800b102 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	e007      	b.n	800b102 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	b25a      	sxtb	r2, r3
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b102:	2301      	movs	r3, #1
 800b104:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b106:	e001      	b.n	800b10c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b108:	2300      	movs	r3, #0
 800b10a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b10e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b116:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3740      	adds	r7, #64	; 0x40
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
	...

0800b124 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08c      	sub	sp, #48	; 0x30
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b130:	2300      	movs	r3, #0
 800b132:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d10a      	bne.n	800b154 <xQueueReceive+0x30>
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	623b      	str	r3, [r7, #32]
}
 800b150:	bf00      	nop
 800b152:	e7fe      	b.n	800b152 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d103      	bne.n	800b162 <xQueueReceive+0x3e>
 800b15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <xQueueReceive+0x42>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <xQueueReceive+0x44>
 800b166:	2300      	movs	r3, #0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10a      	bne.n	800b182 <xQueueReceive+0x5e>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	61fb      	str	r3, [r7, #28]
}
 800b17e:	bf00      	nop
 800b180:	e7fe      	b.n	800b180 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b182:	f001 fad5 	bl	800c730 <xTaskGetSchedulerState>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d102      	bne.n	800b192 <xQueueReceive+0x6e>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <xQueueReceive+0x72>
 800b192:	2301      	movs	r3, #1
 800b194:	e000      	b.n	800b198 <xQueueReceive+0x74>
 800b196:	2300      	movs	r3, #0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10a      	bne.n	800b1b2 <xQueueReceive+0x8e>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	61bb      	str	r3, [r7, #24]
}
 800b1ae:	bf00      	nop
 800b1b0:	e7fe      	b.n	800b1b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1b2:	f002 f957 	bl	800d464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d01f      	beq.n	800b202 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1c2:	68b9      	ldr	r1, [r7, #8]
 800b1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c6:	f000 f977 	bl	800b4b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	1e5a      	subs	r2, r3, #1
 800b1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00f      	beq.n	800b1fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1dc:	3310      	adds	r3, #16
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f001 f810 	bl	800c204 <xTaskRemoveFromEventList>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d007      	beq.n	800b1fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1ea:	4b3d      	ldr	r3, [pc, #244]	; (800b2e0 <xQueueReceive+0x1bc>)
 800b1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1f0:	601a      	str	r2, [r3, #0]
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1fa:	f002 f963 	bl	800d4c4 <vPortExitCritical>
				return pdPASS;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e069      	b.n	800b2d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d103      	bne.n	800b210 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b208:	f002 f95c 	bl	800d4c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b20c:	2300      	movs	r3, #0
 800b20e:	e062      	b.n	800b2d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b212:	2b00      	cmp	r3, #0
 800b214:	d106      	bne.n	800b224 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b216:	f107 0310 	add.w	r3, r7, #16
 800b21a:	4618      	mov	r0, r3
 800b21c:	f001 f856 	bl	800c2cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b220:	2301      	movs	r3, #1
 800b222:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b224:	f002 f94e 	bl	800d4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b228:	f000 fd14 	bl	800bc54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b22c:	f002 f91a 	bl	800d464 <vPortEnterCritical>
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b236:	b25b      	sxtb	r3, r3
 800b238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b23c:	d103      	bne.n	800b246 <xQueueReceive+0x122>
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b24c:	b25b      	sxtb	r3, r3
 800b24e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b252:	d103      	bne.n	800b25c <xQueueReceive+0x138>
 800b254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b256:	2200      	movs	r2, #0
 800b258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b25c:	f002 f932 	bl	800d4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b260:	1d3a      	adds	r2, r7, #4
 800b262:	f107 0310 	add.w	r3, r7, #16
 800b266:	4611      	mov	r1, r2
 800b268:	4618      	mov	r0, r3
 800b26a:	f001 f845 	bl	800c2f8 <xTaskCheckForTimeOut>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d123      	bne.n	800b2bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b276:	f000 f997 	bl	800b5a8 <prvIsQueueEmpty>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d017      	beq.n	800b2b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	3324      	adds	r3, #36	; 0x24
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	4611      	mov	r1, r2
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 ff6b 	bl	800c164 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b28e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b290:	f000 f938 	bl	800b504 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b294:	f000 fcec 	bl	800bc70 <xTaskResumeAll>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d189      	bne.n	800b1b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b29e:	4b10      	ldr	r3, [pc, #64]	; (800b2e0 <xQueueReceive+0x1bc>)
 800b2a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	e780      	b.n	800b1b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b2:	f000 f927 	bl	800b504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2b6:	f000 fcdb 	bl	800bc70 <xTaskResumeAll>
 800b2ba:	e77a      	b.n	800b1b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2be:	f000 f921 	bl	800b504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2c2:	f000 fcd5 	bl	800bc70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2c8:	f000 f96e 	bl	800b5a8 <prvIsQueueEmpty>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f43f af6f 	beq.w	800b1b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3730      	adds	r7, #48	; 0x30
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	e000ed04 	.word	0xe000ed04

0800b2e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b08e      	sub	sp, #56	; 0x38
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10a      	bne.n	800b310 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	623b      	str	r3, [r7, #32]
}
 800b30c:	bf00      	nop
 800b30e:	e7fe      	b.n	800b30e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d103      	bne.n	800b31e <xQueueReceiveFromISR+0x3a>
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <xQueueReceiveFromISR+0x3e>
 800b31e:	2301      	movs	r3, #1
 800b320:	e000      	b.n	800b324 <xQueueReceiveFromISR+0x40>
 800b322:	2300      	movs	r3, #0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	61fb      	str	r3, [r7, #28]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b33e:	f002 f973 	bl	800d628 <vPortValidateInterruptPriority>
	__asm volatile
 800b342:	f3ef 8211 	mrs	r2, BASEPRI
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	61ba      	str	r2, [r7, #24]
 800b358:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b35a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b35c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	2b00      	cmp	r3, #0
 800b368:	d02f      	beq.n	800b3ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b374:	68b9      	ldr	r1, [r7, #8]
 800b376:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b378:	f000 f89e 	bl	800b4b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	1e5a      	subs	r2, r3, #1
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b384:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b38c:	d112      	bne.n	800b3b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d016      	beq.n	800b3c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	3310      	adds	r3, #16
 800b39a:	4618      	mov	r0, r3
 800b39c:	f000 ff32 	bl	800c204 <xTaskRemoveFromEventList>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00e      	beq.n	800b3c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00b      	beq.n	800b3c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	e007      	b.n	800b3c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	b25a      	sxtb	r2, r3
 800b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b3c8:	e001      	b.n	800b3ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	f383 8811 	msr	BASEPRI, r3
}
 800b3d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3738      	adds	r7, #56	; 0x38
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10d      	bne.n	800b41e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d14d      	bne.n	800b4a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	4618      	mov	r0, r3
 800b410:	f001 f9ac 	bl	800c76c <xTaskPriorityDisinherit>
 800b414:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	609a      	str	r2, [r3, #8]
 800b41c:	e043      	b.n	800b4a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d119      	bne.n	800b458 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6858      	ldr	r0, [r3, #4]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42c:	461a      	mov	r2, r3
 800b42e:	68b9      	ldr	r1, [r7, #8]
 800b430:	f003 f9a6 	bl	800e780 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b43c:	441a      	add	r2, r3
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d32b      	bcc.n	800b4a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	605a      	str	r2, [r3, #4]
 800b456:	e026      	b.n	800b4a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	68d8      	ldr	r0, [r3, #12]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b460:	461a      	mov	r2, r3
 800b462:	68b9      	ldr	r1, [r7, #8]
 800b464:	f003 f98c 	bl	800e780 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	68da      	ldr	r2, [r3, #12]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b470:	425b      	negs	r3, r3
 800b472:	441a      	add	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	68da      	ldr	r2, [r3, #12]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	429a      	cmp	r2, r3
 800b482:	d207      	bcs.n	800b494 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	689a      	ldr	r2, [r3, #8]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48c:	425b      	negs	r3, r3
 800b48e:	441a      	add	r2, r3
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b02      	cmp	r3, #2
 800b498:	d105      	bne.n	800b4a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d002      	beq.n	800b4a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b4ae:	697b      	ldr	r3, [r7, #20]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d018      	beq.n	800b4fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	68da      	ldr	r2, [r3, #12]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d2:	441a      	add	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68da      	ldr	r2, [r3, #12]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d303      	bcc.n	800b4ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	68d9      	ldr	r1, [r3, #12]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	6838      	ldr	r0, [r7, #0]
 800b4f8:	f003 f942 	bl	800e780 <memcpy>
	}
}
 800b4fc:	bf00      	nop
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b50c:	f001 ffaa 	bl	800d464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b516:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b518:	e011      	b.n	800b53e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d012      	beq.n	800b548 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	3324      	adds	r3, #36	; 0x24
 800b526:	4618      	mov	r0, r3
 800b528:	f000 fe6c 	bl	800c204 <xTaskRemoveFromEventList>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d001      	beq.n	800b536 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b532:	f000 ff43 	bl	800c3bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b536:	7bfb      	ldrb	r3, [r7, #15]
 800b538:	3b01      	subs	r3, #1
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b542:	2b00      	cmp	r3, #0
 800b544:	dce9      	bgt.n	800b51a <prvUnlockQueue+0x16>
 800b546:	e000      	b.n	800b54a <prvUnlockQueue+0x46>
					break;
 800b548:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	22ff      	movs	r2, #255	; 0xff
 800b54e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b552:	f001 ffb7 	bl	800d4c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b556:	f001 ff85 	bl	800d464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b560:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b562:	e011      	b.n	800b588 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d012      	beq.n	800b592 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	3310      	adds	r3, #16
 800b570:	4618      	mov	r0, r3
 800b572:	f000 fe47 	bl	800c204 <xTaskRemoveFromEventList>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b57c:	f000 ff1e 	bl	800c3bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b580:	7bbb      	ldrb	r3, [r7, #14]
 800b582:	3b01      	subs	r3, #1
 800b584:	b2db      	uxtb	r3, r3
 800b586:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	dce9      	bgt.n	800b564 <prvUnlockQueue+0x60>
 800b590:	e000      	b.n	800b594 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b592:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	22ff      	movs	r2, #255	; 0xff
 800b598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b59c:	f001 ff92 	bl	800d4c4 <vPortExitCritical>
}
 800b5a0:	bf00      	nop
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b5b0:	f001 ff58 	bl	800d464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d102      	bne.n	800b5c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	60fb      	str	r3, [r7, #12]
 800b5c0:	e001      	b.n	800b5c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5c6:	f001 ff7d 	bl	800d4c4 <vPortExitCritical>

	return xReturn;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b5dc:	f001 ff42 	bl	800d464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d102      	bne.n	800b5f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	60fb      	str	r3, [r7, #12]
 800b5f0:	e001      	b.n	800b5f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5f6:	f001 ff65 	bl	800d4c4 <vPortExitCritical>

	return xReturn;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b60e:	2300      	movs	r3, #0
 800b610:	60fb      	str	r3, [r7, #12]
 800b612:	e014      	b.n	800b63e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b614:	4a0f      	ldr	r2, [pc, #60]	; (800b654 <vQueueAddToRegistry+0x50>)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10b      	bne.n	800b638 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b620:	490c      	ldr	r1, [pc, #48]	; (800b654 <vQueueAddToRegistry+0x50>)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b62a:	4a0a      	ldr	r2, [pc, #40]	; (800b654 <vQueueAddToRegistry+0x50>)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	00db      	lsls	r3, r3, #3
 800b630:	4413      	add	r3, r2
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b636:	e006      	b.n	800b646 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	3301      	adds	r3, #1
 800b63c:	60fb      	str	r3, [r7, #12]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2b07      	cmp	r3, #7
 800b642:	d9e7      	bls.n	800b614 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b644:	bf00      	nop
 800b646:	bf00      	nop
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	2000c4e0 	.word	0x2000c4e0

0800b658 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b668:	f001 fefc 	bl	800d464 <vPortEnterCritical>
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b672:	b25b      	sxtb	r3, r3
 800b674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b678:	d103      	bne.n	800b682 <vQueueWaitForMessageRestricted+0x2a>
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b688:	b25b      	sxtb	r3, r3
 800b68a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b68e:	d103      	bne.n	800b698 <vQueueWaitForMessageRestricted+0x40>
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b698:	f001 ff14 	bl	800d4c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d106      	bne.n	800b6b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	3324      	adds	r3, #36	; 0x24
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	68b9      	ldr	r1, [r7, #8]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f000 fd7d 	bl	800c1ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b6b2:	6978      	ldr	r0, [r7, #20]
 800b6b4:	f7ff ff26 	bl	800b504 <prvUnlockQueue>
	}
 800b6b8:	bf00      	nop
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b08e      	sub	sp, #56	; 0x38
 800b6c4:	af04      	add	r7, sp, #16
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
 800b6cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10a      	bne.n	800b6ea <xTaskCreateStatic+0x2a>
	__asm volatile
 800b6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	623b      	str	r3, [r7, #32]
}
 800b6e6:	bf00      	nop
 800b6e8:	e7fe      	b.n	800b6e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10a      	bne.n	800b706 <xTaskCreateStatic+0x46>
	__asm volatile
 800b6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f4:	f383 8811 	msr	BASEPRI, r3
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	61fb      	str	r3, [r7, #28]
}
 800b702:	bf00      	nop
 800b704:	e7fe      	b.n	800b704 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b706:	23c0      	movs	r3, #192	; 0xc0
 800b708:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	2bc0      	cmp	r3, #192	; 0xc0
 800b70e:	d00a      	beq.n	800b726 <xTaskCreateStatic+0x66>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	61bb      	str	r3, [r7, #24]
}
 800b722:	bf00      	nop
 800b724:	e7fe      	b.n	800b724 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b726:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d01e      	beq.n	800b76c <xTaskCreateStatic+0xac>
 800b72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b730:	2b00      	cmp	r3, #0
 800b732:	d01b      	beq.n	800b76c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b736:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b73c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b740:	2202      	movs	r2, #2
 800b742:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b746:	2300      	movs	r3, #0
 800b748:	9303      	str	r3, [sp, #12]
 800b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74c:	9302      	str	r3, [sp, #8]
 800b74e:	f107 0314 	add.w	r3, r7, #20
 800b752:	9301      	str	r3, [sp, #4]
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	68b9      	ldr	r1, [r7, #8]
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f000 f850 	bl	800b804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b766:	f000 f8f7 	bl	800b958 <prvAddNewTaskToReadyList>
 800b76a:	e001      	b.n	800b770 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b76c:	2300      	movs	r3, #0
 800b76e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b770:	697b      	ldr	r3, [r7, #20]
	}
 800b772:	4618      	mov	r0, r3
 800b774:	3728      	adds	r7, #40	; 0x28
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b08c      	sub	sp, #48	; 0x30
 800b77e:	af04      	add	r7, sp, #16
 800b780:	60f8      	str	r0, [r7, #12]
 800b782:	60b9      	str	r1, [r7, #8]
 800b784:	603b      	str	r3, [r7, #0]
 800b786:	4613      	mov	r3, r2
 800b788:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b78a:	88fb      	ldrh	r3, [r7, #6]
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4618      	mov	r0, r3
 800b790:	f001 ff8a 	bl	800d6a8 <pvPortMalloc>
 800b794:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00e      	beq.n	800b7ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b79c:	20c0      	movs	r0, #192	; 0xc0
 800b79e:	f001 ff83 	bl	800d6a8 <pvPortMalloc>
 800b7a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d003      	beq.n	800b7b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	631a      	str	r2, [r3, #48]	; 0x30
 800b7b0:	e005      	b.n	800b7be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b7b2:	6978      	ldr	r0, [r7, #20]
 800b7b4:	f002 f844 	bl	800d840 <vPortFree>
 800b7b8:	e001      	b.n	800b7be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d017      	beq.n	800b7f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b7cc:	88fa      	ldrh	r2, [r7, #6]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	9303      	str	r3, [sp, #12]
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	9302      	str	r3, [sp, #8]
 800b7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d8:	9301      	str	r3, [sp, #4]
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	68b9      	ldr	r1, [r7, #8]
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f000 f80e 	bl	800b804 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7e8:	69f8      	ldr	r0, [r7, #28]
 800b7ea:	f000 f8b5 	bl	800b958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	61bb      	str	r3, [r7, #24]
 800b7f2:	e002      	b.n	800b7fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b7f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b7fa:	69bb      	ldr	r3, [r7, #24]
	}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3720      	adds	r7, #32
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b088      	sub	sp, #32
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	607a      	str	r2, [r7, #4]
 800b810:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b814:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	461a      	mov	r2, r3
 800b81c:	21a5      	movs	r1, #165	; 0xa5
 800b81e:	f002 ffbd 	bl	800e79c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b82c:	3b01      	subs	r3, #1
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	4413      	add	r3, r2
 800b832:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	f023 0307 	bic.w	r3, r3, #7
 800b83a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	f003 0307 	and.w	r3, r3, #7
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00a      	beq.n	800b85c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	617b      	str	r3, [r7, #20]
}
 800b858:	bf00      	nop
 800b85a:	e7fe      	b.n	800b85a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d01f      	beq.n	800b8a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b862:	2300      	movs	r3, #0
 800b864:	61fb      	str	r3, [r7, #28]
 800b866:	e012      	b.n	800b88e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	4413      	add	r3, r2
 800b86e:	7819      	ldrb	r1, [r3, #0]
 800b870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	4413      	add	r3, r2
 800b876:	3334      	adds	r3, #52	; 0x34
 800b878:	460a      	mov	r2, r1
 800b87a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	4413      	add	r3, r2
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d006      	beq.n	800b896 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	3301      	adds	r3, #1
 800b88c:	61fb      	str	r3, [r7, #28]
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	2b0f      	cmp	r3, #15
 800b892:	d9e9      	bls.n	800b868 <prvInitialiseNewTask+0x64>
 800b894:	e000      	b.n	800b898 <prvInitialiseNewTask+0x94>
			{
				break;
 800b896:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b8a0:	e003      	b.n	800b8aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ac:	2b37      	cmp	r3, #55	; 0x37
 800b8ae:	d901      	bls.n	800b8b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b8b0:	2337      	movs	r3, #55	; 0x37
 800b8b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7ff f8be 	bl	800aa4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	3318      	adds	r3, #24
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7ff f8b9 	bl	800aa4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b900:	2200      	movs	r2, #0
 800b902:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	3358      	adds	r3, #88	; 0x58
 800b90a:	2260      	movs	r2, #96	; 0x60
 800b90c:	2100      	movs	r1, #0
 800b90e:	4618      	mov	r0, r3
 800b910:	f002 ff44 	bl	800e79c <memset>
 800b914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b916:	4a0d      	ldr	r2, [pc, #52]	; (800b94c <prvInitialiseNewTask+0x148>)
 800b918:	65da      	str	r2, [r3, #92]	; 0x5c
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	4a0c      	ldr	r2, [pc, #48]	; (800b950 <prvInitialiseNewTask+0x14c>)
 800b91e:	661a      	str	r2, [r3, #96]	; 0x60
 800b920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b922:	4a0c      	ldr	r2, [pc, #48]	; (800b954 <prvInitialiseNewTask+0x150>)
 800b924:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	68f9      	ldr	r1, [r7, #12]
 800b92a:	69b8      	ldr	r0, [r7, #24]
 800b92c:	f001 fc6e 	bl	800d20c <pxPortInitialiseStack>
 800b930:	4602      	mov	r2, r0
 800b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b934:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d002      	beq.n	800b942 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b942:	bf00      	nop
 800b944:	3720      	adds	r7, #32
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	08011738 	.word	0x08011738
 800b950:	08011758 	.word	0x08011758
 800b954:	08011718 	.word	0x08011718

0800b958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b960:	f001 fd80 	bl	800d464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b964:	4b2d      	ldr	r3, [pc, #180]	; (800ba1c <prvAddNewTaskToReadyList+0xc4>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3301      	adds	r3, #1
 800b96a:	4a2c      	ldr	r2, [pc, #176]	; (800ba1c <prvAddNewTaskToReadyList+0xc4>)
 800b96c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b96e:	4b2c      	ldr	r3, [pc, #176]	; (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d109      	bne.n	800b98a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b976:	4a2a      	ldr	r2, [pc, #168]	; (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b97c:	4b27      	ldr	r3, [pc, #156]	; (800ba1c <prvAddNewTaskToReadyList+0xc4>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d110      	bne.n	800b9a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b984:	f000 fd3e 	bl	800c404 <prvInitialiseTaskLists>
 800b988:	e00d      	b.n	800b9a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b98a:	4b26      	ldr	r3, [pc, #152]	; (800ba24 <prvAddNewTaskToReadyList+0xcc>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d109      	bne.n	800b9a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b992:	4b23      	ldr	r3, [pc, #140]	; (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d802      	bhi.n	800b9a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b9a0:	4a1f      	ldr	r2, [pc, #124]	; (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b9a6:	4b20      	ldr	r3, [pc, #128]	; (800ba28 <prvAddNewTaskToReadyList+0xd0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	4a1e      	ldr	r2, [pc, #120]	; (800ba28 <prvAddNewTaskToReadyList+0xd0>)
 800b9ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b9b0:	4b1d      	ldr	r3, [pc, #116]	; (800ba28 <prvAddNewTaskToReadyList+0xd0>)
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9bc:	4b1b      	ldr	r3, [pc, #108]	; (800ba2c <prvAddNewTaskToReadyList+0xd4>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d903      	bls.n	800b9cc <prvAddNewTaskToReadyList+0x74>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c8:	4a18      	ldr	r2, [pc, #96]	; (800ba2c <prvAddNewTaskToReadyList+0xd4>)
 800b9ca:	6013      	str	r3, [r2, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	4413      	add	r3, r2
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	4a15      	ldr	r2, [pc, #84]	; (800ba30 <prvAddNewTaskToReadyList+0xd8>)
 800b9da:	441a      	add	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	3304      	adds	r3, #4
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	f7ff f83f 	bl	800aa66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b9e8:	f001 fd6c 	bl	800d4c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b9ec:	4b0d      	ldr	r3, [pc, #52]	; (800ba24 <prvAddNewTaskToReadyList+0xcc>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00e      	beq.n	800ba12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d207      	bcs.n	800ba12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba02:	4b0c      	ldr	r3, [pc, #48]	; (800ba34 <prvAddNewTaskToReadyList+0xdc>)
 800ba04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba08:	601a      	str	r2, [r3, #0]
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba12:	bf00      	nop
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	200013c0 	.word	0x200013c0
 800ba20:	20000eec 	.word	0x20000eec
 800ba24:	200013cc 	.word	0x200013cc
 800ba28:	200013dc 	.word	0x200013dc
 800ba2c:	200013c8 	.word	0x200013c8
 800ba30:	20000ef0 	.word	0x20000ef0
 800ba34:	e000ed04 	.word	0xe000ed04

0800ba38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d017      	beq.n	800ba7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba4a:	4b13      	ldr	r3, [pc, #76]	; (800ba98 <vTaskDelay+0x60>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00a      	beq.n	800ba68 <vTaskDelay+0x30>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	60bb      	str	r3, [r7, #8]
}
 800ba64:	bf00      	nop
 800ba66:	e7fe      	b.n	800ba66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba68:	f000 f8f4 	bl	800bc54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f001 f82a 	bl	800cac8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba74:	f000 f8fc 	bl	800bc70 <xTaskResumeAll>
 800ba78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d107      	bne.n	800ba90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba80:	4b06      	ldr	r3, [pc, #24]	; (800ba9c <vTaskDelay+0x64>)
 800ba82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba86:	601a      	str	r2, [r3, #0]
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba90:	bf00      	nop
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	200013e8 	.word	0x200013e8
 800ba9c:	e000ed04 	.word	0xe000ed04

0800baa0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b088      	sub	sp, #32
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d10a      	bne.n	800bac8 <eTaskGetState+0x28>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	60bb      	str	r3, [r7, #8]
}
 800bac4:	bf00      	nop
 800bac6:	e7fe      	b.n	800bac6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800bac8:	4b23      	ldr	r3, [pc, #140]	; (800bb58 <eTaskGetState+0xb8>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	69ba      	ldr	r2, [r7, #24]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d102      	bne.n	800bad8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800bad2:	2300      	movs	r3, #0
 800bad4:	77fb      	strb	r3, [r7, #31]
 800bad6:	e03a      	b.n	800bb4e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800bad8:	f001 fcc4 	bl	800d464 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800bae2:	4b1e      	ldr	r3, [pc, #120]	; (800bb5c <eTaskGetState+0xbc>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800bae8:	4b1d      	ldr	r3, [pc, #116]	; (800bb60 <eTaskGetState+0xc0>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800baee:	f001 fce9 	bl	800d4c4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d003      	beq.n	800bb02 <eTaskGetState+0x62>
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d102      	bne.n	800bb08 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800bb02:	2302      	movs	r3, #2
 800bb04:	77fb      	strb	r3, [r7, #31]
 800bb06:	e022      	b.n	800bb4e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	4a16      	ldr	r2, [pc, #88]	; (800bb64 <eTaskGetState+0xc4>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d112      	bne.n	800bb36 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10b      	bne.n	800bb30 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d102      	bne.n	800bb2a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800bb24:	2302      	movs	r3, #2
 800bb26:	77fb      	strb	r3, [r7, #31]
 800bb28:	e011      	b.n	800bb4e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	77fb      	strb	r3, [r7, #31]
 800bb2e:	e00e      	b.n	800bb4e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800bb30:	2302      	movs	r3, #2
 800bb32:	77fb      	strb	r3, [r7, #31]
 800bb34:	e00b      	b.n	800bb4e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	4a0b      	ldr	r2, [pc, #44]	; (800bb68 <eTaskGetState+0xc8>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d002      	beq.n	800bb44 <eTaskGetState+0xa4>
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d102      	bne.n	800bb4a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800bb44:	2304      	movs	r3, #4
 800bb46:	77fb      	strb	r3, [r7, #31]
 800bb48:	e001      	b.n	800bb4e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800bb4e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800bb50:	4618      	mov	r0, r3
 800bb52:	3720      	adds	r7, #32
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	20000eec 	.word	0x20000eec
 800bb5c:	20001378 	.word	0x20001378
 800bb60:	2000137c 	.word	0x2000137c
 800bb64:	200013ac 	.word	0x200013ac
 800bb68:	20001394 	.word	0x20001394

0800bb6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b08a      	sub	sp, #40	; 0x28
 800bb70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb7a:	463a      	mov	r2, r7
 800bb7c:	1d39      	adds	r1, r7, #4
 800bb7e:	f107 0308 	add.w	r3, r7, #8
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7fe ff0e 	bl	800a9a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	9202      	str	r2, [sp, #8]
 800bb90:	9301      	str	r3, [sp, #4]
 800bb92:	2300      	movs	r3, #0
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	2300      	movs	r3, #0
 800bb98:	460a      	mov	r2, r1
 800bb9a:	4925      	ldr	r1, [pc, #148]	; (800bc30 <vTaskStartScheduler+0xc4>)
 800bb9c:	4825      	ldr	r0, [pc, #148]	; (800bc34 <vTaskStartScheduler+0xc8>)
 800bb9e:	f7ff fd8f 	bl	800b6c0 <xTaskCreateStatic>
 800bba2:	4603      	mov	r3, r0
 800bba4:	4a24      	ldr	r2, [pc, #144]	; (800bc38 <vTaskStartScheduler+0xcc>)
 800bba6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bba8:	4b23      	ldr	r3, [pc, #140]	; (800bc38 <vTaskStartScheduler+0xcc>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	617b      	str	r3, [r7, #20]
 800bbb4:	e001      	b.n	800bbba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d102      	bne.n	800bbc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bbc0:	f000 ffd6 	bl	800cb70 <xTimerCreateTimerTask>
 800bbc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d11e      	bne.n	800bc0a <vTaskStartScheduler+0x9e>
	__asm volatile
 800bbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd0:	f383 8811 	msr	BASEPRI, r3
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	f3bf 8f4f 	dsb	sy
 800bbdc:	613b      	str	r3, [r7, #16]
}
 800bbde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbe0:	4b16      	ldr	r3, [pc, #88]	; (800bc3c <vTaskStartScheduler+0xd0>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	3358      	adds	r3, #88	; 0x58
 800bbe6:	4a16      	ldr	r2, [pc, #88]	; (800bc40 <vTaskStartScheduler+0xd4>)
 800bbe8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bbea:	4b16      	ldr	r3, [pc, #88]	; (800bc44 <vTaskStartScheduler+0xd8>)
 800bbec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bbf2:	4b15      	ldr	r3, [pc, #84]	; (800bc48 <vTaskStartScheduler+0xdc>)
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bbf8:	4b14      	ldr	r3, [pc, #80]	; (800bc4c <vTaskStartScheduler+0xe0>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800bbfe:	4b14      	ldr	r3, [pc, #80]	; (800bc50 <vTaskStartScheduler+0xe4>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc04:	f001 fb8c 	bl	800d320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc08:	e00e      	b.n	800bc28 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc10:	d10a      	bne.n	800bc28 <vTaskStartScheduler+0xbc>
	__asm volatile
 800bc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	60fb      	str	r3, [r7, #12]
}
 800bc24:	bf00      	nop
 800bc26:	e7fe      	b.n	800bc26 <vTaskStartScheduler+0xba>
}
 800bc28:	bf00      	nop
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	080115ac 	.word	0x080115ac
 800bc34:	0800c3d5 	.word	0x0800c3d5
 800bc38:	200013e4 	.word	0x200013e4
 800bc3c:	20000eec 	.word	0x20000eec
 800bc40:	20000184 	.word	0x20000184
 800bc44:	200013e0 	.word	0x200013e0
 800bc48:	200013cc 	.word	0x200013cc
 800bc4c:	200013c4 	.word	0x200013c4
 800bc50:	2000c308 	.word	0x2000c308

0800bc54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc54:	b480      	push	{r7}
 800bc56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc58:	4b04      	ldr	r3, [pc, #16]	; (800bc6c <vTaskSuspendAll+0x18>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	4a03      	ldr	r2, [pc, #12]	; (800bc6c <vTaskSuspendAll+0x18>)
 800bc60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc62:	bf00      	nop
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	200013e8 	.word	0x200013e8

0800bc70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc76:	2300      	movs	r3, #0
 800bc78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc7e:	4b42      	ldr	r3, [pc, #264]	; (800bd88 <xTaskResumeAll+0x118>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10a      	bne.n	800bc9c <xTaskResumeAll+0x2c>
	__asm volatile
 800bc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8a:	f383 8811 	msr	BASEPRI, r3
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	603b      	str	r3, [r7, #0]
}
 800bc98:	bf00      	nop
 800bc9a:	e7fe      	b.n	800bc9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc9c:	f001 fbe2 	bl	800d464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bca0:	4b39      	ldr	r3, [pc, #228]	; (800bd88 <xTaskResumeAll+0x118>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	3b01      	subs	r3, #1
 800bca6:	4a38      	ldr	r2, [pc, #224]	; (800bd88 <xTaskResumeAll+0x118>)
 800bca8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcaa:	4b37      	ldr	r3, [pc, #220]	; (800bd88 <xTaskResumeAll+0x118>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d162      	bne.n	800bd78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcb2:	4b36      	ldr	r3, [pc, #216]	; (800bd8c <xTaskResumeAll+0x11c>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d05e      	beq.n	800bd78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcba:	e02f      	b.n	800bd1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcbc:	4b34      	ldr	r3, [pc, #208]	; (800bd90 <xTaskResumeAll+0x120>)
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	3318      	adds	r3, #24
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fe ff29 	bl	800ab20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fe ff24 	bl	800ab20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcdc:	4b2d      	ldr	r3, [pc, #180]	; (800bd94 <xTaskResumeAll+0x124>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d903      	bls.n	800bcec <xTaskResumeAll+0x7c>
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce8:	4a2a      	ldr	r2, [pc, #168]	; (800bd94 <xTaskResumeAll+0x124>)
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4413      	add	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4a27      	ldr	r2, [pc, #156]	; (800bd98 <xTaskResumeAll+0x128>)
 800bcfa:	441a      	add	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3304      	adds	r3, #4
 800bd00:	4619      	mov	r1, r3
 800bd02:	4610      	mov	r0, r2
 800bd04:	f7fe feaf 	bl	800aa66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd0c:	4b23      	ldr	r3, [pc, #140]	; (800bd9c <xTaskResumeAll+0x12c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d302      	bcc.n	800bd1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bd16:	4b22      	ldr	r3, [pc, #136]	; (800bda0 <xTaskResumeAll+0x130>)
 800bd18:	2201      	movs	r2, #1
 800bd1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd1c:	4b1c      	ldr	r3, [pc, #112]	; (800bd90 <xTaskResumeAll+0x120>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1cb      	bne.n	800bcbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd2a:	f000 fce1 	bl	800c6f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd2e:	4b1d      	ldr	r3, [pc, #116]	; (800bda4 <xTaskResumeAll+0x134>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d010      	beq.n	800bd5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd3a:	f000 f8d7 	bl	800beec <xTaskIncrementTick>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d002      	beq.n	800bd4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd44:	4b16      	ldr	r3, [pc, #88]	; (800bda0 <xTaskResumeAll+0x130>)
 800bd46:	2201      	movs	r2, #1
 800bd48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1f1      	bne.n	800bd3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bd56:	4b13      	ldr	r3, [pc, #76]	; (800bda4 <xTaskResumeAll+0x134>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd5c:	4b10      	ldr	r3, [pc, #64]	; (800bda0 <xTaskResumeAll+0x130>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d009      	beq.n	800bd78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd64:	2301      	movs	r3, #1
 800bd66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd68:	4b0f      	ldr	r3, [pc, #60]	; (800bda8 <xTaskResumeAll+0x138>)
 800bd6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6e:	601a      	str	r2, [r3, #0]
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd78:	f001 fba4 	bl	800d4c4 <vPortExitCritical>

	return xAlreadyYielded;
 800bd7c:	68bb      	ldr	r3, [r7, #8]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	200013e8 	.word	0x200013e8
 800bd8c:	200013c0 	.word	0x200013c0
 800bd90:	20001380 	.word	0x20001380
 800bd94:	200013c8 	.word	0x200013c8
 800bd98:	20000ef0 	.word	0x20000ef0
 800bd9c:	20000eec 	.word	0x20000eec
 800bda0:	200013d4 	.word	0x200013d4
 800bda4:	200013d0 	.word	0x200013d0
 800bda8:	e000ed04 	.word	0xe000ed04

0800bdac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bdb2:	4b05      	ldr	r3, [pc, #20]	; (800bdc8 <xTaskGetTickCount+0x1c>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bdb8:	687b      	ldr	r3, [r7, #4]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	370c      	adds	r7, #12
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	200013c4 	.word	0x200013c4

0800bdcc <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	617b      	str	r3, [r7, #20]
 800bddc:	2338      	movs	r3, #56	; 0x38
 800bdde:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800bde0:	f7ff ff38 	bl	800bc54 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800bde4:	4b3a      	ldr	r3, [pc, #232]	; (800bed0 <uxTaskGetSystemState+0x104>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	68ba      	ldr	r2, [r7, #8]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d369      	bcc.n	800bec2 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800bdf4:	697a      	ldr	r2, [r7, #20]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	00db      	lsls	r3, r3, #3
 800bdfa:	4413      	add	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	461a      	mov	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	1898      	adds	r0, r3, r2
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	4613      	mov	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4413      	add	r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	4a31      	ldr	r2, [pc, #196]	; (800bed4 <uxTaskGetSystemState+0x108>)
 800be10:	4413      	add	r3, r2
 800be12:	2201      	movs	r2, #1
 800be14:	4619      	mov	r1, r3
 800be16:	f000 fbc9 	bl	800c5ac <prvListTasksWithinSingleList>
 800be1a:	4602      	mov	r2, r0
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	4413      	add	r3, r2
 800be20:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1e2      	bne.n	800bdee <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	4613      	mov	r3, r2
 800be2c:	00db      	lsls	r3, r3, #3
 800be2e:	4413      	add	r3, r2
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	461a      	mov	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	4413      	add	r3, r2
 800be38:	4a27      	ldr	r2, [pc, #156]	; (800bed8 <uxTaskGetSystemState+0x10c>)
 800be3a:	6811      	ldr	r1, [r2, #0]
 800be3c:	2202      	movs	r2, #2
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 fbb4 	bl	800c5ac <prvListTasksWithinSingleList>
 800be44:	4602      	mov	r2, r0
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	4413      	add	r3, r2
 800be4a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800be4c:	697a      	ldr	r2, [r7, #20]
 800be4e:	4613      	mov	r3, r2
 800be50:	00db      	lsls	r3, r3, #3
 800be52:	4413      	add	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	461a      	mov	r2, r3
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	4413      	add	r3, r2
 800be5c:	4a1f      	ldr	r2, [pc, #124]	; (800bedc <uxTaskGetSystemState+0x110>)
 800be5e:	6811      	ldr	r1, [r2, #0]
 800be60:	2202      	movs	r2, #2
 800be62:	4618      	mov	r0, r3
 800be64:	f000 fba2 	bl	800c5ac <prvListTasksWithinSingleList>
 800be68:	4602      	mov	r2, r0
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	4413      	add	r3, r2
 800be6e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	4613      	mov	r3, r2
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	4413      	add	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	461a      	mov	r2, r3
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	4413      	add	r3, r2
 800be80:	2204      	movs	r2, #4
 800be82:	4917      	ldr	r1, [pc, #92]	; (800bee0 <uxTaskGetSystemState+0x114>)
 800be84:	4618      	mov	r0, r3
 800be86:	f000 fb91 	bl	800c5ac <prvListTasksWithinSingleList>
 800be8a:	4602      	mov	r2, r0
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	4413      	add	r3, r2
 800be90:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800be92:	697a      	ldr	r2, [r7, #20]
 800be94:	4613      	mov	r3, r2
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	4413      	add	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	461a      	mov	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	4413      	add	r3, r2
 800bea2:	2203      	movs	r2, #3
 800bea4:	490f      	ldr	r1, [pc, #60]	; (800bee4 <uxTaskGetSystemState+0x118>)
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 fb80 	bl	800c5ac <prvListTasksWithinSingleList>
 800beac:	4602      	mov	r2, r0
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	4413      	add	r3, r2
 800beb2:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d003      	beq.n	800bec2 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800beba:	4b0b      	ldr	r3, [pc, #44]	; (800bee8 <uxTaskGetSystemState+0x11c>)
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800bec2:	f7ff fed5 	bl	800bc70 <xTaskResumeAll>

		return uxTask;
 800bec6:	697b      	ldr	r3, [r7, #20]
	}
 800bec8:	4618      	mov	r0, r3
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	200013c0 	.word	0x200013c0
 800bed4:	20000ef0 	.word	0x20000ef0
 800bed8:	20001378 	.word	0x20001378
 800bedc:	2000137c 	.word	0x2000137c
 800bee0:	20001394 	.word	0x20001394
 800bee4:	200013ac 	.word	0x200013ac
 800bee8:	2000c308 	.word	0x2000c308

0800beec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bef2:	2300      	movs	r3, #0
 800bef4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bef6:	4b4f      	ldr	r3, [pc, #316]	; (800c034 <xTaskIncrementTick+0x148>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	f040 808f 	bne.w	800c01e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf00:	4b4d      	ldr	r3, [pc, #308]	; (800c038 <xTaskIncrementTick+0x14c>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	3301      	adds	r3, #1
 800bf06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf08:	4a4b      	ldr	r2, [pc, #300]	; (800c038 <xTaskIncrementTick+0x14c>)
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d120      	bne.n	800bf56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf14:	4b49      	ldr	r3, [pc, #292]	; (800c03c <xTaskIncrementTick+0x150>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00a      	beq.n	800bf34 <xTaskIncrementTick+0x48>
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	603b      	str	r3, [r7, #0]
}
 800bf30:	bf00      	nop
 800bf32:	e7fe      	b.n	800bf32 <xTaskIncrementTick+0x46>
 800bf34:	4b41      	ldr	r3, [pc, #260]	; (800c03c <xTaskIncrementTick+0x150>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	4b41      	ldr	r3, [pc, #260]	; (800c040 <xTaskIncrementTick+0x154>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a3f      	ldr	r2, [pc, #252]	; (800c03c <xTaskIncrementTick+0x150>)
 800bf40:	6013      	str	r3, [r2, #0]
 800bf42:	4a3f      	ldr	r2, [pc, #252]	; (800c040 <xTaskIncrementTick+0x154>)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6013      	str	r3, [r2, #0]
 800bf48:	4b3e      	ldr	r3, [pc, #248]	; (800c044 <xTaskIncrementTick+0x158>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	4a3d      	ldr	r2, [pc, #244]	; (800c044 <xTaskIncrementTick+0x158>)
 800bf50:	6013      	str	r3, [r2, #0]
 800bf52:	f000 fbcd 	bl	800c6f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf56:	4b3c      	ldr	r3, [pc, #240]	; (800c048 <xTaskIncrementTick+0x15c>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	693a      	ldr	r2, [r7, #16]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d349      	bcc.n	800bff4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf60:	4b36      	ldr	r3, [pc, #216]	; (800c03c <xTaskIncrementTick+0x150>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d104      	bne.n	800bf74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf6a:	4b37      	ldr	r3, [pc, #220]	; (800c048 <xTaskIncrementTick+0x15c>)
 800bf6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf70:	601a      	str	r2, [r3, #0]
					break;
 800bf72:	e03f      	b.n	800bff4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf74:	4b31      	ldr	r3, [pc, #196]	; (800c03c <xTaskIncrementTick+0x150>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf84:	693a      	ldr	r2, [r7, #16]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d203      	bcs.n	800bf94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf8c:	4a2e      	ldr	r2, [pc, #184]	; (800c048 <xTaskIncrementTick+0x15c>)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf92:	e02f      	b.n	800bff4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	3304      	adds	r3, #4
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7fe fdc1 	bl	800ab20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d004      	beq.n	800bfb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	3318      	adds	r3, #24
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fe fdb8 	bl	800ab20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb4:	4b25      	ldr	r3, [pc, #148]	; (800c04c <xTaskIncrementTick+0x160>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d903      	bls.n	800bfc4 <xTaskIncrementTick+0xd8>
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc0:	4a22      	ldr	r2, [pc, #136]	; (800c04c <xTaskIncrementTick+0x160>)
 800bfc2:	6013      	str	r3, [r2, #0]
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc8:	4613      	mov	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4a1f      	ldr	r2, [pc, #124]	; (800c050 <xTaskIncrementTick+0x164>)
 800bfd2:	441a      	add	r2, r3
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	4619      	mov	r1, r3
 800bfda:	4610      	mov	r0, r2
 800bfdc:	f7fe fd43 	bl	800aa66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe4:	4b1b      	ldr	r3, [pc, #108]	; (800c054 <xTaskIncrementTick+0x168>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d3b8      	bcc.n	800bf60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bfee:	2301      	movs	r3, #1
 800bff0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bff2:	e7b5      	b.n	800bf60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bff4:	4b17      	ldr	r3, [pc, #92]	; (800c054 <xTaskIncrementTick+0x168>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffa:	4915      	ldr	r1, [pc, #84]	; (800c050 <xTaskIncrementTick+0x164>)
 800bffc:	4613      	mov	r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	440b      	add	r3, r1
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d901      	bls.n	800c010 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c00c:	2301      	movs	r3, #1
 800c00e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c010:	4b11      	ldr	r3, [pc, #68]	; (800c058 <xTaskIncrementTick+0x16c>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d007      	beq.n	800c028 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c018:	2301      	movs	r3, #1
 800c01a:	617b      	str	r3, [r7, #20]
 800c01c:	e004      	b.n	800c028 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c01e:	4b0f      	ldr	r3, [pc, #60]	; (800c05c <xTaskIncrementTick+0x170>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3301      	adds	r3, #1
 800c024:	4a0d      	ldr	r2, [pc, #52]	; (800c05c <xTaskIncrementTick+0x170>)
 800c026:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c028:	697b      	ldr	r3, [r7, #20]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3718      	adds	r7, #24
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	200013e8 	.word	0x200013e8
 800c038:	200013c4 	.word	0x200013c4
 800c03c:	20001378 	.word	0x20001378
 800c040:	2000137c 	.word	0x2000137c
 800c044:	200013d8 	.word	0x200013d8
 800c048:	200013e0 	.word	0x200013e0
 800c04c:	200013c8 	.word	0x200013c8
 800c050:	20000ef0 	.word	0x20000ef0
 800c054:	20000eec 	.word	0x20000eec
 800c058:	200013d4 	.word	0x200013d4
 800c05c:	200013d0 	.word	0x200013d0

0800c060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c066:	4b36      	ldr	r3, [pc, #216]	; (800c140 <vTaskSwitchContext+0xe0>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d003      	beq.n	800c076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c06e:	4b35      	ldr	r3, [pc, #212]	; (800c144 <vTaskSwitchContext+0xe4>)
 800c070:	2201      	movs	r2, #1
 800c072:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c074:	e05e      	b.n	800c134 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800c076:	4b33      	ldr	r3, [pc, #204]	; (800c144 <vTaskSwitchContext+0xe4>)
 800c078:	2200      	movs	r2, #0
 800c07a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c07c:	4b32      	ldr	r3, [pc, #200]	; (800c148 <vTaskSwitchContext+0xe8>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a32      	ldr	r2, [pc, #200]	; (800c14c <vTaskSwitchContext+0xec>)
 800c082:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c084:	4b31      	ldr	r3, [pc, #196]	; (800c14c <vTaskSwitchContext+0xec>)
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	4b31      	ldr	r3, [pc, #196]	; (800c150 <vTaskSwitchContext+0xf0>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d909      	bls.n	800c0a4 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c090:	4b30      	ldr	r3, [pc, #192]	; (800c154 <vTaskSwitchContext+0xf4>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c096:	4a2d      	ldr	r2, [pc, #180]	; (800c14c <vTaskSwitchContext+0xec>)
 800c098:	6810      	ldr	r0, [r2, #0]
 800c09a:	4a2d      	ldr	r2, [pc, #180]	; (800c150 <vTaskSwitchContext+0xf0>)
 800c09c:	6812      	ldr	r2, [r2, #0]
 800c09e:	1a82      	subs	r2, r0, r2
 800c0a0:	440a      	add	r2, r1
 800c0a2:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c0a4:	4b29      	ldr	r3, [pc, #164]	; (800c14c <vTaskSwitchContext+0xec>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a29      	ldr	r2, [pc, #164]	; (800c150 <vTaskSwitchContext+0xf0>)
 800c0aa:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ac:	4b2a      	ldr	r3, [pc, #168]	; (800c158 <vTaskSwitchContext+0xf8>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	60fb      	str	r3, [r7, #12]
 800c0b2:	e010      	b.n	800c0d6 <vTaskSwitchContext+0x76>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10a      	bne.n	800c0d0 <vTaskSwitchContext+0x70>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	607b      	str	r3, [r7, #4]
}
 800c0cc:	bf00      	nop
 800c0ce:	e7fe      	b.n	800c0ce <vTaskSwitchContext+0x6e>
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	60fb      	str	r3, [r7, #12]
 800c0d6:	4921      	ldr	r1, [pc, #132]	; (800c15c <vTaskSwitchContext+0xfc>)
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4413      	add	r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	440b      	add	r3, r1
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d0e4      	beq.n	800c0b4 <vTaskSwitchContext+0x54>
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4a19      	ldr	r2, [pc, #100]	; (800c15c <vTaskSwitchContext+0xfc>)
 800c0f6:	4413      	add	r3, r2
 800c0f8:	60bb      	str	r3, [r7, #8]
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	685a      	ldr	r2, [r3, #4]
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	605a      	str	r2, [r3, #4]
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	685a      	ldr	r2, [r3, #4]
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	3308      	adds	r3, #8
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d104      	bne.n	800c11a <vTaskSwitchContext+0xba>
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	685a      	ldr	r2, [r3, #4]
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	605a      	str	r2, [r3, #4]
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	4a0c      	ldr	r2, [pc, #48]	; (800c154 <vTaskSwitchContext+0xf4>)
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	4a0c      	ldr	r2, [pc, #48]	; (800c158 <vTaskSwitchContext+0xf8>)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c12a:	4b0a      	ldr	r3, [pc, #40]	; (800c154 <vTaskSwitchContext+0xf4>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	3358      	adds	r3, #88	; 0x58
 800c130:	4a0b      	ldr	r2, [pc, #44]	; (800c160 <vTaskSwitchContext+0x100>)
 800c132:	6013      	str	r3, [r2, #0]
}
 800c134:	bf00      	nop
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	200013e8 	.word	0x200013e8
 800c144:	200013d4 	.word	0x200013d4
 800c148:	2000c308 	.word	0x2000c308
 800c14c:	200013f0 	.word	0x200013f0
 800c150:	200013ec 	.word	0x200013ec
 800c154:	20000eec 	.word	0x20000eec
 800c158:	200013c8 	.word	0x200013c8
 800c15c:	20000ef0 	.word	0x20000ef0
 800c160:	20000184 	.word	0x20000184

0800c164 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10a      	bne.n	800c18a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	60fb      	str	r3, [r7, #12]
}
 800c186:	bf00      	nop
 800c188:	e7fe      	b.n	800c188 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c18a:	4b07      	ldr	r3, [pc, #28]	; (800c1a8 <vTaskPlaceOnEventList+0x44>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	3318      	adds	r3, #24
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7fe fc8b 	bl	800aaae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c198:	2101      	movs	r1, #1
 800c19a:	6838      	ldr	r0, [r7, #0]
 800c19c:	f000 fc94 	bl	800cac8 <prvAddCurrentTaskToDelayedList>
}
 800c1a0:	bf00      	nop
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	20000eec 	.word	0x20000eec

0800c1ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10a      	bne.n	800c1d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	617b      	str	r3, [r7, #20]
}
 800c1d0:	bf00      	nop
 800c1d2:	e7fe      	b.n	800c1d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1d4:	4b0a      	ldr	r3, [pc, #40]	; (800c200 <vTaskPlaceOnEventListRestricted+0x54>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	3318      	adds	r3, #24
 800c1da:	4619      	mov	r1, r3
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f7fe fc42 	bl	800aa66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c1e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c1ee:	6879      	ldr	r1, [r7, #4]
 800c1f0:	68b8      	ldr	r0, [r7, #8]
 800c1f2:	f000 fc69 	bl	800cac8 <prvAddCurrentTaskToDelayedList>
	}
 800c1f6:	bf00      	nop
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20000eec 	.word	0x20000eec

0800c204 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b086      	sub	sp, #24
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d10a      	bne.n	800c230 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	60fb      	str	r3, [r7, #12]
}
 800c22c:	bf00      	nop
 800c22e:	e7fe      	b.n	800c22e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	3318      	adds	r3, #24
 800c234:	4618      	mov	r0, r3
 800c236:	f7fe fc73 	bl	800ab20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c23a:	4b1e      	ldr	r3, [pc, #120]	; (800c2b4 <xTaskRemoveFromEventList+0xb0>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d11d      	bne.n	800c27e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	3304      	adds	r3, #4
 800c246:	4618      	mov	r0, r3
 800c248:	f7fe fc6a 	bl	800ab20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c250:	4b19      	ldr	r3, [pc, #100]	; (800c2b8 <xTaskRemoveFromEventList+0xb4>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	429a      	cmp	r2, r3
 800c256:	d903      	bls.n	800c260 <xTaskRemoveFromEventList+0x5c>
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c25c:	4a16      	ldr	r2, [pc, #88]	; (800c2b8 <xTaskRemoveFromEventList+0xb4>)
 800c25e:	6013      	str	r3, [r2, #0]
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c264:	4613      	mov	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	4413      	add	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4a13      	ldr	r2, [pc, #76]	; (800c2bc <xTaskRemoveFromEventList+0xb8>)
 800c26e:	441a      	add	r2, r3
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	3304      	adds	r3, #4
 800c274:	4619      	mov	r1, r3
 800c276:	4610      	mov	r0, r2
 800c278:	f7fe fbf5 	bl	800aa66 <vListInsertEnd>
 800c27c:	e005      	b.n	800c28a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	3318      	adds	r3, #24
 800c282:	4619      	mov	r1, r3
 800c284:	480e      	ldr	r0, [pc, #56]	; (800c2c0 <xTaskRemoveFromEventList+0xbc>)
 800c286:	f7fe fbee 	bl	800aa66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28e:	4b0d      	ldr	r3, [pc, #52]	; (800c2c4 <xTaskRemoveFromEventList+0xc0>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c294:	429a      	cmp	r2, r3
 800c296:	d905      	bls.n	800c2a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c298:	2301      	movs	r3, #1
 800c29a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c29c:	4b0a      	ldr	r3, [pc, #40]	; (800c2c8 <xTaskRemoveFromEventList+0xc4>)
 800c29e:	2201      	movs	r2, #1
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	e001      	b.n	800c2a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c2a8:	697b      	ldr	r3, [r7, #20]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3718      	adds	r7, #24
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	200013e8 	.word	0x200013e8
 800c2b8:	200013c8 	.word	0x200013c8
 800c2bc:	20000ef0 	.word	0x20000ef0
 800c2c0:	20001380 	.word	0x20001380
 800c2c4:	20000eec 	.word	0x20000eec
 800c2c8:	200013d4 	.word	0x200013d4

0800c2cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c2d4:	4b06      	ldr	r3, [pc, #24]	; (800c2f0 <vTaskInternalSetTimeOutState+0x24>)
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c2dc:	4b05      	ldr	r3, [pc, #20]	; (800c2f4 <vTaskInternalSetTimeOutState+0x28>)
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	605a      	str	r2, [r3, #4]
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr
 800c2f0:	200013d8 	.word	0x200013d8
 800c2f4:	200013c4 	.word	0x200013c4

0800c2f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b088      	sub	sp, #32
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10a      	bne.n	800c31e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30c:	f383 8811 	msr	BASEPRI, r3
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	613b      	str	r3, [r7, #16]
}
 800c31a:	bf00      	nop
 800c31c:	e7fe      	b.n	800c31c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10a      	bne.n	800c33a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	60fb      	str	r3, [r7, #12]
}
 800c336:	bf00      	nop
 800c338:	e7fe      	b.n	800c338 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c33a:	f001 f893 	bl	800d464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c33e:	4b1d      	ldr	r3, [pc, #116]	; (800c3b4 <xTaskCheckForTimeOut+0xbc>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	69ba      	ldr	r2, [r7, #24]
 800c34a:	1ad3      	subs	r3, r2, r3
 800c34c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c356:	d102      	bne.n	800c35e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c358:	2300      	movs	r3, #0
 800c35a:	61fb      	str	r3, [r7, #28]
 800c35c:	e023      	b.n	800c3a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	4b15      	ldr	r3, [pc, #84]	; (800c3b8 <xTaskCheckForTimeOut+0xc0>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	429a      	cmp	r2, r3
 800c368:	d007      	beq.n	800c37a <xTaskCheckForTimeOut+0x82>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	69ba      	ldr	r2, [r7, #24]
 800c370:	429a      	cmp	r2, r3
 800c372:	d302      	bcc.n	800c37a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c374:	2301      	movs	r3, #1
 800c376:	61fb      	str	r3, [r7, #28]
 800c378:	e015      	b.n	800c3a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	429a      	cmp	r2, r3
 800c382:	d20b      	bcs.n	800c39c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	1ad2      	subs	r2, r2, r3
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7ff ff9b 	bl	800c2cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c396:	2300      	movs	r3, #0
 800c398:	61fb      	str	r3, [r7, #28]
 800c39a:	e004      	b.n	800c3a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c3a6:	f001 f88d 	bl	800d4c4 <vPortExitCritical>

	return xReturn;
 800c3aa:	69fb      	ldr	r3, [r7, #28]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3720      	adds	r7, #32
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	200013c4 	.word	0x200013c4
 800c3b8:	200013d8 	.word	0x200013d8

0800c3bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c3bc:	b480      	push	{r7}
 800c3be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c3c0:	4b03      	ldr	r3, [pc, #12]	; (800c3d0 <vTaskMissedYield+0x14>)
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	601a      	str	r2, [r3, #0]
}
 800c3c6:	bf00      	nop
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr
 800c3d0:	200013d4 	.word	0x200013d4

0800c3d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c3dc:	f000 f852 	bl	800c484 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c3e0:	4b06      	ldr	r3, [pc, #24]	; (800c3fc <prvIdleTask+0x28>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d9f9      	bls.n	800c3dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c3e8:	4b05      	ldr	r3, [pc, #20]	; (800c400 <prvIdleTask+0x2c>)
 800c3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ee:	601a      	str	r2, [r3, #0]
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c3f8:	e7f0      	b.n	800c3dc <prvIdleTask+0x8>
 800c3fa:	bf00      	nop
 800c3fc:	20000ef0 	.word	0x20000ef0
 800c400:	e000ed04 	.word	0xe000ed04

0800c404 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c40a:	2300      	movs	r3, #0
 800c40c:	607b      	str	r3, [r7, #4]
 800c40e:	e00c      	b.n	800c42a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	4613      	mov	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4413      	add	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4a12      	ldr	r2, [pc, #72]	; (800c464 <prvInitialiseTaskLists+0x60>)
 800c41c:	4413      	add	r3, r2
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fe faf4 	bl	800aa0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	3301      	adds	r3, #1
 800c428:	607b      	str	r3, [r7, #4]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b37      	cmp	r3, #55	; 0x37
 800c42e:	d9ef      	bls.n	800c410 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c430:	480d      	ldr	r0, [pc, #52]	; (800c468 <prvInitialiseTaskLists+0x64>)
 800c432:	f7fe faeb 	bl	800aa0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c436:	480d      	ldr	r0, [pc, #52]	; (800c46c <prvInitialiseTaskLists+0x68>)
 800c438:	f7fe fae8 	bl	800aa0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c43c:	480c      	ldr	r0, [pc, #48]	; (800c470 <prvInitialiseTaskLists+0x6c>)
 800c43e:	f7fe fae5 	bl	800aa0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c442:	480c      	ldr	r0, [pc, #48]	; (800c474 <prvInitialiseTaskLists+0x70>)
 800c444:	f7fe fae2 	bl	800aa0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c448:	480b      	ldr	r0, [pc, #44]	; (800c478 <prvInitialiseTaskLists+0x74>)
 800c44a:	f7fe fadf 	bl	800aa0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c44e:	4b0b      	ldr	r3, [pc, #44]	; (800c47c <prvInitialiseTaskLists+0x78>)
 800c450:	4a05      	ldr	r2, [pc, #20]	; (800c468 <prvInitialiseTaskLists+0x64>)
 800c452:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c454:	4b0a      	ldr	r3, [pc, #40]	; (800c480 <prvInitialiseTaskLists+0x7c>)
 800c456:	4a05      	ldr	r2, [pc, #20]	; (800c46c <prvInitialiseTaskLists+0x68>)
 800c458:	601a      	str	r2, [r3, #0]
}
 800c45a:	bf00      	nop
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20000ef0 	.word	0x20000ef0
 800c468:	20001350 	.word	0x20001350
 800c46c:	20001364 	.word	0x20001364
 800c470:	20001380 	.word	0x20001380
 800c474:	20001394 	.word	0x20001394
 800c478:	200013ac 	.word	0x200013ac
 800c47c:	20001378 	.word	0x20001378
 800c480:	2000137c 	.word	0x2000137c

0800c484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c48a:	e019      	b.n	800c4c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c48c:	f000 ffea 	bl	800d464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c490:	4b10      	ldr	r3, [pc, #64]	; (800c4d4 <prvCheckTasksWaitingTermination+0x50>)
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	3304      	adds	r3, #4
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fe fb3f 	bl	800ab20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c4a2:	4b0d      	ldr	r3, [pc, #52]	; (800c4d8 <prvCheckTasksWaitingTermination+0x54>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	4a0b      	ldr	r2, [pc, #44]	; (800c4d8 <prvCheckTasksWaitingTermination+0x54>)
 800c4aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c4ac:	4b0b      	ldr	r3, [pc, #44]	; (800c4dc <prvCheckTasksWaitingTermination+0x58>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	4a0a      	ldr	r2, [pc, #40]	; (800c4dc <prvCheckTasksWaitingTermination+0x58>)
 800c4b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c4b6:	f001 f805 	bl	800d4c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f8e4 	bl	800c688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4c0:	4b06      	ldr	r3, [pc, #24]	; (800c4dc <prvCheckTasksWaitingTermination+0x58>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e1      	bne.n	800c48c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c4c8:	bf00      	nop
 800c4ca:	bf00      	nop
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20001394 	.word	0x20001394
 800c4d8:	200013c0 	.word	0x200013c0
 800c4dc:	200013a8 	.word	0x200013a8

0800c4e0 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d102      	bne.n	800c4fa <vTaskGetInfo+0x1a>
 800c4f4:	4b2c      	ldr	r3, [pc, #176]	; (800c5a8 <vTaskGetInfo+0xc8>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	e000      	b.n	800c4fc <vTaskGetInfo+0x1c>
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800c536:	78fb      	ldrb	r3, [r7, #3]
 800c538:	2b05      	cmp	r3, #5
 800c53a:	d01a      	beq.n	800c572 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800c53c:	4b1a      	ldr	r3, [pc, #104]	; (800c5a8 <vTaskGetInfo+0xc8>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	697a      	ldr	r2, [r7, #20]
 800c542:	429a      	cmp	r2, r3
 800c544:	d103      	bne.n	800c54e <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2200      	movs	r2, #0
 800c54a:	731a      	strb	r2, [r3, #12]
 800c54c:	e018      	b.n	800c580 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	78fa      	ldrb	r2, [r7, #3]
 800c552:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800c554:	78fb      	ldrb	r3, [r7, #3]
 800c556:	2b03      	cmp	r3, #3
 800c558:	d112      	bne.n	800c580 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800c55a:	f7ff fb7b 	bl	800bc54 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	2202      	movs	r2, #2
 800c56a:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800c56c:	f7ff fb80 	bl	800bc70 <xTaskResumeAll>
 800c570:	e006      	b.n	800c580 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800c572:	6978      	ldr	r0, [r7, #20]
 800c574:	f7ff fa94 	bl	800baa0 <eTaskGetState>
 800c578:	4603      	mov	r3, r0
 800c57a:	461a      	mov	r2, r3
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d009      	beq.n	800c59a <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 f860 	bl	800c650 <prvTaskCheckFreeStackSpace>
 800c590:	4603      	mov	r3, r0
 800c592:	461a      	mov	r2, r3
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800c598:	e002      	b.n	800c5a0 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	2200      	movs	r2, #0
 800c59e:	841a      	strh	r2, [r3, #32]
	}
 800c5a0:	bf00      	nop
 800c5a2:	3718      	adds	r7, #24
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	20000eec 	.word	0x20000eec

0800c5ac <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b08a      	sub	sp, #40	; 0x28
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d03f      	beq.n	800c646 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	623b      	str	r3, [r7, #32]
 800c5ca:	6a3b      	ldr	r3, [r7, #32]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	6a3b      	ldr	r3, [r7, #32]
 800c5d2:	605a      	str	r2, [r3, #4]
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	685a      	ldr	r2, [r3, #4]
 800c5d8:	6a3b      	ldr	r3, [r7, #32]
 800c5da:	3308      	adds	r3, #8
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d104      	bne.n	800c5ea <prvListTasksWithinSingleList+0x3e>
 800c5e0:	6a3b      	ldr	r3, [r7, #32]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	685a      	ldr	r2, [r3, #4]
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	605a      	str	r2, [r3, #4]
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	61bb      	str	r3, [r7, #24]
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	605a      	str	r2, [r3, #4]
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	685a      	ldr	r2, [r3, #4]
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	3308      	adds	r3, #8
 800c608:	429a      	cmp	r2, r3
 800c60a:	d104      	bne.n	800c616 <prvListTasksWithinSingleList+0x6a>
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	685a      	ldr	r2, [r3, #4]
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	605a      	str	r2, [r3, #4]
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800c61e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c620:	4613      	mov	r3, r2
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	4413      	add	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	461a      	mov	r2, r3
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	1899      	adds	r1, r3, r2
 800c62e:	79fb      	ldrb	r3, [r7, #7]
 800c630:	2201      	movs	r2, #1
 800c632:	6978      	ldr	r0, [r7, #20]
 800c634:	f7ff ff54 	bl	800c4e0 <vTaskGetInfo>
				uxTask++;
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	3301      	adds	r3, #1
 800c63c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	429a      	cmp	r2, r3
 800c644:	d1d5      	bne.n	800c5f2 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800c646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c648:	4618      	mov	r0, r3
 800c64a:	3728      	adds	r7, #40	; 0x28
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c658:	2300      	movs	r3, #0
 800c65a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c65c:	e005      	b.n	800c66a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	3301      	adds	r3, #1
 800c662:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	3301      	adds	r3, #1
 800c668:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	2ba5      	cmp	r3, #165	; 0xa5
 800c670:	d0f5      	beq.n	800c65e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	089b      	lsrs	r3, r3, #2
 800c676:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	b29b      	uxth	r3, r3
	}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3714      	adds	r7, #20
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	3358      	adds	r3, #88	; 0x58
 800c694:	4618      	mov	r0, r3
 800c696:	f002 fdab 	bl	800f1f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d108      	bne.n	800c6b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f001 f8c9 	bl	800d840 <vPortFree>
				vPortFree( pxTCB );
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f001 f8c6 	bl	800d840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c6b4:	e018      	b.n	800c6e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d103      	bne.n	800c6c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f001 f8bd 	bl	800d840 <vPortFree>
	}
 800c6c6:	e00f      	b.n	800c6e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d00a      	beq.n	800c6e8 <prvDeleteTCB+0x60>
	__asm volatile
 800c6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	60fb      	str	r3, [r7, #12]
}
 800c6e4:	bf00      	nop
 800c6e6:	e7fe      	b.n	800c6e6 <prvDeleteTCB+0x5e>
	}
 800c6e8:	bf00      	nop
 800c6ea:	3710      	adds	r7, #16
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6f6:	4b0c      	ldr	r3, [pc, #48]	; (800c728 <prvResetNextTaskUnblockTime+0x38>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d104      	bne.n	800c70a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c700:	4b0a      	ldr	r3, [pc, #40]	; (800c72c <prvResetNextTaskUnblockTime+0x3c>)
 800c702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c706:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c708:	e008      	b.n	800c71c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c70a:	4b07      	ldr	r3, [pc, #28]	; (800c728 <prvResetNextTaskUnblockTime+0x38>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	4a04      	ldr	r2, [pc, #16]	; (800c72c <prvResetNextTaskUnblockTime+0x3c>)
 800c71a:	6013      	str	r3, [r2, #0]
}
 800c71c:	bf00      	nop
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr
 800c728:	20001378 	.word	0x20001378
 800c72c:	200013e0 	.word	0x200013e0

0800c730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c736:	4b0b      	ldr	r3, [pc, #44]	; (800c764 <xTaskGetSchedulerState+0x34>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d102      	bne.n	800c744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c73e:	2301      	movs	r3, #1
 800c740:	607b      	str	r3, [r7, #4]
 800c742:	e008      	b.n	800c756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c744:	4b08      	ldr	r3, [pc, #32]	; (800c768 <xTaskGetSchedulerState+0x38>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d102      	bne.n	800c752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c74c:	2302      	movs	r3, #2
 800c74e:	607b      	str	r3, [r7, #4]
 800c750:	e001      	b.n	800c756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c752:	2300      	movs	r3, #0
 800c754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c756:	687b      	ldr	r3, [r7, #4]
	}
 800c758:	4618      	mov	r0, r3
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr
 800c764:	200013cc 	.word	0x200013cc
 800c768:	200013e8 	.word	0x200013e8

0800c76c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b086      	sub	sp, #24
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c778:	2300      	movs	r3, #0
 800c77a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d056      	beq.n	800c830 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c782:	4b2e      	ldr	r3, [pc, #184]	; (800c83c <xTaskPriorityDisinherit+0xd0>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d00a      	beq.n	800c7a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	60fb      	str	r3, [r7, #12]
}
 800c79e:	bf00      	nop
 800c7a0:	e7fe      	b.n	800c7a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10a      	bne.n	800c7c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	60bb      	str	r3, [r7, #8]
}
 800c7bc:	bf00      	nop
 800c7be:	e7fe      	b.n	800c7be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7c4:	1e5a      	subs	r2, r3, #1
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d02c      	beq.n	800c830 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d128      	bne.n	800c830 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fe f99c 	bl	800ab20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c800:	4b0f      	ldr	r3, [pc, #60]	; (800c840 <xTaskPriorityDisinherit+0xd4>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	429a      	cmp	r2, r3
 800c806:	d903      	bls.n	800c810 <xTaskPriorityDisinherit+0xa4>
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80c:	4a0c      	ldr	r2, [pc, #48]	; (800c840 <xTaskPriorityDisinherit+0xd4>)
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c814:	4613      	mov	r3, r2
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	4413      	add	r3, r2
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	4a09      	ldr	r2, [pc, #36]	; (800c844 <xTaskPriorityDisinherit+0xd8>)
 800c81e:	441a      	add	r2, r3
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	3304      	adds	r3, #4
 800c824:	4619      	mov	r1, r3
 800c826:	4610      	mov	r0, r2
 800c828:	f7fe f91d 	bl	800aa66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c82c:	2301      	movs	r3, #1
 800c82e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c830:	697b      	ldr	r3, [r7, #20]
	}
 800c832:	4618      	mov	r0, r3
 800c834:	3718      	adds	r7, #24
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	20000eec 	.word	0x20000eec
 800c840:	200013c8 	.word	0x200013c8
 800c844:	20000ef0 	.word	0x20000ef0

0800c848 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f002 fda9 	bl	800f3ac <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7f3 fcb8 	bl	80001d0 <strlen>
 800c860:	60f8      	str	r0, [r7, #12]
 800c862:	e007      	b.n	800c874 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	4413      	add	r3, r2
 800c86a:	2220      	movs	r2, #32
 800c86c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3301      	adds	r3, #1
 800c872:	60fb      	str	r3, [r7, #12]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2b0e      	cmp	r3, #14
 800c878:	d9f4      	bls.n	800c864 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	4413      	add	r3, r2
 800c880:	2200      	movs	r2, #0
 800c882:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	4413      	add	r3, r2
	}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
	...

0800c894 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800c894:	b590      	push	{r4, r7, lr}
 800c896:	b089      	sub	sp, #36	; 0x24
 800c898:	af02      	add	r7, sp, #8
 800c89a:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800c8a2:	4b45      	ldr	r3, [pc, #276]	; (800c9b8 <vTaskList+0x124>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800c8a8:	4b43      	ldr	r3, [pc, #268]	; (800c9b8 <vTaskList+0x124>)
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	00db      	lsls	r3, r3, #3
 800c8b0:	4413      	add	r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 fef7 	bl	800d6a8 <pvPortMalloc>
 800c8ba:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d076      	beq.n	800c9b0 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	68f9      	ldr	r1, [r7, #12]
 800c8c6:	68b8      	ldr	r0, [r7, #8]
 800c8c8:	f7ff fa80 	bl	800bdcc <uxTaskGetSystemState>
 800c8cc:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	617b      	str	r3, [r7, #20]
 800c8d2:	e066      	b.n	800c9a2 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800c8d4:	697a      	ldr	r2, [r7, #20]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	00db      	lsls	r3, r3, #3
 800c8da:	4413      	add	r3, r2
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	461a      	mov	r2, r3
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	7b1b      	ldrb	r3, [r3, #12]
 800c8e6:	2b04      	cmp	r3, #4
 800c8e8:	d81b      	bhi.n	800c922 <vTaskList+0x8e>
 800c8ea:	a201      	add	r2, pc, #4	; (adr r2, 800c8f0 <vTaskList+0x5c>)
 800c8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f0:	0800c905 	.word	0x0800c905
 800c8f4:	0800c90b 	.word	0x0800c90b
 800c8f8:	0800c911 	.word	0x0800c911
 800c8fc:	0800c917 	.word	0x0800c917
 800c900:	0800c91d 	.word	0x0800c91d
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800c904:	2358      	movs	r3, #88	; 0x58
 800c906:	74fb      	strb	r3, [r7, #19]
										break;
 800c908:	e00e      	b.n	800c928 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800c90a:	2352      	movs	r3, #82	; 0x52
 800c90c:	74fb      	strb	r3, [r7, #19]
										break;
 800c90e:	e00b      	b.n	800c928 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800c910:	2342      	movs	r3, #66	; 0x42
 800c912:	74fb      	strb	r3, [r7, #19]
										break;
 800c914:	e008      	b.n	800c928 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800c916:	2353      	movs	r3, #83	; 0x53
 800c918:	74fb      	strb	r3, [r7, #19]
										break;
 800c91a:	e005      	b.n	800c928 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800c91c:	2344      	movs	r3, #68	; 0x44
 800c91e:	74fb      	strb	r3, [r7, #19]
										break;
 800c920:	e002      	b.n	800c928 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800c922:	2300      	movs	r3, #0
 800c924:	74fb      	strb	r3, [r7, #19]
										break;
 800c926:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800c928:	697a      	ldr	r2, [r7, #20]
 800c92a:	4613      	mov	r3, r2
 800c92c:	00db      	lsls	r3, r3, #3
 800c92e:	4413      	add	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	461a      	mov	r2, r3
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	4413      	add	r3, r2
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	4619      	mov	r1, r3
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7ff ff83 	bl	800c848 <prvWriteNameToBuffer>
 800c942:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c944:	7cf9      	ldrb	r1, [r7, #19]
 800c946:	697a      	ldr	r2, [r7, #20]
 800c948:	4613      	mov	r3, r2
 800c94a:	00db      	lsls	r3, r3, #3
 800c94c:	4413      	add	r3, r2
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	461a      	mov	r2, r3
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	4413      	add	r3, r2
 800c956:	6918      	ldr	r0, [r3, #16]
 800c958:	697a      	ldr	r2, [r7, #20]
 800c95a:	4613      	mov	r3, r2
 800c95c:	00db      	lsls	r3, r3, #3
 800c95e:	4413      	add	r3, r2
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	461a      	mov	r2, r3
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	4413      	add	r3, r2
 800c968:	8c1b      	ldrh	r3, [r3, #32]
 800c96a:	461c      	mov	r4, r3
 800c96c:	697a      	ldr	r2, [r7, #20]
 800c96e:	4613      	mov	r3, r2
 800c970:	00db      	lsls	r3, r3, #3
 800c972:	4413      	add	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	461a      	mov	r2, r3
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	4413      	add	r3, r2
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	9400      	str	r4, [sp, #0]
 800c982:	4603      	mov	r3, r0
 800c984:	460a      	mov	r2, r1
 800c986:	490d      	ldr	r1, [pc, #52]	; (800c9bc <vTaskList+0x128>)
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f002 fc9d 	bl	800f2c8 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7f3 fc1e 	bl	80001d0 <strlen>
 800c994:	4602      	mov	r2, r0
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4413      	add	r3, r2
 800c99a:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	617b      	str	r3, [r7, #20]
 800c9a2:	697a      	ldr	r2, [r7, #20]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d394      	bcc.n	800c8d4 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800c9aa:	68b8      	ldr	r0, [r7, #8]
 800c9ac:	f000 ff48 	bl	800d840 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9b0:	bf00      	nop
 800c9b2:	371c      	adds	r7, #28
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd90      	pop	{r4, r7, pc}
 800c9b8:	200013c0 	.word	0x200013c0
 800c9bc:	080115b4 	.word	0x080115b4

0800c9c0 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b088      	sub	sp, #32
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800c9ce:	4b3a      	ldr	r3, [pc, #232]	; (800cab8 <vTaskGetRunTimeStats+0xf8>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800c9d4:	4b38      	ldr	r3, [pc, #224]	; (800cab8 <vTaskGetRunTimeStats+0xf8>)
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	4613      	mov	r3, r2
 800c9da:	00db      	lsls	r3, r3, #3
 800c9dc:	4413      	add	r3, r2
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f000 fe61 	bl	800d6a8 <pvPortMalloc>
 800c9e6:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d05f      	beq.n	800caae <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800c9ee:	f107 030c 	add.w	r3, r7, #12
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	69b9      	ldr	r1, [r7, #24]
 800c9f6:	6978      	ldr	r0, [r7, #20]
 800c9f8:	f7ff f9e8 	bl	800bdcc <uxTaskGetSystemState>
 800c9fc:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	4a2e      	ldr	r2, [pc, #184]	; (800cabc <vTaskGetRunTimeStats+0xfc>)
 800ca02:	fba2 2303 	umull	r2, r3, r2, r3
 800ca06:	095b      	lsrs	r3, r3, #5
 800ca08:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d04b      	beq.n	800caa8 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ca10:	2300      	movs	r3, #0
 800ca12:	61fb      	str	r3, [r7, #28]
 800ca14:	e044      	b.n	800caa0 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ca16:	69fa      	ldr	r2, [r7, #28]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	00db      	lsls	r3, r3, #3
 800ca1c:	4413      	add	r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	461a      	mov	r2, r3
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	4413      	add	r3, r2
 800ca26:	699a      	ldr	r2, [r3, #24]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca2e:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ca30:	69fa      	ldr	r2, [r7, #28]
 800ca32:	4613      	mov	r3, r2
 800ca34:	00db      	lsls	r3, r3, #3
 800ca36:	4413      	add	r3, r2
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	4413      	add	r3, r2
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	4619      	mov	r1, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7ff feff 	bl	800c848 <prvWriteNameToBuffer>
 800ca4a:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00e      	beq.n	800ca70 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ca52:	69fa      	ldr	r2, [r7, #28]
 800ca54:	4613      	mov	r3, r2
 800ca56:	00db      	lsls	r3, r3, #3
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	4413      	add	r3, r2
 800ca62:	699a      	ldr	r2, [r3, #24]
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	4916      	ldr	r1, [pc, #88]	; (800cac0 <vTaskGetRunTimeStats+0x100>)
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f002 fc2d 	bl	800f2c8 <siprintf>
 800ca6e:	e00d      	b.n	800ca8c <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ca70:	69fa      	ldr	r2, [r7, #28]
 800ca72:	4613      	mov	r3, r2
 800ca74:	00db      	lsls	r3, r3, #3
 800ca76:	4413      	add	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	4413      	add	r3, r2
 800ca80:	699b      	ldr	r3, [r3, #24]
 800ca82:	461a      	mov	r2, r3
 800ca84:	490f      	ldr	r1, [pc, #60]	; (800cac4 <vTaskGetRunTimeStats+0x104>)
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f002 fc1e 	bl	800f2c8 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f7f3 fb9f 	bl	80001d0 <strlen>
 800ca92:	4602      	mov	r2, r0
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4413      	add	r3, r2
 800ca98:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	61fb      	str	r3, [r7, #28]
 800caa0:	69fa      	ldr	r2, [r7, #28]
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d3b6      	bcc.n	800ca16 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800caa8:	6978      	ldr	r0, [r7, #20]
 800caaa:	f000 fec9 	bl	800d840 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800caae:	bf00      	nop
 800cab0:	3720      	adds	r7, #32
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	200013c0 	.word	0x200013c0
 800cabc:	51eb851f 	.word	0x51eb851f
 800cac0:	080115c4 	.word	0x080115c4
 800cac4:	080115d0 	.word	0x080115d0

0800cac8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cad2:	4b21      	ldr	r3, [pc, #132]	; (800cb58 <prvAddCurrentTaskToDelayedList+0x90>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cad8:	4b20      	ldr	r3, [pc, #128]	; (800cb5c <prvAddCurrentTaskToDelayedList+0x94>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	3304      	adds	r3, #4
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe f81e 	bl	800ab20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caea:	d10a      	bne.n	800cb02 <prvAddCurrentTaskToDelayedList+0x3a>
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d007      	beq.n	800cb02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800caf2:	4b1a      	ldr	r3, [pc, #104]	; (800cb5c <prvAddCurrentTaskToDelayedList+0x94>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	3304      	adds	r3, #4
 800caf8:	4619      	mov	r1, r3
 800cafa:	4819      	ldr	r0, [pc, #100]	; (800cb60 <prvAddCurrentTaskToDelayedList+0x98>)
 800cafc:	f7fd ffb3 	bl	800aa66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb00:	e026      	b.n	800cb50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4413      	add	r3, r2
 800cb08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb0a:	4b14      	ldr	r3, [pc, #80]	; (800cb5c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb12:	68ba      	ldr	r2, [r7, #8]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d209      	bcs.n	800cb2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb1a:	4b12      	ldr	r3, [pc, #72]	; (800cb64 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	4b0f      	ldr	r3, [pc, #60]	; (800cb5c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	3304      	adds	r3, #4
 800cb24:	4619      	mov	r1, r3
 800cb26:	4610      	mov	r0, r2
 800cb28:	f7fd ffc1 	bl	800aaae <vListInsert>
}
 800cb2c:	e010      	b.n	800cb50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb2e:	4b0e      	ldr	r3, [pc, #56]	; (800cb68 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	4b0a      	ldr	r3, [pc, #40]	; (800cb5c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	3304      	adds	r3, #4
 800cb38:	4619      	mov	r1, r3
 800cb3a:	4610      	mov	r0, r2
 800cb3c:	f7fd ffb7 	bl	800aaae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cb40:	4b0a      	ldr	r3, [pc, #40]	; (800cb6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d202      	bcs.n	800cb50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cb4a:	4a08      	ldr	r2, [pc, #32]	; (800cb6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	6013      	str	r3, [r2, #0]
}
 800cb50:	bf00      	nop
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	200013c4 	.word	0x200013c4
 800cb5c:	20000eec 	.word	0x20000eec
 800cb60:	200013ac 	.word	0x200013ac
 800cb64:	2000137c 	.word	0x2000137c
 800cb68:	20001378 	.word	0x20001378
 800cb6c:	200013e0 	.word	0x200013e0

0800cb70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b08a      	sub	sp, #40	; 0x28
 800cb74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cb76:	2300      	movs	r3, #0
 800cb78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cb7a:	f000 fb07 	bl	800d18c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cb7e:	4b1c      	ldr	r3, [pc, #112]	; (800cbf0 <xTimerCreateTimerTask+0x80>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d021      	beq.n	800cbca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cb86:	2300      	movs	r3, #0
 800cb88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cb8e:	1d3a      	adds	r2, r7, #4
 800cb90:	f107 0108 	add.w	r1, r7, #8
 800cb94:	f107 030c 	add.w	r3, r7, #12
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fd ff1d 	bl	800a9d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cb9e:	6879      	ldr	r1, [r7, #4]
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	9202      	str	r2, [sp, #8]
 800cba6:	9301      	str	r3, [sp, #4]
 800cba8:	2302      	movs	r3, #2
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	2300      	movs	r3, #0
 800cbae:	460a      	mov	r2, r1
 800cbb0:	4910      	ldr	r1, [pc, #64]	; (800cbf4 <xTimerCreateTimerTask+0x84>)
 800cbb2:	4811      	ldr	r0, [pc, #68]	; (800cbf8 <xTimerCreateTimerTask+0x88>)
 800cbb4:	f7fe fd84 	bl	800b6c0 <xTaskCreateStatic>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	4a10      	ldr	r2, [pc, #64]	; (800cbfc <xTimerCreateTimerTask+0x8c>)
 800cbbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cbbe:	4b0f      	ldr	r3, [pc, #60]	; (800cbfc <xTimerCreateTimerTask+0x8c>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d001      	beq.n	800cbca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10a      	bne.n	800cbe6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	613b      	str	r3, [r7, #16]
}
 800cbe2:	bf00      	nop
 800cbe4:	e7fe      	b.n	800cbe4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cbe6:	697b      	ldr	r3, [r7, #20]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3718      	adds	r7, #24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	20001424 	.word	0x20001424
 800cbf4:	080115dc 	.word	0x080115dc
 800cbf8:	0800cd35 	.word	0x0800cd35
 800cbfc:	20001428 	.word	0x20001428

0800cc00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b08a      	sub	sp, #40	; 0x28
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
 800cc0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10a      	bne.n	800cc2e <xTimerGenericCommand+0x2e>
	__asm volatile
 800cc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1c:	f383 8811 	msr	BASEPRI, r3
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	623b      	str	r3, [r7, #32]
}
 800cc2a:	bf00      	nop
 800cc2c:	e7fe      	b.n	800cc2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cc2e:	4b1a      	ldr	r3, [pc, #104]	; (800cc98 <xTimerGenericCommand+0x98>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d02a      	beq.n	800cc8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	2b05      	cmp	r3, #5
 800cc46:	dc18      	bgt.n	800cc7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cc48:	f7ff fd72 	bl	800c730 <xTaskGetSchedulerState>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b02      	cmp	r3, #2
 800cc50:	d109      	bne.n	800cc66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cc52:	4b11      	ldr	r3, [pc, #68]	; (800cc98 <xTimerGenericCommand+0x98>)
 800cc54:	6818      	ldr	r0, [r3, #0]
 800cc56:	f107 0110 	add.w	r1, r7, #16
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc5e:	f7fe f8c7 	bl	800adf0 <xQueueGenericSend>
 800cc62:	6278      	str	r0, [r7, #36]	; 0x24
 800cc64:	e012      	b.n	800cc8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cc66:	4b0c      	ldr	r3, [pc, #48]	; (800cc98 <xTimerGenericCommand+0x98>)
 800cc68:	6818      	ldr	r0, [r3, #0]
 800cc6a:	f107 0110 	add.w	r1, r7, #16
 800cc6e:	2300      	movs	r3, #0
 800cc70:	2200      	movs	r2, #0
 800cc72:	f7fe f8bd 	bl	800adf0 <xQueueGenericSend>
 800cc76:	6278      	str	r0, [r7, #36]	; 0x24
 800cc78:	e008      	b.n	800cc8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cc7a:	4b07      	ldr	r3, [pc, #28]	; (800cc98 <xTimerGenericCommand+0x98>)
 800cc7c:	6818      	ldr	r0, [r3, #0]
 800cc7e:	f107 0110 	add.w	r1, r7, #16
 800cc82:	2300      	movs	r3, #0
 800cc84:	683a      	ldr	r2, [r7, #0]
 800cc86:	f7fe f9b1 	bl	800afec <xQueueGenericSendFromISR>
 800cc8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3728      	adds	r7, #40	; 0x28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	20001424 	.word	0x20001424

0800cc9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b088      	sub	sp, #32
 800cca0:	af02      	add	r7, sp, #8
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cca6:	4b22      	ldr	r3, [pc, #136]	; (800cd30 <prvProcessExpiredTimer+0x94>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	3304      	adds	r3, #4
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fd ff33 	bl	800ab20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccc0:	f003 0304 	and.w	r3, r3, #4
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d022      	beq.n	800cd0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	699a      	ldr	r2, [r3, #24]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	18d1      	adds	r1, r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	6978      	ldr	r0, [r7, #20]
 800ccd6:	f000 f8d1 	bl	800ce7c <prvInsertTimerInActiveList>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d01f      	beq.n	800cd20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cce0:	2300      	movs	r3, #0
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	2300      	movs	r3, #0
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	2100      	movs	r1, #0
 800ccea:	6978      	ldr	r0, [r7, #20]
 800ccec:	f7ff ff88 	bl	800cc00 <xTimerGenericCommand>
 800ccf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d113      	bne.n	800cd20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ccf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfc:	f383 8811 	msr	BASEPRI, r3
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	f3bf 8f4f 	dsb	sy
 800cd08:	60fb      	str	r3, [r7, #12]
}
 800cd0a:	bf00      	nop
 800cd0c:	e7fe      	b.n	800cd0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd14:	f023 0301 	bic.w	r3, r3, #1
 800cd18:	b2da      	uxtb	r2, r3
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	6a1b      	ldr	r3, [r3, #32]
 800cd24:	6978      	ldr	r0, [r7, #20]
 800cd26:	4798      	blx	r3
}
 800cd28:	bf00      	nop
 800cd2a:	3718      	adds	r7, #24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	2000141c 	.word	0x2000141c

0800cd34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd3c:	f107 0308 	add.w	r3, r7, #8
 800cd40:	4618      	mov	r0, r3
 800cd42:	f000 f857 	bl	800cdf4 <prvGetNextExpireTime>
 800cd46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	f000 f803 	bl	800cd58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cd52:	f000 f8d5 	bl	800cf00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd56:	e7f1      	b.n	800cd3c <prvTimerTask+0x8>

0800cd58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cd62:	f7fe ff77 	bl	800bc54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd66:	f107 0308 	add.w	r3, r7, #8
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f000 f866 	bl	800ce3c <prvSampleTimeNow>
 800cd70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d130      	bne.n	800cdda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d10a      	bne.n	800cd94 <prvProcessTimerOrBlockTask+0x3c>
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d806      	bhi.n	800cd94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cd86:	f7fe ff73 	bl	800bc70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cd8a:	68f9      	ldr	r1, [r7, #12]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7ff ff85 	bl	800cc9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd92:	e024      	b.n	800cdde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d008      	beq.n	800cdac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd9a:	4b13      	ldr	r3, [pc, #76]	; (800cde8 <prvProcessTimerOrBlockTask+0x90>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <prvProcessTimerOrBlockTask+0x50>
 800cda4:	2301      	movs	r3, #1
 800cda6:	e000      	b.n	800cdaa <prvProcessTimerOrBlockTask+0x52>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cdac:	4b0f      	ldr	r3, [pc, #60]	; (800cdec <prvProcessTimerOrBlockTask+0x94>)
 800cdae:	6818      	ldr	r0, [r3, #0]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	683a      	ldr	r2, [r7, #0]
 800cdb8:	4619      	mov	r1, r3
 800cdba:	f7fe fc4d 	bl	800b658 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cdbe:	f7fe ff57 	bl	800bc70 <xTaskResumeAll>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d10a      	bne.n	800cdde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cdc8:	4b09      	ldr	r3, [pc, #36]	; (800cdf0 <prvProcessTimerOrBlockTask+0x98>)
 800cdca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdce:	601a      	str	r2, [r3, #0]
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	f3bf 8f6f 	isb	sy
}
 800cdd8:	e001      	b.n	800cdde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cdda:	f7fe ff49 	bl	800bc70 <xTaskResumeAll>
}
 800cdde:	bf00      	nop
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	20001420 	.word	0x20001420
 800cdec:	20001424 	.word	0x20001424
 800cdf0:	e000ed04 	.word	0xe000ed04

0800cdf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b085      	sub	sp, #20
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cdfc:	4b0e      	ldr	r3, [pc, #56]	; (800ce38 <prvGetNextExpireTime+0x44>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d101      	bne.n	800ce0a <prvGetNextExpireTime+0x16>
 800ce06:	2201      	movs	r2, #1
 800ce08:	e000      	b.n	800ce0c <prvGetNextExpireTime+0x18>
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d105      	bne.n	800ce24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce18:	4b07      	ldr	r3, [pc, #28]	; (800ce38 <prvGetNextExpireTime+0x44>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	e001      	b.n	800ce28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce24:	2300      	movs	r3, #0
 800ce26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce28:	68fb      	ldr	r3, [r7, #12]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3714      	adds	r7, #20
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	2000141c 	.word	0x2000141c

0800ce3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ce44:	f7fe ffb2 	bl	800bdac <xTaskGetTickCount>
 800ce48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ce4a:	4b0b      	ldr	r3, [pc, #44]	; (800ce78 <prvSampleTimeNow+0x3c>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d205      	bcs.n	800ce60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ce54:	f000 f936 	bl	800d0c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	e002      	b.n	800ce66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ce66:	4a04      	ldr	r2, [pc, #16]	; (800ce78 <prvSampleTimeNow+0x3c>)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	2000142c 	.word	0x2000142c

0800ce7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
 800ce88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d812      	bhi.n	800cec8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	1ad2      	subs	r2, r2, r3
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	699b      	ldr	r3, [r3, #24]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d302      	bcc.n	800ceb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	617b      	str	r3, [r7, #20]
 800ceb4:	e01b      	b.n	800ceee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ceb6:	4b10      	ldr	r3, [pc, #64]	; (800cef8 <prvInsertTimerInActiveList+0x7c>)
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	3304      	adds	r3, #4
 800cebe:	4619      	mov	r1, r3
 800cec0:	4610      	mov	r0, r2
 800cec2:	f7fd fdf4 	bl	800aaae <vListInsert>
 800cec6:	e012      	b.n	800ceee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d206      	bcs.n	800cede <prvInsertTimerInActiveList+0x62>
 800ced0:	68ba      	ldr	r2, [r7, #8]
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d302      	bcc.n	800cede <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ced8:	2301      	movs	r3, #1
 800ceda:	617b      	str	r3, [r7, #20]
 800cedc:	e007      	b.n	800ceee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cede:	4b07      	ldr	r3, [pc, #28]	; (800cefc <prvInsertTimerInActiveList+0x80>)
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	3304      	adds	r3, #4
 800cee6:	4619      	mov	r1, r3
 800cee8:	4610      	mov	r0, r2
 800ceea:	f7fd fde0 	bl	800aaae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ceee:	697b      	ldr	r3, [r7, #20]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3718      	adds	r7, #24
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	20001420 	.word	0x20001420
 800cefc:	2000141c 	.word	0x2000141c

0800cf00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b08e      	sub	sp, #56	; 0x38
 800cf04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf06:	e0ca      	b.n	800d09e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	da18      	bge.n	800cf40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf0e:	1d3b      	adds	r3, r7, #4
 800cf10:	3304      	adds	r3, #4
 800cf12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d10a      	bne.n	800cf30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	61fb      	str	r3, [r7, #28]
}
 800cf2c:	bf00      	nop
 800cf2e:	e7fe      	b.n	800cf2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf36:	6850      	ldr	r0, [r2, #4]
 800cf38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf3a:	6892      	ldr	r2, [r2, #8]
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f2c0 80aa 	blt.w	800d09c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4e:	695b      	ldr	r3, [r3, #20]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d004      	beq.n	800cf5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf56:	3304      	adds	r3, #4
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7fd fde1 	bl	800ab20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf5e:	463b      	mov	r3, r7
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7ff ff6b 	bl	800ce3c <prvSampleTimeNow>
 800cf66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b09      	cmp	r3, #9
 800cf6c:	f200 8097 	bhi.w	800d09e <prvProcessReceivedCommands+0x19e>
 800cf70:	a201      	add	r2, pc, #4	; (adr r2, 800cf78 <prvProcessReceivedCommands+0x78>)
 800cf72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf76:	bf00      	nop
 800cf78:	0800cfa1 	.word	0x0800cfa1
 800cf7c:	0800cfa1 	.word	0x0800cfa1
 800cf80:	0800cfa1 	.word	0x0800cfa1
 800cf84:	0800d015 	.word	0x0800d015
 800cf88:	0800d029 	.word	0x0800d029
 800cf8c:	0800d073 	.word	0x0800d073
 800cf90:	0800cfa1 	.word	0x0800cfa1
 800cf94:	0800cfa1 	.word	0x0800cfa1
 800cf98:	0800d015 	.word	0x0800d015
 800cf9c:	0800d029 	.word	0x0800d029
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfa6:	f043 0301 	orr.w	r3, r3, #1
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cfb2:	68ba      	ldr	r2, [r7, #8]
 800cfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb6:	699b      	ldr	r3, [r3, #24]
 800cfb8:	18d1      	adds	r1, r2, r3
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfc0:	f7ff ff5c 	bl	800ce7c <prvInsertTimerInActiveList>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d069      	beq.n	800d09e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfcc:	6a1b      	ldr	r3, [r3, #32]
 800cfce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfd8:	f003 0304 	and.w	r3, r3, #4
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d05e      	beq.n	800d09e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe4:	699b      	ldr	r3, [r3, #24]
 800cfe6:	441a      	add	r2, r3
 800cfe8:	2300      	movs	r3, #0
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	2300      	movs	r3, #0
 800cfee:	2100      	movs	r1, #0
 800cff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cff2:	f7ff fe05 	bl	800cc00 <xTimerGenericCommand>
 800cff6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cff8:	6a3b      	ldr	r3, [r7, #32]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d14f      	bne.n	800d09e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d002:	f383 8811 	msr	BASEPRI, r3
 800d006:	f3bf 8f6f 	isb	sy
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	61bb      	str	r3, [r7, #24]
}
 800d010:	bf00      	nop
 800d012:	e7fe      	b.n	800d012 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d01a:	f023 0301 	bic.w	r3, r3, #1
 800d01e:	b2da      	uxtb	r2, r3
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d026:	e03a      	b.n	800d09e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d02e:	f043 0301 	orr.w	r3, r3, #1
 800d032:	b2da      	uxtb	r2, r3
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d03a:	68ba      	ldr	r2, [r7, #8]
 800d03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d042:	699b      	ldr	r3, [r3, #24]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10a      	bne.n	800d05e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04c:	f383 8811 	msr	BASEPRI, r3
 800d050:	f3bf 8f6f 	isb	sy
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	617b      	str	r3, [r7, #20]
}
 800d05a:	bf00      	nop
 800d05c:	e7fe      	b.n	800d05c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d060:	699a      	ldr	r2, [r3, #24]
 800d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d064:	18d1      	adds	r1, r2, r3
 800d066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d06a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d06c:	f7ff ff06 	bl	800ce7c <prvInsertTimerInActiveList>
					break;
 800d070:	e015      	b.n	800d09e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d078:	f003 0302 	and.w	r3, r3, #2
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d103      	bne.n	800d088 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d082:	f000 fbdd 	bl	800d840 <vPortFree>
 800d086:	e00a      	b.n	800d09e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d08e:	f023 0301 	bic.w	r3, r3, #1
 800d092:	b2da      	uxtb	r2, r3
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d09a:	e000      	b.n	800d09e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d09c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d09e:	4b08      	ldr	r3, [pc, #32]	; (800d0c0 <prvProcessReceivedCommands+0x1c0>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	1d39      	adds	r1, r7, #4
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fe f83c 	bl	800b124 <xQueueReceive>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f47f af2a 	bne.w	800cf08 <prvProcessReceivedCommands+0x8>
	}
}
 800d0b4:	bf00      	nop
 800d0b6:	bf00      	nop
 800d0b8:	3730      	adds	r7, #48	; 0x30
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	20001424 	.word	0x20001424

0800d0c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b088      	sub	sp, #32
 800d0c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0ca:	e048      	b.n	800d15e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0cc:	4b2d      	ldr	r3, [pc, #180]	; (800d184 <prvSwitchTimerLists+0xc0>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0d6:	4b2b      	ldr	r3, [pc, #172]	; (800d184 <prvSwitchTimerLists+0xc0>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	3304      	adds	r3, #4
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7fd fd1b 	bl	800ab20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	6a1b      	ldr	r3, [r3, #32]
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0f8:	f003 0304 	and.w	r3, r3, #4
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d02e      	beq.n	800d15e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	693a      	ldr	r2, [r7, #16]
 800d106:	4413      	add	r3, r2
 800d108:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	429a      	cmp	r2, r3
 800d110:	d90e      	bls.n	800d130 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	68ba      	ldr	r2, [r7, #8]
 800d116:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d11e:	4b19      	ldr	r3, [pc, #100]	; (800d184 <prvSwitchTimerLists+0xc0>)
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	3304      	adds	r3, #4
 800d126:	4619      	mov	r1, r3
 800d128:	4610      	mov	r0, r2
 800d12a:	f7fd fcc0 	bl	800aaae <vListInsert>
 800d12e:	e016      	b.n	800d15e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d130:	2300      	movs	r3, #0
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	2300      	movs	r3, #0
 800d136:	693a      	ldr	r2, [r7, #16]
 800d138:	2100      	movs	r1, #0
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f7ff fd60 	bl	800cc00 <xTimerGenericCommand>
 800d140:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10a      	bne.n	800d15e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	603b      	str	r3, [r7, #0]
}
 800d15a:	bf00      	nop
 800d15c:	e7fe      	b.n	800d15c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d15e:	4b09      	ldr	r3, [pc, #36]	; (800d184 <prvSwitchTimerLists+0xc0>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1b1      	bne.n	800d0cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d168:	4b06      	ldr	r3, [pc, #24]	; (800d184 <prvSwitchTimerLists+0xc0>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d16e:	4b06      	ldr	r3, [pc, #24]	; (800d188 <prvSwitchTimerLists+0xc4>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a04      	ldr	r2, [pc, #16]	; (800d184 <prvSwitchTimerLists+0xc0>)
 800d174:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d176:	4a04      	ldr	r2, [pc, #16]	; (800d188 <prvSwitchTimerLists+0xc4>)
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	6013      	str	r3, [r2, #0]
}
 800d17c:	bf00      	nop
 800d17e:	3718      	adds	r7, #24
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	2000141c 	.word	0x2000141c
 800d188:	20001420 	.word	0x20001420

0800d18c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d192:	f000 f967 	bl	800d464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d196:	4b15      	ldr	r3, [pc, #84]	; (800d1ec <prvCheckForValidListAndQueue+0x60>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d120      	bne.n	800d1e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d19e:	4814      	ldr	r0, [pc, #80]	; (800d1f0 <prvCheckForValidListAndQueue+0x64>)
 800d1a0:	f7fd fc34 	bl	800aa0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d1a4:	4813      	ldr	r0, [pc, #76]	; (800d1f4 <prvCheckForValidListAndQueue+0x68>)
 800d1a6:	f7fd fc31 	bl	800aa0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d1aa:	4b13      	ldr	r3, [pc, #76]	; (800d1f8 <prvCheckForValidListAndQueue+0x6c>)
 800d1ac:	4a10      	ldr	r2, [pc, #64]	; (800d1f0 <prvCheckForValidListAndQueue+0x64>)
 800d1ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d1b0:	4b12      	ldr	r3, [pc, #72]	; (800d1fc <prvCheckForValidListAndQueue+0x70>)
 800d1b2:	4a10      	ldr	r2, [pc, #64]	; (800d1f4 <prvCheckForValidListAndQueue+0x68>)
 800d1b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	9300      	str	r3, [sp, #0]
 800d1ba:	4b11      	ldr	r3, [pc, #68]	; (800d200 <prvCheckForValidListAndQueue+0x74>)
 800d1bc:	4a11      	ldr	r2, [pc, #68]	; (800d204 <prvCheckForValidListAndQueue+0x78>)
 800d1be:	2110      	movs	r1, #16
 800d1c0:	200a      	movs	r0, #10
 800d1c2:	f7fd fd3f 	bl	800ac44 <xQueueGenericCreateStatic>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	4a08      	ldr	r2, [pc, #32]	; (800d1ec <prvCheckForValidListAndQueue+0x60>)
 800d1ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d1cc:	4b07      	ldr	r3, [pc, #28]	; (800d1ec <prvCheckForValidListAndQueue+0x60>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d005      	beq.n	800d1e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d1d4:	4b05      	ldr	r3, [pc, #20]	; (800d1ec <prvCheckForValidListAndQueue+0x60>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	490b      	ldr	r1, [pc, #44]	; (800d208 <prvCheckForValidListAndQueue+0x7c>)
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fe fa12 	bl	800b604 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1e0:	f000 f970 	bl	800d4c4 <vPortExitCritical>
}
 800d1e4:	bf00      	nop
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	20001424 	.word	0x20001424
 800d1f0:	200013f4 	.word	0x200013f4
 800d1f4:	20001408 	.word	0x20001408
 800d1f8:	2000141c 	.word	0x2000141c
 800d1fc:	20001420 	.word	0x20001420
 800d200:	200014d0 	.word	0x200014d0
 800d204:	20001430 	.word	0x20001430
 800d208:	080115e4 	.word	0x080115e4

0800d20c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	3b04      	subs	r3, #4
 800d21c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	3b04      	subs	r3, #4
 800d22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	f023 0201 	bic.w	r2, r3, #1
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	3b04      	subs	r3, #4
 800d23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d23c:	4a0c      	ldr	r2, [pc, #48]	; (800d270 <pxPortInitialiseStack+0x64>)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	3b14      	subs	r3, #20
 800d246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	3b04      	subs	r3, #4
 800d252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f06f 0202 	mvn.w	r2, #2
 800d25a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	3b20      	subs	r3, #32
 800d260:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d262:	68fb      	ldr	r3, [r7, #12]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3714      	adds	r7, #20
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr
 800d270:	0800d275 	.word	0x0800d275

0800d274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d27e:	4b12      	ldr	r3, [pc, #72]	; (800d2c8 <prvTaskExitError+0x54>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d286:	d00a      	beq.n	800d29e <prvTaskExitError+0x2a>
	__asm volatile
 800d288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28c:	f383 8811 	msr	BASEPRI, r3
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	60fb      	str	r3, [r7, #12]
}
 800d29a:	bf00      	nop
 800d29c:	e7fe      	b.n	800d29c <prvTaskExitError+0x28>
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	60bb      	str	r3, [r7, #8]
}
 800d2b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d2b2:	bf00      	nop
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d0fc      	beq.n	800d2b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d2ba:	bf00      	nop
 800d2bc:	bf00      	nop
 800d2be:	3714      	adds	r7, #20
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	2000011c 	.word	0x2000011c
 800d2cc:	00000000 	.word	0x00000000

0800d2d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d2d0:	4b07      	ldr	r3, [pc, #28]	; (800d2f0 <pxCurrentTCBConst2>)
 800d2d2:	6819      	ldr	r1, [r3, #0]
 800d2d4:	6808      	ldr	r0, [r1, #0]
 800d2d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2da:	f380 8809 	msr	PSP, r0
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f04f 0000 	mov.w	r0, #0
 800d2e6:	f380 8811 	msr	BASEPRI, r0
 800d2ea:	4770      	bx	lr
 800d2ec:	f3af 8000 	nop.w

0800d2f0 <pxCurrentTCBConst2>:
 800d2f0:	20000eec 	.word	0x20000eec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d2f4:	bf00      	nop
 800d2f6:	bf00      	nop

0800d2f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d2f8:	4808      	ldr	r0, [pc, #32]	; (800d31c <prvPortStartFirstTask+0x24>)
 800d2fa:	6800      	ldr	r0, [r0, #0]
 800d2fc:	6800      	ldr	r0, [r0, #0]
 800d2fe:	f380 8808 	msr	MSP, r0
 800d302:	f04f 0000 	mov.w	r0, #0
 800d306:	f380 8814 	msr	CONTROL, r0
 800d30a:	b662      	cpsie	i
 800d30c:	b661      	cpsie	f
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	df00      	svc	0
 800d318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d31a:	bf00      	nop
 800d31c:	e000ed08 	.word	0xe000ed08

0800d320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d326:	4b46      	ldr	r3, [pc, #280]	; (800d440 <xPortStartScheduler+0x120>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a46      	ldr	r2, [pc, #280]	; (800d444 <xPortStartScheduler+0x124>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d10a      	bne.n	800d346 <xPortStartScheduler+0x26>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	613b      	str	r3, [r7, #16]
}
 800d342:	bf00      	nop
 800d344:	e7fe      	b.n	800d344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d346:	4b3e      	ldr	r3, [pc, #248]	; (800d440 <xPortStartScheduler+0x120>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a3f      	ldr	r2, [pc, #252]	; (800d448 <xPortStartScheduler+0x128>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d10a      	bne.n	800d366 <xPortStartScheduler+0x46>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	60fb      	str	r3, [r7, #12]
}
 800d362:	bf00      	nop
 800d364:	e7fe      	b.n	800d364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d366:	4b39      	ldr	r3, [pc, #228]	; (800d44c <xPortStartScheduler+0x12c>)
 800d368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	22ff      	movs	r2, #255	; 0xff
 800d376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d380:	78fb      	ldrb	r3, [r7, #3]
 800d382:	b2db      	uxtb	r3, r3
 800d384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	4b31      	ldr	r3, [pc, #196]	; (800d450 <xPortStartScheduler+0x130>)
 800d38c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d38e:	4b31      	ldr	r3, [pc, #196]	; (800d454 <xPortStartScheduler+0x134>)
 800d390:	2207      	movs	r2, #7
 800d392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d394:	e009      	b.n	800d3aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d396:	4b2f      	ldr	r3, [pc, #188]	; (800d454 <xPortStartScheduler+0x134>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	3b01      	subs	r3, #1
 800d39c:	4a2d      	ldr	r2, [pc, #180]	; (800d454 <xPortStartScheduler+0x134>)
 800d39e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	005b      	lsls	r3, r3, #1
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3aa:	78fb      	ldrb	r3, [r7, #3]
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3b2:	2b80      	cmp	r3, #128	; 0x80
 800d3b4:	d0ef      	beq.n	800d396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d3b6:	4b27      	ldr	r3, [pc, #156]	; (800d454 <xPortStartScheduler+0x134>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f1c3 0307 	rsb	r3, r3, #7
 800d3be:	2b04      	cmp	r3, #4
 800d3c0:	d00a      	beq.n	800d3d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	60bb      	str	r3, [r7, #8]
}
 800d3d4:	bf00      	nop
 800d3d6:	e7fe      	b.n	800d3d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d3d8:	4b1e      	ldr	r3, [pc, #120]	; (800d454 <xPortStartScheduler+0x134>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	021b      	lsls	r3, r3, #8
 800d3de:	4a1d      	ldr	r2, [pc, #116]	; (800d454 <xPortStartScheduler+0x134>)
 800d3e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d3e2:	4b1c      	ldr	r3, [pc, #112]	; (800d454 <xPortStartScheduler+0x134>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d3ea:	4a1a      	ldr	r2, [pc, #104]	; (800d454 <xPortStartScheduler+0x134>)
 800d3ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	b2da      	uxtb	r2, r3
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d3f6:	4b18      	ldr	r3, [pc, #96]	; (800d458 <xPortStartScheduler+0x138>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a17      	ldr	r2, [pc, #92]	; (800d458 <xPortStartScheduler+0x138>)
 800d3fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d402:	4b15      	ldr	r3, [pc, #84]	; (800d458 <xPortStartScheduler+0x138>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a14      	ldr	r2, [pc, #80]	; (800d458 <xPortStartScheduler+0x138>)
 800d408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d40c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d40e:	f000 f8dd 	bl	800d5cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d412:	4b12      	ldr	r3, [pc, #72]	; (800d45c <xPortStartScheduler+0x13c>)
 800d414:	2200      	movs	r2, #0
 800d416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d418:	f000 f8fc 	bl	800d614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d41c:	4b10      	ldr	r3, [pc, #64]	; (800d460 <xPortStartScheduler+0x140>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a0f      	ldr	r2, [pc, #60]	; (800d460 <xPortStartScheduler+0x140>)
 800d422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d428:	f7ff ff66 	bl	800d2f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d42c:	f7fe fe18 	bl	800c060 <vTaskSwitchContext>
	prvTaskExitError();
 800d430:	f7ff ff20 	bl	800d274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	e000ed00 	.word	0xe000ed00
 800d444:	410fc271 	.word	0x410fc271
 800d448:	410fc270 	.word	0x410fc270
 800d44c:	e000e400 	.word	0xe000e400
 800d450:	20001520 	.word	0x20001520
 800d454:	20001524 	.word	0x20001524
 800d458:	e000ed20 	.word	0xe000ed20
 800d45c:	2000011c 	.word	0x2000011c
 800d460:	e000ef34 	.word	0xe000ef34

0800d464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
	__asm volatile
 800d46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	607b      	str	r3, [r7, #4]
}
 800d47c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d47e:	4b0f      	ldr	r3, [pc, #60]	; (800d4bc <vPortEnterCritical+0x58>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3301      	adds	r3, #1
 800d484:	4a0d      	ldr	r2, [pc, #52]	; (800d4bc <vPortEnterCritical+0x58>)
 800d486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d488:	4b0c      	ldr	r3, [pc, #48]	; (800d4bc <vPortEnterCritical+0x58>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d10f      	bne.n	800d4b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d490:	4b0b      	ldr	r3, [pc, #44]	; (800d4c0 <vPortEnterCritical+0x5c>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00a      	beq.n	800d4b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	603b      	str	r3, [r7, #0]
}
 800d4ac:	bf00      	nop
 800d4ae:	e7fe      	b.n	800d4ae <vPortEnterCritical+0x4a>
	}
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	2000011c 	.word	0x2000011c
 800d4c0:	e000ed04 	.word	0xe000ed04

0800d4c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4ca:	4b12      	ldr	r3, [pc, #72]	; (800d514 <vPortExitCritical+0x50>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10a      	bne.n	800d4e8 <vPortExitCritical+0x24>
	__asm volatile
 800d4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	607b      	str	r3, [r7, #4]
}
 800d4e4:	bf00      	nop
 800d4e6:	e7fe      	b.n	800d4e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d4e8:	4b0a      	ldr	r3, [pc, #40]	; (800d514 <vPortExitCritical+0x50>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	4a09      	ldr	r2, [pc, #36]	; (800d514 <vPortExitCritical+0x50>)
 800d4f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d4f2:	4b08      	ldr	r3, [pc, #32]	; (800d514 <vPortExitCritical+0x50>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d105      	bne.n	800d506 <vPortExitCritical+0x42>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	f383 8811 	msr	BASEPRI, r3
}
 800d504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d506:	bf00      	nop
 800d508:	370c      	adds	r7, #12
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	2000011c 	.word	0x2000011c
	...

0800d520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d520:	f3ef 8009 	mrs	r0, PSP
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	4b15      	ldr	r3, [pc, #84]	; (800d580 <pxCurrentTCBConst>)
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	f01e 0f10 	tst.w	lr, #16
 800d530:	bf08      	it	eq
 800d532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53a:	6010      	str	r0, [r2, #0]
 800d53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d540:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d544:	f380 8811 	msr	BASEPRI, r0
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	f3bf 8f6f 	isb	sy
 800d550:	f7fe fd86 	bl	800c060 <vTaskSwitchContext>
 800d554:	f04f 0000 	mov.w	r0, #0
 800d558:	f380 8811 	msr	BASEPRI, r0
 800d55c:	bc09      	pop	{r0, r3}
 800d55e:	6819      	ldr	r1, [r3, #0]
 800d560:	6808      	ldr	r0, [r1, #0]
 800d562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d566:	f01e 0f10 	tst.w	lr, #16
 800d56a:	bf08      	it	eq
 800d56c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d570:	f380 8809 	msr	PSP, r0
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	4770      	bx	lr
 800d57a:	bf00      	nop
 800d57c:	f3af 8000 	nop.w

0800d580 <pxCurrentTCBConst>:
 800d580:	20000eec 	.word	0x20000eec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d584:	bf00      	nop
 800d586:	bf00      	nop

0800d588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
	__asm volatile
 800d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	607b      	str	r3, [r7, #4]
}
 800d5a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d5a2:	f7fe fca3 	bl	800beec <xTaskIncrementTick>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d003      	beq.n	800d5b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d5ac:	4b06      	ldr	r3, [pc, #24]	; (800d5c8 <xPortSysTickHandler+0x40>)
 800d5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5b2:	601a      	str	r2, [r3, #0]
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	f383 8811 	msr	BASEPRI, r3
}
 800d5be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	e000ed04 	.word	0xe000ed04

0800d5cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d5d0:	4b0b      	ldr	r3, [pc, #44]	; (800d600 <vPortSetupTimerInterrupt+0x34>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d5d6:	4b0b      	ldr	r3, [pc, #44]	; (800d604 <vPortSetupTimerInterrupt+0x38>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5dc:	4b0a      	ldr	r3, [pc, #40]	; (800d608 <vPortSetupTimerInterrupt+0x3c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a0a      	ldr	r2, [pc, #40]	; (800d60c <vPortSetupTimerInterrupt+0x40>)
 800d5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e6:	099b      	lsrs	r3, r3, #6
 800d5e8:	4a09      	ldr	r2, [pc, #36]	; (800d610 <vPortSetupTimerInterrupt+0x44>)
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5ee:	4b04      	ldr	r3, [pc, #16]	; (800d600 <vPortSetupTimerInterrupt+0x34>)
 800d5f0:	2207      	movs	r2, #7
 800d5f2:	601a      	str	r2, [r3, #0]
}
 800d5f4:	bf00      	nop
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	e000e010 	.word	0xe000e010
 800d604:	e000e018 	.word	0xe000e018
 800d608:	20000000 	.word	0x20000000
 800d60c:	10624dd3 	.word	0x10624dd3
 800d610:	e000e014 	.word	0xe000e014

0800d614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d624 <vPortEnableVFP+0x10>
 800d618:	6801      	ldr	r1, [r0, #0]
 800d61a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d61e:	6001      	str	r1, [r0, #0]
 800d620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d622:	bf00      	nop
 800d624:	e000ed88 	.word	0xe000ed88

0800d628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d628:	b480      	push	{r7}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d62e:	f3ef 8305 	mrs	r3, IPSR
 800d632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2b0f      	cmp	r3, #15
 800d638:	d914      	bls.n	800d664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d63a:	4a17      	ldr	r2, [pc, #92]	; (800d698 <vPortValidateInterruptPriority+0x70>)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	4413      	add	r3, r2
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d644:	4b15      	ldr	r3, [pc, #84]	; (800d69c <vPortValidateInterruptPriority+0x74>)
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	7afa      	ldrb	r2, [r7, #11]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d20a      	bcs.n	800d664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	607b      	str	r3, [r7, #4]
}
 800d660:	bf00      	nop
 800d662:	e7fe      	b.n	800d662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d664:	4b0e      	ldr	r3, [pc, #56]	; (800d6a0 <vPortValidateInterruptPriority+0x78>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d66c:	4b0d      	ldr	r3, [pc, #52]	; (800d6a4 <vPortValidateInterruptPriority+0x7c>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	429a      	cmp	r2, r3
 800d672:	d90a      	bls.n	800d68a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	603b      	str	r3, [r7, #0]
}
 800d686:	bf00      	nop
 800d688:	e7fe      	b.n	800d688 <vPortValidateInterruptPriority+0x60>
	}
 800d68a:	bf00      	nop
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	e000e3f0 	.word	0xe000e3f0
 800d69c:	20001520 	.word	0x20001520
 800d6a0:	e000ed0c 	.word	0xe000ed0c
 800d6a4:	20001524 	.word	0x20001524

0800d6a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08a      	sub	sp, #40	; 0x28
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d6b4:	f7fe face 	bl	800bc54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d6b8:	4b5b      	ldr	r3, [pc, #364]	; (800d828 <pvPortMalloc+0x180>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d101      	bne.n	800d6c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d6c0:	f000 f92c 	bl	800d91c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d6c4:	4b59      	ldr	r3, [pc, #356]	; (800d82c <pvPortMalloc+0x184>)
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	f040 8093 	bne.w	800d7f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d01d      	beq.n	800d714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d6d8:	2208      	movs	r2, #8
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4413      	add	r3, r2
 800d6de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f003 0307 	and.w	r3, r3, #7
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d014      	beq.n	800d714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f023 0307 	bic.w	r3, r3, #7
 800d6f0:	3308      	adds	r3, #8
 800d6f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f003 0307 	and.w	r3, r3, #7
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00a      	beq.n	800d714 <pvPortMalloc+0x6c>
	__asm volatile
 800d6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d702:	f383 8811 	msr	BASEPRI, r3
 800d706:	f3bf 8f6f 	isb	sy
 800d70a:	f3bf 8f4f 	dsb	sy
 800d70e:	617b      	str	r3, [r7, #20]
}
 800d710:	bf00      	nop
 800d712:	e7fe      	b.n	800d712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d06e      	beq.n	800d7f8 <pvPortMalloc+0x150>
 800d71a:	4b45      	ldr	r3, [pc, #276]	; (800d830 <pvPortMalloc+0x188>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	429a      	cmp	r2, r3
 800d722:	d869      	bhi.n	800d7f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d724:	4b43      	ldr	r3, [pc, #268]	; (800d834 <pvPortMalloc+0x18c>)
 800d726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d728:	4b42      	ldr	r3, [pc, #264]	; (800d834 <pvPortMalloc+0x18c>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d72e:	e004      	b.n	800d73a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	429a      	cmp	r2, r3
 800d742:	d903      	bls.n	800d74c <pvPortMalloc+0xa4>
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1f1      	bne.n	800d730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d74c:	4b36      	ldr	r3, [pc, #216]	; (800d828 <pvPortMalloc+0x180>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d752:	429a      	cmp	r2, r3
 800d754:	d050      	beq.n	800d7f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2208      	movs	r2, #8
 800d75c:	4413      	add	r3, r2
 800d75e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	685a      	ldr	r2, [r3, #4]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	1ad2      	subs	r2, r2, r3
 800d770:	2308      	movs	r3, #8
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	429a      	cmp	r2, r3
 800d776:	d91f      	bls.n	800d7b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	4413      	add	r3, r2
 800d77e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	f003 0307 	and.w	r3, r3, #7
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00a      	beq.n	800d7a0 <pvPortMalloc+0xf8>
	__asm volatile
 800d78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	613b      	str	r3, [r7, #16]
}
 800d79c:	bf00      	nop
 800d79e:	e7fe      	b.n	800d79e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	685a      	ldr	r2, [r3, #4]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	1ad2      	subs	r2, r2, r3
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d7b2:	69b8      	ldr	r0, [r7, #24]
 800d7b4:	f000 f914 	bl	800d9e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d7b8:	4b1d      	ldr	r3, [pc, #116]	; (800d830 <pvPortMalloc+0x188>)
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	1ad3      	subs	r3, r2, r3
 800d7c2:	4a1b      	ldr	r2, [pc, #108]	; (800d830 <pvPortMalloc+0x188>)
 800d7c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7c6:	4b1a      	ldr	r3, [pc, #104]	; (800d830 <pvPortMalloc+0x188>)
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	4b1b      	ldr	r3, [pc, #108]	; (800d838 <pvPortMalloc+0x190>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d203      	bcs.n	800d7da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7d2:	4b17      	ldr	r3, [pc, #92]	; (800d830 <pvPortMalloc+0x188>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4a18      	ldr	r2, [pc, #96]	; (800d838 <pvPortMalloc+0x190>)
 800d7d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	4b13      	ldr	r3, [pc, #76]	; (800d82c <pvPortMalloc+0x184>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d7ee:	4b13      	ldr	r3, [pc, #76]	; (800d83c <pvPortMalloc+0x194>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	4a11      	ldr	r2, [pc, #68]	; (800d83c <pvPortMalloc+0x194>)
 800d7f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7f8:	f7fe fa3a 	bl	800bc70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	f003 0307 	and.w	r3, r3, #7
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00a      	beq.n	800d81c <pvPortMalloc+0x174>
	__asm volatile
 800d806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80a:	f383 8811 	msr	BASEPRI, r3
 800d80e:	f3bf 8f6f 	isb	sy
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	60fb      	str	r3, [r7, #12]
}
 800d818:	bf00      	nop
 800d81a:	e7fe      	b.n	800d81a <pvPortMalloc+0x172>
	return pvReturn;
 800d81c:	69fb      	ldr	r3, [r7, #28]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3728      	adds	r7, #40	; 0x28
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	20005130 	.word	0x20005130
 800d82c:	20005144 	.word	0x20005144
 800d830:	20005134 	.word	0x20005134
 800d834:	20005128 	.word	0x20005128
 800d838:	20005138 	.word	0x20005138
 800d83c:	2000513c 	.word	0x2000513c

0800d840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d04d      	beq.n	800d8ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d852:	2308      	movs	r3, #8
 800d854:	425b      	negs	r3, r3
 800d856:	697a      	ldr	r2, [r7, #20]
 800d858:	4413      	add	r3, r2
 800d85a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	685a      	ldr	r2, [r3, #4]
 800d864:	4b24      	ldr	r3, [pc, #144]	; (800d8f8 <vPortFree+0xb8>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4013      	ands	r3, r2
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d10a      	bne.n	800d884 <vPortFree+0x44>
	__asm volatile
 800d86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d872:	f383 8811 	msr	BASEPRI, r3
 800d876:	f3bf 8f6f 	isb	sy
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	60fb      	str	r3, [r7, #12]
}
 800d880:	bf00      	nop
 800d882:	e7fe      	b.n	800d882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00a      	beq.n	800d8a2 <vPortFree+0x62>
	__asm volatile
 800d88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	60bb      	str	r3, [r7, #8]
}
 800d89e:	bf00      	nop
 800d8a0:	e7fe      	b.n	800d8a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	685a      	ldr	r2, [r3, #4]
 800d8a6:	4b14      	ldr	r3, [pc, #80]	; (800d8f8 <vPortFree+0xb8>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4013      	ands	r3, r2
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d01e      	beq.n	800d8ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d11a      	bne.n	800d8ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	4b0e      	ldr	r3, [pc, #56]	; (800d8f8 <vPortFree+0xb8>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	43db      	mvns	r3, r3
 800d8c2:	401a      	ands	r2, r3
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8c8:	f7fe f9c4 	bl	800bc54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	685a      	ldr	r2, [r3, #4]
 800d8d0:	4b0a      	ldr	r3, [pc, #40]	; (800d8fc <vPortFree+0xbc>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	4a09      	ldr	r2, [pc, #36]	; (800d8fc <vPortFree+0xbc>)
 800d8d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8da:	6938      	ldr	r0, [r7, #16]
 800d8dc:	f000 f880 	bl	800d9e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d8e0:	4b07      	ldr	r3, [pc, #28]	; (800d900 <vPortFree+0xc0>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	4a06      	ldr	r2, [pc, #24]	; (800d900 <vPortFree+0xc0>)
 800d8e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d8ea:	f7fe f9c1 	bl	800bc70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8ee:	bf00      	nop
 800d8f0:	3718      	adds	r7, #24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20005144 	.word	0x20005144
 800d8fc:	20005134 	.word	0x20005134
 800d900:	20005140 	.word	0x20005140

0800d904 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800d904:	b480      	push	{r7}
 800d906:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800d908:	4b03      	ldr	r3, [pc, #12]	; (800d918 <xPortGetFreeHeapSize+0x14>)
 800d90a:	681b      	ldr	r3, [r3, #0]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	20005134 	.word	0x20005134

0800d91c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d922:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d926:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d928:	4b27      	ldr	r3, [pc, #156]	; (800d9c8 <prvHeapInit+0xac>)
 800d92a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f003 0307 	and.w	r3, r3, #7
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00c      	beq.n	800d950 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	3307      	adds	r3, #7
 800d93a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f023 0307 	bic.w	r3, r3, #7
 800d942:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d944:	68ba      	ldr	r2, [r7, #8]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	4a1f      	ldr	r2, [pc, #124]	; (800d9c8 <prvHeapInit+0xac>)
 800d94c:	4413      	add	r3, r2
 800d94e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d954:	4a1d      	ldr	r2, [pc, #116]	; (800d9cc <prvHeapInit+0xb0>)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d95a:	4b1c      	ldr	r3, [pc, #112]	; (800d9cc <prvHeapInit+0xb0>)
 800d95c:	2200      	movs	r2, #0
 800d95e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	4413      	add	r3, r2
 800d966:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d968:	2208      	movs	r2, #8
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	1a9b      	subs	r3, r3, r2
 800d96e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f023 0307 	bic.w	r3, r3, #7
 800d976:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	4a15      	ldr	r2, [pc, #84]	; (800d9d0 <prvHeapInit+0xb4>)
 800d97c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d97e:	4b14      	ldr	r3, [pc, #80]	; (800d9d0 <prvHeapInit+0xb4>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2200      	movs	r2, #0
 800d984:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d986:	4b12      	ldr	r3, [pc, #72]	; (800d9d0 <prvHeapInit+0xb4>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2200      	movs	r2, #0
 800d98c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	1ad2      	subs	r2, r2, r3
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d99c:	4b0c      	ldr	r3, [pc, #48]	; (800d9d0 <prvHeapInit+0xb4>)
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	4a0a      	ldr	r2, [pc, #40]	; (800d9d4 <prvHeapInit+0xb8>)
 800d9aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	4a09      	ldr	r2, [pc, #36]	; (800d9d8 <prvHeapInit+0xbc>)
 800d9b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d9b4:	4b09      	ldr	r3, [pc, #36]	; (800d9dc <prvHeapInit+0xc0>)
 800d9b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d9ba:	601a      	str	r2, [r3, #0]
}
 800d9bc:	bf00      	nop
 800d9be:	3714      	adds	r7, #20
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	20001528 	.word	0x20001528
 800d9cc:	20005128 	.word	0x20005128
 800d9d0:	20005130 	.word	0x20005130
 800d9d4:	20005138 	.word	0x20005138
 800d9d8:	20005134 	.word	0x20005134
 800d9dc:	20005144 	.word	0x20005144

0800d9e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9e8:	4b28      	ldr	r3, [pc, #160]	; (800da8c <prvInsertBlockIntoFreeList+0xac>)
 800d9ea:	60fb      	str	r3, [r7, #12]
 800d9ec:	e002      	b.n	800d9f4 <prvInsertBlockIntoFreeList+0x14>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d8f7      	bhi.n	800d9ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	68ba      	ldr	r2, [r7, #8]
 800da08:	4413      	add	r3, r2
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d108      	bne.n	800da22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	685a      	ldr	r2, [r3, #4]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	441a      	add	r2, r3
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	441a      	add	r2, r3
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	429a      	cmp	r2, r3
 800da34:	d118      	bne.n	800da68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	4b15      	ldr	r3, [pc, #84]	; (800da90 <prvInsertBlockIntoFreeList+0xb0>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d00d      	beq.n	800da5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	685a      	ldr	r2, [r3, #4]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	441a      	add	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	601a      	str	r2, [r3, #0]
 800da5c:	e008      	b.n	800da70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da5e:	4b0c      	ldr	r3, [pc, #48]	; (800da90 <prvInsertBlockIntoFreeList+0xb0>)
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	e003      	b.n	800da70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	429a      	cmp	r2, r3
 800da76:	d002      	beq.n	800da7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da7e:	bf00      	nop
 800da80:	3714      	adds	r7, #20
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	20005128 	.word	0x20005128
 800da90:	20005130 	.word	0x20005130

0800da94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800da98:	2200      	movs	r2, #0
 800da9a:	4912      	ldr	r1, [pc, #72]	; (800dae4 <MX_USB_DEVICE_Init+0x50>)
 800da9c:	4812      	ldr	r0, [pc, #72]	; (800dae8 <MX_USB_DEVICE_Init+0x54>)
 800da9e:	f7fb fbab 	bl	80091f8 <USBD_Init>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800daa8:	f7f5 fa66 	bl	8002f78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800daac:	490f      	ldr	r1, [pc, #60]	; (800daec <MX_USB_DEVICE_Init+0x58>)
 800daae:	480e      	ldr	r0, [pc, #56]	; (800dae8 <MX_USB_DEVICE_Init+0x54>)
 800dab0:	f7fb fbd2 	bl	8009258 <USBD_RegisterClass>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d001      	beq.n	800dabe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800daba:	f7f5 fa5d 	bl	8002f78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dabe:	490c      	ldr	r1, [pc, #48]	; (800daf0 <MX_USB_DEVICE_Init+0x5c>)
 800dac0:	4809      	ldr	r0, [pc, #36]	; (800dae8 <MX_USB_DEVICE_Init+0x54>)
 800dac2:	f7fb faf3 	bl	80090ac <USBD_CDC_RegisterInterface>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d001      	beq.n	800dad0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dacc:	f7f5 fa54 	bl	8002f78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dad0:	4805      	ldr	r0, [pc, #20]	; (800dae8 <MX_USB_DEVICE_Init+0x54>)
 800dad2:	f7fb fbe8 	bl	80092a6 <USBD_Start>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dadc:	f7f5 fa4c 	bl	8002f78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dae0:	bf00      	nop
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	20000134 	.word	0x20000134
 800dae8:	2000c520 	.word	0x2000c520
 800daec:	20000018 	.word	0x20000018
 800daf0:	20000120 	.word	0x20000120

0800daf4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800daf8:	2200      	movs	r2, #0
 800dafa:	4905      	ldr	r1, [pc, #20]	; (800db10 <CDC_Init_FS+0x1c>)
 800dafc:	4805      	ldr	r0, [pc, #20]	; (800db14 <CDC_Init_FS+0x20>)
 800dafe:	f7fb faea 	bl	80090d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db02:	4905      	ldr	r1, [pc, #20]	; (800db18 <CDC_Init_FS+0x24>)
 800db04:	4803      	ldr	r0, [pc, #12]	; (800db14 <CDC_Init_FS+0x20>)
 800db06:	f7fb fb04 	bl	8009112 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800db0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	2000cff0 	.word	0x2000cff0
 800db14:	2000c520 	.word	0x2000c520
 800db18:	2000c7f0 	.word	0x2000c7f0

0800db1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800db1c:	b480      	push	{r7}
 800db1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800db20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800db22:	4618      	mov	r0, r3
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	4603      	mov	r3, r0
 800db34:	6039      	str	r1, [r7, #0]
 800db36:	71fb      	strb	r3, [r7, #7]
 800db38:	4613      	mov	r3, r2
 800db3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800db3c:	79fb      	ldrb	r3, [r7, #7]
 800db3e:	2b23      	cmp	r3, #35	; 0x23
 800db40:	d84a      	bhi.n	800dbd8 <CDC_Control_FS+0xac>
 800db42:	a201      	add	r2, pc, #4	; (adr r2, 800db48 <CDC_Control_FS+0x1c>)
 800db44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db48:	0800dbd9 	.word	0x0800dbd9
 800db4c:	0800dbd9 	.word	0x0800dbd9
 800db50:	0800dbd9 	.word	0x0800dbd9
 800db54:	0800dbd9 	.word	0x0800dbd9
 800db58:	0800dbd9 	.word	0x0800dbd9
 800db5c:	0800dbd9 	.word	0x0800dbd9
 800db60:	0800dbd9 	.word	0x0800dbd9
 800db64:	0800dbd9 	.word	0x0800dbd9
 800db68:	0800dbd9 	.word	0x0800dbd9
 800db6c:	0800dbd9 	.word	0x0800dbd9
 800db70:	0800dbd9 	.word	0x0800dbd9
 800db74:	0800dbd9 	.word	0x0800dbd9
 800db78:	0800dbd9 	.word	0x0800dbd9
 800db7c:	0800dbd9 	.word	0x0800dbd9
 800db80:	0800dbd9 	.word	0x0800dbd9
 800db84:	0800dbd9 	.word	0x0800dbd9
 800db88:	0800dbd9 	.word	0x0800dbd9
 800db8c:	0800dbd9 	.word	0x0800dbd9
 800db90:	0800dbd9 	.word	0x0800dbd9
 800db94:	0800dbd9 	.word	0x0800dbd9
 800db98:	0800dbd9 	.word	0x0800dbd9
 800db9c:	0800dbd9 	.word	0x0800dbd9
 800dba0:	0800dbd9 	.word	0x0800dbd9
 800dba4:	0800dbd9 	.word	0x0800dbd9
 800dba8:	0800dbd9 	.word	0x0800dbd9
 800dbac:	0800dbd9 	.word	0x0800dbd9
 800dbb0:	0800dbd9 	.word	0x0800dbd9
 800dbb4:	0800dbd9 	.word	0x0800dbd9
 800dbb8:	0800dbd9 	.word	0x0800dbd9
 800dbbc:	0800dbd9 	.word	0x0800dbd9
 800dbc0:	0800dbd9 	.word	0x0800dbd9
 800dbc4:	0800dbd9 	.word	0x0800dbd9
 800dbc8:	0800dbd9 	.word	0x0800dbd9
 800dbcc:	0800dbd9 	.word	0x0800dbd9
 800dbd0:	0800dbd9 	.word	0x0800dbd9
 800dbd4:	0800dbd9 	.word	0x0800dbd9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dbd8:	bf00      	nop
  }

  return (USBD_OK);
 800dbda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dbf2:	6879      	ldr	r1, [r7, #4]
 800dbf4:	4805      	ldr	r0, [pc, #20]	; (800dc0c <CDC_Receive_FS+0x24>)
 800dbf6:	f7fb fa8c 	bl	8009112 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dbfa:	4804      	ldr	r0, [pc, #16]	; (800dc0c <CDC_Receive_FS+0x24>)
 800dbfc:	f7fb fad2 	bl	80091a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dc00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	2000c520 	.word	0x2000c520

0800dc10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dc20:	4b0d      	ldr	r3, [pc, #52]	; (800dc58 <CDC_Transmit_FS+0x48>)
 800dc22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e00b      	b.n	800dc4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dc36:	887b      	ldrh	r3, [r7, #2]
 800dc38:	461a      	mov	r2, r3
 800dc3a:	6879      	ldr	r1, [r7, #4]
 800dc3c:	4806      	ldr	r0, [pc, #24]	; (800dc58 <CDC_Transmit_FS+0x48>)
 800dc3e:	f7fb fa4a 	bl	80090d6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dc42:	4805      	ldr	r0, [pc, #20]	; (800dc58 <CDC_Transmit_FS+0x48>)
 800dc44:	f7fb fa7e 	bl	8009144 <USBD_CDC_TransmitPacket>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3710      	adds	r7, #16
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	2000c520 	.word	0x2000c520

0800dc5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b087      	sub	sp, #28
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	4613      	mov	r3, r2
 800dc68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dc6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	371c      	adds	r7, #28
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
	...

0800dc80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	4603      	mov	r3, r0
 800dc88:	6039      	str	r1, [r7, #0]
 800dc8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	2212      	movs	r2, #18
 800dc90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dc92:	4b03      	ldr	r3, [pc, #12]	; (800dca0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr
 800dca0:	20000150 	.word	0x20000150

0800dca4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	4603      	mov	r3, r0
 800dcac:	6039      	str	r1, [r7, #0]
 800dcae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	2204      	movs	r2, #4
 800dcb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dcb6:	4b03      	ldr	r3, [pc, #12]	; (800dcc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	370c      	adds	r7, #12
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr
 800dcc4:	20000164 	.word	0x20000164

0800dcc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	4603      	mov	r3, r0
 800dcd0:	6039      	str	r1, [r7, #0]
 800dcd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dcd4:	79fb      	ldrb	r3, [r7, #7]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d105      	bne.n	800dce6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dcda:	683a      	ldr	r2, [r7, #0]
 800dcdc:	4907      	ldr	r1, [pc, #28]	; (800dcfc <USBD_FS_ProductStrDescriptor+0x34>)
 800dcde:	4808      	ldr	r0, [pc, #32]	; (800dd00 <USBD_FS_ProductStrDescriptor+0x38>)
 800dce0:	f7fc fb13 	bl	800a30a <USBD_GetString>
 800dce4:	e004      	b.n	800dcf0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dce6:	683a      	ldr	r2, [r7, #0]
 800dce8:	4904      	ldr	r1, [pc, #16]	; (800dcfc <USBD_FS_ProductStrDescriptor+0x34>)
 800dcea:	4805      	ldr	r0, [pc, #20]	; (800dd00 <USBD_FS_ProductStrDescriptor+0x38>)
 800dcec:	f7fc fb0d 	bl	800a30a <USBD_GetString>
  }
  return USBD_StrDesc;
 800dcf0:	4b02      	ldr	r3, [pc, #8]	; (800dcfc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	2000d7f0 	.word	0x2000d7f0
 800dd00:	080115ec 	.word	0x080115ec

0800dd04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	6039      	str	r1, [r7, #0]
 800dd0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd10:	683a      	ldr	r2, [r7, #0]
 800dd12:	4904      	ldr	r1, [pc, #16]	; (800dd24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd14:	4804      	ldr	r0, [pc, #16]	; (800dd28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd16:	f7fc faf8 	bl	800a30a <USBD_GetString>
  return USBD_StrDesc;
 800dd1a:	4b02      	ldr	r3, [pc, #8]	; (800dd24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	2000d7f0 	.word	0x2000d7f0
 800dd28:	08011604 	.word	0x08011604

0800dd2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	4603      	mov	r3, r0
 800dd34:	6039      	str	r1, [r7, #0]
 800dd36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	221a      	movs	r2, #26
 800dd3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd3e:	f000 f843 	bl	800ddc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dd42:	4b02      	ldr	r3, [pc, #8]	; (800dd4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	20000168 	.word	0x20000168

0800dd50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	4603      	mov	r3, r0
 800dd58:	6039      	str	r1, [r7, #0]
 800dd5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dd5c:	79fb      	ldrb	r3, [r7, #7]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d105      	bne.n	800dd6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd62:	683a      	ldr	r2, [r7, #0]
 800dd64:	4907      	ldr	r1, [pc, #28]	; (800dd84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd66:	4808      	ldr	r0, [pc, #32]	; (800dd88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd68:	f7fc facf 	bl	800a30a <USBD_GetString>
 800dd6c:	e004      	b.n	800dd78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd6e:	683a      	ldr	r2, [r7, #0]
 800dd70:	4904      	ldr	r1, [pc, #16]	; (800dd84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd72:	4805      	ldr	r0, [pc, #20]	; (800dd88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd74:	f7fc fac9 	bl	800a30a <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd78:	4b02      	ldr	r3, [pc, #8]	; (800dd84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3708      	adds	r7, #8
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	2000d7f0 	.word	0x2000d7f0
 800dd88:	08011618 	.word	0x08011618

0800dd8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	4603      	mov	r3, r0
 800dd94:	6039      	str	r1, [r7, #0]
 800dd96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd98:	79fb      	ldrb	r3, [r7, #7]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d105      	bne.n	800ddaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	4907      	ldr	r1, [pc, #28]	; (800ddc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dda2:	4808      	ldr	r0, [pc, #32]	; (800ddc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dda4:	f7fc fab1 	bl	800a30a <USBD_GetString>
 800dda8:	e004      	b.n	800ddb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ddaa:	683a      	ldr	r2, [r7, #0]
 800ddac:	4904      	ldr	r1, [pc, #16]	; (800ddc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ddae:	4805      	ldr	r0, [pc, #20]	; (800ddc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ddb0:	f7fc faab 	bl	800a30a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddb4:	4b02      	ldr	r3, [pc, #8]	; (800ddc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	2000d7f0 	.word	0x2000d7f0
 800ddc4:	08011624 	.word	0x08011624

0800ddc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ddce:	4b0f      	ldr	r3, [pc, #60]	; (800de0c <Get_SerialNum+0x44>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ddd4:	4b0e      	ldr	r3, [pc, #56]	; (800de10 <Get_SerialNum+0x48>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ddda:	4b0e      	ldr	r3, [pc, #56]	; (800de14 <Get_SerialNum+0x4c>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4413      	add	r3, r2
 800dde6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d009      	beq.n	800de02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ddee:	2208      	movs	r2, #8
 800ddf0:	4909      	ldr	r1, [pc, #36]	; (800de18 <Get_SerialNum+0x50>)
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f000 f814 	bl	800de20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ddf8:	2204      	movs	r2, #4
 800ddfa:	4908      	ldr	r1, [pc, #32]	; (800de1c <Get_SerialNum+0x54>)
 800ddfc:	68b8      	ldr	r0, [r7, #8]
 800ddfe:	f000 f80f 	bl	800de20 <IntToUnicode>
  }
}
 800de02:	bf00      	nop
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	1fff7a10 	.word	0x1fff7a10
 800de10:	1fff7a14 	.word	0x1fff7a14
 800de14:	1fff7a18 	.word	0x1fff7a18
 800de18:	2000016a 	.word	0x2000016a
 800de1c:	2000017a 	.word	0x2000017a

0800de20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de20:	b480      	push	{r7}
 800de22:	b087      	sub	sp, #28
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	4613      	mov	r3, r2
 800de2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de32:	2300      	movs	r3, #0
 800de34:	75fb      	strb	r3, [r7, #23]
 800de36:	e027      	b.n	800de88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	0f1b      	lsrs	r3, r3, #28
 800de3c:	2b09      	cmp	r3, #9
 800de3e:	d80b      	bhi.n	800de58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	0f1b      	lsrs	r3, r3, #28
 800de44:	b2da      	uxtb	r2, r3
 800de46:	7dfb      	ldrb	r3, [r7, #23]
 800de48:	005b      	lsls	r3, r3, #1
 800de4a:	4619      	mov	r1, r3
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	440b      	add	r3, r1
 800de50:	3230      	adds	r2, #48	; 0x30
 800de52:	b2d2      	uxtb	r2, r2
 800de54:	701a      	strb	r2, [r3, #0]
 800de56:	e00a      	b.n	800de6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	0f1b      	lsrs	r3, r3, #28
 800de5c:	b2da      	uxtb	r2, r3
 800de5e:	7dfb      	ldrb	r3, [r7, #23]
 800de60:	005b      	lsls	r3, r3, #1
 800de62:	4619      	mov	r1, r3
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	440b      	add	r3, r1
 800de68:	3237      	adds	r2, #55	; 0x37
 800de6a:	b2d2      	uxtb	r2, r2
 800de6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	011b      	lsls	r3, r3, #4
 800de72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800de74:	7dfb      	ldrb	r3, [r7, #23]
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	3301      	adds	r3, #1
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	4413      	add	r3, r2
 800de7e:	2200      	movs	r2, #0
 800de80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800de82:	7dfb      	ldrb	r3, [r7, #23]
 800de84:	3301      	adds	r3, #1
 800de86:	75fb      	strb	r3, [r7, #23]
 800de88:	7dfa      	ldrb	r2, [r7, #23]
 800de8a:	79fb      	ldrb	r3, [r7, #7]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d3d3      	bcc.n	800de38 <IntToUnicode+0x18>
  }
}
 800de90:	bf00      	nop
 800de92:	bf00      	nop
 800de94:	371c      	adds	r7, #28
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
	...

0800dea0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b08a      	sub	sp, #40	; 0x28
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dea8:	f107 0314 	add.w	r3, r7, #20
 800deac:	2200      	movs	r2, #0
 800deae:	601a      	str	r2, [r3, #0]
 800deb0:	605a      	str	r2, [r3, #4]
 800deb2:	609a      	str	r2, [r3, #8]
 800deb4:	60da      	str	r2, [r3, #12]
 800deb6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dec0:	d147      	bne.n	800df52 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dec2:	2300      	movs	r3, #0
 800dec4:	613b      	str	r3, [r7, #16]
 800dec6:	4b25      	ldr	r3, [pc, #148]	; (800df5c <HAL_PCD_MspInit+0xbc>)
 800dec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deca:	4a24      	ldr	r2, [pc, #144]	; (800df5c <HAL_PCD_MspInit+0xbc>)
 800decc:	f043 0301 	orr.w	r3, r3, #1
 800ded0:	6313      	str	r3, [r2, #48]	; 0x30
 800ded2:	4b22      	ldr	r3, [pc, #136]	; (800df5c <HAL_PCD_MspInit+0xbc>)
 800ded4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ded6:	f003 0301 	and.w	r3, r3, #1
 800deda:	613b      	str	r3, [r7, #16]
 800dedc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800dede:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dee4:	2300      	movs	r3, #0
 800dee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dee8:	2300      	movs	r3, #0
 800deea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800deec:	f107 0314 	add.w	r3, r7, #20
 800def0:	4619      	mov	r1, r3
 800def2:	481b      	ldr	r0, [pc, #108]	; (800df60 <HAL_PCD_MspInit+0xc0>)
 800def4:	f7f5 fbdc 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800def8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800defc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800defe:	2302      	movs	r3, #2
 800df00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df02:	2300      	movs	r3, #0
 800df04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df06:	2300      	movs	r3, #0
 800df08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800df0a:	230a      	movs	r3, #10
 800df0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df0e:	f107 0314 	add.w	r3, r7, #20
 800df12:	4619      	mov	r1, r3
 800df14:	4812      	ldr	r0, [pc, #72]	; (800df60 <HAL_PCD_MspInit+0xc0>)
 800df16:	f7f5 fbcb 	bl	80036b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800df1a:	4b10      	ldr	r3, [pc, #64]	; (800df5c <HAL_PCD_MspInit+0xbc>)
 800df1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df1e:	4a0f      	ldr	r2, [pc, #60]	; (800df5c <HAL_PCD_MspInit+0xbc>)
 800df20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df24:	6353      	str	r3, [r2, #52]	; 0x34
 800df26:	2300      	movs	r3, #0
 800df28:	60fb      	str	r3, [r7, #12]
 800df2a:	4b0c      	ldr	r3, [pc, #48]	; (800df5c <HAL_PCD_MspInit+0xbc>)
 800df2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df2e:	4a0b      	ldr	r2, [pc, #44]	; (800df5c <HAL_PCD_MspInit+0xbc>)
 800df30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800df34:	6453      	str	r3, [r2, #68]	; 0x44
 800df36:	4b09      	ldr	r3, [pc, #36]	; (800df5c <HAL_PCD_MspInit+0xbc>)
 800df38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df3e:	60fb      	str	r3, [r7, #12]
 800df40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800df42:	2200      	movs	r2, #0
 800df44:	2105      	movs	r1, #5
 800df46:	2043      	movs	r0, #67	; 0x43
 800df48:	f7f5 fb88 	bl	800365c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df4c:	2043      	movs	r0, #67	; 0x43
 800df4e:	f7f5 fba1 	bl	8003694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800df52:	bf00      	nop
 800df54:	3728      	adds	r7, #40	; 0x28
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	40023800 	.word	0x40023800
 800df60:	40020000 	.word	0x40020000

0800df64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800df78:	4619      	mov	r1, r3
 800df7a:	4610      	mov	r0, r2
 800df7c:	f7fb f9de 	bl	800933c <USBD_LL_SetupStage>
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	460b      	mov	r3, r1
 800df92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800df9a:	78fa      	ldrb	r2, [r7, #3]
 800df9c:	6879      	ldr	r1, [r7, #4]
 800df9e:	4613      	mov	r3, r2
 800dfa0:	00db      	lsls	r3, r3, #3
 800dfa2:	1a9b      	subs	r3, r3, r2
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	440b      	add	r3, r1
 800dfa8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	78fb      	ldrb	r3, [r7, #3]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	f7fb fa18 	bl	80093e6 <USBD_LL_DataOutStage>
}
 800dfb6:	bf00      	nop
 800dfb8:	3708      	adds	r7, #8
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b082      	sub	sp, #8
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800dfd0:	78fa      	ldrb	r2, [r7, #3]
 800dfd2:	6879      	ldr	r1, [r7, #4]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	00db      	lsls	r3, r3, #3
 800dfd8:	1a9b      	subs	r3, r3, r2
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	440b      	add	r3, r1
 800dfde:	3348      	adds	r3, #72	; 0x48
 800dfe0:	681a      	ldr	r2, [r3, #0]
 800dfe2:	78fb      	ldrb	r3, [r7, #3]
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	f7fb fa61 	bl	80094ac <USBD_LL_DataInStage>
}
 800dfea:	bf00      	nop
 800dfec:	3708      	adds	r7, #8
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}

0800dff2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b082      	sub	sp, #8
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e000:	4618      	mov	r0, r3
 800e002:	f7fb fb75 	bl	80096f0 <USBD_LL_SOF>
}
 800e006:	bf00      	nop
 800e008:	3708      	adds	r7, #8
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b084      	sub	sp, #16
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e016:	2301      	movs	r3, #1
 800e018:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d102      	bne.n	800e028 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e022:	2300      	movs	r3, #0
 800e024:	73fb      	strb	r3, [r7, #15]
 800e026:	e008      	b.n	800e03a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	d102      	bne.n	800e036 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e030:	2301      	movs	r3, #1
 800e032:	73fb      	strb	r3, [r7, #15]
 800e034:	e001      	b.n	800e03a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e036:	f7f4 ff9f 	bl	8002f78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e040:	7bfa      	ldrb	r2, [r7, #15]
 800e042:	4611      	mov	r1, r2
 800e044:	4618      	mov	r0, r3
 800e046:	f7fb fb15 	bl	8009674 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e050:	4618      	mov	r0, r3
 800e052:	f7fb fac1 	bl	80095d8 <USBD_LL_Reset>
}
 800e056:	bf00      	nop
 800e058:	3710      	adds	r7, #16
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
	...

0800e060 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fb fb10 	bl	8009694 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	6812      	ldr	r2, [r2, #0]
 800e082:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e086:	f043 0301 	orr.w	r3, r3, #1
 800e08a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6a1b      	ldr	r3, [r3, #32]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d005      	beq.n	800e0a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e094:	4b04      	ldr	r3, [pc, #16]	; (800e0a8 <HAL_PCD_SuspendCallback+0x48>)
 800e096:	691b      	ldr	r3, [r3, #16]
 800e098:	4a03      	ldr	r2, [pc, #12]	; (800e0a8 <HAL_PCD_SuspendCallback+0x48>)
 800e09a:	f043 0306 	orr.w	r3, r3, #6
 800e09e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e0a0:	bf00      	nop
 800e0a2:	3708      	adds	r7, #8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	e000ed00 	.word	0xe000ed00

0800e0ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fb fb00 	bl	80096c0 <USBD_LL_Resume>
}
 800e0c0:	bf00      	nop
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0da:	78fa      	ldrb	r2, [r7, #3]
 800e0dc:	4611      	mov	r1, r2
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fb fb4e 	bl	8009780 <USBD_LL_IsoOUTIncomplete>
}
 800e0e4:	bf00      	nop
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0fe:	78fa      	ldrb	r2, [r7, #3]
 800e100:	4611      	mov	r1, r2
 800e102:	4618      	mov	r0, r3
 800e104:	f7fb fb16 	bl	8009734 <USBD_LL_IsoINIncomplete>
}
 800e108:	bf00      	nop
 800e10a:	3708      	adds	r7, #8
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fb fb54 	bl	80097cc <USBD_LL_DevConnected>
}
 800e124:	bf00      	nop
 800e126:	3708      	adds	r7, #8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fb fb51 	bl	80097e2 <USBD_LL_DevDisconnected>
}
 800e140:	bf00      	nop
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d13c      	bne.n	800e1d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e158:	4a20      	ldr	r2, [pc, #128]	; (800e1dc <USBD_LL_Init+0x94>)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	4a1e      	ldr	r2, [pc, #120]	; (800e1dc <USBD_LL_Init+0x94>)
 800e164:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e168:	4b1c      	ldr	r3, [pc, #112]	; (800e1dc <USBD_LL_Init+0x94>)
 800e16a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e16e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e170:	4b1a      	ldr	r3, [pc, #104]	; (800e1dc <USBD_LL_Init+0x94>)
 800e172:	2204      	movs	r2, #4
 800e174:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e176:	4b19      	ldr	r3, [pc, #100]	; (800e1dc <USBD_LL_Init+0x94>)
 800e178:	2202      	movs	r2, #2
 800e17a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e17c:	4b17      	ldr	r3, [pc, #92]	; (800e1dc <USBD_LL_Init+0x94>)
 800e17e:	2200      	movs	r2, #0
 800e180:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e182:	4b16      	ldr	r3, [pc, #88]	; (800e1dc <USBD_LL_Init+0x94>)
 800e184:	2202      	movs	r2, #2
 800e186:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e188:	4b14      	ldr	r3, [pc, #80]	; (800e1dc <USBD_LL_Init+0x94>)
 800e18a:	2200      	movs	r2, #0
 800e18c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e18e:	4b13      	ldr	r3, [pc, #76]	; (800e1dc <USBD_LL_Init+0x94>)
 800e190:	2200      	movs	r2, #0
 800e192:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e194:	4b11      	ldr	r3, [pc, #68]	; (800e1dc <USBD_LL_Init+0x94>)
 800e196:	2200      	movs	r2, #0
 800e198:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e19a:	4b10      	ldr	r3, [pc, #64]	; (800e1dc <USBD_LL_Init+0x94>)
 800e19c:	2200      	movs	r2, #0
 800e19e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e1a0:	4b0e      	ldr	r3, [pc, #56]	; (800e1dc <USBD_LL_Init+0x94>)
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e1a6:	480d      	ldr	r0, [pc, #52]	; (800e1dc <USBD_LL_Init+0x94>)
 800e1a8:	f7f6 fedb 	bl	8004f62 <HAL_PCD_Init>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e1b2:	f7f4 fee1 	bl	8002f78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e1b6:	2180      	movs	r1, #128	; 0x80
 800e1b8:	4808      	ldr	r0, [pc, #32]	; (800e1dc <USBD_LL_Init+0x94>)
 800e1ba:	f7f8 f838 	bl	800622e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e1be:	2240      	movs	r2, #64	; 0x40
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	4806      	ldr	r0, [pc, #24]	; (800e1dc <USBD_LL_Init+0x94>)
 800e1c4:	f7f7 ffec 	bl	80061a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e1c8:	2280      	movs	r2, #128	; 0x80
 800e1ca:	2101      	movs	r1, #1
 800e1cc:	4803      	ldr	r0, [pc, #12]	; (800e1dc <USBD_LL_Init+0x94>)
 800e1ce:	f7f7 ffe7 	bl	80061a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e1d2:	2300      	movs	r3, #0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	2000d9f0 	.word	0x2000d9f0

0800e1e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7f6 ffd0 	bl	800519c <HAL_PCD_Start>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e200:	7bfb      	ldrb	r3, [r7, #15]
 800e202:	4618      	mov	r0, r3
 800e204:	f000 f942 	bl	800e48c <USBD_Get_USB_Status>
 800e208:	4603      	mov	r3, r0
 800e20a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e20c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b084      	sub	sp, #16
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
 800e21e:	4608      	mov	r0, r1
 800e220:	4611      	mov	r1, r2
 800e222:	461a      	mov	r2, r3
 800e224:	4603      	mov	r3, r0
 800e226:	70fb      	strb	r3, [r7, #3]
 800e228:	460b      	mov	r3, r1
 800e22a:	70bb      	strb	r3, [r7, #2]
 800e22c:	4613      	mov	r3, r2
 800e22e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e234:	2300      	movs	r3, #0
 800e236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e23e:	78bb      	ldrb	r3, [r7, #2]
 800e240:	883a      	ldrh	r2, [r7, #0]
 800e242:	78f9      	ldrb	r1, [r7, #3]
 800e244:	f7f7 fbb4 	bl	80059b0 <HAL_PCD_EP_Open>
 800e248:	4603      	mov	r3, r0
 800e24a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e24c:	7bfb      	ldrb	r3, [r7, #15]
 800e24e:	4618      	mov	r0, r3
 800e250:	f000 f91c 	bl	800e48c <USBD_Get_USB_Status>
 800e254:	4603      	mov	r3, r0
 800e256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e258:	7bbb      	ldrb	r3, [r7, #14]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3710      	adds	r7, #16
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b084      	sub	sp, #16
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	460b      	mov	r3, r1
 800e26c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e26e:	2300      	movs	r3, #0
 800e270:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e272:	2300      	movs	r3, #0
 800e274:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e27c:	78fa      	ldrb	r2, [r7, #3]
 800e27e:	4611      	mov	r1, r2
 800e280:	4618      	mov	r0, r3
 800e282:	f7f7 fbfd 	bl	8005a80 <HAL_PCD_EP_Close>
 800e286:	4603      	mov	r3, r0
 800e288:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e28a:	7bfb      	ldrb	r3, [r7, #15]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f000 f8fd 	bl	800e48c <USBD_Get_USB_Status>
 800e292:	4603      	mov	r3, r0
 800e294:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e296:	7bbb      	ldrb	r3, [r7, #14]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2ba:	78fa      	ldrb	r2, [r7, #3]
 800e2bc:	4611      	mov	r1, r2
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7f7 fcd5 	bl	8005c6e <HAL_PCD_EP_SetStall>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2c8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f000 f8de 	bl	800e48c <USBD_Get_USB_Status>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3710      	adds	r7, #16
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b084      	sub	sp, #16
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2f8:	78fa      	ldrb	r2, [r7, #3]
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7f7 fd1a 	bl	8005d36 <HAL_PCD_EP_ClrStall>
 800e302:	4603      	mov	r3, r0
 800e304:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e306:	7bfb      	ldrb	r3, [r7, #15]
 800e308:	4618      	mov	r0, r3
 800e30a:	f000 f8bf 	bl	800e48c <USBD_Get_USB_Status>
 800e30e:	4603      	mov	r3, r0
 800e310:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e312:	7bbb      	ldrb	r3, [r7, #14]
}
 800e314:	4618      	mov	r0, r3
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b085      	sub	sp, #20
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	460b      	mov	r3, r1
 800e326:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e32e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e334:	2b00      	cmp	r3, #0
 800e336:	da0b      	bge.n	800e350 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e338:	78fb      	ldrb	r3, [r7, #3]
 800e33a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e33e:	68f9      	ldr	r1, [r7, #12]
 800e340:	4613      	mov	r3, r2
 800e342:	00db      	lsls	r3, r3, #3
 800e344:	1a9b      	subs	r3, r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	440b      	add	r3, r1
 800e34a:	333e      	adds	r3, #62	; 0x3e
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	e00b      	b.n	800e368 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e350:	78fb      	ldrb	r3, [r7, #3]
 800e352:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e356:	68f9      	ldr	r1, [r7, #12]
 800e358:	4613      	mov	r3, r2
 800e35a:	00db      	lsls	r3, r3, #3
 800e35c:	1a9b      	subs	r3, r3, r2
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	440b      	add	r3, r1
 800e362:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e366:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3714      	adds	r7, #20
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	460b      	mov	r3, r1
 800e37e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e380:	2300      	movs	r3, #0
 800e382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e384:	2300      	movs	r3, #0
 800e386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e38e:	78fa      	ldrb	r2, [r7, #3]
 800e390:	4611      	mov	r1, r2
 800e392:	4618      	mov	r0, r3
 800e394:	f7f7 fae7 	bl	8005966 <HAL_PCD_SetAddress>
 800e398:	4603      	mov	r3, r0
 800e39a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e39c:	7bfb      	ldrb	r3, [r7, #15]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f000 f874 	bl	800e48c <USBD_Get_USB_Status>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b086      	sub	sp, #24
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	60f8      	str	r0, [r7, #12]
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	603b      	str	r3, [r7, #0]
 800e3be:	460b      	mov	r3, r1
 800e3c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e3d0:	7af9      	ldrb	r1, [r7, #11]
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	f7f7 fc00 	bl	8005bda <HAL_PCD_EP_Transmit>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3de:	7dfb      	ldrb	r3, [r7, #23]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f000 f853 	bl	800e48c <USBD_Get_USB_Status>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3718      	adds	r7, #24
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b086      	sub	sp, #24
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	607a      	str	r2, [r7, #4]
 800e3fe:	603b      	str	r3, [r7, #0]
 800e400:	460b      	mov	r3, r1
 800e402:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e404:	2300      	movs	r3, #0
 800e406:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e408:	2300      	movs	r3, #0
 800e40a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e412:	7af9      	ldrb	r1, [r7, #11]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	f7f7 fb7c 	bl	8005b14 <HAL_PCD_EP_Receive>
 800e41c:	4603      	mov	r3, r0
 800e41e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e420:	7dfb      	ldrb	r3, [r7, #23]
 800e422:	4618      	mov	r0, r3
 800e424:	f000 f832 	bl	800e48c <USBD_Get_USB_Status>
 800e428:	4603      	mov	r3, r0
 800e42a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e42c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3718      	adds	r7, #24
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}

0800e436 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e436:	b580      	push	{r7, lr}
 800e438:	b082      	sub	sp, #8
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
 800e43e:	460b      	mov	r3, r1
 800e440:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e448:	78fa      	ldrb	r2, [r7, #3]
 800e44a:	4611      	mov	r1, r2
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7f7 fbac 	bl	8005baa <HAL_PCD_EP_GetRxCount>
 800e452:	4603      	mov	r3, r0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e464:	4b03      	ldr	r3, [pc, #12]	; (800e474 <USBD_static_malloc+0x18>)
}
 800e466:	4618      	mov	r0, r3
 800e468:	370c      	adds	r7, #12
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	20005148 	.word	0x20005148

0800e478 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]

}
 800e480:	bf00      	nop
 800e482:	370c      	adds	r7, #12
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b085      	sub	sp, #20
 800e490:	af00      	add	r7, sp, #0
 800e492:	4603      	mov	r3, r0
 800e494:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e496:	2300      	movs	r3, #0
 800e498:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e49a:	79fb      	ldrb	r3, [r7, #7]
 800e49c:	2b03      	cmp	r3, #3
 800e49e:	d817      	bhi.n	800e4d0 <USBD_Get_USB_Status+0x44>
 800e4a0:	a201      	add	r2, pc, #4	; (adr r2, 800e4a8 <USBD_Get_USB_Status+0x1c>)
 800e4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a6:	bf00      	nop
 800e4a8:	0800e4b9 	.word	0x0800e4b9
 800e4ac:	0800e4bf 	.word	0x0800e4bf
 800e4b0:	0800e4c5 	.word	0x0800e4c5
 800e4b4:	0800e4cb 	.word	0x0800e4cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	73fb      	strb	r3, [r7, #15]
    break;
 800e4bc:	e00b      	b.n	800e4d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e4be:	2303      	movs	r3, #3
 800e4c0:	73fb      	strb	r3, [r7, #15]
    break;
 800e4c2:	e008      	b.n	800e4d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	73fb      	strb	r3, [r7, #15]
    break;
 800e4c8:	e005      	b.n	800e4d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e4ca:	2303      	movs	r3, #3
 800e4cc:	73fb      	strb	r3, [r7, #15]
    break;
 800e4ce:	e002      	b.n	800e4d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e4d0:	2303      	movs	r3, #3
 800e4d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e4d4:	bf00      	nop
  }
  return usb_status;
 800e4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3714      	adds	r7, #20
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <__errno>:
 800e4e4:	4b01      	ldr	r3, [pc, #4]	; (800e4ec <__errno+0x8>)
 800e4e6:	6818      	ldr	r0, [r3, #0]
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop
 800e4ec:	20000184 	.word	0x20000184

0800e4f0 <std>:
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	b510      	push	{r4, lr}
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	e9c0 3300 	strd	r3, r3, [r0]
 800e4fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4fe:	6083      	str	r3, [r0, #8]
 800e500:	8181      	strh	r1, [r0, #12]
 800e502:	6643      	str	r3, [r0, #100]	; 0x64
 800e504:	81c2      	strh	r2, [r0, #14]
 800e506:	6183      	str	r3, [r0, #24]
 800e508:	4619      	mov	r1, r3
 800e50a:	2208      	movs	r2, #8
 800e50c:	305c      	adds	r0, #92	; 0x5c
 800e50e:	f000 f945 	bl	800e79c <memset>
 800e512:	4b05      	ldr	r3, [pc, #20]	; (800e528 <std+0x38>)
 800e514:	6263      	str	r3, [r4, #36]	; 0x24
 800e516:	4b05      	ldr	r3, [pc, #20]	; (800e52c <std+0x3c>)
 800e518:	62a3      	str	r3, [r4, #40]	; 0x28
 800e51a:	4b05      	ldr	r3, [pc, #20]	; (800e530 <std+0x40>)
 800e51c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e51e:	4b05      	ldr	r3, [pc, #20]	; (800e534 <std+0x44>)
 800e520:	6224      	str	r4, [r4, #32]
 800e522:	6323      	str	r3, [r4, #48]	; 0x30
 800e524:	bd10      	pop	{r4, pc}
 800e526:	bf00      	nop
 800e528:	0800f309 	.word	0x0800f309
 800e52c:	0800f32b 	.word	0x0800f32b
 800e530:	0800f363 	.word	0x0800f363
 800e534:	0800f387 	.word	0x0800f387

0800e538 <_cleanup_r>:
 800e538:	4901      	ldr	r1, [pc, #4]	; (800e540 <_cleanup_r+0x8>)
 800e53a:	f000 b8af 	b.w	800e69c <_fwalk_reent>
 800e53e:	bf00      	nop
 800e540:	08010285 	.word	0x08010285

0800e544 <__sfmoreglue>:
 800e544:	b570      	push	{r4, r5, r6, lr}
 800e546:	1e4a      	subs	r2, r1, #1
 800e548:	2568      	movs	r5, #104	; 0x68
 800e54a:	4355      	muls	r5, r2
 800e54c:	460e      	mov	r6, r1
 800e54e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e552:	f000 f97b 	bl	800e84c <_malloc_r>
 800e556:	4604      	mov	r4, r0
 800e558:	b140      	cbz	r0, 800e56c <__sfmoreglue+0x28>
 800e55a:	2100      	movs	r1, #0
 800e55c:	e9c0 1600 	strd	r1, r6, [r0]
 800e560:	300c      	adds	r0, #12
 800e562:	60a0      	str	r0, [r4, #8]
 800e564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e568:	f000 f918 	bl	800e79c <memset>
 800e56c:	4620      	mov	r0, r4
 800e56e:	bd70      	pop	{r4, r5, r6, pc}

0800e570 <__sfp_lock_acquire>:
 800e570:	4801      	ldr	r0, [pc, #4]	; (800e578 <__sfp_lock_acquire+0x8>)
 800e572:	f000 b8f2 	b.w	800e75a <__retarget_lock_acquire_recursive>
 800e576:	bf00      	nop
 800e578:	2000de00 	.word	0x2000de00

0800e57c <__sfp_lock_release>:
 800e57c:	4801      	ldr	r0, [pc, #4]	; (800e584 <__sfp_lock_release+0x8>)
 800e57e:	f000 b8ed 	b.w	800e75c <__retarget_lock_release_recursive>
 800e582:	bf00      	nop
 800e584:	2000de00 	.word	0x2000de00

0800e588 <__sinit_lock_acquire>:
 800e588:	4801      	ldr	r0, [pc, #4]	; (800e590 <__sinit_lock_acquire+0x8>)
 800e58a:	f000 b8e6 	b.w	800e75a <__retarget_lock_acquire_recursive>
 800e58e:	bf00      	nop
 800e590:	2000ddfb 	.word	0x2000ddfb

0800e594 <__sinit_lock_release>:
 800e594:	4801      	ldr	r0, [pc, #4]	; (800e59c <__sinit_lock_release+0x8>)
 800e596:	f000 b8e1 	b.w	800e75c <__retarget_lock_release_recursive>
 800e59a:	bf00      	nop
 800e59c:	2000ddfb 	.word	0x2000ddfb

0800e5a0 <__sinit>:
 800e5a0:	b510      	push	{r4, lr}
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	f7ff fff0 	bl	800e588 <__sinit_lock_acquire>
 800e5a8:	69a3      	ldr	r3, [r4, #24]
 800e5aa:	b11b      	cbz	r3, 800e5b4 <__sinit+0x14>
 800e5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5b0:	f7ff bff0 	b.w	800e594 <__sinit_lock_release>
 800e5b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e5b8:	6523      	str	r3, [r4, #80]	; 0x50
 800e5ba:	4b13      	ldr	r3, [pc, #76]	; (800e608 <__sinit+0x68>)
 800e5bc:	4a13      	ldr	r2, [pc, #76]	; (800e60c <__sinit+0x6c>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e5c2:	42a3      	cmp	r3, r4
 800e5c4:	bf04      	itt	eq
 800e5c6:	2301      	moveq	r3, #1
 800e5c8:	61a3      	streq	r3, [r4, #24]
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	f000 f820 	bl	800e610 <__sfp>
 800e5d0:	6060      	str	r0, [r4, #4]
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	f000 f81c 	bl	800e610 <__sfp>
 800e5d8:	60a0      	str	r0, [r4, #8]
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f000 f818 	bl	800e610 <__sfp>
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	60e0      	str	r0, [r4, #12]
 800e5e4:	2104      	movs	r1, #4
 800e5e6:	6860      	ldr	r0, [r4, #4]
 800e5e8:	f7ff ff82 	bl	800e4f0 <std>
 800e5ec:	68a0      	ldr	r0, [r4, #8]
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	2109      	movs	r1, #9
 800e5f2:	f7ff ff7d 	bl	800e4f0 <std>
 800e5f6:	68e0      	ldr	r0, [r4, #12]
 800e5f8:	2202      	movs	r2, #2
 800e5fa:	2112      	movs	r1, #18
 800e5fc:	f7ff ff78 	bl	800e4f0 <std>
 800e600:	2301      	movs	r3, #1
 800e602:	61a3      	str	r3, [r4, #24]
 800e604:	e7d2      	b.n	800e5ac <__sinit+0xc>
 800e606:	bf00      	nop
 800e608:	08011778 	.word	0x08011778
 800e60c:	0800e539 	.word	0x0800e539

0800e610 <__sfp>:
 800e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e612:	4607      	mov	r7, r0
 800e614:	f7ff ffac 	bl	800e570 <__sfp_lock_acquire>
 800e618:	4b1e      	ldr	r3, [pc, #120]	; (800e694 <__sfp+0x84>)
 800e61a:	681e      	ldr	r6, [r3, #0]
 800e61c:	69b3      	ldr	r3, [r6, #24]
 800e61e:	b913      	cbnz	r3, 800e626 <__sfp+0x16>
 800e620:	4630      	mov	r0, r6
 800e622:	f7ff ffbd 	bl	800e5a0 <__sinit>
 800e626:	3648      	adds	r6, #72	; 0x48
 800e628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e62c:	3b01      	subs	r3, #1
 800e62e:	d503      	bpl.n	800e638 <__sfp+0x28>
 800e630:	6833      	ldr	r3, [r6, #0]
 800e632:	b30b      	cbz	r3, 800e678 <__sfp+0x68>
 800e634:	6836      	ldr	r6, [r6, #0]
 800e636:	e7f7      	b.n	800e628 <__sfp+0x18>
 800e638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e63c:	b9d5      	cbnz	r5, 800e674 <__sfp+0x64>
 800e63e:	4b16      	ldr	r3, [pc, #88]	; (800e698 <__sfp+0x88>)
 800e640:	60e3      	str	r3, [r4, #12]
 800e642:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e646:	6665      	str	r5, [r4, #100]	; 0x64
 800e648:	f000 f886 	bl	800e758 <__retarget_lock_init_recursive>
 800e64c:	f7ff ff96 	bl	800e57c <__sfp_lock_release>
 800e650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e658:	6025      	str	r5, [r4, #0]
 800e65a:	61a5      	str	r5, [r4, #24]
 800e65c:	2208      	movs	r2, #8
 800e65e:	4629      	mov	r1, r5
 800e660:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e664:	f000 f89a 	bl	800e79c <memset>
 800e668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e66c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e670:	4620      	mov	r0, r4
 800e672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e674:	3468      	adds	r4, #104	; 0x68
 800e676:	e7d9      	b.n	800e62c <__sfp+0x1c>
 800e678:	2104      	movs	r1, #4
 800e67a:	4638      	mov	r0, r7
 800e67c:	f7ff ff62 	bl	800e544 <__sfmoreglue>
 800e680:	4604      	mov	r4, r0
 800e682:	6030      	str	r0, [r6, #0]
 800e684:	2800      	cmp	r0, #0
 800e686:	d1d5      	bne.n	800e634 <__sfp+0x24>
 800e688:	f7ff ff78 	bl	800e57c <__sfp_lock_release>
 800e68c:	230c      	movs	r3, #12
 800e68e:	603b      	str	r3, [r7, #0]
 800e690:	e7ee      	b.n	800e670 <__sfp+0x60>
 800e692:	bf00      	nop
 800e694:	08011778 	.word	0x08011778
 800e698:	ffff0001 	.word	0xffff0001

0800e69c <_fwalk_reent>:
 800e69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6a0:	4606      	mov	r6, r0
 800e6a2:	4688      	mov	r8, r1
 800e6a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e6a8:	2700      	movs	r7, #0
 800e6aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6ae:	f1b9 0901 	subs.w	r9, r9, #1
 800e6b2:	d505      	bpl.n	800e6c0 <_fwalk_reent+0x24>
 800e6b4:	6824      	ldr	r4, [r4, #0]
 800e6b6:	2c00      	cmp	r4, #0
 800e6b8:	d1f7      	bne.n	800e6aa <_fwalk_reent+0xe>
 800e6ba:	4638      	mov	r0, r7
 800e6bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6c0:	89ab      	ldrh	r3, [r5, #12]
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	d907      	bls.n	800e6d6 <_fwalk_reent+0x3a>
 800e6c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	d003      	beq.n	800e6d6 <_fwalk_reent+0x3a>
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	4630      	mov	r0, r6
 800e6d2:	47c0      	blx	r8
 800e6d4:	4307      	orrs	r7, r0
 800e6d6:	3568      	adds	r5, #104	; 0x68
 800e6d8:	e7e9      	b.n	800e6ae <_fwalk_reent+0x12>
	...

0800e6dc <__libc_init_array>:
 800e6dc:	b570      	push	{r4, r5, r6, lr}
 800e6de:	4d0d      	ldr	r5, [pc, #52]	; (800e714 <__libc_init_array+0x38>)
 800e6e0:	4c0d      	ldr	r4, [pc, #52]	; (800e718 <__libc_init_array+0x3c>)
 800e6e2:	1b64      	subs	r4, r4, r5
 800e6e4:	10a4      	asrs	r4, r4, #2
 800e6e6:	2600      	movs	r6, #0
 800e6e8:	42a6      	cmp	r6, r4
 800e6ea:	d109      	bne.n	800e700 <__libc_init_array+0x24>
 800e6ec:	4d0b      	ldr	r5, [pc, #44]	; (800e71c <__libc_init_array+0x40>)
 800e6ee:	4c0c      	ldr	r4, [pc, #48]	; (800e720 <__libc_init_array+0x44>)
 800e6f0:	f002 fea4 	bl	801143c <_init>
 800e6f4:	1b64      	subs	r4, r4, r5
 800e6f6:	10a4      	asrs	r4, r4, #2
 800e6f8:	2600      	movs	r6, #0
 800e6fa:	42a6      	cmp	r6, r4
 800e6fc:	d105      	bne.n	800e70a <__libc_init_array+0x2e>
 800e6fe:	bd70      	pop	{r4, r5, r6, pc}
 800e700:	f855 3b04 	ldr.w	r3, [r5], #4
 800e704:	4798      	blx	r3
 800e706:	3601      	adds	r6, #1
 800e708:	e7ee      	b.n	800e6e8 <__libc_init_array+0xc>
 800e70a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e70e:	4798      	blx	r3
 800e710:	3601      	adds	r6, #1
 800e712:	e7f2      	b.n	800e6fa <__libc_init_array+0x1e>
 800e714:	08011b2c 	.word	0x08011b2c
 800e718:	08011b2c 	.word	0x08011b2c
 800e71c:	08011b2c 	.word	0x08011b2c
 800e720:	08011b30 	.word	0x08011b30

0800e724 <__itoa>:
 800e724:	1e93      	subs	r3, r2, #2
 800e726:	2b22      	cmp	r3, #34	; 0x22
 800e728:	b510      	push	{r4, lr}
 800e72a:	460c      	mov	r4, r1
 800e72c:	d904      	bls.n	800e738 <__itoa+0x14>
 800e72e:	2300      	movs	r3, #0
 800e730:	700b      	strb	r3, [r1, #0]
 800e732:	461c      	mov	r4, r3
 800e734:	4620      	mov	r0, r4
 800e736:	bd10      	pop	{r4, pc}
 800e738:	2a0a      	cmp	r2, #10
 800e73a:	d109      	bne.n	800e750 <__itoa+0x2c>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	da07      	bge.n	800e750 <__itoa+0x2c>
 800e740:	232d      	movs	r3, #45	; 0x2d
 800e742:	700b      	strb	r3, [r1, #0]
 800e744:	4240      	negs	r0, r0
 800e746:	2101      	movs	r1, #1
 800e748:	4421      	add	r1, r4
 800e74a:	f000 fe37 	bl	800f3bc <__utoa>
 800e74e:	e7f1      	b.n	800e734 <__itoa+0x10>
 800e750:	2100      	movs	r1, #0
 800e752:	e7f9      	b.n	800e748 <__itoa+0x24>

0800e754 <itoa>:
 800e754:	f7ff bfe6 	b.w	800e724 <__itoa>

0800e758 <__retarget_lock_init_recursive>:
 800e758:	4770      	bx	lr

0800e75a <__retarget_lock_acquire_recursive>:
 800e75a:	4770      	bx	lr

0800e75c <__retarget_lock_release_recursive>:
 800e75c:	4770      	bx	lr
	...

0800e760 <malloc>:
 800e760:	4b02      	ldr	r3, [pc, #8]	; (800e76c <malloc+0xc>)
 800e762:	4601      	mov	r1, r0
 800e764:	6818      	ldr	r0, [r3, #0]
 800e766:	f000 b871 	b.w	800e84c <_malloc_r>
 800e76a:	bf00      	nop
 800e76c:	20000184 	.word	0x20000184

0800e770 <free>:
 800e770:	4b02      	ldr	r3, [pc, #8]	; (800e77c <free+0xc>)
 800e772:	4601      	mov	r1, r0
 800e774:	6818      	ldr	r0, [r3, #0]
 800e776:	f000 b819 	b.w	800e7ac <_free_r>
 800e77a:	bf00      	nop
 800e77c:	20000184 	.word	0x20000184

0800e780 <memcpy>:
 800e780:	440a      	add	r2, r1
 800e782:	4291      	cmp	r1, r2
 800e784:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e788:	d100      	bne.n	800e78c <memcpy+0xc>
 800e78a:	4770      	bx	lr
 800e78c:	b510      	push	{r4, lr}
 800e78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e792:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e796:	4291      	cmp	r1, r2
 800e798:	d1f9      	bne.n	800e78e <memcpy+0xe>
 800e79a:	bd10      	pop	{r4, pc}

0800e79c <memset>:
 800e79c:	4402      	add	r2, r0
 800e79e:	4603      	mov	r3, r0
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d100      	bne.n	800e7a6 <memset+0xa>
 800e7a4:	4770      	bx	lr
 800e7a6:	f803 1b01 	strb.w	r1, [r3], #1
 800e7aa:	e7f9      	b.n	800e7a0 <memset+0x4>

0800e7ac <_free_r>:
 800e7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7ae:	2900      	cmp	r1, #0
 800e7b0:	d048      	beq.n	800e844 <_free_r+0x98>
 800e7b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7b6:	9001      	str	r0, [sp, #4]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f1a1 0404 	sub.w	r4, r1, #4
 800e7be:	bfb8      	it	lt
 800e7c0:	18e4      	addlt	r4, r4, r3
 800e7c2:	f001 fdb1 	bl	8010328 <__malloc_lock>
 800e7c6:	4a20      	ldr	r2, [pc, #128]	; (800e848 <_free_r+0x9c>)
 800e7c8:	9801      	ldr	r0, [sp, #4]
 800e7ca:	6813      	ldr	r3, [r2, #0]
 800e7cc:	4615      	mov	r5, r2
 800e7ce:	b933      	cbnz	r3, 800e7de <_free_r+0x32>
 800e7d0:	6063      	str	r3, [r4, #4]
 800e7d2:	6014      	str	r4, [r2, #0]
 800e7d4:	b003      	add	sp, #12
 800e7d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7da:	f001 bdab 	b.w	8010334 <__malloc_unlock>
 800e7de:	42a3      	cmp	r3, r4
 800e7e0:	d90b      	bls.n	800e7fa <_free_r+0x4e>
 800e7e2:	6821      	ldr	r1, [r4, #0]
 800e7e4:	1862      	adds	r2, r4, r1
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	bf04      	itt	eq
 800e7ea:	681a      	ldreq	r2, [r3, #0]
 800e7ec:	685b      	ldreq	r3, [r3, #4]
 800e7ee:	6063      	str	r3, [r4, #4]
 800e7f0:	bf04      	itt	eq
 800e7f2:	1852      	addeq	r2, r2, r1
 800e7f4:	6022      	streq	r2, [r4, #0]
 800e7f6:	602c      	str	r4, [r5, #0]
 800e7f8:	e7ec      	b.n	800e7d4 <_free_r+0x28>
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	b10b      	cbz	r3, 800e804 <_free_r+0x58>
 800e800:	42a3      	cmp	r3, r4
 800e802:	d9fa      	bls.n	800e7fa <_free_r+0x4e>
 800e804:	6811      	ldr	r1, [r2, #0]
 800e806:	1855      	adds	r5, r2, r1
 800e808:	42a5      	cmp	r5, r4
 800e80a:	d10b      	bne.n	800e824 <_free_r+0x78>
 800e80c:	6824      	ldr	r4, [r4, #0]
 800e80e:	4421      	add	r1, r4
 800e810:	1854      	adds	r4, r2, r1
 800e812:	42a3      	cmp	r3, r4
 800e814:	6011      	str	r1, [r2, #0]
 800e816:	d1dd      	bne.n	800e7d4 <_free_r+0x28>
 800e818:	681c      	ldr	r4, [r3, #0]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	6053      	str	r3, [r2, #4]
 800e81e:	4421      	add	r1, r4
 800e820:	6011      	str	r1, [r2, #0]
 800e822:	e7d7      	b.n	800e7d4 <_free_r+0x28>
 800e824:	d902      	bls.n	800e82c <_free_r+0x80>
 800e826:	230c      	movs	r3, #12
 800e828:	6003      	str	r3, [r0, #0]
 800e82a:	e7d3      	b.n	800e7d4 <_free_r+0x28>
 800e82c:	6825      	ldr	r5, [r4, #0]
 800e82e:	1961      	adds	r1, r4, r5
 800e830:	428b      	cmp	r3, r1
 800e832:	bf04      	itt	eq
 800e834:	6819      	ldreq	r1, [r3, #0]
 800e836:	685b      	ldreq	r3, [r3, #4]
 800e838:	6063      	str	r3, [r4, #4]
 800e83a:	bf04      	itt	eq
 800e83c:	1949      	addeq	r1, r1, r5
 800e83e:	6021      	streq	r1, [r4, #0]
 800e840:	6054      	str	r4, [r2, #4]
 800e842:	e7c7      	b.n	800e7d4 <_free_r+0x28>
 800e844:	b003      	add	sp, #12
 800e846:	bd30      	pop	{r4, r5, pc}
 800e848:	20005368 	.word	0x20005368

0800e84c <_malloc_r>:
 800e84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e84e:	1ccd      	adds	r5, r1, #3
 800e850:	f025 0503 	bic.w	r5, r5, #3
 800e854:	3508      	adds	r5, #8
 800e856:	2d0c      	cmp	r5, #12
 800e858:	bf38      	it	cc
 800e85a:	250c      	movcc	r5, #12
 800e85c:	2d00      	cmp	r5, #0
 800e85e:	4606      	mov	r6, r0
 800e860:	db01      	blt.n	800e866 <_malloc_r+0x1a>
 800e862:	42a9      	cmp	r1, r5
 800e864:	d903      	bls.n	800e86e <_malloc_r+0x22>
 800e866:	230c      	movs	r3, #12
 800e868:	6033      	str	r3, [r6, #0]
 800e86a:	2000      	movs	r0, #0
 800e86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e86e:	f001 fd5b 	bl	8010328 <__malloc_lock>
 800e872:	4921      	ldr	r1, [pc, #132]	; (800e8f8 <_malloc_r+0xac>)
 800e874:	680a      	ldr	r2, [r1, #0]
 800e876:	4614      	mov	r4, r2
 800e878:	b99c      	cbnz	r4, 800e8a2 <_malloc_r+0x56>
 800e87a:	4f20      	ldr	r7, [pc, #128]	; (800e8fc <_malloc_r+0xb0>)
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	b923      	cbnz	r3, 800e88a <_malloc_r+0x3e>
 800e880:	4621      	mov	r1, r4
 800e882:	4630      	mov	r0, r6
 800e884:	f000 fd10 	bl	800f2a8 <_sbrk_r>
 800e888:	6038      	str	r0, [r7, #0]
 800e88a:	4629      	mov	r1, r5
 800e88c:	4630      	mov	r0, r6
 800e88e:	f000 fd0b 	bl	800f2a8 <_sbrk_r>
 800e892:	1c43      	adds	r3, r0, #1
 800e894:	d123      	bne.n	800e8de <_malloc_r+0x92>
 800e896:	230c      	movs	r3, #12
 800e898:	6033      	str	r3, [r6, #0]
 800e89a:	4630      	mov	r0, r6
 800e89c:	f001 fd4a 	bl	8010334 <__malloc_unlock>
 800e8a0:	e7e3      	b.n	800e86a <_malloc_r+0x1e>
 800e8a2:	6823      	ldr	r3, [r4, #0]
 800e8a4:	1b5b      	subs	r3, r3, r5
 800e8a6:	d417      	bmi.n	800e8d8 <_malloc_r+0x8c>
 800e8a8:	2b0b      	cmp	r3, #11
 800e8aa:	d903      	bls.n	800e8b4 <_malloc_r+0x68>
 800e8ac:	6023      	str	r3, [r4, #0]
 800e8ae:	441c      	add	r4, r3
 800e8b0:	6025      	str	r5, [r4, #0]
 800e8b2:	e004      	b.n	800e8be <_malloc_r+0x72>
 800e8b4:	6863      	ldr	r3, [r4, #4]
 800e8b6:	42a2      	cmp	r2, r4
 800e8b8:	bf0c      	ite	eq
 800e8ba:	600b      	streq	r3, [r1, #0]
 800e8bc:	6053      	strne	r3, [r2, #4]
 800e8be:	4630      	mov	r0, r6
 800e8c0:	f001 fd38 	bl	8010334 <__malloc_unlock>
 800e8c4:	f104 000b 	add.w	r0, r4, #11
 800e8c8:	1d23      	adds	r3, r4, #4
 800e8ca:	f020 0007 	bic.w	r0, r0, #7
 800e8ce:	1ac2      	subs	r2, r0, r3
 800e8d0:	d0cc      	beq.n	800e86c <_malloc_r+0x20>
 800e8d2:	1a1b      	subs	r3, r3, r0
 800e8d4:	50a3      	str	r3, [r4, r2]
 800e8d6:	e7c9      	b.n	800e86c <_malloc_r+0x20>
 800e8d8:	4622      	mov	r2, r4
 800e8da:	6864      	ldr	r4, [r4, #4]
 800e8dc:	e7cc      	b.n	800e878 <_malloc_r+0x2c>
 800e8de:	1cc4      	adds	r4, r0, #3
 800e8e0:	f024 0403 	bic.w	r4, r4, #3
 800e8e4:	42a0      	cmp	r0, r4
 800e8e6:	d0e3      	beq.n	800e8b0 <_malloc_r+0x64>
 800e8e8:	1a21      	subs	r1, r4, r0
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	f000 fcdc 	bl	800f2a8 <_sbrk_r>
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	d1dd      	bne.n	800e8b0 <_malloc_r+0x64>
 800e8f4:	e7cf      	b.n	800e896 <_malloc_r+0x4a>
 800e8f6:	bf00      	nop
 800e8f8:	20005368 	.word	0x20005368
 800e8fc:	2000536c 	.word	0x2000536c

0800e900 <__cvt>:
 800e900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e904:	ec55 4b10 	vmov	r4, r5, d0
 800e908:	2d00      	cmp	r5, #0
 800e90a:	460e      	mov	r6, r1
 800e90c:	4619      	mov	r1, r3
 800e90e:	462b      	mov	r3, r5
 800e910:	bfbb      	ittet	lt
 800e912:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e916:	461d      	movlt	r5, r3
 800e918:	2300      	movge	r3, #0
 800e91a:	232d      	movlt	r3, #45	; 0x2d
 800e91c:	700b      	strb	r3, [r1, #0]
 800e91e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e920:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e924:	4691      	mov	r9, r2
 800e926:	f023 0820 	bic.w	r8, r3, #32
 800e92a:	bfbc      	itt	lt
 800e92c:	4622      	movlt	r2, r4
 800e92e:	4614      	movlt	r4, r2
 800e930:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e934:	d005      	beq.n	800e942 <__cvt+0x42>
 800e936:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e93a:	d100      	bne.n	800e93e <__cvt+0x3e>
 800e93c:	3601      	adds	r6, #1
 800e93e:	2102      	movs	r1, #2
 800e940:	e000      	b.n	800e944 <__cvt+0x44>
 800e942:	2103      	movs	r1, #3
 800e944:	ab03      	add	r3, sp, #12
 800e946:	9301      	str	r3, [sp, #4]
 800e948:	ab02      	add	r3, sp, #8
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	ec45 4b10 	vmov	d0, r4, r5
 800e950:	4653      	mov	r3, sl
 800e952:	4632      	mov	r2, r6
 800e954:	f000 fe24 	bl	800f5a0 <_dtoa_r>
 800e958:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e95c:	4607      	mov	r7, r0
 800e95e:	d102      	bne.n	800e966 <__cvt+0x66>
 800e960:	f019 0f01 	tst.w	r9, #1
 800e964:	d022      	beq.n	800e9ac <__cvt+0xac>
 800e966:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e96a:	eb07 0906 	add.w	r9, r7, r6
 800e96e:	d110      	bne.n	800e992 <__cvt+0x92>
 800e970:	783b      	ldrb	r3, [r7, #0]
 800e972:	2b30      	cmp	r3, #48	; 0x30
 800e974:	d10a      	bne.n	800e98c <__cvt+0x8c>
 800e976:	2200      	movs	r2, #0
 800e978:	2300      	movs	r3, #0
 800e97a:	4620      	mov	r0, r4
 800e97c:	4629      	mov	r1, r5
 800e97e:	f7f2 f8a3 	bl	8000ac8 <__aeabi_dcmpeq>
 800e982:	b918      	cbnz	r0, 800e98c <__cvt+0x8c>
 800e984:	f1c6 0601 	rsb	r6, r6, #1
 800e988:	f8ca 6000 	str.w	r6, [sl]
 800e98c:	f8da 3000 	ldr.w	r3, [sl]
 800e990:	4499      	add	r9, r3
 800e992:	2200      	movs	r2, #0
 800e994:	2300      	movs	r3, #0
 800e996:	4620      	mov	r0, r4
 800e998:	4629      	mov	r1, r5
 800e99a:	f7f2 f895 	bl	8000ac8 <__aeabi_dcmpeq>
 800e99e:	b108      	cbz	r0, 800e9a4 <__cvt+0xa4>
 800e9a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e9a4:	2230      	movs	r2, #48	; 0x30
 800e9a6:	9b03      	ldr	r3, [sp, #12]
 800e9a8:	454b      	cmp	r3, r9
 800e9aa:	d307      	bcc.n	800e9bc <__cvt+0xbc>
 800e9ac:	9b03      	ldr	r3, [sp, #12]
 800e9ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9b0:	1bdb      	subs	r3, r3, r7
 800e9b2:	4638      	mov	r0, r7
 800e9b4:	6013      	str	r3, [r2, #0]
 800e9b6:	b004      	add	sp, #16
 800e9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9bc:	1c59      	adds	r1, r3, #1
 800e9be:	9103      	str	r1, [sp, #12]
 800e9c0:	701a      	strb	r2, [r3, #0]
 800e9c2:	e7f0      	b.n	800e9a6 <__cvt+0xa6>

0800e9c4 <__exponent>:
 800e9c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2900      	cmp	r1, #0
 800e9ca:	bfb8      	it	lt
 800e9cc:	4249      	neglt	r1, r1
 800e9ce:	f803 2b02 	strb.w	r2, [r3], #2
 800e9d2:	bfb4      	ite	lt
 800e9d4:	222d      	movlt	r2, #45	; 0x2d
 800e9d6:	222b      	movge	r2, #43	; 0x2b
 800e9d8:	2909      	cmp	r1, #9
 800e9da:	7042      	strb	r2, [r0, #1]
 800e9dc:	dd2a      	ble.n	800ea34 <__exponent+0x70>
 800e9de:	f10d 0407 	add.w	r4, sp, #7
 800e9e2:	46a4      	mov	ip, r4
 800e9e4:	270a      	movs	r7, #10
 800e9e6:	46a6      	mov	lr, r4
 800e9e8:	460a      	mov	r2, r1
 800e9ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800e9ee:	fb07 1516 	mls	r5, r7, r6, r1
 800e9f2:	3530      	adds	r5, #48	; 0x30
 800e9f4:	2a63      	cmp	r2, #99	; 0x63
 800e9f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e9fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e9fe:	4631      	mov	r1, r6
 800ea00:	dcf1      	bgt.n	800e9e6 <__exponent+0x22>
 800ea02:	3130      	adds	r1, #48	; 0x30
 800ea04:	f1ae 0502 	sub.w	r5, lr, #2
 800ea08:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ea0c:	1c44      	adds	r4, r0, #1
 800ea0e:	4629      	mov	r1, r5
 800ea10:	4561      	cmp	r1, ip
 800ea12:	d30a      	bcc.n	800ea2a <__exponent+0x66>
 800ea14:	f10d 0209 	add.w	r2, sp, #9
 800ea18:	eba2 020e 	sub.w	r2, r2, lr
 800ea1c:	4565      	cmp	r5, ip
 800ea1e:	bf88      	it	hi
 800ea20:	2200      	movhi	r2, #0
 800ea22:	4413      	add	r3, r2
 800ea24:	1a18      	subs	r0, r3, r0
 800ea26:	b003      	add	sp, #12
 800ea28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ea32:	e7ed      	b.n	800ea10 <__exponent+0x4c>
 800ea34:	2330      	movs	r3, #48	; 0x30
 800ea36:	3130      	adds	r1, #48	; 0x30
 800ea38:	7083      	strb	r3, [r0, #2]
 800ea3a:	70c1      	strb	r1, [r0, #3]
 800ea3c:	1d03      	adds	r3, r0, #4
 800ea3e:	e7f1      	b.n	800ea24 <__exponent+0x60>

0800ea40 <_printf_float>:
 800ea40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea44:	ed2d 8b02 	vpush	{d8}
 800ea48:	b08d      	sub	sp, #52	; 0x34
 800ea4a:	460c      	mov	r4, r1
 800ea4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ea50:	4616      	mov	r6, r2
 800ea52:	461f      	mov	r7, r3
 800ea54:	4605      	mov	r5, r0
 800ea56:	f001 fc51 	bl	80102fc <_localeconv_r>
 800ea5a:	f8d0 a000 	ldr.w	sl, [r0]
 800ea5e:	4650      	mov	r0, sl
 800ea60:	f7f1 fbb6 	bl	80001d0 <strlen>
 800ea64:	2300      	movs	r3, #0
 800ea66:	930a      	str	r3, [sp, #40]	; 0x28
 800ea68:	6823      	ldr	r3, [r4, #0]
 800ea6a:	9305      	str	r3, [sp, #20]
 800ea6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ea70:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ea74:	3307      	adds	r3, #7
 800ea76:	f023 0307 	bic.w	r3, r3, #7
 800ea7a:	f103 0208 	add.w	r2, r3, #8
 800ea7e:	f8c8 2000 	str.w	r2, [r8]
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ea8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ea8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea92:	9307      	str	r3, [sp, #28]
 800ea94:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea98:	ee08 0a10 	vmov	s16, r0
 800ea9c:	4b9f      	ldr	r3, [pc, #636]	; (800ed1c <_printf_float+0x2dc>)
 800ea9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eaa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eaa6:	f7f2 f841 	bl	8000b2c <__aeabi_dcmpun>
 800eaaa:	bb88      	cbnz	r0, 800eb10 <_printf_float+0xd0>
 800eaac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eab0:	4b9a      	ldr	r3, [pc, #616]	; (800ed1c <_printf_float+0x2dc>)
 800eab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eab6:	f7f2 f81b 	bl	8000af0 <__aeabi_dcmple>
 800eaba:	bb48      	cbnz	r0, 800eb10 <_printf_float+0xd0>
 800eabc:	2200      	movs	r2, #0
 800eabe:	2300      	movs	r3, #0
 800eac0:	4640      	mov	r0, r8
 800eac2:	4649      	mov	r1, r9
 800eac4:	f7f2 f80a 	bl	8000adc <__aeabi_dcmplt>
 800eac8:	b110      	cbz	r0, 800ead0 <_printf_float+0x90>
 800eaca:	232d      	movs	r3, #45	; 0x2d
 800eacc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ead0:	4b93      	ldr	r3, [pc, #588]	; (800ed20 <_printf_float+0x2e0>)
 800ead2:	4894      	ldr	r0, [pc, #592]	; (800ed24 <_printf_float+0x2e4>)
 800ead4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ead8:	bf94      	ite	ls
 800eada:	4698      	movls	r8, r3
 800eadc:	4680      	movhi	r8, r0
 800eade:	2303      	movs	r3, #3
 800eae0:	6123      	str	r3, [r4, #16]
 800eae2:	9b05      	ldr	r3, [sp, #20]
 800eae4:	f023 0204 	bic.w	r2, r3, #4
 800eae8:	6022      	str	r2, [r4, #0]
 800eaea:	f04f 0900 	mov.w	r9, #0
 800eaee:	9700      	str	r7, [sp, #0]
 800eaf0:	4633      	mov	r3, r6
 800eaf2:	aa0b      	add	r2, sp, #44	; 0x2c
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f000 f9d8 	bl	800eeac <_printf_common>
 800eafc:	3001      	adds	r0, #1
 800eafe:	f040 8090 	bne.w	800ec22 <_printf_float+0x1e2>
 800eb02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb06:	b00d      	add	sp, #52	; 0x34
 800eb08:	ecbd 8b02 	vpop	{d8}
 800eb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb10:	4642      	mov	r2, r8
 800eb12:	464b      	mov	r3, r9
 800eb14:	4640      	mov	r0, r8
 800eb16:	4649      	mov	r1, r9
 800eb18:	f7f2 f808 	bl	8000b2c <__aeabi_dcmpun>
 800eb1c:	b140      	cbz	r0, 800eb30 <_printf_float+0xf0>
 800eb1e:	464b      	mov	r3, r9
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	bfbc      	itt	lt
 800eb24:	232d      	movlt	r3, #45	; 0x2d
 800eb26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eb2a:	487f      	ldr	r0, [pc, #508]	; (800ed28 <_printf_float+0x2e8>)
 800eb2c:	4b7f      	ldr	r3, [pc, #508]	; (800ed2c <_printf_float+0x2ec>)
 800eb2e:	e7d1      	b.n	800ead4 <_printf_float+0x94>
 800eb30:	6863      	ldr	r3, [r4, #4]
 800eb32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eb36:	9206      	str	r2, [sp, #24]
 800eb38:	1c5a      	adds	r2, r3, #1
 800eb3a:	d13f      	bne.n	800ebbc <_printf_float+0x17c>
 800eb3c:	2306      	movs	r3, #6
 800eb3e:	6063      	str	r3, [r4, #4]
 800eb40:	9b05      	ldr	r3, [sp, #20]
 800eb42:	6861      	ldr	r1, [r4, #4]
 800eb44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eb48:	2300      	movs	r3, #0
 800eb4a:	9303      	str	r3, [sp, #12]
 800eb4c:	ab0a      	add	r3, sp, #40	; 0x28
 800eb4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eb52:	ab09      	add	r3, sp, #36	; 0x24
 800eb54:	ec49 8b10 	vmov	d0, r8, r9
 800eb58:	9300      	str	r3, [sp, #0]
 800eb5a:	6022      	str	r2, [r4, #0]
 800eb5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eb60:	4628      	mov	r0, r5
 800eb62:	f7ff fecd 	bl	800e900 <__cvt>
 800eb66:	9b06      	ldr	r3, [sp, #24]
 800eb68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb6a:	2b47      	cmp	r3, #71	; 0x47
 800eb6c:	4680      	mov	r8, r0
 800eb6e:	d108      	bne.n	800eb82 <_printf_float+0x142>
 800eb70:	1cc8      	adds	r0, r1, #3
 800eb72:	db02      	blt.n	800eb7a <_printf_float+0x13a>
 800eb74:	6863      	ldr	r3, [r4, #4]
 800eb76:	4299      	cmp	r1, r3
 800eb78:	dd41      	ble.n	800ebfe <_printf_float+0x1be>
 800eb7a:	f1ab 0b02 	sub.w	fp, fp, #2
 800eb7e:	fa5f fb8b 	uxtb.w	fp, fp
 800eb82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb86:	d820      	bhi.n	800ebca <_printf_float+0x18a>
 800eb88:	3901      	subs	r1, #1
 800eb8a:	465a      	mov	r2, fp
 800eb8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eb90:	9109      	str	r1, [sp, #36]	; 0x24
 800eb92:	f7ff ff17 	bl	800e9c4 <__exponent>
 800eb96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb98:	1813      	adds	r3, r2, r0
 800eb9a:	2a01      	cmp	r2, #1
 800eb9c:	4681      	mov	r9, r0
 800eb9e:	6123      	str	r3, [r4, #16]
 800eba0:	dc02      	bgt.n	800eba8 <_printf_float+0x168>
 800eba2:	6822      	ldr	r2, [r4, #0]
 800eba4:	07d2      	lsls	r2, r2, #31
 800eba6:	d501      	bpl.n	800ebac <_printf_float+0x16c>
 800eba8:	3301      	adds	r3, #1
 800ebaa:	6123      	str	r3, [r4, #16]
 800ebac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d09c      	beq.n	800eaee <_printf_float+0xae>
 800ebb4:	232d      	movs	r3, #45	; 0x2d
 800ebb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebba:	e798      	b.n	800eaee <_printf_float+0xae>
 800ebbc:	9a06      	ldr	r2, [sp, #24]
 800ebbe:	2a47      	cmp	r2, #71	; 0x47
 800ebc0:	d1be      	bne.n	800eb40 <_printf_float+0x100>
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d1bc      	bne.n	800eb40 <_printf_float+0x100>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e7b9      	b.n	800eb3e <_printf_float+0xfe>
 800ebca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ebce:	d118      	bne.n	800ec02 <_printf_float+0x1c2>
 800ebd0:	2900      	cmp	r1, #0
 800ebd2:	6863      	ldr	r3, [r4, #4]
 800ebd4:	dd0b      	ble.n	800ebee <_printf_float+0x1ae>
 800ebd6:	6121      	str	r1, [r4, #16]
 800ebd8:	b913      	cbnz	r3, 800ebe0 <_printf_float+0x1a0>
 800ebda:	6822      	ldr	r2, [r4, #0]
 800ebdc:	07d0      	lsls	r0, r2, #31
 800ebde:	d502      	bpl.n	800ebe6 <_printf_float+0x1a6>
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	440b      	add	r3, r1
 800ebe4:	6123      	str	r3, [r4, #16]
 800ebe6:	65a1      	str	r1, [r4, #88]	; 0x58
 800ebe8:	f04f 0900 	mov.w	r9, #0
 800ebec:	e7de      	b.n	800ebac <_printf_float+0x16c>
 800ebee:	b913      	cbnz	r3, 800ebf6 <_printf_float+0x1b6>
 800ebf0:	6822      	ldr	r2, [r4, #0]
 800ebf2:	07d2      	lsls	r2, r2, #31
 800ebf4:	d501      	bpl.n	800ebfa <_printf_float+0x1ba>
 800ebf6:	3302      	adds	r3, #2
 800ebf8:	e7f4      	b.n	800ebe4 <_printf_float+0x1a4>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e7f2      	b.n	800ebe4 <_printf_float+0x1a4>
 800ebfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ec02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec04:	4299      	cmp	r1, r3
 800ec06:	db05      	blt.n	800ec14 <_printf_float+0x1d4>
 800ec08:	6823      	ldr	r3, [r4, #0]
 800ec0a:	6121      	str	r1, [r4, #16]
 800ec0c:	07d8      	lsls	r0, r3, #31
 800ec0e:	d5ea      	bpl.n	800ebe6 <_printf_float+0x1a6>
 800ec10:	1c4b      	adds	r3, r1, #1
 800ec12:	e7e7      	b.n	800ebe4 <_printf_float+0x1a4>
 800ec14:	2900      	cmp	r1, #0
 800ec16:	bfd4      	ite	le
 800ec18:	f1c1 0202 	rsble	r2, r1, #2
 800ec1c:	2201      	movgt	r2, #1
 800ec1e:	4413      	add	r3, r2
 800ec20:	e7e0      	b.n	800ebe4 <_printf_float+0x1a4>
 800ec22:	6823      	ldr	r3, [r4, #0]
 800ec24:	055a      	lsls	r2, r3, #21
 800ec26:	d407      	bmi.n	800ec38 <_printf_float+0x1f8>
 800ec28:	6923      	ldr	r3, [r4, #16]
 800ec2a:	4642      	mov	r2, r8
 800ec2c:	4631      	mov	r1, r6
 800ec2e:	4628      	mov	r0, r5
 800ec30:	47b8      	blx	r7
 800ec32:	3001      	adds	r0, #1
 800ec34:	d12c      	bne.n	800ec90 <_printf_float+0x250>
 800ec36:	e764      	b.n	800eb02 <_printf_float+0xc2>
 800ec38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec3c:	f240 80e0 	bls.w	800ee00 <_printf_float+0x3c0>
 800ec40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec44:	2200      	movs	r2, #0
 800ec46:	2300      	movs	r3, #0
 800ec48:	f7f1 ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d034      	beq.n	800ecba <_printf_float+0x27a>
 800ec50:	4a37      	ldr	r2, [pc, #220]	; (800ed30 <_printf_float+0x2f0>)
 800ec52:	2301      	movs	r3, #1
 800ec54:	4631      	mov	r1, r6
 800ec56:	4628      	mov	r0, r5
 800ec58:	47b8      	blx	r7
 800ec5a:	3001      	adds	r0, #1
 800ec5c:	f43f af51 	beq.w	800eb02 <_printf_float+0xc2>
 800ec60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec64:	429a      	cmp	r2, r3
 800ec66:	db02      	blt.n	800ec6e <_printf_float+0x22e>
 800ec68:	6823      	ldr	r3, [r4, #0]
 800ec6a:	07d8      	lsls	r0, r3, #31
 800ec6c:	d510      	bpl.n	800ec90 <_printf_float+0x250>
 800ec6e:	ee18 3a10 	vmov	r3, s16
 800ec72:	4652      	mov	r2, sl
 800ec74:	4631      	mov	r1, r6
 800ec76:	4628      	mov	r0, r5
 800ec78:	47b8      	blx	r7
 800ec7a:	3001      	adds	r0, #1
 800ec7c:	f43f af41 	beq.w	800eb02 <_printf_float+0xc2>
 800ec80:	f04f 0800 	mov.w	r8, #0
 800ec84:	f104 091a 	add.w	r9, r4, #26
 800ec88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec8a:	3b01      	subs	r3, #1
 800ec8c:	4543      	cmp	r3, r8
 800ec8e:	dc09      	bgt.n	800eca4 <_printf_float+0x264>
 800ec90:	6823      	ldr	r3, [r4, #0]
 800ec92:	079b      	lsls	r3, r3, #30
 800ec94:	f100 8105 	bmi.w	800eea2 <_printf_float+0x462>
 800ec98:	68e0      	ldr	r0, [r4, #12]
 800ec9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec9c:	4298      	cmp	r0, r3
 800ec9e:	bfb8      	it	lt
 800eca0:	4618      	movlt	r0, r3
 800eca2:	e730      	b.n	800eb06 <_printf_float+0xc6>
 800eca4:	2301      	movs	r3, #1
 800eca6:	464a      	mov	r2, r9
 800eca8:	4631      	mov	r1, r6
 800ecaa:	4628      	mov	r0, r5
 800ecac:	47b8      	blx	r7
 800ecae:	3001      	adds	r0, #1
 800ecb0:	f43f af27 	beq.w	800eb02 <_printf_float+0xc2>
 800ecb4:	f108 0801 	add.w	r8, r8, #1
 800ecb8:	e7e6      	b.n	800ec88 <_printf_float+0x248>
 800ecba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	dc39      	bgt.n	800ed34 <_printf_float+0x2f4>
 800ecc0:	4a1b      	ldr	r2, [pc, #108]	; (800ed30 <_printf_float+0x2f0>)
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	4631      	mov	r1, r6
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	47b8      	blx	r7
 800ecca:	3001      	adds	r0, #1
 800eccc:	f43f af19 	beq.w	800eb02 <_printf_float+0xc2>
 800ecd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	d102      	bne.n	800ecde <_printf_float+0x29e>
 800ecd8:	6823      	ldr	r3, [r4, #0]
 800ecda:	07d9      	lsls	r1, r3, #31
 800ecdc:	d5d8      	bpl.n	800ec90 <_printf_float+0x250>
 800ecde:	ee18 3a10 	vmov	r3, s16
 800ece2:	4652      	mov	r2, sl
 800ece4:	4631      	mov	r1, r6
 800ece6:	4628      	mov	r0, r5
 800ece8:	47b8      	blx	r7
 800ecea:	3001      	adds	r0, #1
 800ecec:	f43f af09 	beq.w	800eb02 <_printf_float+0xc2>
 800ecf0:	f04f 0900 	mov.w	r9, #0
 800ecf4:	f104 0a1a 	add.w	sl, r4, #26
 800ecf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecfa:	425b      	negs	r3, r3
 800ecfc:	454b      	cmp	r3, r9
 800ecfe:	dc01      	bgt.n	800ed04 <_printf_float+0x2c4>
 800ed00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed02:	e792      	b.n	800ec2a <_printf_float+0x1ea>
 800ed04:	2301      	movs	r3, #1
 800ed06:	4652      	mov	r2, sl
 800ed08:	4631      	mov	r1, r6
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	47b8      	blx	r7
 800ed0e:	3001      	adds	r0, #1
 800ed10:	f43f aef7 	beq.w	800eb02 <_printf_float+0xc2>
 800ed14:	f109 0901 	add.w	r9, r9, #1
 800ed18:	e7ee      	b.n	800ecf8 <_printf_float+0x2b8>
 800ed1a:	bf00      	nop
 800ed1c:	7fefffff 	.word	0x7fefffff
 800ed20:	0801177c 	.word	0x0801177c
 800ed24:	08011780 	.word	0x08011780
 800ed28:	08011788 	.word	0x08011788
 800ed2c:	08011784 	.word	0x08011784
 800ed30:	0801178c 	.word	0x0801178c
 800ed34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	bfa8      	it	ge
 800ed3c:	461a      	movge	r2, r3
 800ed3e:	2a00      	cmp	r2, #0
 800ed40:	4691      	mov	r9, r2
 800ed42:	dc37      	bgt.n	800edb4 <_printf_float+0x374>
 800ed44:	f04f 0b00 	mov.w	fp, #0
 800ed48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed4c:	f104 021a 	add.w	r2, r4, #26
 800ed50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed52:	9305      	str	r3, [sp, #20]
 800ed54:	eba3 0309 	sub.w	r3, r3, r9
 800ed58:	455b      	cmp	r3, fp
 800ed5a:	dc33      	bgt.n	800edc4 <_printf_float+0x384>
 800ed5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed60:	429a      	cmp	r2, r3
 800ed62:	db3b      	blt.n	800eddc <_printf_float+0x39c>
 800ed64:	6823      	ldr	r3, [r4, #0]
 800ed66:	07da      	lsls	r2, r3, #31
 800ed68:	d438      	bmi.n	800eddc <_printf_float+0x39c>
 800ed6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed6c:	9b05      	ldr	r3, [sp, #20]
 800ed6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed70:	1ad3      	subs	r3, r2, r3
 800ed72:	eba2 0901 	sub.w	r9, r2, r1
 800ed76:	4599      	cmp	r9, r3
 800ed78:	bfa8      	it	ge
 800ed7a:	4699      	movge	r9, r3
 800ed7c:	f1b9 0f00 	cmp.w	r9, #0
 800ed80:	dc35      	bgt.n	800edee <_printf_float+0x3ae>
 800ed82:	f04f 0800 	mov.w	r8, #0
 800ed86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed8a:	f104 0a1a 	add.w	sl, r4, #26
 800ed8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed92:	1a9b      	subs	r3, r3, r2
 800ed94:	eba3 0309 	sub.w	r3, r3, r9
 800ed98:	4543      	cmp	r3, r8
 800ed9a:	f77f af79 	ble.w	800ec90 <_printf_float+0x250>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	4652      	mov	r2, sl
 800eda2:	4631      	mov	r1, r6
 800eda4:	4628      	mov	r0, r5
 800eda6:	47b8      	blx	r7
 800eda8:	3001      	adds	r0, #1
 800edaa:	f43f aeaa 	beq.w	800eb02 <_printf_float+0xc2>
 800edae:	f108 0801 	add.w	r8, r8, #1
 800edb2:	e7ec      	b.n	800ed8e <_printf_float+0x34e>
 800edb4:	4613      	mov	r3, r2
 800edb6:	4631      	mov	r1, r6
 800edb8:	4642      	mov	r2, r8
 800edba:	4628      	mov	r0, r5
 800edbc:	47b8      	blx	r7
 800edbe:	3001      	adds	r0, #1
 800edc0:	d1c0      	bne.n	800ed44 <_printf_float+0x304>
 800edc2:	e69e      	b.n	800eb02 <_printf_float+0xc2>
 800edc4:	2301      	movs	r3, #1
 800edc6:	4631      	mov	r1, r6
 800edc8:	4628      	mov	r0, r5
 800edca:	9205      	str	r2, [sp, #20]
 800edcc:	47b8      	blx	r7
 800edce:	3001      	adds	r0, #1
 800edd0:	f43f ae97 	beq.w	800eb02 <_printf_float+0xc2>
 800edd4:	9a05      	ldr	r2, [sp, #20]
 800edd6:	f10b 0b01 	add.w	fp, fp, #1
 800edda:	e7b9      	b.n	800ed50 <_printf_float+0x310>
 800eddc:	ee18 3a10 	vmov	r3, s16
 800ede0:	4652      	mov	r2, sl
 800ede2:	4631      	mov	r1, r6
 800ede4:	4628      	mov	r0, r5
 800ede6:	47b8      	blx	r7
 800ede8:	3001      	adds	r0, #1
 800edea:	d1be      	bne.n	800ed6a <_printf_float+0x32a>
 800edec:	e689      	b.n	800eb02 <_printf_float+0xc2>
 800edee:	9a05      	ldr	r2, [sp, #20]
 800edf0:	464b      	mov	r3, r9
 800edf2:	4442      	add	r2, r8
 800edf4:	4631      	mov	r1, r6
 800edf6:	4628      	mov	r0, r5
 800edf8:	47b8      	blx	r7
 800edfa:	3001      	adds	r0, #1
 800edfc:	d1c1      	bne.n	800ed82 <_printf_float+0x342>
 800edfe:	e680      	b.n	800eb02 <_printf_float+0xc2>
 800ee00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee02:	2a01      	cmp	r2, #1
 800ee04:	dc01      	bgt.n	800ee0a <_printf_float+0x3ca>
 800ee06:	07db      	lsls	r3, r3, #31
 800ee08:	d538      	bpl.n	800ee7c <_printf_float+0x43c>
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	4642      	mov	r2, r8
 800ee0e:	4631      	mov	r1, r6
 800ee10:	4628      	mov	r0, r5
 800ee12:	47b8      	blx	r7
 800ee14:	3001      	adds	r0, #1
 800ee16:	f43f ae74 	beq.w	800eb02 <_printf_float+0xc2>
 800ee1a:	ee18 3a10 	vmov	r3, s16
 800ee1e:	4652      	mov	r2, sl
 800ee20:	4631      	mov	r1, r6
 800ee22:	4628      	mov	r0, r5
 800ee24:	47b8      	blx	r7
 800ee26:	3001      	adds	r0, #1
 800ee28:	f43f ae6b 	beq.w	800eb02 <_printf_float+0xc2>
 800ee2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ee30:	2200      	movs	r2, #0
 800ee32:	2300      	movs	r3, #0
 800ee34:	f7f1 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee38:	b9d8      	cbnz	r0, 800ee72 <_printf_float+0x432>
 800ee3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee3c:	f108 0201 	add.w	r2, r8, #1
 800ee40:	3b01      	subs	r3, #1
 800ee42:	4631      	mov	r1, r6
 800ee44:	4628      	mov	r0, r5
 800ee46:	47b8      	blx	r7
 800ee48:	3001      	adds	r0, #1
 800ee4a:	d10e      	bne.n	800ee6a <_printf_float+0x42a>
 800ee4c:	e659      	b.n	800eb02 <_printf_float+0xc2>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	4652      	mov	r2, sl
 800ee52:	4631      	mov	r1, r6
 800ee54:	4628      	mov	r0, r5
 800ee56:	47b8      	blx	r7
 800ee58:	3001      	adds	r0, #1
 800ee5a:	f43f ae52 	beq.w	800eb02 <_printf_float+0xc2>
 800ee5e:	f108 0801 	add.w	r8, r8, #1
 800ee62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee64:	3b01      	subs	r3, #1
 800ee66:	4543      	cmp	r3, r8
 800ee68:	dcf1      	bgt.n	800ee4e <_printf_float+0x40e>
 800ee6a:	464b      	mov	r3, r9
 800ee6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ee70:	e6dc      	b.n	800ec2c <_printf_float+0x1ec>
 800ee72:	f04f 0800 	mov.w	r8, #0
 800ee76:	f104 0a1a 	add.w	sl, r4, #26
 800ee7a:	e7f2      	b.n	800ee62 <_printf_float+0x422>
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	4642      	mov	r2, r8
 800ee80:	e7df      	b.n	800ee42 <_printf_float+0x402>
 800ee82:	2301      	movs	r3, #1
 800ee84:	464a      	mov	r2, r9
 800ee86:	4631      	mov	r1, r6
 800ee88:	4628      	mov	r0, r5
 800ee8a:	47b8      	blx	r7
 800ee8c:	3001      	adds	r0, #1
 800ee8e:	f43f ae38 	beq.w	800eb02 <_printf_float+0xc2>
 800ee92:	f108 0801 	add.w	r8, r8, #1
 800ee96:	68e3      	ldr	r3, [r4, #12]
 800ee98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee9a:	1a5b      	subs	r3, r3, r1
 800ee9c:	4543      	cmp	r3, r8
 800ee9e:	dcf0      	bgt.n	800ee82 <_printf_float+0x442>
 800eea0:	e6fa      	b.n	800ec98 <_printf_float+0x258>
 800eea2:	f04f 0800 	mov.w	r8, #0
 800eea6:	f104 0919 	add.w	r9, r4, #25
 800eeaa:	e7f4      	b.n	800ee96 <_printf_float+0x456>

0800eeac <_printf_common>:
 800eeac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb0:	4616      	mov	r6, r2
 800eeb2:	4699      	mov	r9, r3
 800eeb4:	688a      	ldr	r2, [r1, #8]
 800eeb6:	690b      	ldr	r3, [r1, #16]
 800eeb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eebc:	4293      	cmp	r3, r2
 800eebe:	bfb8      	it	lt
 800eec0:	4613      	movlt	r3, r2
 800eec2:	6033      	str	r3, [r6, #0]
 800eec4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eec8:	4607      	mov	r7, r0
 800eeca:	460c      	mov	r4, r1
 800eecc:	b10a      	cbz	r2, 800eed2 <_printf_common+0x26>
 800eece:	3301      	adds	r3, #1
 800eed0:	6033      	str	r3, [r6, #0]
 800eed2:	6823      	ldr	r3, [r4, #0]
 800eed4:	0699      	lsls	r1, r3, #26
 800eed6:	bf42      	ittt	mi
 800eed8:	6833      	ldrmi	r3, [r6, #0]
 800eeda:	3302      	addmi	r3, #2
 800eedc:	6033      	strmi	r3, [r6, #0]
 800eede:	6825      	ldr	r5, [r4, #0]
 800eee0:	f015 0506 	ands.w	r5, r5, #6
 800eee4:	d106      	bne.n	800eef4 <_printf_common+0x48>
 800eee6:	f104 0a19 	add.w	sl, r4, #25
 800eeea:	68e3      	ldr	r3, [r4, #12]
 800eeec:	6832      	ldr	r2, [r6, #0]
 800eeee:	1a9b      	subs	r3, r3, r2
 800eef0:	42ab      	cmp	r3, r5
 800eef2:	dc26      	bgt.n	800ef42 <_printf_common+0x96>
 800eef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eef8:	1e13      	subs	r3, r2, #0
 800eefa:	6822      	ldr	r2, [r4, #0]
 800eefc:	bf18      	it	ne
 800eefe:	2301      	movne	r3, #1
 800ef00:	0692      	lsls	r2, r2, #26
 800ef02:	d42b      	bmi.n	800ef5c <_printf_common+0xb0>
 800ef04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef08:	4649      	mov	r1, r9
 800ef0a:	4638      	mov	r0, r7
 800ef0c:	47c0      	blx	r8
 800ef0e:	3001      	adds	r0, #1
 800ef10:	d01e      	beq.n	800ef50 <_printf_common+0xa4>
 800ef12:	6823      	ldr	r3, [r4, #0]
 800ef14:	68e5      	ldr	r5, [r4, #12]
 800ef16:	6832      	ldr	r2, [r6, #0]
 800ef18:	f003 0306 	and.w	r3, r3, #6
 800ef1c:	2b04      	cmp	r3, #4
 800ef1e:	bf08      	it	eq
 800ef20:	1aad      	subeq	r5, r5, r2
 800ef22:	68a3      	ldr	r3, [r4, #8]
 800ef24:	6922      	ldr	r2, [r4, #16]
 800ef26:	bf0c      	ite	eq
 800ef28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef2c:	2500      	movne	r5, #0
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	bfc4      	itt	gt
 800ef32:	1a9b      	subgt	r3, r3, r2
 800ef34:	18ed      	addgt	r5, r5, r3
 800ef36:	2600      	movs	r6, #0
 800ef38:	341a      	adds	r4, #26
 800ef3a:	42b5      	cmp	r5, r6
 800ef3c:	d11a      	bne.n	800ef74 <_printf_common+0xc8>
 800ef3e:	2000      	movs	r0, #0
 800ef40:	e008      	b.n	800ef54 <_printf_common+0xa8>
 800ef42:	2301      	movs	r3, #1
 800ef44:	4652      	mov	r2, sl
 800ef46:	4649      	mov	r1, r9
 800ef48:	4638      	mov	r0, r7
 800ef4a:	47c0      	blx	r8
 800ef4c:	3001      	adds	r0, #1
 800ef4e:	d103      	bne.n	800ef58 <_printf_common+0xac>
 800ef50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef58:	3501      	adds	r5, #1
 800ef5a:	e7c6      	b.n	800eeea <_printf_common+0x3e>
 800ef5c:	18e1      	adds	r1, r4, r3
 800ef5e:	1c5a      	adds	r2, r3, #1
 800ef60:	2030      	movs	r0, #48	; 0x30
 800ef62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef66:	4422      	add	r2, r4
 800ef68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef70:	3302      	adds	r3, #2
 800ef72:	e7c7      	b.n	800ef04 <_printf_common+0x58>
 800ef74:	2301      	movs	r3, #1
 800ef76:	4622      	mov	r2, r4
 800ef78:	4649      	mov	r1, r9
 800ef7a:	4638      	mov	r0, r7
 800ef7c:	47c0      	blx	r8
 800ef7e:	3001      	adds	r0, #1
 800ef80:	d0e6      	beq.n	800ef50 <_printf_common+0xa4>
 800ef82:	3601      	adds	r6, #1
 800ef84:	e7d9      	b.n	800ef3a <_printf_common+0x8e>
	...

0800ef88 <_printf_i>:
 800ef88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef8c:	460c      	mov	r4, r1
 800ef8e:	4691      	mov	r9, r2
 800ef90:	7e27      	ldrb	r7, [r4, #24]
 800ef92:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef94:	2f78      	cmp	r7, #120	; 0x78
 800ef96:	4680      	mov	r8, r0
 800ef98:	469a      	mov	sl, r3
 800ef9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef9e:	d807      	bhi.n	800efb0 <_printf_i+0x28>
 800efa0:	2f62      	cmp	r7, #98	; 0x62
 800efa2:	d80a      	bhi.n	800efba <_printf_i+0x32>
 800efa4:	2f00      	cmp	r7, #0
 800efa6:	f000 80d8 	beq.w	800f15a <_printf_i+0x1d2>
 800efaa:	2f58      	cmp	r7, #88	; 0x58
 800efac:	f000 80a3 	beq.w	800f0f6 <_printf_i+0x16e>
 800efb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800efb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efb8:	e03a      	b.n	800f030 <_printf_i+0xa8>
 800efba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efbe:	2b15      	cmp	r3, #21
 800efc0:	d8f6      	bhi.n	800efb0 <_printf_i+0x28>
 800efc2:	a001      	add	r0, pc, #4	; (adr r0, 800efc8 <_printf_i+0x40>)
 800efc4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800efc8:	0800f021 	.word	0x0800f021
 800efcc:	0800f035 	.word	0x0800f035
 800efd0:	0800efb1 	.word	0x0800efb1
 800efd4:	0800efb1 	.word	0x0800efb1
 800efd8:	0800efb1 	.word	0x0800efb1
 800efdc:	0800efb1 	.word	0x0800efb1
 800efe0:	0800f035 	.word	0x0800f035
 800efe4:	0800efb1 	.word	0x0800efb1
 800efe8:	0800efb1 	.word	0x0800efb1
 800efec:	0800efb1 	.word	0x0800efb1
 800eff0:	0800efb1 	.word	0x0800efb1
 800eff4:	0800f141 	.word	0x0800f141
 800eff8:	0800f065 	.word	0x0800f065
 800effc:	0800f123 	.word	0x0800f123
 800f000:	0800efb1 	.word	0x0800efb1
 800f004:	0800efb1 	.word	0x0800efb1
 800f008:	0800f163 	.word	0x0800f163
 800f00c:	0800efb1 	.word	0x0800efb1
 800f010:	0800f065 	.word	0x0800f065
 800f014:	0800efb1 	.word	0x0800efb1
 800f018:	0800efb1 	.word	0x0800efb1
 800f01c:	0800f12b 	.word	0x0800f12b
 800f020:	680b      	ldr	r3, [r1, #0]
 800f022:	1d1a      	adds	r2, r3, #4
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	600a      	str	r2, [r1, #0]
 800f028:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f02c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f030:	2301      	movs	r3, #1
 800f032:	e0a3      	b.n	800f17c <_printf_i+0x1f4>
 800f034:	6825      	ldr	r5, [r4, #0]
 800f036:	6808      	ldr	r0, [r1, #0]
 800f038:	062e      	lsls	r6, r5, #24
 800f03a:	f100 0304 	add.w	r3, r0, #4
 800f03e:	d50a      	bpl.n	800f056 <_printf_i+0xce>
 800f040:	6805      	ldr	r5, [r0, #0]
 800f042:	600b      	str	r3, [r1, #0]
 800f044:	2d00      	cmp	r5, #0
 800f046:	da03      	bge.n	800f050 <_printf_i+0xc8>
 800f048:	232d      	movs	r3, #45	; 0x2d
 800f04a:	426d      	negs	r5, r5
 800f04c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f050:	485e      	ldr	r0, [pc, #376]	; (800f1cc <_printf_i+0x244>)
 800f052:	230a      	movs	r3, #10
 800f054:	e019      	b.n	800f08a <_printf_i+0x102>
 800f056:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f05a:	6805      	ldr	r5, [r0, #0]
 800f05c:	600b      	str	r3, [r1, #0]
 800f05e:	bf18      	it	ne
 800f060:	b22d      	sxthne	r5, r5
 800f062:	e7ef      	b.n	800f044 <_printf_i+0xbc>
 800f064:	680b      	ldr	r3, [r1, #0]
 800f066:	6825      	ldr	r5, [r4, #0]
 800f068:	1d18      	adds	r0, r3, #4
 800f06a:	6008      	str	r0, [r1, #0]
 800f06c:	0628      	lsls	r0, r5, #24
 800f06e:	d501      	bpl.n	800f074 <_printf_i+0xec>
 800f070:	681d      	ldr	r5, [r3, #0]
 800f072:	e002      	b.n	800f07a <_printf_i+0xf2>
 800f074:	0669      	lsls	r1, r5, #25
 800f076:	d5fb      	bpl.n	800f070 <_printf_i+0xe8>
 800f078:	881d      	ldrh	r5, [r3, #0]
 800f07a:	4854      	ldr	r0, [pc, #336]	; (800f1cc <_printf_i+0x244>)
 800f07c:	2f6f      	cmp	r7, #111	; 0x6f
 800f07e:	bf0c      	ite	eq
 800f080:	2308      	moveq	r3, #8
 800f082:	230a      	movne	r3, #10
 800f084:	2100      	movs	r1, #0
 800f086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f08a:	6866      	ldr	r6, [r4, #4]
 800f08c:	60a6      	str	r6, [r4, #8]
 800f08e:	2e00      	cmp	r6, #0
 800f090:	bfa2      	ittt	ge
 800f092:	6821      	ldrge	r1, [r4, #0]
 800f094:	f021 0104 	bicge.w	r1, r1, #4
 800f098:	6021      	strge	r1, [r4, #0]
 800f09a:	b90d      	cbnz	r5, 800f0a0 <_printf_i+0x118>
 800f09c:	2e00      	cmp	r6, #0
 800f09e:	d04d      	beq.n	800f13c <_printf_i+0x1b4>
 800f0a0:	4616      	mov	r6, r2
 800f0a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f0a6:	fb03 5711 	mls	r7, r3, r1, r5
 800f0aa:	5dc7      	ldrb	r7, [r0, r7]
 800f0ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f0b0:	462f      	mov	r7, r5
 800f0b2:	42bb      	cmp	r3, r7
 800f0b4:	460d      	mov	r5, r1
 800f0b6:	d9f4      	bls.n	800f0a2 <_printf_i+0x11a>
 800f0b8:	2b08      	cmp	r3, #8
 800f0ba:	d10b      	bne.n	800f0d4 <_printf_i+0x14c>
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	07df      	lsls	r7, r3, #31
 800f0c0:	d508      	bpl.n	800f0d4 <_printf_i+0x14c>
 800f0c2:	6923      	ldr	r3, [r4, #16]
 800f0c4:	6861      	ldr	r1, [r4, #4]
 800f0c6:	4299      	cmp	r1, r3
 800f0c8:	bfde      	ittt	le
 800f0ca:	2330      	movle	r3, #48	; 0x30
 800f0cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f0d0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f0d4:	1b92      	subs	r2, r2, r6
 800f0d6:	6122      	str	r2, [r4, #16]
 800f0d8:	f8cd a000 	str.w	sl, [sp]
 800f0dc:	464b      	mov	r3, r9
 800f0de:	aa03      	add	r2, sp, #12
 800f0e0:	4621      	mov	r1, r4
 800f0e2:	4640      	mov	r0, r8
 800f0e4:	f7ff fee2 	bl	800eeac <_printf_common>
 800f0e8:	3001      	adds	r0, #1
 800f0ea:	d14c      	bne.n	800f186 <_printf_i+0x1fe>
 800f0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0f0:	b004      	add	sp, #16
 800f0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0f6:	4835      	ldr	r0, [pc, #212]	; (800f1cc <_printf_i+0x244>)
 800f0f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f0fc:	6823      	ldr	r3, [r4, #0]
 800f0fe:	680e      	ldr	r6, [r1, #0]
 800f100:	061f      	lsls	r7, r3, #24
 800f102:	f856 5b04 	ldr.w	r5, [r6], #4
 800f106:	600e      	str	r6, [r1, #0]
 800f108:	d514      	bpl.n	800f134 <_printf_i+0x1ac>
 800f10a:	07d9      	lsls	r1, r3, #31
 800f10c:	bf44      	itt	mi
 800f10e:	f043 0320 	orrmi.w	r3, r3, #32
 800f112:	6023      	strmi	r3, [r4, #0]
 800f114:	b91d      	cbnz	r5, 800f11e <_printf_i+0x196>
 800f116:	6823      	ldr	r3, [r4, #0]
 800f118:	f023 0320 	bic.w	r3, r3, #32
 800f11c:	6023      	str	r3, [r4, #0]
 800f11e:	2310      	movs	r3, #16
 800f120:	e7b0      	b.n	800f084 <_printf_i+0xfc>
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	f043 0320 	orr.w	r3, r3, #32
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	2378      	movs	r3, #120	; 0x78
 800f12c:	4828      	ldr	r0, [pc, #160]	; (800f1d0 <_printf_i+0x248>)
 800f12e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f132:	e7e3      	b.n	800f0fc <_printf_i+0x174>
 800f134:	065e      	lsls	r6, r3, #25
 800f136:	bf48      	it	mi
 800f138:	b2ad      	uxthmi	r5, r5
 800f13a:	e7e6      	b.n	800f10a <_printf_i+0x182>
 800f13c:	4616      	mov	r6, r2
 800f13e:	e7bb      	b.n	800f0b8 <_printf_i+0x130>
 800f140:	680b      	ldr	r3, [r1, #0]
 800f142:	6826      	ldr	r6, [r4, #0]
 800f144:	6960      	ldr	r0, [r4, #20]
 800f146:	1d1d      	adds	r5, r3, #4
 800f148:	600d      	str	r5, [r1, #0]
 800f14a:	0635      	lsls	r5, r6, #24
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	d501      	bpl.n	800f154 <_printf_i+0x1cc>
 800f150:	6018      	str	r0, [r3, #0]
 800f152:	e002      	b.n	800f15a <_printf_i+0x1d2>
 800f154:	0671      	lsls	r1, r6, #25
 800f156:	d5fb      	bpl.n	800f150 <_printf_i+0x1c8>
 800f158:	8018      	strh	r0, [r3, #0]
 800f15a:	2300      	movs	r3, #0
 800f15c:	6123      	str	r3, [r4, #16]
 800f15e:	4616      	mov	r6, r2
 800f160:	e7ba      	b.n	800f0d8 <_printf_i+0x150>
 800f162:	680b      	ldr	r3, [r1, #0]
 800f164:	1d1a      	adds	r2, r3, #4
 800f166:	600a      	str	r2, [r1, #0]
 800f168:	681e      	ldr	r6, [r3, #0]
 800f16a:	6862      	ldr	r2, [r4, #4]
 800f16c:	2100      	movs	r1, #0
 800f16e:	4630      	mov	r0, r6
 800f170:	f7f1 f836 	bl	80001e0 <memchr>
 800f174:	b108      	cbz	r0, 800f17a <_printf_i+0x1f2>
 800f176:	1b80      	subs	r0, r0, r6
 800f178:	6060      	str	r0, [r4, #4]
 800f17a:	6863      	ldr	r3, [r4, #4]
 800f17c:	6123      	str	r3, [r4, #16]
 800f17e:	2300      	movs	r3, #0
 800f180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f184:	e7a8      	b.n	800f0d8 <_printf_i+0x150>
 800f186:	6923      	ldr	r3, [r4, #16]
 800f188:	4632      	mov	r2, r6
 800f18a:	4649      	mov	r1, r9
 800f18c:	4640      	mov	r0, r8
 800f18e:	47d0      	blx	sl
 800f190:	3001      	adds	r0, #1
 800f192:	d0ab      	beq.n	800f0ec <_printf_i+0x164>
 800f194:	6823      	ldr	r3, [r4, #0]
 800f196:	079b      	lsls	r3, r3, #30
 800f198:	d413      	bmi.n	800f1c2 <_printf_i+0x23a>
 800f19a:	68e0      	ldr	r0, [r4, #12]
 800f19c:	9b03      	ldr	r3, [sp, #12]
 800f19e:	4298      	cmp	r0, r3
 800f1a0:	bfb8      	it	lt
 800f1a2:	4618      	movlt	r0, r3
 800f1a4:	e7a4      	b.n	800f0f0 <_printf_i+0x168>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	4632      	mov	r2, r6
 800f1aa:	4649      	mov	r1, r9
 800f1ac:	4640      	mov	r0, r8
 800f1ae:	47d0      	blx	sl
 800f1b0:	3001      	adds	r0, #1
 800f1b2:	d09b      	beq.n	800f0ec <_printf_i+0x164>
 800f1b4:	3501      	adds	r5, #1
 800f1b6:	68e3      	ldr	r3, [r4, #12]
 800f1b8:	9903      	ldr	r1, [sp, #12]
 800f1ba:	1a5b      	subs	r3, r3, r1
 800f1bc:	42ab      	cmp	r3, r5
 800f1be:	dcf2      	bgt.n	800f1a6 <_printf_i+0x21e>
 800f1c0:	e7eb      	b.n	800f19a <_printf_i+0x212>
 800f1c2:	2500      	movs	r5, #0
 800f1c4:	f104 0619 	add.w	r6, r4, #25
 800f1c8:	e7f5      	b.n	800f1b6 <_printf_i+0x22e>
 800f1ca:	bf00      	nop
 800f1cc:	0801178e 	.word	0x0801178e
 800f1d0:	0801179f 	.word	0x0801179f

0800f1d4 <cleanup_glue>:
 800f1d4:	b538      	push	{r3, r4, r5, lr}
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	6809      	ldr	r1, [r1, #0]
 800f1da:	4605      	mov	r5, r0
 800f1dc:	b109      	cbz	r1, 800f1e2 <cleanup_glue+0xe>
 800f1de:	f7ff fff9 	bl	800f1d4 <cleanup_glue>
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1ea:	f7ff badf 	b.w	800e7ac <_free_r>
	...

0800f1f0 <_reclaim_reent>:
 800f1f0:	4b2c      	ldr	r3, [pc, #176]	; (800f2a4 <_reclaim_reent+0xb4>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4283      	cmp	r3, r0
 800f1f6:	b570      	push	{r4, r5, r6, lr}
 800f1f8:	4604      	mov	r4, r0
 800f1fa:	d051      	beq.n	800f2a0 <_reclaim_reent+0xb0>
 800f1fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f1fe:	b143      	cbz	r3, 800f212 <_reclaim_reent+0x22>
 800f200:	68db      	ldr	r3, [r3, #12]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d14a      	bne.n	800f29c <_reclaim_reent+0xac>
 800f206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f208:	6819      	ldr	r1, [r3, #0]
 800f20a:	b111      	cbz	r1, 800f212 <_reclaim_reent+0x22>
 800f20c:	4620      	mov	r0, r4
 800f20e:	f7ff facd 	bl	800e7ac <_free_r>
 800f212:	6961      	ldr	r1, [r4, #20]
 800f214:	b111      	cbz	r1, 800f21c <_reclaim_reent+0x2c>
 800f216:	4620      	mov	r0, r4
 800f218:	f7ff fac8 	bl	800e7ac <_free_r>
 800f21c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f21e:	b111      	cbz	r1, 800f226 <_reclaim_reent+0x36>
 800f220:	4620      	mov	r0, r4
 800f222:	f7ff fac3 	bl	800e7ac <_free_r>
 800f226:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f228:	b111      	cbz	r1, 800f230 <_reclaim_reent+0x40>
 800f22a:	4620      	mov	r0, r4
 800f22c:	f7ff fabe 	bl	800e7ac <_free_r>
 800f230:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f232:	b111      	cbz	r1, 800f23a <_reclaim_reent+0x4a>
 800f234:	4620      	mov	r0, r4
 800f236:	f7ff fab9 	bl	800e7ac <_free_r>
 800f23a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f23c:	b111      	cbz	r1, 800f244 <_reclaim_reent+0x54>
 800f23e:	4620      	mov	r0, r4
 800f240:	f7ff fab4 	bl	800e7ac <_free_r>
 800f244:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f246:	b111      	cbz	r1, 800f24e <_reclaim_reent+0x5e>
 800f248:	4620      	mov	r0, r4
 800f24a:	f7ff faaf 	bl	800e7ac <_free_r>
 800f24e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f250:	b111      	cbz	r1, 800f258 <_reclaim_reent+0x68>
 800f252:	4620      	mov	r0, r4
 800f254:	f7ff faaa 	bl	800e7ac <_free_r>
 800f258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f25a:	b111      	cbz	r1, 800f262 <_reclaim_reent+0x72>
 800f25c:	4620      	mov	r0, r4
 800f25e:	f7ff faa5 	bl	800e7ac <_free_r>
 800f262:	69a3      	ldr	r3, [r4, #24]
 800f264:	b1e3      	cbz	r3, 800f2a0 <_reclaim_reent+0xb0>
 800f266:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f268:	4620      	mov	r0, r4
 800f26a:	4798      	blx	r3
 800f26c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f26e:	b1b9      	cbz	r1, 800f2a0 <_reclaim_reent+0xb0>
 800f270:	4620      	mov	r0, r4
 800f272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f276:	f7ff bfad 	b.w	800f1d4 <cleanup_glue>
 800f27a:	5949      	ldr	r1, [r1, r5]
 800f27c:	b941      	cbnz	r1, 800f290 <_reclaim_reent+0xa0>
 800f27e:	3504      	adds	r5, #4
 800f280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f282:	2d80      	cmp	r5, #128	; 0x80
 800f284:	68d9      	ldr	r1, [r3, #12]
 800f286:	d1f8      	bne.n	800f27a <_reclaim_reent+0x8a>
 800f288:	4620      	mov	r0, r4
 800f28a:	f7ff fa8f 	bl	800e7ac <_free_r>
 800f28e:	e7ba      	b.n	800f206 <_reclaim_reent+0x16>
 800f290:	680e      	ldr	r6, [r1, #0]
 800f292:	4620      	mov	r0, r4
 800f294:	f7ff fa8a 	bl	800e7ac <_free_r>
 800f298:	4631      	mov	r1, r6
 800f29a:	e7ef      	b.n	800f27c <_reclaim_reent+0x8c>
 800f29c:	2500      	movs	r5, #0
 800f29e:	e7ef      	b.n	800f280 <_reclaim_reent+0x90>
 800f2a0:	bd70      	pop	{r4, r5, r6, pc}
 800f2a2:	bf00      	nop
 800f2a4:	20000184 	.word	0x20000184

0800f2a8 <_sbrk_r>:
 800f2a8:	b538      	push	{r3, r4, r5, lr}
 800f2aa:	4d06      	ldr	r5, [pc, #24]	; (800f2c4 <_sbrk_r+0x1c>)
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	4604      	mov	r4, r0
 800f2b0:	4608      	mov	r0, r1
 800f2b2:	602b      	str	r3, [r5, #0]
 800f2b4:	f7f4 f842 	bl	800333c <_sbrk>
 800f2b8:	1c43      	adds	r3, r0, #1
 800f2ba:	d102      	bne.n	800f2c2 <_sbrk_r+0x1a>
 800f2bc:	682b      	ldr	r3, [r5, #0]
 800f2be:	b103      	cbz	r3, 800f2c2 <_sbrk_r+0x1a>
 800f2c0:	6023      	str	r3, [r4, #0]
 800f2c2:	bd38      	pop	{r3, r4, r5, pc}
 800f2c4:	2000de04 	.word	0x2000de04

0800f2c8 <siprintf>:
 800f2c8:	b40e      	push	{r1, r2, r3}
 800f2ca:	b500      	push	{lr}
 800f2cc:	b09c      	sub	sp, #112	; 0x70
 800f2ce:	ab1d      	add	r3, sp, #116	; 0x74
 800f2d0:	9002      	str	r0, [sp, #8]
 800f2d2:	9006      	str	r0, [sp, #24]
 800f2d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f2d8:	4809      	ldr	r0, [pc, #36]	; (800f300 <siprintf+0x38>)
 800f2da:	9107      	str	r1, [sp, #28]
 800f2dc:	9104      	str	r1, [sp, #16]
 800f2de:	4909      	ldr	r1, [pc, #36]	; (800f304 <siprintf+0x3c>)
 800f2e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2e4:	9105      	str	r1, [sp, #20]
 800f2e6:	6800      	ldr	r0, [r0, #0]
 800f2e8:	9301      	str	r3, [sp, #4]
 800f2ea:	a902      	add	r1, sp, #8
 800f2ec:	f001 fc10 	bl	8010b10 <_svfiprintf_r>
 800f2f0:	9b02      	ldr	r3, [sp, #8]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	701a      	strb	r2, [r3, #0]
 800f2f6:	b01c      	add	sp, #112	; 0x70
 800f2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2fc:	b003      	add	sp, #12
 800f2fe:	4770      	bx	lr
 800f300:	20000184 	.word	0x20000184
 800f304:	ffff0208 	.word	0xffff0208

0800f308 <__sread>:
 800f308:	b510      	push	{r4, lr}
 800f30a:	460c      	mov	r4, r1
 800f30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f310:	f001 fcfe 	bl	8010d10 <_read_r>
 800f314:	2800      	cmp	r0, #0
 800f316:	bfab      	itete	ge
 800f318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f31a:	89a3      	ldrhlt	r3, [r4, #12]
 800f31c:	181b      	addge	r3, r3, r0
 800f31e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f322:	bfac      	ite	ge
 800f324:	6563      	strge	r3, [r4, #84]	; 0x54
 800f326:	81a3      	strhlt	r3, [r4, #12]
 800f328:	bd10      	pop	{r4, pc}

0800f32a <__swrite>:
 800f32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f32e:	461f      	mov	r7, r3
 800f330:	898b      	ldrh	r3, [r1, #12]
 800f332:	05db      	lsls	r3, r3, #23
 800f334:	4605      	mov	r5, r0
 800f336:	460c      	mov	r4, r1
 800f338:	4616      	mov	r6, r2
 800f33a:	d505      	bpl.n	800f348 <__swrite+0x1e>
 800f33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f340:	2302      	movs	r3, #2
 800f342:	2200      	movs	r2, #0
 800f344:	f000 ffde 	bl	8010304 <_lseek_r>
 800f348:	89a3      	ldrh	r3, [r4, #12]
 800f34a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f34e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f352:	81a3      	strh	r3, [r4, #12]
 800f354:	4632      	mov	r2, r6
 800f356:	463b      	mov	r3, r7
 800f358:	4628      	mov	r0, r5
 800f35a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f35e:	f000 b86f 	b.w	800f440 <_write_r>

0800f362 <__sseek>:
 800f362:	b510      	push	{r4, lr}
 800f364:	460c      	mov	r4, r1
 800f366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f36a:	f000 ffcb 	bl	8010304 <_lseek_r>
 800f36e:	1c43      	adds	r3, r0, #1
 800f370:	89a3      	ldrh	r3, [r4, #12]
 800f372:	bf15      	itete	ne
 800f374:	6560      	strne	r0, [r4, #84]	; 0x54
 800f376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f37a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f37e:	81a3      	strheq	r3, [r4, #12]
 800f380:	bf18      	it	ne
 800f382:	81a3      	strhne	r3, [r4, #12]
 800f384:	bd10      	pop	{r4, pc}

0800f386 <__sclose>:
 800f386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f38a:	f000 b86b 	b.w	800f464 <_close_r>

0800f38e <strcat>:
 800f38e:	b510      	push	{r4, lr}
 800f390:	4602      	mov	r2, r0
 800f392:	7814      	ldrb	r4, [r2, #0]
 800f394:	4613      	mov	r3, r2
 800f396:	3201      	adds	r2, #1
 800f398:	2c00      	cmp	r4, #0
 800f39a:	d1fa      	bne.n	800f392 <strcat+0x4>
 800f39c:	3b01      	subs	r3, #1
 800f39e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3a6:	2a00      	cmp	r2, #0
 800f3a8:	d1f9      	bne.n	800f39e <strcat+0x10>
 800f3aa:	bd10      	pop	{r4, pc}

0800f3ac <strcpy>:
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3b2:	f803 2b01 	strb.w	r2, [r3], #1
 800f3b6:	2a00      	cmp	r2, #0
 800f3b8:	d1f9      	bne.n	800f3ae <strcpy+0x2>
 800f3ba:	4770      	bx	lr

0800f3bc <__utoa>:
 800f3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3be:	4c1f      	ldr	r4, [pc, #124]	; (800f43c <__utoa+0x80>)
 800f3c0:	b08b      	sub	sp, #44	; 0x2c
 800f3c2:	4605      	mov	r5, r0
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	466e      	mov	r6, sp
 800f3c8:	f104 0c20 	add.w	ip, r4, #32
 800f3cc:	6820      	ldr	r0, [r4, #0]
 800f3ce:	6861      	ldr	r1, [r4, #4]
 800f3d0:	4637      	mov	r7, r6
 800f3d2:	c703      	stmia	r7!, {r0, r1}
 800f3d4:	3408      	adds	r4, #8
 800f3d6:	4564      	cmp	r4, ip
 800f3d8:	463e      	mov	r6, r7
 800f3da:	d1f7      	bne.n	800f3cc <__utoa+0x10>
 800f3dc:	7921      	ldrb	r1, [r4, #4]
 800f3de:	7139      	strb	r1, [r7, #4]
 800f3e0:	1e91      	subs	r1, r2, #2
 800f3e2:	6820      	ldr	r0, [r4, #0]
 800f3e4:	6038      	str	r0, [r7, #0]
 800f3e6:	2922      	cmp	r1, #34	; 0x22
 800f3e8:	f04f 0100 	mov.w	r1, #0
 800f3ec:	d904      	bls.n	800f3f8 <__utoa+0x3c>
 800f3ee:	7019      	strb	r1, [r3, #0]
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	b00b      	add	sp, #44	; 0x2c
 800f3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3f8:	1e58      	subs	r0, r3, #1
 800f3fa:	4684      	mov	ip, r0
 800f3fc:	fbb5 f7f2 	udiv	r7, r5, r2
 800f400:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800f404:	fb02 5617 	mls	r6, r2, r7, r5
 800f408:	4476      	add	r6, lr
 800f40a:	460c      	mov	r4, r1
 800f40c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f410:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f414:	462e      	mov	r6, r5
 800f416:	42b2      	cmp	r2, r6
 800f418:	f101 0101 	add.w	r1, r1, #1
 800f41c:	463d      	mov	r5, r7
 800f41e:	d9ed      	bls.n	800f3fc <__utoa+0x40>
 800f420:	2200      	movs	r2, #0
 800f422:	545a      	strb	r2, [r3, r1]
 800f424:	1919      	adds	r1, r3, r4
 800f426:	1aa5      	subs	r5, r4, r2
 800f428:	42aa      	cmp	r2, r5
 800f42a:	dae2      	bge.n	800f3f2 <__utoa+0x36>
 800f42c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f430:	780e      	ldrb	r6, [r1, #0]
 800f432:	7006      	strb	r6, [r0, #0]
 800f434:	3201      	adds	r2, #1
 800f436:	f801 5901 	strb.w	r5, [r1], #-1
 800f43a:	e7f4      	b.n	800f426 <__utoa+0x6a>
 800f43c:	080117b0 	.word	0x080117b0

0800f440 <_write_r>:
 800f440:	b538      	push	{r3, r4, r5, lr}
 800f442:	4d07      	ldr	r5, [pc, #28]	; (800f460 <_write_r+0x20>)
 800f444:	4604      	mov	r4, r0
 800f446:	4608      	mov	r0, r1
 800f448:	4611      	mov	r1, r2
 800f44a:	2200      	movs	r2, #0
 800f44c:	602a      	str	r2, [r5, #0]
 800f44e:	461a      	mov	r2, r3
 800f450:	f7f3 ff23 	bl	800329a <_write>
 800f454:	1c43      	adds	r3, r0, #1
 800f456:	d102      	bne.n	800f45e <_write_r+0x1e>
 800f458:	682b      	ldr	r3, [r5, #0]
 800f45a:	b103      	cbz	r3, 800f45e <_write_r+0x1e>
 800f45c:	6023      	str	r3, [r4, #0]
 800f45e:	bd38      	pop	{r3, r4, r5, pc}
 800f460:	2000de04 	.word	0x2000de04

0800f464 <_close_r>:
 800f464:	b538      	push	{r3, r4, r5, lr}
 800f466:	4d06      	ldr	r5, [pc, #24]	; (800f480 <_close_r+0x1c>)
 800f468:	2300      	movs	r3, #0
 800f46a:	4604      	mov	r4, r0
 800f46c:	4608      	mov	r0, r1
 800f46e:	602b      	str	r3, [r5, #0]
 800f470:	f7f3 ff2f 	bl	80032d2 <_close>
 800f474:	1c43      	adds	r3, r0, #1
 800f476:	d102      	bne.n	800f47e <_close_r+0x1a>
 800f478:	682b      	ldr	r3, [r5, #0]
 800f47a:	b103      	cbz	r3, 800f47e <_close_r+0x1a>
 800f47c:	6023      	str	r3, [r4, #0]
 800f47e:	bd38      	pop	{r3, r4, r5, pc}
 800f480:	2000de04 	.word	0x2000de04

0800f484 <quorem>:
 800f484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f488:	6903      	ldr	r3, [r0, #16]
 800f48a:	690c      	ldr	r4, [r1, #16]
 800f48c:	42a3      	cmp	r3, r4
 800f48e:	4607      	mov	r7, r0
 800f490:	f2c0 8081 	blt.w	800f596 <quorem+0x112>
 800f494:	3c01      	subs	r4, #1
 800f496:	f101 0814 	add.w	r8, r1, #20
 800f49a:	f100 0514 	add.w	r5, r0, #20
 800f49e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4a2:	9301      	str	r3, [sp, #4]
 800f4a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f4a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f4b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f4b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800f4bc:	d331      	bcc.n	800f522 <quorem+0x9e>
 800f4be:	f04f 0e00 	mov.w	lr, #0
 800f4c2:	4640      	mov	r0, r8
 800f4c4:	46ac      	mov	ip, r5
 800f4c6:	46f2      	mov	sl, lr
 800f4c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800f4cc:	b293      	uxth	r3, r2
 800f4ce:	fb06 e303 	mla	r3, r6, r3, lr
 800f4d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	ebaa 0303 	sub.w	r3, sl, r3
 800f4dc:	0c12      	lsrs	r2, r2, #16
 800f4de:	f8dc a000 	ldr.w	sl, [ip]
 800f4e2:	fb06 e202 	mla	r2, r6, r2, lr
 800f4e6:	fa13 f38a 	uxtah	r3, r3, sl
 800f4ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f4ee:	fa1f fa82 	uxth.w	sl, r2
 800f4f2:	f8dc 2000 	ldr.w	r2, [ip]
 800f4f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f4fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f504:	4581      	cmp	r9, r0
 800f506:	f84c 3b04 	str.w	r3, [ip], #4
 800f50a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f50e:	d2db      	bcs.n	800f4c8 <quorem+0x44>
 800f510:	f855 300b 	ldr.w	r3, [r5, fp]
 800f514:	b92b      	cbnz	r3, 800f522 <quorem+0x9e>
 800f516:	9b01      	ldr	r3, [sp, #4]
 800f518:	3b04      	subs	r3, #4
 800f51a:	429d      	cmp	r5, r3
 800f51c:	461a      	mov	r2, r3
 800f51e:	d32e      	bcc.n	800f57e <quorem+0xfa>
 800f520:	613c      	str	r4, [r7, #16]
 800f522:	4638      	mov	r0, r7
 800f524:	f001 f98a 	bl	801083c <__mcmp>
 800f528:	2800      	cmp	r0, #0
 800f52a:	db24      	blt.n	800f576 <quorem+0xf2>
 800f52c:	3601      	adds	r6, #1
 800f52e:	4628      	mov	r0, r5
 800f530:	f04f 0c00 	mov.w	ip, #0
 800f534:	f858 2b04 	ldr.w	r2, [r8], #4
 800f538:	f8d0 e000 	ldr.w	lr, [r0]
 800f53c:	b293      	uxth	r3, r2
 800f53e:	ebac 0303 	sub.w	r3, ip, r3
 800f542:	0c12      	lsrs	r2, r2, #16
 800f544:	fa13 f38e 	uxtah	r3, r3, lr
 800f548:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f54c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f550:	b29b      	uxth	r3, r3
 800f552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f556:	45c1      	cmp	r9, r8
 800f558:	f840 3b04 	str.w	r3, [r0], #4
 800f55c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f560:	d2e8      	bcs.n	800f534 <quorem+0xb0>
 800f562:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f566:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f56a:	b922      	cbnz	r2, 800f576 <quorem+0xf2>
 800f56c:	3b04      	subs	r3, #4
 800f56e:	429d      	cmp	r5, r3
 800f570:	461a      	mov	r2, r3
 800f572:	d30a      	bcc.n	800f58a <quorem+0x106>
 800f574:	613c      	str	r4, [r7, #16]
 800f576:	4630      	mov	r0, r6
 800f578:	b003      	add	sp, #12
 800f57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f57e:	6812      	ldr	r2, [r2, #0]
 800f580:	3b04      	subs	r3, #4
 800f582:	2a00      	cmp	r2, #0
 800f584:	d1cc      	bne.n	800f520 <quorem+0x9c>
 800f586:	3c01      	subs	r4, #1
 800f588:	e7c7      	b.n	800f51a <quorem+0x96>
 800f58a:	6812      	ldr	r2, [r2, #0]
 800f58c:	3b04      	subs	r3, #4
 800f58e:	2a00      	cmp	r2, #0
 800f590:	d1f0      	bne.n	800f574 <quorem+0xf0>
 800f592:	3c01      	subs	r4, #1
 800f594:	e7eb      	b.n	800f56e <quorem+0xea>
 800f596:	2000      	movs	r0, #0
 800f598:	e7ee      	b.n	800f578 <quorem+0xf4>
 800f59a:	0000      	movs	r0, r0
 800f59c:	0000      	movs	r0, r0
	...

0800f5a0 <_dtoa_r>:
 800f5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a4:	ed2d 8b02 	vpush	{d8}
 800f5a8:	ec57 6b10 	vmov	r6, r7, d0
 800f5ac:	b095      	sub	sp, #84	; 0x54
 800f5ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f5b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f5b4:	9105      	str	r1, [sp, #20]
 800f5b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	9209      	str	r2, [sp, #36]	; 0x24
 800f5be:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5c0:	b975      	cbnz	r5, 800f5e0 <_dtoa_r+0x40>
 800f5c2:	2010      	movs	r0, #16
 800f5c4:	f7ff f8cc 	bl	800e760 <malloc>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	6260      	str	r0, [r4, #36]	; 0x24
 800f5cc:	b920      	cbnz	r0, 800f5d8 <_dtoa_r+0x38>
 800f5ce:	4bb2      	ldr	r3, [pc, #712]	; (800f898 <_dtoa_r+0x2f8>)
 800f5d0:	21ea      	movs	r1, #234	; 0xea
 800f5d2:	48b2      	ldr	r0, [pc, #712]	; (800f89c <_dtoa_r+0x2fc>)
 800f5d4:	f001 fbae 	bl	8010d34 <__assert_func>
 800f5d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f5dc:	6005      	str	r5, [r0, #0]
 800f5de:	60c5      	str	r5, [r0, #12]
 800f5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5e2:	6819      	ldr	r1, [r3, #0]
 800f5e4:	b151      	cbz	r1, 800f5fc <_dtoa_r+0x5c>
 800f5e6:	685a      	ldr	r2, [r3, #4]
 800f5e8:	604a      	str	r2, [r1, #4]
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	4093      	lsls	r3, r2
 800f5ee:	608b      	str	r3, [r1, #8]
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	f000 fee5 	bl	80103c0 <_Bfree>
 800f5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	601a      	str	r2, [r3, #0]
 800f5fc:	1e3b      	subs	r3, r7, #0
 800f5fe:	bfb9      	ittee	lt
 800f600:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f604:	9303      	strlt	r3, [sp, #12]
 800f606:	2300      	movge	r3, #0
 800f608:	f8c8 3000 	strge.w	r3, [r8]
 800f60c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f610:	4ba3      	ldr	r3, [pc, #652]	; (800f8a0 <_dtoa_r+0x300>)
 800f612:	bfbc      	itt	lt
 800f614:	2201      	movlt	r2, #1
 800f616:	f8c8 2000 	strlt.w	r2, [r8]
 800f61a:	ea33 0309 	bics.w	r3, r3, r9
 800f61e:	d11b      	bne.n	800f658 <_dtoa_r+0xb8>
 800f620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f622:	f242 730f 	movw	r3, #9999	; 0x270f
 800f626:	6013      	str	r3, [r2, #0]
 800f628:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f62c:	4333      	orrs	r3, r6
 800f62e:	f000 857a 	beq.w	8010126 <_dtoa_r+0xb86>
 800f632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f634:	b963      	cbnz	r3, 800f650 <_dtoa_r+0xb0>
 800f636:	4b9b      	ldr	r3, [pc, #620]	; (800f8a4 <_dtoa_r+0x304>)
 800f638:	e024      	b.n	800f684 <_dtoa_r+0xe4>
 800f63a:	4b9b      	ldr	r3, [pc, #620]	; (800f8a8 <_dtoa_r+0x308>)
 800f63c:	9300      	str	r3, [sp, #0]
 800f63e:	3308      	adds	r3, #8
 800f640:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f642:	6013      	str	r3, [r2, #0]
 800f644:	9800      	ldr	r0, [sp, #0]
 800f646:	b015      	add	sp, #84	; 0x54
 800f648:	ecbd 8b02 	vpop	{d8}
 800f64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f650:	4b94      	ldr	r3, [pc, #592]	; (800f8a4 <_dtoa_r+0x304>)
 800f652:	9300      	str	r3, [sp, #0]
 800f654:	3303      	adds	r3, #3
 800f656:	e7f3      	b.n	800f640 <_dtoa_r+0xa0>
 800f658:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f65c:	2200      	movs	r2, #0
 800f65e:	ec51 0b17 	vmov	r0, r1, d7
 800f662:	2300      	movs	r3, #0
 800f664:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f668:	f7f1 fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f66c:	4680      	mov	r8, r0
 800f66e:	b158      	cbz	r0, 800f688 <_dtoa_r+0xe8>
 800f670:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f672:	2301      	movs	r3, #1
 800f674:	6013      	str	r3, [r2, #0]
 800f676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f678:	2b00      	cmp	r3, #0
 800f67a:	f000 8551 	beq.w	8010120 <_dtoa_r+0xb80>
 800f67e:	488b      	ldr	r0, [pc, #556]	; (800f8ac <_dtoa_r+0x30c>)
 800f680:	6018      	str	r0, [r3, #0]
 800f682:	1e43      	subs	r3, r0, #1
 800f684:	9300      	str	r3, [sp, #0]
 800f686:	e7dd      	b.n	800f644 <_dtoa_r+0xa4>
 800f688:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f68c:	aa12      	add	r2, sp, #72	; 0x48
 800f68e:	a913      	add	r1, sp, #76	; 0x4c
 800f690:	4620      	mov	r0, r4
 800f692:	f001 f977 	bl	8010984 <__d2b>
 800f696:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f69a:	4683      	mov	fp, r0
 800f69c:	2d00      	cmp	r5, #0
 800f69e:	d07c      	beq.n	800f79a <_dtoa_r+0x1fa>
 800f6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f6a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f6ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f6b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f6b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f6ba:	4b7d      	ldr	r3, [pc, #500]	; (800f8b0 <_dtoa_r+0x310>)
 800f6bc:	2200      	movs	r2, #0
 800f6be:	4630      	mov	r0, r6
 800f6c0:	4639      	mov	r1, r7
 800f6c2:	f7f0 fde1 	bl	8000288 <__aeabi_dsub>
 800f6c6:	a36e      	add	r3, pc, #440	; (adr r3, 800f880 <_dtoa_r+0x2e0>)
 800f6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6cc:	f7f0 ff94 	bl	80005f8 <__aeabi_dmul>
 800f6d0:	a36d      	add	r3, pc, #436	; (adr r3, 800f888 <_dtoa_r+0x2e8>)
 800f6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d6:	f7f0 fdd9 	bl	800028c <__adddf3>
 800f6da:	4606      	mov	r6, r0
 800f6dc:	4628      	mov	r0, r5
 800f6de:	460f      	mov	r7, r1
 800f6e0:	f7f0 ff20 	bl	8000524 <__aeabi_i2d>
 800f6e4:	a36a      	add	r3, pc, #424	; (adr r3, 800f890 <_dtoa_r+0x2f0>)
 800f6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ea:	f7f0 ff85 	bl	80005f8 <__aeabi_dmul>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	4639      	mov	r1, r7
 800f6f6:	f7f0 fdc9 	bl	800028c <__adddf3>
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	460f      	mov	r7, r1
 800f6fe:	f7f1 fa2b 	bl	8000b58 <__aeabi_d2iz>
 800f702:	2200      	movs	r2, #0
 800f704:	4682      	mov	sl, r0
 800f706:	2300      	movs	r3, #0
 800f708:	4630      	mov	r0, r6
 800f70a:	4639      	mov	r1, r7
 800f70c:	f7f1 f9e6 	bl	8000adc <__aeabi_dcmplt>
 800f710:	b148      	cbz	r0, 800f726 <_dtoa_r+0x186>
 800f712:	4650      	mov	r0, sl
 800f714:	f7f0 ff06 	bl	8000524 <__aeabi_i2d>
 800f718:	4632      	mov	r2, r6
 800f71a:	463b      	mov	r3, r7
 800f71c:	f7f1 f9d4 	bl	8000ac8 <__aeabi_dcmpeq>
 800f720:	b908      	cbnz	r0, 800f726 <_dtoa_r+0x186>
 800f722:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f726:	f1ba 0f16 	cmp.w	sl, #22
 800f72a:	d854      	bhi.n	800f7d6 <_dtoa_r+0x236>
 800f72c:	4b61      	ldr	r3, [pc, #388]	; (800f8b4 <_dtoa_r+0x314>)
 800f72e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f736:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f73a:	f7f1 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800f73e:	2800      	cmp	r0, #0
 800f740:	d04b      	beq.n	800f7da <_dtoa_r+0x23a>
 800f742:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f746:	2300      	movs	r3, #0
 800f748:	930e      	str	r3, [sp, #56]	; 0x38
 800f74a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f74c:	1b5d      	subs	r5, r3, r5
 800f74e:	1e6b      	subs	r3, r5, #1
 800f750:	9304      	str	r3, [sp, #16]
 800f752:	bf43      	ittte	mi
 800f754:	2300      	movmi	r3, #0
 800f756:	f1c5 0801 	rsbmi	r8, r5, #1
 800f75a:	9304      	strmi	r3, [sp, #16]
 800f75c:	f04f 0800 	movpl.w	r8, #0
 800f760:	f1ba 0f00 	cmp.w	sl, #0
 800f764:	db3b      	blt.n	800f7de <_dtoa_r+0x23e>
 800f766:	9b04      	ldr	r3, [sp, #16]
 800f768:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f76c:	4453      	add	r3, sl
 800f76e:	9304      	str	r3, [sp, #16]
 800f770:	2300      	movs	r3, #0
 800f772:	9306      	str	r3, [sp, #24]
 800f774:	9b05      	ldr	r3, [sp, #20]
 800f776:	2b09      	cmp	r3, #9
 800f778:	d869      	bhi.n	800f84e <_dtoa_r+0x2ae>
 800f77a:	2b05      	cmp	r3, #5
 800f77c:	bfc4      	itt	gt
 800f77e:	3b04      	subgt	r3, #4
 800f780:	9305      	strgt	r3, [sp, #20]
 800f782:	9b05      	ldr	r3, [sp, #20]
 800f784:	f1a3 0302 	sub.w	r3, r3, #2
 800f788:	bfcc      	ite	gt
 800f78a:	2500      	movgt	r5, #0
 800f78c:	2501      	movle	r5, #1
 800f78e:	2b03      	cmp	r3, #3
 800f790:	d869      	bhi.n	800f866 <_dtoa_r+0x2c6>
 800f792:	e8df f003 	tbb	[pc, r3]
 800f796:	4e2c      	.short	0x4e2c
 800f798:	5a4c      	.short	0x5a4c
 800f79a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f79e:	441d      	add	r5, r3
 800f7a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f7a4:	2b20      	cmp	r3, #32
 800f7a6:	bfc1      	itttt	gt
 800f7a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f7ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f7b0:	fa09 f303 	lslgt.w	r3, r9, r3
 800f7b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f7b8:	bfda      	itte	le
 800f7ba:	f1c3 0320 	rsble	r3, r3, #32
 800f7be:	fa06 f003 	lslle.w	r0, r6, r3
 800f7c2:	4318      	orrgt	r0, r3
 800f7c4:	f7f0 fe9e 	bl	8000504 <__aeabi_ui2d>
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	4606      	mov	r6, r0
 800f7cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f7d0:	3d01      	subs	r5, #1
 800f7d2:	9310      	str	r3, [sp, #64]	; 0x40
 800f7d4:	e771      	b.n	800f6ba <_dtoa_r+0x11a>
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	e7b6      	b.n	800f748 <_dtoa_r+0x1a8>
 800f7da:	900e      	str	r0, [sp, #56]	; 0x38
 800f7dc:	e7b5      	b.n	800f74a <_dtoa_r+0x1aa>
 800f7de:	f1ca 0300 	rsb	r3, sl, #0
 800f7e2:	9306      	str	r3, [sp, #24]
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	eba8 080a 	sub.w	r8, r8, sl
 800f7ea:	930d      	str	r3, [sp, #52]	; 0x34
 800f7ec:	e7c2      	b.n	800f774 <_dtoa_r+0x1d4>
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	9308      	str	r3, [sp, #32]
 800f7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	dc39      	bgt.n	800f86c <_dtoa_r+0x2cc>
 800f7f8:	f04f 0901 	mov.w	r9, #1
 800f7fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800f800:	464b      	mov	r3, r9
 800f802:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f806:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f808:	2200      	movs	r2, #0
 800f80a:	6042      	str	r2, [r0, #4]
 800f80c:	2204      	movs	r2, #4
 800f80e:	f102 0614 	add.w	r6, r2, #20
 800f812:	429e      	cmp	r6, r3
 800f814:	6841      	ldr	r1, [r0, #4]
 800f816:	d92f      	bls.n	800f878 <_dtoa_r+0x2d8>
 800f818:	4620      	mov	r0, r4
 800f81a:	f000 fd91 	bl	8010340 <_Balloc>
 800f81e:	9000      	str	r0, [sp, #0]
 800f820:	2800      	cmp	r0, #0
 800f822:	d14b      	bne.n	800f8bc <_dtoa_r+0x31c>
 800f824:	4b24      	ldr	r3, [pc, #144]	; (800f8b8 <_dtoa_r+0x318>)
 800f826:	4602      	mov	r2, r0
 800f828:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f82c:	e6d1      	b.n	800f5d2 <_dtoa_r+0x32>
 800f82e:	2301      	movs	r3, #1
 800f830:	e7de      	b.n	800f7f0 <_dtoa_r+0x250>
 800f832:	2300      	movs	r3, #0
 800f834:	9308      	str	r3, [sp, #32]
 800f836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f838:	eb0a 0903 	add.w	r9, sl, r3
 800f83c:	f109 0301 	add.w	r3, r9, #1
 800f840:	2b01      	cmp	r3, #1
 800f842:	9301      	str	r3, [sp, #4]
 800f844:	bfb8      	it	lt
 800f846:	2301      	movlt	r3, #1
 800f848:	e7dd      	b.n	800f806 <_dtoa_r+0x266>
 800f84a:	2301      	movs	r3, #1
 800f84c:	e7f2      	b.n	800f834 <_dtoa_r+0x294>
 800f84e:	2501      	movs	r5, #1
 800f850:	2300      	movs	r3, #0
 800f852:	9305      	str	r3, [sp, #20]
 800f854:	9508      	str	r5, [sp, #32]
 800f856:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800f85a:	2200      	movs	r2, #0
 800f85c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f860:	2312      	movs	r3, #18
 800f862:	9209      	str	r2, [sp, #36]	; 0x24
 800f864:	e7cf      	b.n	800f806 <_dtoa_r+0x266>
 800f866:	2301      	movs	r3, #1
 800f868:	9308      	str	r3, [sp, #32]
 800f86a:	e7f4      	b.n	800f856 <_dtoa_r+0x2b6>
 800f86c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f870:	f8cd 9004 	str.w	r9, [sp, #4]
 800f874:	464b      	mov	r3, r9
 800f876:	e7c6      	b.n	800f806 <_dtoa_r+0x266>
 800f878:	3101      	adds	r1, #1
 800f87a:	6041      	str	r1, [r0, #4]
 800f87c:	0052      	lsls	r2, r2, #1
 800f87e:	e7c6      	b.n	800f80e <_dtoa_r+0x26e>
 800f880:	636f4361 	.word	0x636f4361
 800f884:	3fd287a7 	.word	0x3fd287a7
 800f888:	8b60c8b3 	.word	0x8b60c8b3
 800f88c:	3fc68a28 	.word	0x3fc68a28
 800f890:	509f79fb 	.word	0x509f79fb
 800f894:	3fd34413 	.word	0x3fd34413
 800f898:	080117e2 	.word	0x080117e2
 800f89c:	080117f9 	.word	0x080117f9
 800f8a0:	7ff00000 	.word	0x7ff00000
 800f8a4:	080117de 	.word	0x080117de
 800f8a8:	080117d5 	.word	0x080117d5
 800f8ac:	0801178d 	.word	0x0801178d
 800f8b0:	3ff80000 	.word	0x3ff80000
 800f8b4:	080118f8 	.word	0x080118f8
 800f8b8:	08011858 	.word	0x08011858
 800f8bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8be:	9a00      	ldr	r2, [sp, #0]
 800f8c0:	601a      	str	r2, [r3, #0]
 800f8c2:	9b01      	ldr	r3, [sp, #4]
 800f8c4:	2b0e      	cmp	r3, #14
 800f8c6:	f200 80ad 	bhi.w	800fa24 <_dtoa_r+0x484>
 800f8ca:	2d00      	cmp	r5, #0
 800f8cc:	f000 80aa 	beq.w	800fa24 <_dtoa_r+0x484>
 800f8d0:	f1ba 0f00 	cmp.w	sl, #0
 800f8d4:	dd36      	ble.n	800f944 <_dtoa_r+0x3a4>
 800f8d6:	4ac3      	ldr	r2, [pc, #780]	; (800fbe4 <_dtoa_r+0x644>)
 800f8d8:	f00a 030f 	and.w	r3, sl, #15
 800f8dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f8e0:	ed93 7b00 	vldr	d7, [r3]
 800f8e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f8e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f8ec:	eeb0 8a47 	vmov.f32	s16, s14
 800f8f0:	eef0 8a67 	vmov.f32	s17, s15
 800f8f4:	d016      	beq.n	800f924 <_dtoa_r+0x384>
 800f8f6:	4bbc      	ldr	r3, [pc, #752]	; (800fbe8 <_dtoa_r+0x648>)
 800f8f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f8fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f900:	f7f0 ffa4 	bl	800084c <__aeabi_ddiv>
 800f904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f908:	f007 070f 	and.w	r7, r7, #15
 800f90c:	2503      	movs	r5, #3
 800f90e:	4eb6      	ldr	r6, [pc, #728]	; (800fbe8 <_dtoa_r+0x648>)
 800f910:	b957      	cbnz	r7, 800f928 <_dtoa_r+0x388>
 800f912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f916:	ec53 2b18 	vmov	r2, r3, d8
 800f91a:	f7f0 ff97 	bl	800084c <__aeabi_ddiv>
 800f91e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f922:	e029      	b.n	800f978 <_dtoa_r+0x3d8>
 800f924:	2502      	movs	r5, #2
 800f926:	e7f2      	b.n	800f90e <_dtoa_r+0x36e>
 800f928:	07f9      	lsls	r1, r7, #31
 800f92a:	d508      	bpl.n	800f93e <_dtoa_r+0x39e>
 800f92c:	ec51 0b18 	vmov	r0, r1, d8
 800f930:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f934:	f7f0 fe60 	bl	80005f8 <__aeabi_dmul>
 800f938:	ec41 0b18 	vmov	d8, r0, r1
 800f93c:	3501      	adds	r5, #1
 800f93e:	107f      	asrs	r7, r7, #1
 800f940:	3608      	adds	r6, #8
 800f942:	e7e5      	b.n	800f910 <_dtoa_r+0x370>
 800f944:	f000 80a6 	beq.w	800fa94 <_dtoa_r+0x4f4>
 800f948:	f1ca 0600 	rsb	r6, sl, #0
 800f94c:	4ba5      	ldr	r3, [pc, #660]	; (800fbe4 <_dtoa_r+0x644>)
 800f94e:	4fa6      	ldr	r7, [pc, #664]	; (800fbe8 <_dtoa_r+0x648>)
 800f950:	f006 020f 	and.w	r2, r6, #15
 800f954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f960:	f7f0 fe4a 	bl	80005f8 <__aeabi_dmul>
 800f964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f968:	1136      	asrs	r6, r6, #4
 800f96a:	2300      	movs	r3, #0
 800f96c:	2502      	movs	r5, #2
 800f96e:	2e00      	cmp	r6, #0
 800f970:	f040 8085 	bne.w	800fa7e <_dtoa_r+0x4de>
 800f974:	2b00      	cmp	r3, #0
 800f976:	d1d2      	bne.n	800f91e <_dtoa_r+0x37e>
 800f978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	f000 808c 	beq.w	800fa98 <_dtoa_r+0x4f8>
 800f980:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f984:	4b99      	ldr	r3, [pc, #612]	; (800fbec <_dtoa_r+0x64c>)
 800f986:	2200      	movs	r2, #0
 800f988:	4630      	mov	r0, r6
 800f98a:	4639      	mov	r1, r7
 800f98c:	f7f1 f8a6 	bl	8000adc <__aeabi_dcmplt>
 800f990:	2800      	cmp	r0, #0
 800f992:	f000 8081 	beq.w	800fa98 <_dtoa_r+0x4f8>
 800f996:	9b01      	ldr	r3, [sp, #4]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d07d      	beq.n	800fa98 <_dtoa_r+0x4f8>
 800f99c:	f1b9 0f00 	cmp.w	r9, #0
 800f9a0:	dd3c      	ble.n	800fa1c <_dtoa_r+0x47c>
 800f9a2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f9a6:	9307      	str	r3, [sp, #28]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	4b91      	ldr	r3, [pc, #580]	; (800fbf0 <_dtoa_r+0x650>)
 800f9ac:	4630      	mov	r0, r6
 800f9ae:	4639      	mov	r1, r7
 800f9b0:	f7f0 fe22 	bl	80005f8 <__aeabi_dmul>
 800f9b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9b8:	3501      	adds	r5, #1
 800f9ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f9be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	f7f0 fdae 	bl	8000524 <__aeabi_i2d>
 800f9c8:	4632      	mov	r2, r6
 800f9ca:	463b      	mov	r3, r7
 800f9cc:	f7f0 fe14 	bl	80005f8 <__aeabi_dmul>
 800f9d0:	4b88      	ldr	r3, [pc, #544]	; (800fbf4 <_dtoa_r+0x654>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f7f0 fc5a 	bl	800028c <__adddf3>
 800f9d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f9dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9e0:	9303      	str	r3, [sp, #12]
 800f9e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d15c      	bne.n	800faa2 <_dtoa_r+0x502>
 800f9e8:	4b83      	ldr	r3, [pc, #524]	; (800fbf8 <_dtoa_r+0x658>)
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	4639      	mov	r1, r7
 800f9f0:	f7f0 fc4a 	bl	8000288 <__aeabi_dsub>
 800f9f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9f8:	4606      	mov	r6, r0
 800f9fa:	460f      	mov	r7, r1
 800f9fc:	f7f1 f88c 	bl	8000b18 <__aeabi_dcmpgt>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	f040 8296 	bne.w	800ff32 <_dtoa_r+0x992>
 800fa06:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fa0a:	4630      	mov	r0, r6
 800fa0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa10:	4639      	mov	r1, r7
 800fa12:	f7f1 f863 	bl	8000adc <__aeabi_dcmplt>
 800fa16:	2800      	cmp	r0, #0
 800fa18:	f040 8288 	bne.w	800ff2c <_dtoa_r+0x98c>
 800fa1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fa20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	f2c0 8158 	blt.w	800fcdc <_dtoa_r+0x73c>
 800fa2c:	f1ba 0f0e 	cmp.w	sl, #14
 800fa30:	f300 8154 	bgt.w	800fcdc <_dtoa_r+0x73c>
 800fa34:	4b6b      	ldr	r3, [pc, #428]	; (800fbe4 <_dtoa_r+0x644>)
 800fa36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fa3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	f280 80e3 	bge.w	800fc0c <_dtoa_r+0x66c>
 800fa46:	9b01      	ldr	r3, [sp, #4]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f300 80df 	bgt.w	800fc0c <_dtoa_r+0x66c>
 800fa4e:	f040 826d 	bne.w	800ff2c <_dtoa_r+0x98c>
 800fa52:	4b69      	ldr	r3, [pc, #420]	; (800fbf8 <_dtoa_r+0x658>)
 800fa54:	2200      	movs	r2, #0
 800fa56:	4640      	mov	r0, r8
 800fa58:	4649      	mov	r1, r9
 800fa5a:	f7f0 fdcd 	bl	80005f8 <__aeabi_dmul>
 800fa5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa62:	f7f1 f84f 	bl	8000b04 <__aeabi_dcmpge>
 800fa66:	9e01      	ldr	r6, [sp, #4]
 800fa68:	4637      	mov	r7, r6
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	f040 8243 	bne.w	800fef6 <_dtoa_r+0x956>
 800fa70:	9d00      	ldr	r5, [sp, #0]
 800fa72:	2331      	movs	r3, #49	; 0x31
 800fa74:	f805 3b01 	strb.w	r3, [r5], #1
 800fa78:	f10a 0a01 	add.w	sl, sl, #1
 800fa7c:	e23f      	b.n	800fefe <_dtoa_r+0x95e>
 800fa7e:	07f2      	lsls	r2, r6, #31
 800fa80:	d505      	bpl.n	800fa8e <_dtoa_r+0x4ee>
 800fa82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa86:	f7f0 fdb7 	bl	80005f8 <__aeabi_dmul>
 800fa8a:	3501      	adds	r5, #1
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	1076      	asrs	r6, r6, #1
 800fa90:	3708      	adds	r7, #8
 800fa92:	e76c      	b.n	800f96e <_dtoa_r+0x3ce>
 800fa94:	2502      	movs	r5, #2
 800fa96:	e76f      	b.n	800f978 <_dtoa_r+0x3d8>
 800fa98:	9b01      	ldr	r3, [sp, #4]
 800fa9a:	f8cd a01c 	str.w	sl, [sp, #28]
 800fa9e:	930c      	str	r3, [sp, #48]	; 0x30
 800faa0:	e78d      	b.n	800f9be <_dtoa_r+0x41e>
 800faa2:	9900      	ldr	r1, [sp, #0]
 800faa4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800faa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800faa8:	4b4e      	ldr	r3, [pc, #312]	; (800fbe4 <_dtoa_r+0x644>)
 800faaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800faae:	4401      	add	r1, r0
 800fab0:	9102      	str	r1, [sp, #8]
 800fab2:	9908      	ldr	r1, [sp, #32]
 800fab4:	eeb0 8a47 	vmov.f32	s16, s14
 800fab8:	eef0 8a67 	vmov.f32	s17, s15
 800fabc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fac0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fac4:	2900      	cmp	r1, #0
 800fac6:	d045      	beq.n	800fb54 <_dtoa_r+0x5b4>
 800fac8:	494c      	ldr	r1, [pc, #304]	; (800fbfc <_dtoa_r+0x65c>)
 800faca:	2000      	movs	r0, #0
 800facc:	f7f0 febe 	bl	800084c <__aeabi_ddiv>
 800fad0:	ec53 2b18 	vmov	r2, r3, d8
 800fad4:	f7f0 fbd8 	bl	8000288 <__aeabi_dsub>
 800fad8:	9d00      	ldr	r5, [sp, #0]
 800fada:	ec41 0b18 	vmov	d8, r0, r1
 800fade:	4639      	mov	r1, r7
 800fae0:	4630      	mov	r0, r6
 800fae2:	f7f1 f839 	bl	8000b58 <__aeabi_d2iz>
 800fae6:	900c      	str	r0, [sp, #48]	; 0x30
 800fae8:	f7f0 fd1c 	bl	8000524 <__aeabi_i2d>
 800faec:	4602      	mov	r2, r0
 800faee:	460b      	mov	r3, r1
 800faf0:	4630      	mov	r0, r6
 800faf2:	4639      	mov	r1, r7
 800faf4:	f7f0 fbc8 	bl	8000288 <__aeabi_dsub>
 800faf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fafa:	3330      	adds	r3, #48	; 0x30
 800fafc:	f805 3b01 	strb.w	r3, [r5], #1
 800fb00:	ec53 2b18 	vmov	r2, r3, d8
 800fb04:	4606      	mov	r6, r0
 800fb06:	460f      	mov	r7, r1
 800fb08:	f7f0 ffe8 	bl	8000adc <__aeabi_dcmplt>
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d165      	bne.n	800fbdc <_dtoa_r+0x63c>
 800fb10:	4632      	mov	r2, r6
 800fb12:	463b      	mov	r3, r7
 800fb14:	4935      	ldr	r1, [pc, #212]	; (800fbec <_dtoa_r+0x64c>)
 800fb16:	2000      	movs	r0, #0
 800fb18:	f7f0 fbb6 	bl	8000288 <__aeabi_dsub>
 800fb1c:	ec53 2b18 	vmov	r2, r3, d8
 800fb20:	f7f0 ffdc 	bl	8000adc <__aeabi_dcmplt>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	f040 80b9 	bne.w	800fc9c <_dtoa_r+0x6fc>
 800fb2a:	9b02      	ldr	r3, [sp, #8]
 800fb2c:	429d      	cmp	r5, r3
 800fb2e:	f43f af75 	beq.w	800fa1c <_dtoa_r+0x47c>
 800fb32:	4b2f      	ldr	r3, [pc, #188]	; (800fbf0 <_dtoa_r+0x650>)
 800fb34:	ec51 0b18 	vmov	r0, r1, d8
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f7f0 fd5d 	bl	80005f8 <__aeabi_dmul>
 800fb3e:	4b2c      	ldr	r3, [pc, #176]	; (800fbf0 <_dtoa_r+0x650>)
 800fb40:	ec41 0b18 	vmov	d8, r0, r1
 800fb44:	2200      	movs	r2, #0
 800fb46:	4630      	mov	r0, r6
 800fb48:	4639      	mov	r1, r7
 800fb4a:	f7f0 fd55 	bl	80005f8 <__aeabi_dmul>
 800fb4e:	4606      	mov	r6, r0
 800fb50:	460f      	mov	r7, r1
 800fb52:	e7c4      	b.n	800fade <_dtoa_r+0x53e>
 800fb54:	ec51 0b17 	vmov	r0, r1, d7
 800fb58:	f7f0 fd4e 	bl	80005f8 <__aeabi_dmul>
 800fb5c:	9b02      	ldr	r3, [sp, #8]
 800fb5e:	9d00      	ldr	r5, [sp, #0]
 800fb60:	930c      	str	r3, [sp, #48]	; 0x30
 800fb62:	ec41 0b18 	vmov	d8, r0, r1
 800fb66:	4639      	mov	r1, r7
 800fb68:	4630      	mov	r0, r6
 800fb6a:	f7f0 fff5 	bl	8000b58 <__aeabi_d2iz>
 800fb6e:	9011      	str	r0, [sp, #68]	; 0x44
 800fb70:	f7f0 fcd8 	bl	8000524 <__aeabi_i2d>
 800fb74:	4602      	mov	r2, r0
 800fb76:	460b      	mov	r3, r1
 800fb78:	4630      	mov	r0, r6
 800fb7a:	4639      	mov	r1, r7
 800fb7c:	f7f0 fb84 	bl	8000288 <__aeabi_dsub>
 800fb80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb82:	3330      	adds	r3, #48	; 0x30
 800fb84:	f805 3b01 	strb.w	r3, [r5], #1
 800fb88:	9b02      	ldr	r3, [sp, #8]
 800fb8a:	429d      	cmp	r5, r3
 800fb8c:	4606      	mov	r6, r0
 800fb8e:	460f      	mov	r7, r1
 800fb90:	f04f 0200 	mov.w	r2, #0
 800fb94:	d134      	bne.n	800fc00 <_dtoa_r+0x660>
 800fb96:	4b19      	ldr	r3, [pc, #100]	; (800fbfc <_dtoa_r+0x65c>)
 800fb98:	ec51 0b18 	vmov	r0, r1, d8
 800fb9c:	f7f0 fb76 	bl	800028c <__adddf3>
 800fba0:	4602      	mov	r2, r0
 800fba2:	460b      	mov	r3, r1
 800fba4:	4630      	mov	r0, r6
 800fba6:	4639      	mov	r1, r7
 800fba8:	f7f0 ffb6 	bl	8000b18 <__aeabi_dcmpgt>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d175      	bne.n	800fc9c <_dtoa_r+0x6fc>
 800fbb0:	ec53 2b18 	vmov	r2, r3, d8
 800fbb4:	4911      	ldr	r1, [pc, #68]	; (800fbfc <_dtoa_r+0x65c>)
 800fbb6:	2000      	movs	r0, #0
 800fbb8:	f7f0 fb66 	bl	8000288 <__aeabi_dsub>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	460b      	mov	r3, r1
 800fbc0:	4630      	mov	r0, r6
 800fbc2:	4639      	mov	r1, r7
 800fbc4:	f7f0 ff8a 	bl	8000adc <__aeabi_dcmplt>
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	f43f af27 	beq.w	800fa1c <_dtoa_r+0x47c>
 800fbce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fbd0:	1e6b      	subs	r3, r5, #1
 800fbd2:	930c      	str	r3, [sp, #48]	; 0x30
 800fbd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fbd8:	2b30      	cmp	r3, #48	; 0x30
 800fbda:	d0f8      	beq.n	800fbce <_dtoa_r+0x62e>
 800fbdc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fbe0:	e04a      	b.n	800fc78 <_dtoa_r+0x6d8>
 800fbe2:	bf00      	nop
 800fbe4:	080118f8 	.word	0x080118f8
 800fbe8:	080118d0 	.word	0x080118d0
 800fbec:	3ff00000 	.word	0x3ff00000
 800fbf0:	40240000 	.word	0x40240000
 800fbf4:	401c0000 	.word	0x401c0000
 800fbf8:	40140000 	.word	0x40140000
 800fbfc:	3fe00000 	.word	0x3fe00000
 800fc00:	4baf      	ldr	r3, [pc, #700]	; (800fec0 <_dtoa_r+0x920>)
 800fc02:	f7f0 fcf9 	bl	80005f8 <__aeabi_dmul>
 800fc06:	4606      	mov	r6, r0
 800fc08:	460f      	mov	r7, r1
 800fc0a:	e7ac      	b.n	800fb66 <_dtoa_r+0x5c6>
 800fc0c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fc10:	9d00      	ldr	r5, [sp, #0]
 800fc12:	4642      	mov	r2, r8
 800fc14:	464b      	mov	r3, r9
 800fc16:	4630      	mov	r0, r6
 800fc18:	4639      	mov	r1, r7
 800fc1a:	f7f0 fe17 	bl	800084c <__aeabi_ddiv>
 800fc1e:	f7f0 ff9b 	bl	8000b58 <__aeabi_d2iz>
 800fc22:	9002      	str	r0, [sp, #8]
 800fc24:	f7f0 fc7e 	bl	8000524 <__aeabi_i2d>
 800fc28:	4642      	mov	r2, r8
 800fc2a:	464b      	mov	r3, r9
 800fc2c:	f7f0 fce4 	bl	80005f8 <__aeabi_dmul>
 800fc30:	4602      	mov	r2, r0
 800fc32:	460b      	mov	r3, r1
 800fc34:	4630      	mov	r0, r6
 800fc36:	4639      	mov	r1, r7
 800fc38:	f7f0 fb26 	bl	8000288 <__aeabi_dsub>
 800fc3c:	9e02      	ldr	r6, [sp, #8]
 800fc3e:	9f01      	ldr	r7, [sp, #4]
 800fc40:	3630      	adds	r6, #48	; 0x30
 800fc42:	f805 6b01 	strb.w	r6, [r5], #1
 800fc46:	9e00      	ldr	r6, [sp, #0]
 800fc48:	1bae      	subs	r6, r5, r6
 800fc4a:	42b7      	cmp	r7, r6
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	460b      	mov	r3, r1
 800fc50:	d137      	bne.n	800fcc2 <_dtoa_r+0x722>
 800fc52:	f7f0 fb1b 	bl	800028c <__adddf3>
 800fc56:	4642      	mov	r2, r8
 800fc58:	464b      	mov	r3, r9
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	460f      	mov	r7, r1
 800fc5e:	f7f0 ff5b 	bl	8000b18 <__aeabi_dcmpgt>
 800fc62:	b9c8      	cbnz	r0, 800fc98 <_dtoa_r+0x6f8>
 800fc64:	4642      	mov	r2, r8
 800fc66:	464b      	mov	r3, r9
 800fc68:	4630      	mov	r0, r6
 800fc6a:	4639      	mov	r1, r7
 800fc6c:	f7f0 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc70:	b110      	cbz	r0, 800fc78 <_dtoa_r+0x6d8>
 800fc72:	9b02      	ldr	r3, [sp, #8]
 800fc74:	07d9      	lsls	r1, r3, #31
 800fc76:	d40f      	bmi.n	800fc98 <_dtoa_r+0x6f8>
 800fc78:	4620      	mov	r0, r4
 800fc7a:	4659      	mov	r1, fp
 800fc7c:	f000 fba0 	bl	80103c0 <_Bfree>
 800fc80:	2300      	movs	r3, #0
 800fc82:	702b      	strb	r3, [r5, #0]
 800fc84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc86:	f10a 0001 	add.w	r0, sl, #1
 800fc8a:	6018      	str	r0, [r3, #0]
 800fc8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	f43f acd8 	beq.w	800f644 <_dtoa_r+0xa4>
 800fc94:	601d      	str	r5, [r3, #0]
 800fc96:	e4d5      	b.n	800f644 <_dtoa_r+0xa4>
 800fc98:	f8cd a01c 	str.w	sl, [sp, #28]
 800fc9c:	462b      	mov	r3, r5
 800fc9e:	461d      	mov	r5, r3
 800fca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fca4:	2a39      	cmp	r2, #57	; 0x39
 800fca6:	d108      	bne.n	800fcba <_dtoa_r+0x71a>
 800fca8:	9a00      	ldr	r2, [sp, #0]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d1f7      	bne.n	800fc9e <_dtoa_r+0x6fe>
 800fcae:	9a07      	ldr	r2, [sp, #28]
 800fcb0:	9900      	ldr	r1, [sp, #0]
 800fcb2:	3201      	adds	r2, #1
 800fcb4:	9207      	str	r2, [sp, #28]
 800fcb6:	2230      	movs	r2, #48	; 0x30
 800fcb8:	700a      	strb	r2, [r1, #0]
 800fcba:	781a      	ldrb	r2, [r3, #0]
 800fcbc:	3201      	adds	r2, #1
 800fcbe:	701a      	strb	r2, [r3, #0]
 800fcc0:	e78c      	b.n	800fbdc <_dtoa_r+0x63c>
 800fcc2:	4b7f      	ldr	r3, [pc, #508]	; (800fec0 <_dtoa_r+0x920>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f7f0 fc97 	bl	80005f8 <__aeabi_dmul>
 800fcca:	2200      	movs	r2, #0
 800fccc:	2300      	movs	r3, #0
 800fcce:	4606      	mov	r6, r0
 800fcd0:	460f      	mov	r7, r1
 800fcd2:	f7f0 fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d09b      	beq.n	800fc12 <_dtoa_r+0x672>
 800fcda:	e7cd      	b.n	800fc78 <_dtoa_r+0x6d8>
 800fcdc:	9a08      	ldr	r2, [sp, #32]
 800fcde:	2a00      	cmp	r2, #0
 800fce0:	f000 80c4 	beq.w	800fe6c <_dtoa_r+0x8cc>
 800fce4:	9a05      	ldr	r2, [sp, #20]
 800fce6:	2a01      	cmp	r2, #1
 800fce8:	f300 80a8 	bgt.w	800fe3c <_dtoa_r+0x89c>
 800fcec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fcee:	2a00      	cmp	r2, #0
 800fcf0:	f000 80a0 	beq.w	800fe34 <_dtoa_r+0x894>
 800fcf4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fcf8:	9e06      	ldr	r6, [sp, #24]
 800fcfa:	4645      	mov	r5, r8
 800fcfc:	9a04      	ldr	r2, [sp, #16]
 800fcfe:	2101      	movs	r1, #1
 800fd00:	441a      	add	r2, r3
 800fd02:	4620      	mov	r0, r4
 800fd04:	4498      	add	r8, r3
 800fd06:	9204      	str	r2, [sp, #16]
 800fd08:	f000 fc16 	bl	8010538 <__i2b>
 800fd0c:	4607      	mov	r7, r0
 800fd0e:	2d00      	cmp	r5, #0
 800fd10:	dd0b      	ble.n	800fd2a <_dtoa_r+0x78a>
 800fd12:	9b04      	ldr	r3, [sp, #16]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	dd08      	ble.n	800fd2a <_dtoa_r+0x78a>
 800fd18:	42ab      	cmp	r3, r5
 800fd1a:	9a04      	ldr	r2, [sp, #16]
 800fd1c:	bfa8      	it	ge
 800fd1e:	462b      	movge	r3, r5
 800fd20:	eba8 0803 	sub.w	r8, r8, r3
 800fd24:	1aed      	subs	r5, r5, r3
 800fd26:	1ad3      	subs	r3, r2, r3
 800fd28:	9304      	str	r3, [sp, #16]
 800fd2a:	9b06      	ldr	r3, [sp, #24]
 800fd2c:	b1fb      	cbz	r3, 800fd6e <_dtoa_r+0x7ce>
 800fd2e:	9b08      	ldr	r3, [sp, #32]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	f000 809f 	beq.w	800fe74 <_dtoa_r+0x8d4>
 800fd36:	2e00      	cmp	r6, #0
 800fd38:	dd11      	ble.n	800fd5e <_dtoa_r+0x7be>
 800fd3a:	4639      	mov	r1, r7
 800fd3c:	4632      	mov	r2, r6
 800fd3e:	4620      	mov	r0, r4
 800fd40:	f000 fcb6 	bl	80106b0 <__pow5mult>
 800fd44:	465a      	mov	r2, fp
 800fd46:	4601      	mov	r1, r0
 800fd48:	4607      	mov	r7, r0
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f000 fc0a 	bl	8010564 <__multiply>
 800fd50:	4659      	mov	r1, fp
 800fd52:	9007      	str	r0, [sp, #28]
 800fd54:	4620      	mov	r0, r4
 800fd56:	f000 fb33 	bl	80103c0 <_Bfree>
 800fd5a:	9b07      	ldr	r3, [sp, #28]
 800fd5c:	469b      	mov	fp, r3
 800fd5e:	9b06      	ldr	r3, [sp, #24]
 800fd60:	1b9a      	subs	r2, r3, r6
 800fd62:	d004      	beq.n	800fd6e <_dtoa_r+0x7ce>
 800fd64:	4659      	mov	r1, fp
 800fd66:	4620      	mov	r0, r4
 800fd68:	f000 fca2 	bl	80106b0 <__pow5mult>
 800fd6c:	4683      	mov	fp, r0
 800fd6e:	2101      	movs	r1, #1
 800fd70:	4620      	mov	r0, r4
 800fd72:	f000 fbe1 	bl	8010538 <__i2b>
 800fd76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	4606      	mov	r6, r0
 800fd7c:	dd7c      	ble.n	800fe78 <_dtoa_r+0x8d8>
 800fd7e:	461a      	mov	r2, r3
 800fd80:	4601      	mov	r1, r0
 800fd82:	4620      	mov	r0, r4
 800fd84:	f000 fc94 	bl	80106b0 <__pow5mult>
 800fd88:	9b05      	ldr	r3, [sp, #20]
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	4606      	mov	r6, r0
 800fd8e:	dd76      	ble.n	800fe7e <_dtoa_r+0x8de>
 800fd90:	2300      	movs	r3, #0
 800fd92:	9306      	str	r3, [sp, #24]
 800fd94:	6933      	ldr	r3, [r6, #16]
 800fd96:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fd9a:	6918      	ldr	r0, [r3, #16]
 800fd9c:	f000 fb7c 	bl	8010498 <__hi0bits>
 800fda0:	f1c0 0020 	rsb	r0, r0, #32
 800fda4:	9b04      	ldr	r3, [sp, #16]
 800fda6:	4418      	add	r0, r3
 800fda8:	f010 001f 	ands.w	r0, r0, #31
 800fdac:	f000 8086 	beq.w	800febc <_dtoa_r+0x91c>
 800fdb0:	f1c0 0320 	rsb	r3, r0, #32
 800fdb4:	2b04      	cmp	r3, #4
 800fdb6:	dd7f      	ble.n	800feb8 <_dtoa_r+0x918>
 800fdb8:	f1c0 001c 	rsb	r0, r0, #28
 800fdbc:	9b04      	ldr	r3, [sp, #16]
 800fdbe:	4403      	add	r3, r0
 800fdc0:	4480      	add	r8, r0
 800fdc2:	4405      	add	r5, r0
 800fdc4:	9304      	str	r3, [sp, #16]
 800fdc6:	f1b8 0f00 	cmp.w	r8, #0
 800fdca:	dd05      	ble.n	800fdd8 <_dtoa_r+0x838>
 800fdcc:	4659      	mov	r1, fp
 800fdce:	4642      	mov	r2, r8
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f000 fcc7 	bl	8010764 <__lshift>
 800fdd6:	4683      	mov	fp, r0
 800fdd8:	9b04      	ldr	r3, [sp, #16]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	dd05      	ble.n	800fdea <_dtoa_r+0x84a>
 800fdde:	4631      	mov	r1, r6
 800fde0:	461a      	mov	r2, r3
 800fde2:	4620      	mov	r0, r4
 800fde4:	f000 fcbe 	bl	8010764 <__lshift>
 800fde8:	4606      	mov	r6, r0
 800fdea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d069      	beq.n	800fec4 <_dtoa_r+0x924>
 800fdf0:	4631      	mov	r1, r6
 800fdf2:	4658      	mov	r0, fp
 800fdf4:	f000 fd22 	bl	801083c <__mcmp>
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	da63      	bge.n	800fec4 <_dtoa_r+0x924>
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	4659      	mov	r1, fp
 800fe00:	220a      	movs	r2, #10
 800fe02:	4620      	mov	r0, r4
 800fe04:	f000 fafe 	bl	8010404 <__multadd>
 800fe08:	9b08      	ldr	r3, [sp, #32]
 800fe0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fe0e:	4683      	mov	fp, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	f000 818f 	beq.w	8010134 <_dtoa_r+0xb94>
 800fe16:	4639      	mov	r1, r7
 800fe18:	2300      	movs	r3, #0
 800fe1a:	220a      	movs	r2, #10
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	f000 faf1 	bl	8010404 <__multadd>
 800fe22:	f1b9 0f00 	cmp.w	r9, #0
 800fe26:	4607      	mov	r7, r0
 800fe28:	f300 808e 	bgt.w	800ff48 <_dtoa_r+0x9a8>
 800fe2c:	9b05      	ldr	r3, [sp, #20]
 800fe2e:	2b02      	cmp	r3, #2
 800fe30:	dc50      	bgt.n	800fed4 <_dtoa_r+0x934>
 800fe32:	e089      	b.n	800ff48 <_dtoa_r+0x9a8>
 800fe34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fe36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fe3a:	e75d      	b.n	800fcf8 <_dtoa_r+0x758>
 800fe3c:	9b01      	ldr	r3, [sp, #4]
 800fe3e:	1e5e      	subs	r6, r3, #1
 800fe40:	9b06      	ldr	r3, [sp, #24]
 800fe42:	42b3      	cmp	r3, r6
 800fe44:	bfbf      	itttt	lt
 800fe46:	9b06      	ldrlt	r3, [sp, #24]
 800fe48:	9606      	strlt	r6, [sp, #24]
 800fe4a:	1af2      	sublt	r2, r6, r3
 800fe4c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fe4e:	bfb6      	itet	lt
 800fe50:	189b      	addlt	r3, r3, r2
 800fe52:	1b9e      	subge	r6, r3, r6
 800fe54:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fe56:	9b01      	ldr	r3, [sp, #4]
 800fe58:	bfb8      	it	lt
 800fe5a:	2600      	movlt	r6, #0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	bfb5      	itete	lt
 800fe60:	eba8 0503 	sublt.w	r5, r8, r3
 800fe64:	9b01      	ldrge	r3, [sp, #4]
 800fe66:	2300      	movlt	r3, #0
 800fe68:	4645      	movge	r5, r8
 800fe6a:	e747      	b.n	800fcfc <_dtoa_r+0x75c>
 800fe6c:	9e06      	ldr	r6, [sp, #24]
 800fe6e:	9f08      	ldr	r7, [sp, #32]
 800fe70:	4645      	mov	r5, r8
 800fe72:	e74c      	b.n	800fd0e <_dtoa_r+0x76e>
 800fe74:	9a06      	ldr	r2, [sp, #24]
 800fe76:	e775      	b.n	800fd64 <_dtoa_r+0x7c4>
 800fe78:	9b05      	ldr	r3, [sp, #20]
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	dc18      	bgt.n	800feb0 <_dtoa_r+0x910>
 800fe7e:	9b02      	ldr	r3, [sp, #8]
 800fe80:	b9b3      	cbnz	r3, 800feb0 <_dtoa_r+0x910>
 800fe82:	9b03      	ldr	r3, [sp, #12]
 800fe84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe88:	b9a3      	cbnz	r3, 800feb4 <_dtoa_r+0x914>
 800fe8a:	9b03      	ldr	r3, [sp, #12]
 800fe8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe90:	0d1b      	lsrs	r3, r3, #20
 800fe92:	051b      	lsls	r3, r3, #20
 800fe94:	b12b      	cbz	r3, 800fea2 <_dtoa_r+0x902>
 800fe96:	9b04      	ldr	r3, [sp, #16]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	9304      	str	r3, [sp, #16]
 800fe9c:	f108 0801 	add.w	r8, r8, #1
 800fea0:	2301      	movs	r3, #1
 800fea2:	9306      	str	r3, [sp, #24]
 800fea4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	f47f af74 	bne.w	800fd94 <_dtoa_r+0x7f4>
 800feac:	2001      	movs	r0, #1
 800feae:	e779      	b.n	800fda4 <_dtoa_r+0x804>
 800feb0:	2300      	movs	r3, #0
 800feb2:	e7f6      	b.n	800fea2 <_dtoa_r+0x902>
 800feb4:	9b02      	ldr	r3, [sp, #8]
 800feb6:	e7f4      	b.n	800fea2 <_dtoa_r+0x902>
 800feb8:	d085      	beq.n	800fdc6 <_dtoa_r+0x826>
 800feba:	4618      	mov	r0, r3
 800febc:	301c      	adds	r0, #28
 800febe:	e77d      	b.n	800fdbc <_dtoa_r+0x81c>
 800fec0:	40240000 	.word	0x40240000
 800fec4:	9b01      	ldr	r3, [sp, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	dc38      	bgt.n	800ff3c <_dtoa_r+0x99c>
 800feca:	9b05      	ldr	r3, [sp, #20]
 800fecc:	2b02      	cmp	r3, #2
 800fece:	dd35      	ble.n	800ff3c <_dtoa_r+0x99c>
 800fed0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fed4:	f1b9 0f00 	cmp.w	r9, #0
 800fed8:	d10d      	bne.n	800fef6 <_dtoa_r+0x956>
 800feda:	4631      	mov	r1, r6
 800fedc:	464b      	mov	r3, r9
 800fede:	2205      	movs	r2, #5
 800fee0:	4620      	mov	r0, r4
 800fee2:	f000 fa8f 	bl	8010404 <__multadd>
 800fee6:	4601      	mov	r1, r0
 800fee8:	4606      	mov	r6, r0
 800feea:	4658      	mov	r0, fp
 800feec:	f000 fca6 	bl	801083c <__mcmp>
 800fef0:	2800      	cmp	r0, #0
 800fef2:	f73f adbd 	bgt.w	800fa70 <_dtoa_r+0x4d0>
 800fef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fef8:	9d00      	ldr	r5, [sp, #0]
 800fefa:	ea6f 0a03 	mvn.w	sl, r3
 800fefe:	f04f 0800 	mov.w	r8, #0
 800ff02:	4631      	mov	r1, r6
 800ff04:	4620      	mov	r0, r4
 800ff06:	f000 fa5b 	bl	80103c0 <_Bfree>
 800ff0a:	2f00      	cmp	r7, #0
 800ff0c:	f43f aeb4 	beq.w	800fc78 <_dtoa_r+0x6d8>
 800ff10:	f1b8 0f00 	cmp.w	r8, #0
 800ff14:	d005      	beq.n	800ff22 <_dtoa_r+0x982>
 800ff16:	45b8      	cmp	r8, r7
 800ff18:	d003      	beq.n	800ff22 <_dtoa_r+0x982>
 800ff1a:	4641      	mov	r1, r8
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	f000 fa4f 	bl	80103c0 <_Bfree>
 800ff22:	4639      	mov	r1, r7
 800ff24:	4620      	mov	r0, r4
 800ff26:	f000 fa4b 	bl	80103c0 <_Bfree>
 800ff2a:	e6a5      	b.n	800fc78 <_dtoa_r+0x6d8>
 800ff2c:	2600      	movs	r6, #0
 800ff2e:	4637      	mov	r7, r6
 800ff30:	e7e1      	b.n	800fef6 <_dtoa_r+0x956>
 800ff32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ff34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ff38:	4637      	mov	r7, r6
 800ff3a:	e599      	b.n	800fa70 <_dtoa_r+0x4d0>
 800ff3c:	9b08      	ldr	r3, [sp, #32]
 800ff3e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	f000 80fd 	beq.w	8010142 <_dtoa_r+0xba2>
 800ff48:	2d00      	cmp	r5, #0
 800ff4a:	dd05      	ble.n	800ff58 <_dtoa_r+0x9b8>
 800ff4c:	4639      	mov	r1, r7
 800ff4e:	462a      	mov	r2, r5
 800ff50:	4620      	mov	r0, r4
 800ff52:	f000 fc07 	bl	8010764 <__lshift>
 800ff56:	4607      	mov	r7, r0
 800ff58:	9b06      	ldr	r3, [sp, #24]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d05c      	beq.n	8010018 <_dtoa_r+0xa78>
 800ff5e:	6879      	ldr	r1, [r7, #4]
 800ff60:	4620      	mov	r0, r4
 800ff62:	f000 f9ed 	bl	8010340 <_Balloc>
 800ff66:	4605      	mov	r5, r0
 800ff68:	b928      	cbnz	r0, 800ff76 <_dtoa_r+0x9d6>
 800ff6a:	4b80      	ldr	r3, [pc, #512]	; (801016c <_dtoa_r+0xbcc>)
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ff72:	f7ff bb2e 	b.w	800f5d2 <_dtoa_r+0x32>
 800ff76:	693a      	ldr	r2, [r7, #16]
 800ff78:	3202      	adds	r2, #2
 800ff7a:	0092      	lsls	r2, r2, #2
 800ff7c:	f107 010c 	add.w	r1, r7, #12
 800ff80:	300c      	adds	r0, #12
 800ff82:	f7fe fbfd 	bl	800e780 <memcpy>
 800ff86:	2201      	movs	r2, #1
 800ff88:	4629      	mov	r1, r5
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	f000 fbea 	bl	8010764 <__lshift>
 800ff90:	9b00      	ldr	r3, [sp, #0]
 800ff92:	3301      	adds	r3, #1
 800ff94:	9301      	str	r3, [sp, #4]
 800ff96:	9b00      	ldr	r3, [sp, #0]
 800ff98:	444b      	add	r3, r9
 800ff9a:	9307      	str	r3, [sp, #28]
 800ff9c:	9b02      	ldr	r3, [sp, #8]
 800ff9e:	f003 0301 	and.w	r3, r3, #1
 800ffa2:	46b8      	mov	r8, r7
 800ffa4:	9306      	str	r3, [sp, #24]
 800ffa6:	4607      	mov	r7, r0
 800ffa8:	9b01      	ldr	r3, [sp, #4]
 800ffaa:	4631      	mov	r1, r6
 800ffac:	3b01      	subs	r3, #1
 800ffae:	4658      	mov	r0, fp
 800ffb0:	9302      	str	r3, [sp, #8]
 800ffb2:	f7ff fa67 	bl	800f484 <quorem>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	3330      	adds	r3, #48	; 0x30
 800ffba:	9004      	str	r0, [sp, #16]
 800ffbc:	4641      	mov	r1, r8
 800ffbe:	4658      	mov	r0, fp
 800ffc0:	9308      	str	r3, [sp, #32]
 800ffc2:	f000 fc3b 	bl	801083c <__mcmp>
 800ffc6:	463a      	mov	r2, r7
 800ffc8:	4681      	mov	r9, r0
 800ffca:	4631      	mov	r1, r6
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f000 fc51 	bl	8010874 <__mdiff>
 800ffd2:	68c2      	ldr	r2, [r0, #12]
 800ffd4:	9b08      	ldr	r3, [sp, #32]
 800ffd6:	4605      	mov	r5, r0
 800ffd8:	bb02      	cbnz	r2, 801001c <_dtoa_r+0xa7c>
 800ffda:	4601      	mov	r1, r0
 800ffdc:	4658      	mov	r0, fp
 800ffde:	f000 fc2d 	bl	801083c <__mcmp>
 800ffe2:	9b08      	ldr	r3, [sp, #32]
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	4629      	mov	r1, r5
 800ffe8:	4620      	mov	r0, r4
 800ffea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ffee:	f000 f9e7 	bl	80103c0 <_Bfree>
 800fff2:	9b05      	ldr	r3, [sp, #20]
 800fff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fff6:	9d01      	ldr	r5, [sp, #4]
 800fff8:	ea43 0102 	orr.w	r1, r3, r2
 800fffc:	9b06      	ldr	r3, [sp, #24]
 800fffe:	430b      	orrs	r3, r1
 8010000:	9b08      	ldr	r3, [sp, #32]
 8010002:	d10d      	bne.n	8010020 <_dtoa_r+0xa80>
 8010004:	2b39      	cmp	r3, #57	; 0x39
 8010006:	d029      	beq.n	801005c <_dtoa_r+0xabc>
 8010008:	f1b9 0f00 	cmp.w	r9, #0
 801000c:	dd01      	ble.n	8010012 <_dtoa_r+0xa72>
 801000e:	9b04      	ldr	r3, [sp, #16]
 8010010:	3331      	adds	r3, #49	; 0x31
 8010012:	9a02      	ldr	r2, [sp, #8]
 8010014:	7013      	strb	r3, [r2, #0]
 8010016:	e774      	b.n	800ff02 <_dtoa_r+0x962>
 8010018:	4638      	mov	r0, r7
 801001a:	e7b9      	b.n	800ff90 <_dtoa_r+0x9f0>
 801001c:	2201      	movs	r2, #1
 801001e:	e7e2      	b.n	800ffe6 <_dtoa_r+0xa46>
 8010020:	f1b9 0f00 	cmp.w	r9, #0
 8010024:	db06      	blt.n	8010034 <_dtoa_r+0xa94>
 8010026:	9905      	ldr	r1, [sp, #20]
 8010028:	ea41 0909 	orr.w	r9, r1, r9
 801002c:	9906      	ldr	r1, [sp, #24]
 801002e:	ea59 0101 	orrs.w	r1, r9, r1
 8010032:	d120      	bne.n	8010076 <_dtoa_r+0xad6>
 8010034:	2a00      	cmp	r2, #0
 8010036:	ddec      	ble.n	8010012 <_dtoa_r+0xa72>
 8010038:	4659      	mov	r1, fp
 801003a:	2201      	movs	r2, #1
 801003c:	4620      	mov	r0, r4
 801003e:	9301      	str	r3, [sp, #4]
 8010040:	f000 fb90 	bl	8010764 <__lshift>
 8010044:	4631      	mov	r1, r6
 8010046:	4683      	mov	fp, r0
 8010048:	f000 fbf8 	bl	801083c <__mcmp>
 801004c:	2800      	cmp	r0, #0
 801004e:	9b01      	ldr	r3, [sp, #4]
 8010050:	dc02      	bgt.n	8010058 <_dtoa_r+0xab8>
 8010052:	d1de      	bne.n	8010012 <_dtoa_r+0xa72>
 8010054:	07da      	lsls	r2, r3, #31
 8010056:	d5dc      	bpl.n	8010012 <_dtoa_r+0xa72>
 8010058:	2b39      	cmp	r3, #57	; 0x39
 801005a:	d1d8      	bne.n	801000e <_dtoa_r+0xa6e>
 801005c:	9a02      	ldr	r2, [sp, #8]
 801005e:	2339      	movs	r3, #57	; 0x39
 8010060:	7013      	strb	r3, [r2, #0]
 8010062:	462b      	mov	r3, r5
 8010064:	461d      	mov	r5, r3
 8010066:	3b01      	subs	r3, #1
 8010068:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801006c:	2a39      	cmp	r2, #57	; 0x39
 801006e:	d050      	beq.n	8010112 <_dtoa_r+0xb72>
 8010070:	3201      	adds	r2, #1
 8010072:	701a      	strb	r2, [r3, #0]
 8010074:	e745      	b.n	800ff02 <_dtoa_r+0x962>
 8010076:	2a00      	cmp	r2, #0
 8010078:	dd03      	ble.n	8010082 <_dtoa_r+0xae2>
 801007a:	2b39      	cmp	r3, #57	; 0x39
 801007c:	d0ee      	beq.n	801005c <_dtoa_r+0xabc>
 801007e:	3301      	adds	r3, #1
 8010080:	e7c7      	b.n	8010012 <_dtoa_r+0xa72>
 8010082:	9a01      	ldr	r2, [sp, #4]
 8010084:	9907      	ldr	r1, [sp, #28]
 8010086:	f802 3c01 	strb.w	r3, [r2, #-1]
 801008a:	428a      	cmp	r2, r1
 801008c:	d02a      	beq.n	80100e4 <_dtoa_r+0xb44>
 801008e:	4659      	mov	r1, fp
 8010090:	2300      	movs	r3, #0
 8010092:	220a      	movs	r2, #10
 8010094:	4620      	mov	r0, r4
 8010096:	f000 f9b5 	bl	8010404 <__multadd>
 801009a:	45b8      	cmp	r8, r7
 801009c:	4683      	mov	fp, r0
 801009e:	f04f 0300 	mov.w	r3, #0
 80100a2:	f04f 020a 	mov.w	r2, #10
 80100a6:	4641      	mov	r1, r8
 80100a8:	4620      	mov	r0, r4
 80100aa:	d107      	bne.n	80100bc <_dtoa_r+0xb1c>
 80100ac:	f000 f9aa 	bl	8010404 <__multadd>
 80100b0:	4680      	mov	r8, r0
 80100b2:	4607      	mov	r7, r0
 80100b4:	9b01      	ldr	r3, [sp, #4]
 80100b6:	3301      	adds	r3, #1
 80100b8:	9301      	str	r3, [sp, #4]
 80100ba:	e775      	b.n	800ffa8 <_dtoa_r+0xa08>
 80100bc:	f000 f9a2 	bl	8010404 <__multadd>
 80100c0:	4639      	mov	r1, r7
 80100c2:	4680      	mov	r8, r0
 80100c4:	2300      	movs	r3, #0
 80100c6:	220a      	movs	r2, #10
 80100c8:	4620      	mov	r0, r4
 80100ca:	f000 f99b 	bl	8010404 <__multadd>
 80100ce:	4607      	mov	r7, r0
 80100d0:	e7f0      	b.n	80100b4 <_dtoa_r+0xb14>
 80100d2:	f1b9 0f00 	cmp.w	r9, #0
 80100d6:	9a00      	ldr	r2, [sp, #0]
 80100d8:	bfcc      	ite	gt
 80100da:	464d      	movgt	r5, r9
 80100dc:	2501      	movle	r5, #1
 80100de:	4415      	add	r5, r2
 80100e0:	f04f 0800 	mov.w	r8, #0
 80100e4:	4659      	mov	r1, fp
 80100e6:	2201      	movs	r2, #1
 80100e8:	4620      	mov	r0, r4
 80100ea:	9301      	str	r3, [sp, #4]
 80100ec:	f000 fb3a 	bl	8010764 <__lshift>
 80100f0:	4631      	mov	r1, r6
 80100f2:	4683      	mov	fp, r0
 80100f4:	f000 fba2 	bl	801083c <__mcmp>
 80100f8:	2800      	cmp	r0, #0
 80100fa:	dcb2      	bgt.n	8010062 <_dtoa_r+0xac2>
 80100fc:	d102      	bne.n	8010104 <_dtoa_r+0xb64>
 80100fe:	9b01      	ldr	r3, [sp, #4]
 8010100:	07db      	lsls	r3, r3, #31
 8010102:	d4ae      	bmi.n	8010062 <_dtoa_r+0xac2>
 8010104:	462b      	mov	r3, r5
 8010106:	461d      	mov	r5, r3
 8010108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801010c:	2a30      	cmp	r2, #48	; 0x30
 801010e:	d0fa      	beq.n	8010106 <_dtoa_r+0xb66>
 8010110:	e6f7      	b.n	800ff02 <_dtoa_r+0x962>
 8010112:	9a00      	ldr	r2, [sp, #0]
 8010114:	429a      	cmp	r2, r3
 8010116:	d1a5      	bne.n	8010064 <_dtoa_r+0xac4>
 8010118:	f10a 0a01 	add.w	sl, sl, #1
 801011c:	2331      	movs	r3, #49	; 0x31
 801011e:	e779      	b.n	8010014 <_dtoa_r+0xa74>
 8010120:	4b13      	ldr	r3, [pc, #76]	; (8010170 <_dtoa_r+0xbd0>)
 8010122:	f7ff baaf 	b.w	800f684 <_dtoa_r+0xe4>
 8010126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010128:	2b00      	cmp	r3, #0
 801012a:	f47f aa86 	bne.w	800f63a <_dtoa_r+0x9a>
 801012e:	4b11      	ldr	r3, [pc, #68]	; (8010174 <_dtoa_r+0xbd4>)
 8010130:	f7ff baa8 	b.w	800f684 <_dtoa_r+0xe4>
 8010134:	f1b9 0f00 	cmp.w	r9, #0
 8010138:	dc03      	bgt.n	8010142 <_dtoa_r+0xba2>
 801013a:	9b05      	ldr	r3, [sp, #20]
 801013c:	2b02      	cmp	r3, #2
 801013e:	f73f aec9 	bgt.w	800fed4 <_dtoa_r+0x934>
 8010142:	9d00      	ldr	r5, [sp, #0]
 8010144:	4631      	mov	r1, r6
 8010146:	4658      	mov	r0, fp
 8010148:	f7ff f99c 	bl	800f484 <quorem>
 801014c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010150:	f805 3b01 	strb.w	r3, [r5], #1
 8010154:	9a00      	ldr	r2, [sp, #0]
 8010156:	1aaa      	subs	r2, r5, r2
 8010158:	4591      	cmp	r9, r2
 801015a:	ddba      	ble.n	80100d2 <_dtoa_r+0xb32>
 801015c:	4659      	mov	r1, fp
 801015e:	2300      	movs	r3, #0
 8010160:	220a      	movs	r2, #10
 8010162:	4620      	mov	r0, r4
 8010164:	f000 f94e 	bl	8010404 <__multadd>
 8010168:	4683      	mov	fp, r0
 801016a:	e7eb      	b.n	8010144 <_dtoa_r+0xba4>
 801016c:	08011858 	.word	0x08011858
 8010170:	0801178c 	.word	0x0801178c
 8010174:	080117d5 	.word	0x080117d5

08010178 <__sflush_r>:
 8010178:	898a      	ldrh	r2, [r1, #12]
 801017a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801017e:	4605      	mov	r5, r0
 8010180:	0710      	lsls	r0, r2, #28
 8010182:	460c      	mov	r4, r1
 8010184:	d458      	bmi.n	8010238 <__sflush_r+0xc0>
 8010186:	684b      	ldr	r3, [r1, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	dc05      	bgt.n	8010198 <__sflush_r+0x20>
 801018c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801018e:	2b00      	cmp	r3, #0
 8010190:	dc02      	bgt.n	8010198 <__sflush_r+0x20>
 8010192:	2000      	movs	r0, #0
 8010194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801019a:	2e00      	cmp	r6, #0
 801019c:	d0f9      	beq.n	8010192 <__sflush_r+0x1a>
 801019e:	2300      	movs	r3, #0
 80101a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80101a4:	682f      	ldr	r7, [r5, #0]
 80101a6:	602b      	str	r3, [r5, #0]
 80101a8:	d032      	beq.n	8010210 <__sflush_r+0x98>
 80101aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80101ac:	89a3      	ldrh	r3, [r4, #12]
 80101ae:	075a      	lsls	r2, r3, #29
 80101b0:	d505      	bpl.n	80101be <__sflush_r+0x46>
 80101b2:	6863      	ldr	r3, [r4, #4]
 80101b4:	1ac0      	subs	r0, r0, r3
 80101b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101b8:	b10b      	cbz	r3, 80101be <__sflush_r+0x46>
 80101ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101bc:	1ac0      	subs	r0, r0, r3
 80101be:	2300      	movs	r3, #0
 80101c0:	4602      	mov	r2, r0
 80101c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101c4:	6a21      	ldr	r1, [r4, #32]
 80101c6:	4628      	mov	r0, r5
 80101c8:	47b0      	blx	r6
 80101ca:	1c43      	adds	r3, r0, #1
 80101cc:	89a3      	ldrh	r3, [r4, #12]
 80101ce:	d106      	bne.n	80101de <__sflush_r+0x66>
 80101d0:	6829      	ldr	r1, [r5, #0]
 80101d2:	291d      	cmp	r1, #29
 80101d4:	d82c      	bhi.n	8010230 <__sflush_r+0xb8>
 80101d6:	4a2a      	ldr	r2, [pc, #168]	; (8010280 <__sflush_r+0x108>)
 80101d8:	40ca      	lsrs	r2, r1
 80101da:	07d6      	lsls	r6, r2, #31
 80101dc:	d528      	bpl.n	8010230 <__sflush_r+0xb8>
 80101de:	2200      	movs	r2, #0
 80101e0:	6062      	str	r2, [r4, #4]
 80101e2:	04d9      	lsls	r1, r3, #19
 80101e4:	6922      	ldr	r2, [r4, #16]
 80101e6:	6022      	str	r2, [r4, #0]
 80101e8:	d504      	bpl.n	80101f4 <__sflush_r+0x7c>
 80101ea:	1c42      	adds	r2, r0, #1
 80101ec:	d101      	bne.n	80101f2 <__sflush_r+0x7a>
 80101ee:	682b      	ldr	r3, [r5, #0]
 80101f0:	b903      	cbnz	r3, 80101f4 <__sflush_r+0x7c>
 80101f2:	6560      	str	r0, [r4, #84]	; 0x54
 80101f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101f6:	602f      	str	r7, [r5, #0]
 80101f8:	2900      	cmp	r1, #0
 80101fa:	d0ca      	beq.n	8010192 <__sflush_r+0x1a>
 80101fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010200:	4299      	cmp	r1, r3
 8010202:	d002      	beq.n	801020a <__sflush_r+0x92>
 8010204:	4628      	mov	r0, r5
 8010206:	f7fe fad1 	bl	800e7ac <_free_r>
 801020a:	2000      	movs	r0, #0
 801020c:	6360      	str	r0, [r4, #52]	; 0x34
 801020e:	e7c1      	b.n	8010194 <__sflush_r+0x1c>
 8010210:	6a21      	ldr	r1, [r4, #32]
 8010212:	2301      	movs	r3, #1
 8010214:	4628      	mov	r0, r5
 8010216:	47b0      	blx	r6
 8010218:	1c41      	adds	r1, r0, #1
 801021a:	d1c7      	bne.n	80101ac <__sflush_r+0x34>
 801021c:	682b      	ldr	r3, [r5, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d0c4      	beq.n	80101ac <__sflush_r+0x34>
 8010222:	2b1d      	cmp	r3, #29
 8010224:	d001      	beq.n	801022a <__sflush_r+0xb2>
 8010226:	2b16      	cmp	r3, #22
 8010228:	d101      	bne.n	801022e <__sflush_r+0xb6>
 801022a:	602f      	str	r7, [r5, #0]
 801022c:	e7b1      	b.n	8010192 <__sflush_r+0x1a>
 801022e:	89a3      	ldrh	r3, [r4, #12]
 8010230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010234:	81a3      	strh	r3, [r4, #12]
 8010236:	e7ad      	b.n	8010194 <__sflush_r+0x1c>
 8010238:	690f      	ldr	r7, [r1, #16]
 801023a:	2f00      	cmp	r7, #0
 801023c:	d0a9      	beq.n	8010192 <__sflush_r+0x1a>
 801023e:	0793      	lsls	r3, r2, #30
 8010240:	680e      	ldr	r6, [r1, #0]
 8010242:	bf08      	it	eq
 8010244:	694b      	ldreq	r3, [r1, #20]
 8010246:	600f      	str	r7, [r1, #0]
 8010248:	bf18      	it	ne
 801024a:	2300      	movne	r3, #0
 801024c:	eba6 0807 	sub.w	r8, r6, r7
 8010250:	608b      	str	r3, [r1, #8]
 8010252:	f1b8 0f00 	cmp.w	r8, #0
 8010256:	dd9c      	ble.n	8010192 <__sflush_r+0x1a>
 8010258:	6a21      	ldr	r1, [r4, #32]
 801025a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801025c:	4643      	mov	r3, r8
 801025e:	463a      	mov	r2, r7
 8010260:	4628      	mov	r0, r5
 8010262:	47b0      	blx	r6
 8010264:	2800      	cmp	r0, #0
 8010266:	dc06      	bgt.n	8010276 <__sflush_r+0xfe>
 8010268:	89a3      	ldrh	r3, [r4, #12]
 801026a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801026e:	81a3      	strh	r3, [r4, #12]
 8010270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010274:	e78e      	b.n	8010194 <__sflush_r+0x1c>
 8010276:	4407      	add	r7, r0
 8010278:	eba8 0800 	sub.w	r8, r8, r0
 801027c:	e7e9      	b.n	8010252 <__sflush_r+0xda>
 801027e:	bf00      	nop
 8010280:	20400001 	.word	0x20400001

08010284 <_fflush_r>:
 8010284:	b538      	push	{r3, r4, r5, lr}
 8010286:	690b      	ldr	r3, [r1, #16]
 8010288:	4605      	mov	r5, r0
 801028a:	460c      	mov	r4, r1
 801028c:	b913      	cbnz	r3, 8010294 <_fflush_r+0x10>
 801028e:	2500      	movs	r5, #0
 8010290:	4628      	mov	r0, r5
 8010292:	bd38      	pop	{r3, r4, r5, pc}
 8010294:	b118      	cbz	r0, 801029e <_fflush_r+0x1a>
 8010296:	6983      	ldr	r3, [r0, #24]
 8010298:	b90b      	cbnz	r3, 801029e <_fflush_r+0x1a>
 801029a:	f7fe f981 	bl	800e5a0 <__sinit>
 801029e:	4b14      	ldr	r3, [pc, #80]	; (80102f0 <_fflush_r+0x6c>)
 80102a0:	429c      	cmp	r4, r3
 80102a2:	d11b      	bne.n	80102dc <_fflush_r+0x58>
 80102a4:	686c      	ldr	r4, [r5, #4]
 80102a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d0ef      	beq.n	801028e <_fflush_r+0xa>
 80102ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80102b0:	07d0      	lsls	r0, r2, #31
 80102b2:	d404      	bmi.n	80102be <_fflush_r+0x3a>
 80102b4:	0599      	lsls	r1, r3, #22
 80102b6:	d402      	bmi.n	80102be <_fflush_r+0x3a>
 80102b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102ba:	f7fe fa4e 	bl	800e75a <__retarget_lock_acquire_recursive>
 80102be:	4628      	mov	r0, r5
 80102c0:	4621      	mov	r1, r4
 80102c2:	f7ff ff59 	bl	8010178 <__sflush_r>
 80102c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102c8:	07da      	lsls	r2, r3, #31
 80102ca:	4605      	mov	r5, r0
 80102cc:	d4e0      	bmi.n	8010290 <_fflush_r+0xc>
 80102ce:	89a3      	ldrh	r3, [r4, #12]
 80102d0:	059b      	lsls	r3, r3, #22
 80102d2:	d4dd      	bmi.n	8010290 <_fflush_r+0xc>
 80102d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102d6:	f7fe fa41 	bl	800e75c <__retarget_lock_release_recursive>
 80102da:	e7d9      	b.n	8010290 <_fflush_r+0xc>
 80102dc:	4b05      	ldr	r3, [pc, #20]	; (80102f4 <_fflush_r+0x70>)
 80102de:	429c      	cmp	r4, r3
 80102e0:	d101      	bne.n	80102e6 <_fflush_r+0x62>
 80102e2:	68ac      	ldr	r4, [r5, #8]
 80102e4:	e7df      	b.n	80102a6 <_fflush_r+0x22>
 80102e6:	4b04      	ldr	r3, [pc, #16]	; (80102f8 <_fflush_r+0x74>)
 80102e8:	429c      	cmp	r4, r3
 80102ea:	bf08      	it	eq
 80102ec:	68ec      	ldreq	r4, [r5, #12]
 80102ee:	e7da      	b.n	80102a6 <_fflush_r+0x22>
 80102f0:	08011738 	.word	0x08011738
 80102f4:	08011758 	.word	0x08011758
 80102f8:	08011718 	.word	0x08011718

080102fc <_localeconv_r>:
 80102fc:	4800      	ldr	r0, [pc, #0]	; (8010300 <_localeconv_r+0x4>)
 80102fe:	4770      	bx	lr
 8010300:	200002d8 	.word	0x200002d8

08010304 <_lseek_r>:
 8010304:	b538      	push	{r3, r4, r5, lr}
 8010306:	4d07      	ldr	r5, [pc, #28]	; (8010324 <_lseek_r+0x20>)
 8010308:	4604      	mov	r4, r0
 801030a:	4608      	mov	r0, r1
 801030c:	4611      	mov	r1, r2
 801030e:	2200      	movs	r2, #0
 8010310:	602a      	str	r2, [r5, #0]
 8010312:	461a      	mov	r2, r3
 8010314:	f7f3 f804 	bl	8003320 <_lseek>
 8010318:	1c43      	adds	r3, r0, #1
 801031a:	d102      	bne.n	8010322 <_lseek_r+0x1e>
 801031c:	682b      	ldr	r3, [r5, #0]
 801031e:	b103      	cbz	r3, 8010322 <_lseek_r+0x1e>
 8010320:	6023      	str	r3, [r4, #0]
 8010322:	bd38      	pop	{r3, r4, r5, pc}
 8010324:	2000de04 	.word	0x2000de04

08010328 <__malloc_lock>:
 8010328:	4801      	ldr	r0, [pc, #4]	; (8010330 <__malloc_lock+0x8>)
 801032a:	f7fe ba16 	b.w	800e75a <__retarget_lock_acquire_recursive>
 801032e:	bf00      	nop
 8010330:	2000ddfc 	.word	0x2000ddfc

08010334 <__malloc_unlock>:
 8010334:	4801      	ldr	r0, [pc, #4]	; (801033c <__malloc_unlock+0x8>)
 8010336:	f7fe ba11 	b.w	800e75c <__retarget_lock_release_recursive>
 801033a:	bf00      	nop
 801033c:	2000ddfc 	.word	0x2000ddfc

08010340 <_Balloc>:
 8010340:	b570      	push	{r4, r5, r6, lr}
 8010342:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010344:	4604      	mov	r4, r0
 8010346:	460d      	mov	r5, r1
 8010348:	b976      	cbnz	r6, 8010368 <_Balloc+0x28>
 801034a:	2010      	movs	r0, #16
 801034c:	f7fe fa08 	bl	800e760 <malloc>
 8010350:	4602      	mov	r2, r0
 8010352:	6260      	str	r0, [r4, #36]	; 0x24
 8010354:	b920      	cbnz	r0, 8010360 <_Balloc+0x20>
 8010356:	4b18      	ldr	r3, [pc, #96]	; (80103b8 <_Balloc+0x78>)
 8010358:	4818      	ldr	r0, [pc, #96]	; (80103bc <_Balloc+0x7c>)
 801035a:	2166      	movs	r1, #102	; 0x66
 801035c:	f000 fcea 	bl	8010d34 <__assert_func>
 8010360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010364:	6006      	str	r6, [r0, #0]
 8010366:	60c6      	str	r6, [r0, #12]
 8010368:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801036a:	68f3      	ldr	r3, [r6, #12]
 801036c:	b183      	cbz	r3, 8010390 <_Balloc+0x50>
 801036e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010376:	b9b8      	cbnz	r0, 80103a8 <_Balloc+0x68>
 8010378:	2101      	movs	r1, #1
 801037a:	fa01 f605 	lsl.w	r6, r1, r5
 801037e:	1d72      	adds	r2, r6, #5
 8010380:	0092      	lsls	r2, r2, #2
 8010382:	4620      	mov	r0, r4
 8010384:	f000 fb5a 	bl	8010a3c <_calloc_r>
 8010388:	b160      	cbz	r0, 80103a4 <_Balloc+0x64>
 801038a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801038e:	e00e      	b.n	80103ae <_Balloc+0x6e>
 8010390:	2221      	movs	r2, #33	; 0x21
 8010392:	2104      	movs	r1, #4
 8010394:	4620      	mov	r0, r4
 8010396:	f000 fb51 	bl	8010a3c <_calloc_r>
 801039a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801039c:	60f0      	str	r0, [r6, #12]
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d1e4      	bne.n	801036e <_Balloc+0x2e>
 80103a4:	2000      	movs	r0, #0
 80103a6:	bd70      	pop	{r4, r5, r6, pc}
 80103a8:	6802      	ldr	r2, [r0, #0]
 80103aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80103ae:	2300      	movs	r3, #0
 80103b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80103b4:	e7f7      	b.n	80103a6 <_Balloc+0x66>
 80103b6:	bf00      	nop
 80103b8:	080117e2 	.word	0x080117e2
 80103bc:	08011869 	.word	0x08011869

080103c0 <_Bfree>:
 80103c0:	b570      	push	{r4, r5, r6, lr}
 80103c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80103c4:	4605      	mov	r5, r0
 80103c6:	460c      	mov	r4, r1
 80103c8:	b976      	cbnz	r6, 80103e8 <_Bfree+0x28>
 80103ca:	2010      	movs	r0, #16
 80103cc:	f7fe f9c8 	bl	800e760 <malloc>
 80103d0:	4602      	mov	r2, r0
 80103d2:	6268      	str	r0, [r5, #36]	; 0x24
 80103d4:	b920      	cbnz	r0, 80103e0 <_Bfree+0x20>
 80103d6:	4b09      	ldr	r3, [pc, #36]	; (80103fc <_Bfree+0x3c>)
 80103d8:	4809      	ldr	r0, [pc, #36]	; (8010400 <_Bfree+0x40>)
 80103da:	218a      	movs	r1, #138	; 0x8a
 80103dc:	f000 fcaa 	bl	8010d34 <__assert_func>
 80103e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103e4:	6006      	str	r6, [r0, #0]
 80103e6:	60c6      	str	r6, [r0, #12]
 80103e8:	b13c      	cbz	r4, 80103fa <_Bfree+0x3a>
 80103ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80103ec:	6862      	ldr	r2, [r4, #4]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80103f4:	6021      	str	r1, [r4, #0]
 80103f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80103fa:	bd70      	pop	{r4, r5, r6, pc}
 80103fc:	080117e2 	.word	0x080117e2
 8010400:	08011869 	.word	0x08011869

08010404 <__multadd>:
 8010404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010408:	690e      	ldr	r6, [r1, #16]
 801040a:	4607      	mov	r7, r0
 801040c:	4698      	mov	r8, r3
 801040e:	460c      	mov	r4, r1
 8010410:	f101 0014 	add.w	r0, r1, #20
 8010414:	2300      	movs	r3, #0
 8010416:	6805      	ldr	r5, [r0, #0]
 8010418:	b2a9      	uxth	r1, r5
 801041a:	fb02 8101 	mla	r1, r2, r1, r8
 801041e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010422:	0c2d      	lsrs	r5, r5, #16
 8010424:	fb02 c505 	mla	r5, r2, r5, ip
 8010428:	b289      	uxth	r1, r1
 801042a:	3301      	adds	r3, #1
 801042c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010430:	429e      	cmp	r6, r3
 8010432:	f840 1b04 	str.w	r1, [r0], #4
 8010436:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801043a:	dcec      	bgt.n	8010416 <__multadd+0x12>
 801043c:	f1b8 0f00 	cmp.w	r8, #0
 8010440:	d022      	beq.n	8010488 <__multadd+0x84>
 8010442:	68a3      	ldr	r3, [r4, #8]
 8010444:	42b3      	cmp	r3, r6
 8010446:	dc19      	bgt.n	801047c <__multadd+0x78>
 8010448:	6861      	ldr	r1, [r4, #4]
 801044a:	4638      	mov	r0, r7
 801044c:	3101      	adds	r1, #1
 801044e:	f7ff ff77 	bl	8010340 <_Balloc>
 8010452:	4605      	mov	r5, r0
 8010454:	b928      	cbnz	r0, 8010462 <__multadd+0x5e>
 8010456:	4602      	mov	r2, r0
 8010458:	4b0d      	ldr	r3, [pc, #52]	; (8010490 <__multadd+0x8c>)
 801045a:	480e      	ldr	r0, [pc, #56]	; (8010494 <__multadd+0x90>)
 801045c:	21b5      	movs	r1, #181	; 0xb5
 801045e:	f000 fc69 	bl	8010d34 <__assert_func>
 8010462:	6922      	ldr	r2, [r4, #16]
 8010464:	3202      	adds	r2, #2
 8010466:	f104 010c 	add.w	r1, r4, #12
 801046a:	0092      	lsls	r2, r2, #2
 801046c:	300c      	adds	r0, #12
 801046e:	f7fe f987 	bl	800e780 <memcpy>
 8010472:	4621      	mov	r1, r4
 8010474:	4638      	mov	r0, r7
 8010476:	f7ff ffa3 	bl	80103c0 <_Bfree>
 801047a:	462c      	mov	r4, r5
 801047c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010480:	3601      	adds	r6, #1
 8010482:	f8c3 8014 	str.w	r8, [r3, #20]
 8010486:	6126      	str	r6, [r4, #16]
 8010488:	4620      	mov	r0, r4
 801048a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801048e:	bf00      	nop
 8010490:	08011858 	.word	0x08011858
 8010494:	08011869 	.word	0x08011869

08010498 <__hi0bits>:
 8010498:	0c03      	lsrs	r3, r0, #16
 801049a:	041b      	lsls	r3, r3, #16
 801049c:	b9d3      	cbnz	r3, 80104d4 <__hi0bits+0x3c>
 801049e:	0400      	lsls	r0, r0, #16
 80104a0:	2310      	movs	r3, #16
 80104a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80104a6:	bf04      	itt	eq
 80104a8:	0200      	lsleq	r0, r0, #8
 80104aa:	3308      	addeq	r3, #8
 80104ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80104b0:	bf04      	itt	eq
 80104b2:	0100      	lsleq	r0, r0, #4
 80104b4:	3304      	addeq	r3, #4
 80104b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80104ba:	bf04      	itt	eq
 80104bc:	0080      	lsleq	r0, r0, #2
 80104be:	3302      	addeq	r3, #2
 80104c0:	2800      	cmp	r0, #0
 80104c2:	db05      	blt.n	80104d0 <__hi0bits+0x38>
 80104c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80104c8:	f103 0301 	add.w	r3, r3, #1
 80104cc:	bf08      	it	eq
 80104ce:	2320      	moveq	r3, #32
 80104d0:	4618      	mov	r0, r3
 80104d2:	4770      	bx	lr
 80104d4:	2300      	movs	r3, #0
 80104d6:	e7e4      	b.n	80104a2 <__hi0bits+0xa>

080104d8 <__lo0bits>:
 80104d8:	6803      	ldr	r3, [r0, #0]
 80104da:	f013 0207 	ands.w	r2, r3, #7
 80104de:	4601      	mov	r1, r0
 80104e0:	d00b      	beq.n	80104fa <__lo0bits+0x22>
 80104e2:	07da      	lsls	r2, r3, #31
 80104e4:	d424      	bmi.n	8010530 <__lo0bits+0x58>
 80104e6:	0798      	lsls	r0, r3, #30
 80104e8:	bf49      	itett	mi
 80104ea:	085b      	lsrmi	r3, r3, #1
 80104ec:	089b      	lsrpl	r3, r3, #2
 80104ee:	2001      	movmi	r0, #1
 80104f0:	600b      	strmi	r3, [r1, #0]
 80104f2:	bf5c      	itt	pl
 80104f4:	600b      	strpl	r3, [r1, #0]
 80104f6:	2002      	movpl	r0, #2
 80104f8:	4770      	bx	lr
 80104fa:	b298      	uxth	r0, r3
 80104fc:	b9b0      	cbnz	r0, 801052c <__lo0bits+0x54>
 80104fe:	0c1b      	lsrs	r3, r3, #16
 8010500:	2010      	movs	r0, #16
 8010502:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010506:	bf04      	itt	eq
 8010508:	0a1b      	lsreq	r3, r3, #8
 801050a:	3008      	addeq	r0, #8
 801050c:	071a      	lsls	r2, r3, #28
 801050e:	bf04      	itt	eq
 8010510:	091b      	lsreq	r3, r3, #4
 8010512:	3004      	addeq	r0, #4
 8010514:	079a      	lsls	r2, r3, #30
 8010516:	bf04      	itt	eq
 8010518:	089b      	lsreq	r3, r3, #2
 801051a:	3002      	addeq	r0, #2
 801051c:	07da      	lsls	r2, r3, #31
 801051e:	d403      	bmi.n	8010528 <__lo0bits+0x50>
 8010520:	085b      	lsrs	r3, r3, #1
 8010522:	f100 0001 	add.w	r0, r0, #1
 8010526:	d005      	beq.n	8010534 <__lo0bits+0x5c>
 8010528:	600b      	str	r3, [r1, #0]
 801052a:	4770      	bx	lr
 801052c:	4610      	mov	r0, r2
 801052e:	e7e8      	b.n	8010502 <__lo0bits+0x2a>
 8010530:	2000      	movs	r0, #0
 8010532:	4770      	bx	lr
 8010534:	2020      	movs	r0, #32
 8010536:	4770      	bx	lr

08010538 <__i2b>:
 8010538:	b510      	push	{r4, lr}
 801053a:	460c      	mov	r4, r1
 801053c:	2101      	movs	r1, #1
 801053e:	f7ff feff 	bl	8010340 <_Balloc>
 8010542:	4602      	mov	r2, r0
 8010544:	b928      	cbnz	r0, 8010552 <__i2b+0x1a>
 8010546:	4b05      	ldr	r3, [pc, #20]	; (801055c <__i2b+0x24>)
 8010548:	4805      	ldr	r0, [pc, #20]	; (8010560 <__i2b+0x28>)
 801054a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801054e:	f000 fbf1 	bl	8010d34 <__assert_func>
 8010552:	2301      	movs	r3, #1
 8010554:	6144      	str	r4, [r0, #20]
 8010556:	6103      	str	r3, [r0, #16]
 8010558:	bd10      	pop	{r4, pc}
 801055a:	bf00      	nop
 801055c:	08011858 	.word	0x08011858
 8010560:	08011869 	.word	0x08011869

08010564 <__multiply>:
 8010564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010568:	4614      	mov	r4, r2
 801056a:	690a      	ldr	r2, [r1, #16]
 801056c:	6923      	ldr	r3, [r4, #16]
 801056e:	429a      	cmp	r2, r3
 8010570:	bfb8      	it	lt
 8010572:	460b      	movlt	r3, r1
 8010574:	460d      	mov	r5, r1
 8010576:	bfbc      	itt	lt
 8010578:	4625      	movlt	r5, r4
 801057a:	461c      	movlt	r4, r3
 801057c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010580:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010584:	68ab      	ldr	r3, [r5, #8]
 8010586:	6869      	ldr	r1, [r5, #4]
 8010588:	eb0a 0709 	add.w	r7, sl, r9
 801058c:	42bb      	cmp	r3, r7
 801058e:	b085      	sub	sp, #20
 8010590:	bfb8      	it	lt
 8010592:	3101      	addlt	r1, #1
 8010594:	f7ff fed4 	bl	8010340 <_Balloc>
 8010598:	b930      	cbnz	r0, 80105a8 <__multiply+0x44>
 801059a:	4602      	mov	r2, r0
 801059c:	4b42      	ldr	r3, [pc, #264]	; (80106a8 <__multiply+0x144>)
 801059e:	4843      	ldr	r0, [pc, #268]	; (80106ac <__multiply+0x148>)
 80105a0:	f240 115d 	movw	r1, #349	; 0x15d
 80105a4:	f000 fbc6 	bl	8010d34 <__assert_func>
 80105a8:	f100 0614 	add.w	r6, r0, #20
 80105ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80105b0:	4633      	mov	r3, r6
 80105b2:	2200      	movs	r2, #0
 80105b4:	4543      	cmp	r3, r8
 80105b6:	d31e      	bcc.n	80105f6 <__multiply+0x92>
 80105b8:	f105 0c14 	add.w	ip, r5, #20
 80105bc:	f104 0314 	add.w	r3, r4, #20
 80105c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80105c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80105c8:	9202      	str	r2, [sp, #8]
 80105ca:	ebac 0205 	sub.w	r2, ip, r5
 80105ce:	3a15      	subs	r2, #21
 80105d0:	f022 0203 	bic.w	r2, r2, #3
 80105d4:	3204      	adds	r2, #4
 80105d6:	f105 0115 	add.w	r1, r5, #21
 80105da:	458c      	cmp	ip, r1
 80105dc:	bf38      	it	cc
 80105de:	2204      	movcc	r2, #4
 80105e0:	9201      	str	r2, [sp, #4]
 80105e2:	9a02      	ldr	r2, [sp, #8]
 80105e4:	9303      	str	r3, [sp, #12]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d808      	bhi.n	80105fc <__multiply+0x98>
 80105ea:	2f00      	cmp	r7, #0
 80105ec:	dc55      	bgt.n	801069a <__multiply+0x136>
 80105ee:	6107      	str	r7, [r0, #16]
 80105f0:	b005      	add	sp, #20
 80105f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f6:	f843 2b04 	str.w	r2, [r3], #4
 80105fa:	e7db      	b.n	80105b4 <__multiply+0x50>
 80105fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8010600:	f1ba 0f00 	cmp.w	sl, #0
 8010604:	d020      	beq.n	8010648 <__multiply+0xe4>
 8010606:	f105 0e14 	add.w	lr, r5, #20
 801060a:	46b1      	mov	r9, r6
 801060c:	2200      	movs	r2, #0
 801060e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010612:	f8d9 b000 	ldr.w	fp, [r9]
 8010616:	b2a1      	uxth	r1, r4
 8010618:	fa1f fb8b 	uxth.w	fp, fp
 801061c:	fb0a b101 	mla	r1, sl, r1, fp
 8010620:	4411      	add	r1, r2
 8010622:	f8d9 2000 	ldr.w	r2, [r9]
 8010626:	0c24      	lsrs	r4, r4, #16
 8010628:	0c12      	lsrs	r2, r2, #16
 801062a:	fb0a 2404 	mla	r4, sl, r4, r2
 801062e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010632:	b289      	uxth	r1, r1
 8010634:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010638:	45f4      	cmp	ip, lr
 801063a:	f849 1b04 	str.w	r1, [r9], #4
 801063e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010642:	d8e4      	bhi.n	801060e <__multiply+0xaa>
 8010644:	9901      	ldr	r1, [sp, #4]
 8010646:	5072      	str	r2, [r6, r1]
 8010648:	9a03      	ldr	r2, [sp, #12]
 801064a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801064e:	3304      	adds	r3, #4
 8010650:	f1b9 0f00 	cmp.w	r9, #0
 8010654:	d01f      	beq.n	8010696 <__multiply+0x132>
 8010656:	6834      	ldr	r4, [r6, #0]
 8010658:	f105 0114 	add.w	r1, r5, #20
 801065c:	46b6      	mov	lr, r6
 801065e:	f04f 0a00 	mov.w	sl, #0
 8010662:	880a      	ldrh	r2, [r1, #0]
 8010664:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010668:	fb09 b202 	mla	r2, r9, r2, fp
 801066c:	4492      	add	sl, r2
 801066e:	b2a4      	uxth	r4, r4
 8010670:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010674:	f84e 4b04 	str.w	r4, [lr], #4
 8010678:	f851 4b04 	ldr.w	r4, [r1], #4
 801067c:	f8be 2000 	ldrh.w	r2, [lr]
 8010680:	0c24      	lsrs	r4, r4, #16
 8010682:	fb09 2404 	mla	r4, r9, r4, r2
 8010686:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801068a:	458c      	cmp	ip, r1
 801068c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010690:	d8e7      	bhi.n	8010662 <__multiply+0xfe>
 8010692:	9a01      	ldr	r2, [sp, #4]
 8010694:	50b4      	str	r4, [r6, r2]
 8010696:	3604      	adds	r6, #4
 8010698:	e7a3      	b.n	80105e2 <__multiply+0x7e>
 801069a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d1a5      	bne.n	80105ee <__multiply+0x8a>
 80106a2:	3f01      	subs	r7, #1
 80106a4:	e7a1      	b.n	80105ea <__multiply+0x86>
 80106a6:	bf00      	nop
 80106a8:	08011858 	.word	0x08011858
 80106ac:	08011869 	.word	0x08011869

080106b0 <__pow5mult>:
 80106b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106b4:	4615      	mov	r5, r2
 80106b6:	f012 0203 	ands.w	r2, r2, #3
 80106ba:	4606      	mov	r6, r0
 80106bc:	460f      	mov	r7, r1
 80106be:	d007      	beq.n	80106d0 <__pow5mult+0x20>
 80106c0:	4c25      	ldr	r4, [pc, #148]	; (8010758 <__pow5mult+0xa8>)
 80106c2:	3a01      	subs	r2, #1
 80106c4:	2300      	movs	r3, #0
 80106c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80106ca:	f7ff fe9b 	bl	8010404 <__multadd>
 80106ce:	4607      	mov	r7, r0
 80106d0:	10ad      	asrs	r5, r5, #2
 80106d2:	d03d      	beq.n	8010750 <__pow5mult+0xa0>
 80106d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80106d6:	b97c      	cbnz	r4, 80106f8 <__pow5mult+0x48>
 80106d8:	2010      	movs	r0, #16
 80106da:	f7fe f841 	bl	800e760 <malloc>
 80106de:	4602      	mov	r2, r0
 80106e0:	6270      	str	r0, [r6, #36]	; 0x24
 80106e2:	b928      	cbnz	r0, 80106f0 <__pow5mult+0x40>
 80106e4:	4b1d      	ldr	r3, [pc, #116]	; (801075c <__pow5mult+0xac>)
 80106e6:	481e      	ldr	r0, [pc, #120]	; (8010760 <__pow5mult+0xb0>)
 80106e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80106ec:	f000 fb22 	bl	8010d34 <__assert_func>
 80106f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106f4:	6004      	str	r4, [r0, #0]
 80106f6:	60c4      	str	r4, [r0, #12]
 80106f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80106fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010700:	b94c      	cbnz	r4, 8010716 <__pow5mult+0x66>
 8010702:	f240 2171 	movw	r1, #625	; 0x271
 8010706:	4630      	mov	r0, r6
 8010708:	f7ff ff16 	bl	8010538 <__i2b>
 801070c:	2300      	movs	r3, #0
 801070e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010712:	4604      	mov	r4, r0
 8010714:	6003      	str	r3, [r0, #0]
 8010716:	f04f 0900 	mov.w	r9, #0
 801071a:	07eb      	lsls	r3, r5, #31
 801071c:	d50a      	bpl.n	8010734 <__pow5mult+0x84>
 801071e:	4639      	mov	r1, r7
 8010720:	4622      	mov	r2, r4
 8010722:	4630      	mov	r0, r6
 8010724:	f7ff ff1e 	bl	8010564 <__multiply>
 8010728:	4639      	mov	r1, r7
 801072a:	4680      	mov	r8, r0
 801072c:	4630      	mov	r0, r6
 801072e:	f7ff fe47 	bl	80103c0 <_Bfree>
 8010732:	4647      	mov	r7, r8
 8010734:	106d      	asrs	r5, r5, #1
 8010736:	d00b      	beq.n	8010750 <__pow5mult+0xa0>
 8010738:	6820      	ldr	r0, [r4, #0]
 801073a:	b938      	cbnz	r0, 801074c <__pow5mult+0x9c>
 801073c:	4622      	mov	r2, r4
 801073e:	4621      	mov	r1, r4
 8010740:	4630      	mov	r0, r6
 8010742:	f7ff ff0f 	bl	8010564 <__multiply>
 8010746:	6020      	str	r0, [r4, #0]
 8010748:	f8c0 9000 	str.w	r9, [r0]
 801074c:	4604      	mov	r4, r0
 801074e:	e7e4      	b.n	801071a <__pow5mult+0x6a>
 8010750:	4638      	mov	r0, r7
 8010752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010756:	bf00      	nop
 8010758:	080119c0 	.word	0x080119c0
 801075c:	080117e2 	.word	0x080117e2
 8010760:	08011869 	.word	0x08011869

08010764 <__lshift>:
 8010764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010768:	460c      	mov	r4, r1
 801076a:	6849      	ldr	r1, [r1, #4]
 801076c:	6923      	ldr	r3, [r4, #16]
 801076e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010772:	68a3      	ldr	r3, [r4, #8]
 8010774:	4607      	mov	r7, r0
 8010776:	4691      	mov	r9, r2
 8010778:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801077c:	f108 0601 	add.w	r6, r8, #1
 8010780:	42b3      	cmp	r3, r6
 8010782:	db0b      	blt.n	801079c <__lshift+0x38>
 8010784:	4638      	mov	r0, r7
 8010786:	f7ff fddb 	bl	8010340 <_Balloc>
 801078a:	4605      	mov	r5, r0
 801078c:	b948      	cbnz	r0, 80107a2 <__lshift+0x3e>
 801078e:	4602      	mov	r2, r0
 8010790:	4b28      	ldr	r3, [pc, #160]	; (8010834 <__lshift+0xd0>)
 8010792:	4829      	ldr	r0, [pc, #164]	; (8010838 <__lshift+0xd4>)
 8010794:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010798:	f000 facc 	bl	8010d34 <__assert_func>
 801079c:	3101      	adds	r1, #1
 801079e:	005b      	lsls	r3, r3, #1
 80107a0:	e7ee      	b.n	8010780 <__lshift+0x1c>
 80107a2:	2300      	movs	r3, #0
 80107a4:	f100 0114 	add.w	r1, r0, #20
 80107a8:	f100 0210 	add.w	r2, r0, #16
 80107ac:	4618      	mov	r0, r3
 80107ae:	4553      	cmp	r3, sl
 80107b0:	db33      	blt.n	801081a <__lshift+0xb6>
 80107b2:	6920      	ldr	r0, [r4, #16]
 80107b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80107b8:	f104 0314 	add.w	r3, r4, #20
 80107bc:	f019 091f 	ands.w	r9, r9, #31
 80107c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80107c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80107c8:	d02b      	beq.n	8010822 <__lshift+0xbe>
 80107ca:	f1c9 0e20 	rsb	lr, r9, #32
 80107ce:	468a      	mov	sl, r1
 80107d0:	2200      	movs	r2, #0
 80107d2:	6818      	ldr	r0, [r3, #0]
 80107d4:	fa00 f009 	lsl.w	r0, r0, r9
 80107d8:	4302      	orrs	r2, r0
 80107da:	f84a 2b04 	str.w	r2, [sl], #4
 80107de:	f853 2b04 	ldr.w	r2, [r3], #4
 80107e2:	459c      	cmp	ip, r3
 80107e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80107e8:	d8f3      	bhi.n	80107d2 <__lshift+0x6e>
 80107ea:	ebac 0304 	sub.w	r3, ip, r4
 80107ee:	3b15      	subs	r3, #21
 80107f0:	f023 0303 	bic.w	r3, r3, #3
 80107f4:	3304      	adds	r3, #4
 80107f6:	f104 0015 	add.w	r0, r4, #21
 80107fa:	4584      	cmp	ip, r0
 80107fc:	bf38      	it	cc
 80107fe:	2304      	movcc	r3, #4
 8010800:	50ca      	str	r2, [r1, r3]
 8010802:	b10a      	cbz	r2, 8010808 <__lshift+0xa4>
 8010804:	f108 0602 	add.w	r6, r8, #2
 8010808:	3e01      	subs	r6, #1
 801080a:	4638      	mov	r0, r7
 801080c:	612e      	str	r6, [r5, #16]
 801080e:	4621      	mov	r1, r4
 8010810:	f7ff fdd6 	bl	80103c0 <_Bfree>
 8010814:	4628      	mov	r0, r5
 8010816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801081a:	f842 0f04 	str.w	r0, [r2, #4]!
 801081e:	3301      	adds	r3, #1
 8010820:	e7c5      	b.n	80107ae <__lshift+0x4a>
 8010822:	3904      	subs	r1, #4
 8010824:	f853 2b04 	ldr.w	r2, [r3], #4
 8010828:	f841 2f04 	str.w	r2, [r1, #4]!
 801082c:	459c      	cmp	ip, r3
 801082e:	d8f9      	bhi.n	8010824 <__lshift+0xc0>
 8010830:	e7ea      	b.n	8010808 <__lshift+0xa4>
 8010832:	bf00      	nop
 8010834:	08011858 	.word	0x08011858
 8010838:	08011869 	.word	0x08011869

0801083c <__mcmp>:
 801083c:	b530      	push	{r4, r5, lr}
 801083e:	6902      	ldr	r2, [r0, #16]
 8010840:	690c      	ldr	r4, [r1, #16]
 8010842:	1b12      	subs	r2, r2, r4
 8010844:	d10e      	bne.n	8010864 <__mcmp+0x28>
 8010846:	f100 0314 	add.w	r3, r0, #20
 801084a:	3114      	adds	r1, #20
 801084c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010850:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010854:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010858:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801085c:	42a5      	cmp	r5, r4
 801085e:	d003      	beq.n	8010868 <__mcmp+0x2c>
 8010860:	d305      	bcc.n	801086e <__mcmp+0x32>
 8010862:	2201      	movs	r2, #1
 8010864:	4610      	mov	r0, r2
 8010866:	bd30      	pop	{r4, r5, pc}
 8010868:	4283      	cmp	r3, r0
 801086a:	d3f3      	bcc.n	8010854 <__mcmp+0x18>
 801086c:	e7fa      	b.n	8010864 <__mcmp+0x28>
 801086e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010872:	e7f7      	b.n	8010864 <__mcmp+0x28>

08010874 <__mdiff>:
 8010874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010878:	460c      	mov	r4, r1
 801087a:	4606      	mov	r6, r0
 801087c:	4611      	mov	r1, r2
 801087e:	4620      	mov	r0, r4
 8010880:	4617      	mov	r7, r2
 8010882:	f7ff ffdb 	bl	801083c <__mcmp>
 8010886:	1e05      	subs	r5, r0, #0
 8010888:	d110      	bne.n	80108ac <__mdiff+0x38>
 801088a:	4629      	mov	r1, r5
 801088c:	4630      	mov	r0, r6
 801088e:	f7ff fd57 	bl	8010340 <_Balloc>
 8010892:	b930      	cbnz	r0, 80108a2 <__mdiff+0x2e>
 8010894:	4b39      	ldr	r3, [pc, #228]	; (801097c <__mdiff+0x108>)
 8010896:	4602      	mov	r2, r0
 8010898:	f240 2132 	movw	r1, #562	; 0x232
 801089c:	4838      	ldr	r0, [pc, #224]	; (8010980 <__mdiff+0x10c>)
 801089e:	f000 fa49 	bl	8010d34 <__assert_func>
 80108a2:	2301      	movs	r3, #1
 80108a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80108a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ac:	bfa4      	itt	ge
 80108ae:	463b      	movge	r3, r7
 80108b0:	4627      	movge	r7, r4
 80108b2:	4630      	mov	r0, r6
 80108b4:	6879      	ldr	r1, [r7, #4]
 80108b6:	bfa6      	itte	ge
 80108b8:	461c      	movge	r4, r3
 80108ba:	2500      	movge	r5, #0
 80108bc:	2501      	movlt	r5, #1
 80108be:	f7ff fd3f 	bl	8010340 <_Balloc>
 80108c2:	b920      	cbnz	r0, 80108ce <__mdiff+0x5a>
 80108c4:	4b2d      	ldr	r3, [pc, #180]	; (801097c <__mdiff+0x108>)
 80108c6:	4602      	mov	r2, r0
 80108c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80108cc:	e7e6      	b.n	801089c <__mdiff+0x28>
 80108ce:	693e      	ldr	r6, [r7, #16]
 80108d0:	60c5      	str	r5, [r0, #12]
 80108d2:	6925      	ldr	r5, [r4, #16]
 80108d4:	f107 0114 	add.w	r1, r7, #20
 80108d8:	f104 0914 	add.w	r9, r4, #20
 80108dc:	f100 0e14 	add.w	lr, r0, #20
 80108e0:	f107 0210 	add.w	r2, r7, #16
 80108e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80108e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80108ec:	46f2      	mov	sl, lr
 80108ee:	2700      	movs	r7, #0
 80108f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80108f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80108f8:	fa1f f883 	uxth.w	r8, r3
 80108fc:	fa17 f78b 	uxtah	r7, r7, fp
 8010900:	0c1b      	lsrs	r3, r3, #16
 8010902:	eba7 0808 	sub.w	r8, r7, r8
 8010906:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801090a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801090e:	fa1f f888 	uxth.w	r8, r8
 8010912:	141f      	asrs	r7, r3, #16
 8010914:	454d      	cmp	r5, r9
 8010916:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801091a:	f84a 3b04 	str.w	r3, [sl], #4
 801091e:	d8e7      	bhi.n	80108f0 <__mdiff+0x7c>
 8010920:	1b2b      	subs	r3, r5, r4
 8010922:	3b15      	subs	r3, #21
 8010924:	f023 0303 	bic.w	r3, r3, #3
 8010928:	3304      	adds	r3, #4
 801092a:	3415      	adds	r4, #21
 801092c:	42a5      	cmp	r5, r4
 801092e:	bf38      	it	cc
 8010930:	2304      	movcc	r3, #4
 8010932:	4419      	add	r1, r3
 8010934:	4473      	add	r3, lr
 8010936:	469e      	mov	lr, r3
 8010938:	460d      	mov	r5, r1
 801093a:	4565      	cmp	r5, ip
 801093c:	d30e      	bcc.n	801095c <__mdiff+0xe8>
 801093e:	f10c 0203 	add.w	r2, ip, #3
 8010942:	1a52      	subs	r2, r2, r1
 8010944:	f022 0203 	bic.w	r2, r2, #3
 8010948:	3903      	subs	r1, #3
 801094a:	458c      	cmp	ip, r1
 801094c:	bf38      	it	cc
 801094e:	2200      	movcc	r2, #0
 8010950:	441a      	add	r2, r3
 8010952:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010956:	b17b      	cbz	r3, 8010978 <__mdiff+0x104>
 8010958:	6106      	str	r6, [r0, #16]
 801095a:	e7a5      	b.n	80108a8 <__mdiff+0x34>
 801095c:	f855 8b04 	ldr.w	r8, [r5], #4
 8010960:	fa17 f488 	uxtah	r4, r7, r8
 8010964:	1422      	asrs	r2, r4, #16
 8010966:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801096a:	b2a4      	uxth	r4, r4
 801096c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010970:	f84e 4b04 	str.w	r4, [lr], #4
 8010974:	1417      	asrs	r7, r2, #16
 8010976:	e7e0      	b.n	801093a <__mdiff+0xc6>
 8010978:	3e01      	subs	r6, #1
 801097a:	e7ea      	b.n	8010952 <__mdiff+0xde>
 801097c:	08011858 	.word	0x08011858
 8010980:	08011869 	.word	0x08011869

08010984 <__d2b>:
 8010984:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010988:	4689      	mov	r9, r1
 801098a:	2101      	movs	r1, #1
 801098c:	ec57 6b10 	vmov	r6, r7, d0
 8010990:	4690      	mov	r8, r2
 8010992:	f7ff fcd5 	bl	8010340 <_Balloc>
 8010996:	4604      	mov	r4, r0
 8010998:	b930      	cbnz	r0, 80109a8 <__d2b+0x24>
 801099a:	4602      	mov	r2, r0
 801099c:	4b25      	ldr	r3, [pc, #148]	; (8010a34 <__d2b+0xb0>)
 801099e:	4826      	ldr	r0, [pc, #152]	; (8010a38 <__d2b+0xb4>)
 80109a0:	f240 310a 	movw	r1, #778	; 0x30a
 80109a4:	f000 f9c6 	bl	8010d34 <__assert_func>
 80109a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80109ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80109b0:	bb35      	cbnz	r5, 8010a00 <__d2b+0x7c>
 80109b2:	2e00      	cmp	r6, #0
 80109b4:	9301      	str	r3, [sp, #4]
 80109b6:	d028      	beq.n	8010a0a <__d2b+0x86>
 80109b8:	4668      	mov	r0, sp
 80109ba:	9600      	str	r6, [sp, #0]
 80109bc:	f7ff fd8c 	bl	80104d8 <__lo0bits>
 80109c0:	9900      	ldr	r1, [sp, #0]
 80109c2:	b300      	cbz	r0, 8010a06 <__d2b+0x82>
 80109c4:	9a01      	ldr	r2, [sp, #4]
 80109c6:	f1c0 0320 	rsb	r3, r0, #32
 80109ca:	fa02 f303 	lsl.w	r3, r2, r3
 80109ce:	430b      	orrs	r3, r1
 80109d0:	40c2      	lsrs	r2, r0
 80109d2:	6163      	str	r3, [r4, #20]
 80109d4:	9201      	str	r2, [sp, #4]
 80109d6:	9b01      	ldr	r3, [sp, #4]
 80109d8:	61a3      	str	r3, [r4, #24]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	bf14      	ite	ne
 80109de:	2202      	movne	r2, #2
 80109e0:	2201      	moveq	r2, #1
 80109e2:	6122      	str	r2, [r4, #16]
 80109e4:	b1d5      	cbz	r5, 8010a1c <__d2b+0x98>
 80109e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80109ea:	4405      	add	r5, r0
 80109ec:	f8c9 5000 	str.w	r5, [r9]
 80109f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80109f4:	f8c8 0000 	str.w	r0, [r8]
 80109f8:	4620      	mov	r0, r4
 80109fa:	b003      	add	sp, #12
 80109fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a04:	e7d5      	b.n	80109b2 <__d2b+0x2e>
 8010a06:	6161      	str	r1, [r4, #20]
 8010a08:	e7e5      	b.n	80109d6 <__d2b+0x52>
 8010a0a:	a801      	add	r0, sp, #4
 8010a0c:	f7ff fd64 	bl	80104d8 <__lo0bits>
 8010a10:	9b01      	ldr	r3, [sp, #4]
 8010a12:	6163      	str	r3, [r4, #20]
 8010a14:	2201      	movs	r2, #1
 8010a16:	6122      	str	r2, [r4, #16]
 8010a18:	3020      	adds	r0, #32
 8010a1a:	e7e3      	b.n	80109e4 <__d2b+0x60>
 8010a1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010a20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a24:	f8c9 0000 	str.w	r0, [r9]
 8010a28:	6918      	ldr	r0, [r3, #16]
 8010a2a:	f7ff fd35 	bl	8010498 <__hi0bits>
 8010a2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010a32:	e7df      	b.n	80109f4 <__d2b+0x70>
 8010a34:	08011858 	.word	0x08011858
 8010a38:	08011869 	.word	0x08011869

08010a3c <_calloc_r>:
 8010a3c:	b513      	push	{r0, r1, r4, lr}
 8010a3e:	434a      	muls	r2, r1
 8010a40:	4611      	mov	r1, r2
 8010a42:	9201      	str	r2, [sp, #4]
 8010a44:	f7fd ff02 	bl	800e84c <_malloc_r>
 8010a48:	4604      	mov	r4, r0
 8010a4a:	b118      	cbz	r0, 8010a54 <_calloc_r+0x18>
 8010a4c:	9a01      	ldr	r2, [sp, #4]
 8010a4e:	2100      	movs	r1, #0
 8010a50:	f7fd fea4 	bl	800e79c <memset>
 8010a54:	4620      	mov	r0, r4
 8010a56:	b002      	add	sp, #8
 8010a58:	bd10      	pop	{r4, pc}

08010a5a <__ssputs_r>:
 8010a5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a5e:	688e      	ldr	r6, [r1, #8]
 8010a60:	429e      	cmp	r6, r3
 8010a62:	4682      	mov	sl, r0
 8010a64:	460c      	mov	r4, r1
 8010a66:	4690      	mov	r8, r2
 8010a68:	461f      	mov	r7, r3
 8010a6a:	d838      	bhi.n	8010ade <__ssputs_r+0x84>
 8010a6c:	898a      	ldrh	r2, [r1, #12]
 8010a6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a72:	d032      	beq.n	8010ada <__ssputs_r+0x80>
 8010a74:	6825      	ldr	r5, [r4, #0]
 8010a76:	6909      	ldr	r1, [r1, #16]
 8010a78:	eba5 0901 	sub.w	r9, r5, r1
 8010a7c:	6965      	ldr	r5, [r4, #20]
 8010a7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a86:	3301      	adds	r3, #1
 8010a88:	444b      	add	r3, r9
 8010a8a:	106d      	asrs	r5, r5, #1
 8010a8c:	429d      	cmp	r5, r3
 8010a8e:	bf38      	it	cc
 8010a90:	461d      	movcc	r5, r3
 8010a92:	0553      	lsls	r3, r2, #21
 8010a94:	d531      	bpl.n	8010afa <__ssputs_r+0xa0>
 8010a96:	4629      	mov	r1, r5
 8010a98:	f7fd fed8 	bl	800e84c <_malloc_r>
 8010a9c:	4606      	mov	r6, r0
 8010a9e:	b950      	cbnz	r0, 8010ab6 <__ssputs_r+0x5c>
 8010aa0:	230c      	movs	r3, #12
 8010aa2:	f8ca 3000 	str.w	r3, [sl]
 8010aa6:	89a3      	ldrh	r3, [r4, #12]
 8010aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010aac:	81a3      	strh	r3, [r4, #12]
 8010aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab6:	6921      	ldr	r1, [r4, #16]
 8010ab8:	464a      	mov	r2, r9
 8010aba:	f7fd fe61 	bl	800e780 <memcpy>
 8010abe:	89a3      	ldrh	r3, [r4, #12]
 8010ac0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ac8:	81a3      	strh	r3, [r4, #12]
 8010aca:	6126      	str	r6, [r4, #16]
 8010acc:	6165      	str	r5, [r4, #20]
 8010ace:	444e      	add	r6, r9
 8010ad0:	eba5 0509 	sub.w	r5, r5, r9
 8010ad4:	6026      	str	r6, [r4, #0]
 8010ad6:	60a5      	str	r5, [r4, #8]
 8010ad8:	463e      	mov	r6, r7
 8010ada:	42be      	cmp	r6, r7
 8010adc:	d900      	bls.n	8010ae0 <__ssputs_r+0x86>
 8010ade:	463e      	mov	r6, r7
 8010ae0:	4632      	mov	r2, r6
 8010ae2:	6820      	ldr	r0, [r4, #0]
 8010ae4:	4641      	mov	r1, r8
 8010ae6:	f000 f967 	bl	8010db8 <memmove>
 8010aea:	68a3      	ldr	r3, [r4, #8]
 8010aec:	6822      	ldr	r2, [r4, #0]
 8010aee:	1b9b      	subs	r3, r3, r6
 8010af0:	4432      	add	r2, r6
 8010af2:	60a3      	str	r3, [r4, #8]
 8010af4:	6022      	str	r2, [r4, #0]
 8010af6:	2000      	movs	r0, #0
 8010af8:	e7db      	b.n	8010ab2 <__ssputs_r+0x58>
 8010afa:	462a      	mov	r2, r5
 8010afc:	f000 f976 	bl	8010dec <_realloc_r>
 8010b00:	4606      	mov	r6, r0
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d1e1      	bne.n	8010aca <__ssputs_r+0x70>
 8010b06:	6921      	ldr	r1, [r4, #16]
 8010b08:	4650      	mov	r0, sl
 8010b0a:	f7fd fe4f 	bl	800e7ac <_free_r>
 8010b0e:	e7c7      	b.n	8010aa0 <__ssputs_r+0x46>

08010b10 <_svfiprintf_r>:
 8010b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b14:	4698      	mov	r8, r3
 8010b16:	898b      	ldrh	r3, [r1, #12]
 8010b18:	061b      	lsls	r3, r3, #24
 8010b1a:	b09d      	sub	sp, #116	; 0x74
 8010b1c:	4607      	mov	r7, r0
 8010b1e:	460d      	mov	r5, r1
 8010b20:	4614      	mov	r4, r2
 8010b22:	d50e      	bpl.n	8010b42 <_svfiprintf_r+0x32>
 8010b24:	690b      	ldr	r3, [r1, #16]
 8010b26:	b963      	cbnz	r3, 8010b42 <_svfiprintf_r+0x32>
 8010b28:	2140      	movs	r1, #64	; 0x40
 8010b2a:	f7fd fe8f 	bl	800e84c <_malloc_r>
 8010b2e:	6028      	str	r0, [r5, #0]
 8010b30:	6128      	str	r0, [r5, #16]
 8010b32:	b920      	cbnz	r0, 8010b3e <_svfiprintf_r+0x2e>
 8010b34:	230c      	movs	r3, #12
 8010b36:	603b      	str	r3, [r7, #0]
 8010b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b3c:	e0d1      	b.n	8010ce2 <_svfiprintf_r+0x1d2>
 8010b3e:	2340      	movs	r3, #64	; 0x40
 8010b40:	616b      	str	r3, [r5, #20]
 8010b42:	2300      	movs	r3, #0
 8010b44:	9309      	str	r3, [sp, #36]	; 0x24
 8010b46:	2320      	movs	r3, #32
 8010b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b50:	2330      	movs	r3, #48	; 0x30
 8010b52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010cfc <_svfiprintf_r+0x1ec>
 8010b56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b5a:	f04f 0901 	mov.w	r9, #1
 8010b5e:	4623      	mov	r3, r4
 8010b60:	469a      	mov	sl, r3
 8010b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b66:	b10a      	cbz	r2, 8010b6c <_svfiprintf_r+0x5c>
 8010b68:	2a25      	cmp	r2, #37	; 0x25
 8010b6a:	d1f9      	bne.n	8010b60 <_svfiprintf_r+0x50>
 8010b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8010b70:	d00b      	beq.n	8010b8a <_svfiprintf_r+0x7a>
 8010b72:	465b      	mov	r3, fp
 8010b74:	4622      	mov	r2, r4
 8010b76:	4629      	mov	r1, r5
 8010b78:	4638      	mov	r0, r7
 8010b7a:	f7ff ff6e 	bl	8010a5a <__ssputs_r>
 8010b7e:	3001      	adds	r0, #1
 8010b80:	f000 80aa 	beq.w	8010cd8 <_svfiprintf_r+0x1c8>
 8010b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b86:	445a      	add	r2, fp
 8010b88:	9209      	str	r2, [sp, #36]	; 0x24
 8010b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	f000 80a2 	beq.w	8010cd8 <_svfiprintf_r+0x1c8>
 8010b94:	2300      	movs	r3, #0
 8010b96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b9e:	f10a 0a01 	add.w	sl, sl, #1
 8010ba2:	9304      	str	r3, [sp, #16]
 8010ba4:	9307      	str	r3, [sp, #28]
 8010ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010baa:	931a      	str	r3, [sp, #104]	; 0x68
 8010bac:	4654      	mov	r4, sl
 8010bae:	2205      	movs	r2, #5
 8010bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bb4:	4851      	ldr	r0, [pc, #324]	; (8010cfc <_svfiprintf_r+0x1ec>)
 8010bb6:	f7ef fb13 	bl	80001e0 <memchr>
 8010bba:	9a04      	ldr	r2, [sp, #16]
 8010bbc:	b9d8      	cbnz	r0, 8010bf6 <_svfiprintf_r+0xe6>
 8010bbe:	06d0      	lsls	r0, r2, #27
 8010bc0:	bf44      	itt	mi
 8010bc2:	2320      	movmi	r3, #32
 8010bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bc8:	0711      	lsls	r1, r2, #28
 8010bca:	bf44      	itt	mi
 8010bcc:	232b      	movmi	r3, #43	; 0x2b
 8010bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8010bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8010bd8:	d015      	beq.n	8010c06 <_svfiprintf_r+0xf6>
 8010bda:	9a07      	ldr	r2, [sp, #28]
 8010bdc:	4654      	mov	r4, sl
 8010bde:	2000      	movs	r0, #0
 8010be0:	f04f 0c0a 	mov.w	ip, #10
 8010be4:	4621      	mov	r1, r4
 8010be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bea:	3b30      	subs	r3, #48	; 0x30
 8010bec:	2b09      	cmp	r3, #9
 8010bee:	d94e      	bls.n	8010c8e <_svfiprintf_r+0x17e>
 8010bf0:	b1b0      	cbz	r0, 8010c20 <_svfiprintf_r+0x110>
 8010bf2:	9207      	str	r2, [sp, #28]
 8010bf4:	e014      	b.n	8010c20 <_svfiprintf_r+0x110>
 8010bf6:	eba0 0308 	sub.w	r3, r0, r8
 8010bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	9304      	str	r3, [sp, #16]
 8010c02:	46a2      	mov	sl, r4
 8010c04:	e7d2      	b.n	8010bac <_svfiprintf_r+0x9c>
 8010c06:	9b03      	ldr	r3, [sp, #12]
 8010c08:	1d19      	adds	r1, r3, #4
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	9103      	str	r1, [sp, #12]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	bfbb      	ittet	lt
 8010c12:	425b      	neglt	r3, r3
 8010c14:	f042 0202 	orrlt.w	r2, r2, #2
 8010c18:	9307      	strge	r3, [sp, #28]
 8010c1a:	9307      	strlt	r3, [sp, #28]
 8010c1c:	bfb8      	it	lt
 8010c1e:	9204      	strlt	r2, [sp, #16]
 8010c20:	7823      	ldrb	r3, [r4, #0]
 8010c22:	2b2e      	cmp	r3, #46	; 0x2e
 8010c24:	d10c      	bne.n	8010c40 <_svfiprintf_r+0x130>
 8010c26:	7863      	ldrb	r3, [r4, #1]
 8010c28:	2b2a      	cmp	r3, #42	; 0x2a
 8010c2a:	d135      	bne.n	8010c98 <_svfiprintf_r+0x188>
 8010c2c:	9b03      	ldr	r3, [sp, #12]
 8010c2e:	1d1a      	adds	r2, r3, #4
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	9203      	str	r2, [sp, #12]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	bfb8      	it	lt
 8010c38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010c3c:	3402      	adds	r4, #2
 8010c3e:	9305      	str	r3, [sp, #20]
 8010c40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010d0c <_svfiprintf_r+0x1fc>
 8010c44:	7821      	ldrb	r1, [r4, #0]
 8010c46:	2203      	movs	r2, #3
 8010c48:	4650      	mov	r0, sl
 8010c4a:	f7ef fac9 	bl	80001e0 <memchr>
 8010c4e:	b140      	cbz	r0, 8010c62 <_svfiprintf_r+0x152>
 8010c50:	2340      	movs	r3, #64	; 0x40
 8010c52:	eba0 000a 	sub.w	r0, r0, sl
 8010c56:	fa03 f000 	lsl.w	r0, r3, r0
 8010c5a:	9b04      	ldr	r3, [sp, #16]
 8010c5c:	4303      	orrs	r3, r0
 8010c5e:	3401      	adds	r4, #1
 8010c60:	9304      	str	r3, [sp, #16]
 8010c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c66:	4826      	ldr	r0, [pc, #152]	; (8010d00 <_svfiprintf_r+0x1f0>)
 8010c68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c6c:	2206      	movs	r2, #6
 8010c6e:	f7ef fab7 	bl	80001e0 <memchr>
 8010c72:	2800      	cmp	r0, #0
 8010c74:	d038      	beq.n	8010ce8 <_svfiprintf_r+0x1d8>
 8010c76:	4b23      	ldr	r3, [pc, #140]	; (8010d04 <_svfiprintf_r+0x1f4>)
 8010c78:	bb1b      	cbnz	r3, 8010cc2 <_svfiprintf_r+0x1b2>
 8010c7a:	9b03      	ldr	r3, [sp, #12]
 8010c7c:	3307      	adds	r3, #7
 8010c7e:	f023 0307 	bic.w	r3, r3, #7
 8010c82:	3308      	adds	r3, #8
 8010c84:	9303      	str	r3, [sp, #12]
 8010c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c88:	4433      	add	r3, r6
 8010c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8010c8c:	e767      	b.n	8010b5e <_svfiprintf_r+0x4e>
 8010c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c92:	460c      	mov	r4, r1
 8010c94:	2001      	movs	r0, #1
 8010c96:	e7a5      	b.n	8010be4 <_svfiprintf_r+0xd4>
 8010c98:	2300      	movs	r3, #0
 8010c9a:	3401      	adds	r4, #1
 8010c9c:	9305      	str	r3, [sp, #20]
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	f04f 0c0a 	mov.w	ip, #10
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010caa:	3a30      	subs	r2, #48	; 0x30
 8010cac:	2a09      	cmp	r2, #9
 8010cae:	d903      	bls.n	8010cb8 <_svfiprintf_r+0x1a8>
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d0c5      	beq.n	8010c40 <_svfiprintf_r+0x130>
 8010cb4:	9105      	str	r1, [sp, #20]
 8010cb6:	e7c3      	b.n	8010c40 <_svfiprintf_r+0x130>
 8010cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cbc:	4604      	mov	r4, r0
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	e7f0      	b.n	8010ca4 <_svfiprintf_r+0x194>
 8010cc2:	ab03      	add	r3, sp, #12
 8010cc4:	9300      	str	r3, [sp, #0]
 8010cc6:	462a      	mov	r2, r5
 8010cc8:	4b0f      	ldr	r3, [pc, #60]	; (8010d08 <_svfiprintf_r+0x1f8>)
 8010cca:	a904      	add	r1, sp, #16
 8010ccc:	4638      	mov	r0, r7
 8010cce:	f7fd feb7 	bl	800ea40 <_printf_float>
 8010cd2:	1c42      	adds	r2, r0, #1
 8010cd4:	4606      	mov	r6, r0
 8010cd6:	d1d6      	bne.n	8010c86 <_svfiprintf_r+0x176>
 8010cd8:	89ab      	ldrh	r3, [r5, #12]
 8010cda:	065b      	lsls	r3, r3, #25
 8010cdc:	f53f af2c 	bmi.w	8010b38 <_svfiprintf_r+0x28>
 8010ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ce2:	b01d      	add	sp, #116	; 0x74
 8010ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce8:	ab03      	add	r3, sp, #12
 8010cea:	9300      	str	r3, [sp, #0]
 8010cec:	462a      	mov	r2, r5
 8010cee:	4b06      	ldr	r3, [pc, #24]	; (8010d08 <_svfiprintf_r+0x1f8>)
 8010cf0:	a904      	add	r1, sp, #16
 8010cf2:	4638      	mov	r0, r7
 8010cf4:	f7fe f948 	bl	800ef88 <_printf_i>
 8010cf8:	e7eb      	b.n	8010cd2 <_svfiprintf_r+0x1c2>
 8010cfa:	bf00      	nop
 8010cfc:	080119cc 	.word	0x080119cc
 8010d00:	080119d6 	.word	0x080119d6
 8010d04:	0800ea41 	.word	0x0800ea41
 8010d08:	08010a5b 	.word	0x08010a5b
 8010d0c:	080119d2 	.word	0x080119d2

08010d10 <_read_r>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	4d07      	ldr	r5, [pc, #28]	; (8010d30 <_read_r+0x20>)
 8010d14:	4604      	mov	r4, r0
 8010d16:	4608      	mov	r0, r1
 8010d18:	4611      	mov	r1, r2
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	602a      	str	r2, [r5, #0]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	f7f2 fa9e 	bl	8003260 <_read>
 8010d24:	1c43      	adds	r3, r0, #1
 8010d26:	d102      	bne.n	8010d2e <_read_r+0x1e>
 8010d28:	682b      	ldr	r3, [r5, #0]
 8010d2a:	b103      	cbz	r3, 8010d2e <_read_r+0x1e>
 8010d2c:	6023      	str	r3, [r4, #0]
 8010d2e:	bd38      	pop	{r3, r4, r5, pc}
 8010d30:	2000de04 	.word	0x2000de04

08010d34 <__assert_func>:
 8010d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d36:	4614      	mov	r4, r2
 8010d38:	461a      	mov	r2, r3
 8010d3a:	4b09      	ldr	r3, [pc, #36]	; (8010d60 <__assert_func+0x2c>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	4605      	mov	r5, r0
 8010d40:	68d8      	ldr	r0, [r3, #12]
 8010d42:	b14c      	cbz	r4, 8010d58 <__assert_func+0x24>
 8010d44:	4b07      	ldr	r3, [pc, #28]	; (8010d64 <__assert_func+0x30>)
 8010d46:	9100      	str	r1, [sp, #0]
 8010d48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d4c:	4906      	ldr	r1, [pc, #24]	; (8010d68 <__assert_func+0x34>)
 8010d4e:	462b      	mov	r3, r5
 8010d50:	f000 f80e 	bl	8010d70 <fiprintf>
 8010d54:	f000 fa98 	bl	8011288 <abort>
 8010d58:	4b04      	ldr	r3, [pc, #16]	; (8010d6c <__assert_func+0x38>)
 8010d5a:	461c      	mov	r4, r3
 8010d5c:	e7f3      	b.n	8010d46 <__assert_func+0x12>
 8010d5e:	bf00      	nop
 8010d60:	20000184 	.word	0x20000184
 8010d64:	080119dd 	.word	0x080119dd
 8010d68:	080119ea 	.word	0x080119ea
 8010d6c:	08011a18 	.word	0x08011a18

08010d70 <fiprintf>:
 8010d70:	b40e      	push	{r1, r2, r3}
 8010d72:	b503      	push	{r0, r1, lr}
 8010d74:	4601      	mov	r1, r0
 8010d76:	ab03      	add	r3, sp, #12
 8010d78:	4805      	ldr	r0, [pc, #20]	; (8010d90 <fiprintf+0x20>)
 8010d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d7e:	6800      	ldr	r0, [r0, #0]
 8010d80:	9301      	str	r3, [sp, #4]
 8010d82:	f000 f883 	bl	8010e8c <_vfiprintf_r>
 8010d86:	b002      	add	sp, #8
 8010d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d8c:	b003      	add	sp, #12
 8010d8e:	4770      	bx	lr
 8010d90:	20000184 	.word	0x20000184

08010d94 <__ascii_mbtowc>:
 8010d94:	b082      	sub	sp, #8
 8010d96:	b901      	cbnz	r1, 8010d9a <__ascii_mbtowc+0x6>
 8010d98:	a901      	add	r1, sp, #4
 8010d9a:	b142      	cbz	r2, 8010dae <__ascii_mbtowc+0x1a>
 8010d9c:	b14b      	cbz	r3, 8010db2 <__ascii_mbtowc+0x1e>
 8010d9e:	7813      	ldrb	r3, [r2, #0]
 8010da0:	600b      	str	r3, [r1, #0]
 8010da2:	7812      	ldrb	r2, [r2, #0]
 8010da4:	1e10      	subs	r0, r2, #0
 8010da6:	bf18      	it	ne
 8010da8:	2001      	movne	r0, #1
 8010daa:	b002      	add	sp, #8
 8010dac:	4770      	bx	lr
 8010dae:	4610      	mov	r0, r2
 8010db0:	e7fb      	b.n	8010daa <__ascii_mbtowc+0x16>
 8010db2:	f06f 0001 	mvn.w	r0, #1
 8010db6:	e7f8      	b.n	8010daa <__ascii_mbtowc+0x16>

08010db8 <memmove>:
 8010db8:	4288      	cmp	r0, r1
 8010dba:	b510      	push	{r4, lr}
 8010dbc:	eb01 0402 	add.w	r4, r1, r2
 8010dc0:	d902      	bls.n	8010dc8 <memmove+0x10>
 8010dc2:	4284      	cmp	r4, r0
 8010dc4:	4623      	mov	r3, r4
 8010dc6:	d807      	bhi.n	8010dd8 <memmove+0x20>
 8010dc8:	1e43      	subs	r3, r0, #1
 8010dca:	42a1      	cmp	r1, r4
 8010dcc:	d008      	beq.n	8010de0 <memmove+0x28>
 8010dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010dd6:	e7f8      	b.n	8010dca <memmove+0x12>
 8010dd8:	4402      	add	r2, r0
 8010dda:	4601      	mov	r1, r0
 8010ddc:	428a      	cmp	r2, r1
 8010dde:	d100      	bne.n	8010de2 <memmove+0x2a>
 8010de0:	bd10      	pop	{r4, pc}
 8010de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010dea:	e7f7      	b.n	8010ddc <memmove+0x24>

08010dec <_realloc_r>:
 8010dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dee:	4607      	mov	r7, r0
 8010df0:	4614      	mov	r4, r2
 8010df2:	460e      	mov	r6, r1
 8010df4:	b921      	cbnz	r1, 8010e00 <_realloc_r+0x14>
 8010df6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010dfa:	4611      	mov	r1, r2
 8010dfc:	f7fd bd26 	b.w	800e84c <_malloc_r>
 8010e00:	b922      	cbnz	r2, 8010e0c <_realloc_r+0x20>
 8010e02:	f7fd fcd3 	bl	800e7ac <_free_r>
 8010e06:	4625      	mov	r5, r4
 8010e08:	4628      	mov	r0, r5
 8010e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e0c:	f000 faa8 	bl	8011360 <_malloc_usable_size_r>
 8010e10:	42a0      	cmp	r0, r4
 8010e12:	d20f      	bcs.n	8010e34 <_realloc_r+0x48>
 8010e14:	4621      	mov	r1, r4
 8010e16:	4638      	mov	r0, r7
 8010e18:	f7fd fd18 	bl	800e84c <_malloc_r>
 8010e1c:	4605      	mov	r5, r0
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	d0f2      	beq.n	8010e08 <_realloc_r+0x1c>
 8010e22:	4631      	mov	r1, r6
 8010e24:	4622      	mov	r2, r4
 8010e26:	f7fd fcab 	bl	800e780 <memcpy>
 8010e2a:	4631      	mov	r1, r6
 8010e2c:	4638      	mov	r0, r7
 8010e2e:	f7fd fcbd 	bl	800e7ac <_free_r>
 8010e32:	e7e9      	b.n	8010e08 <_realloc_r+0x1c>
 8010e34:	4635      	mov	r5, r6
 8010e36:	e7e7      	b.n	8010e08 <_realloc_r+0x1c>

08010e38 <__sfputc_r>:
 8010e38:	6893      	ldr	r3, [r2, #8]
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	b410      	push	{r4}
 8010e40:	6093      	str	r3, [r2, #8]
 8010e42:	da08      	bge.n	8010e56 <__sfputc_r+0x1e>
 8010e44:	6994      	ldr	r4, [r2, #24]
 8010e46:	42a3      	cmp	r3, r4
 8010e48:	db01      	blt.n	8010e4e <__sfputc_r+0x16>
 8010e4a:	290a      	cmp	r1, #10
 8010e4c:	d103      	bne.n	8010e56 <__sfputc_r+0x1e>
 8010e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e52:	f000 b94b 	b.w	80110ec <__swbuf_r>
 8010e56:	6813      	ldr	r3, [r2, #0]
 8010e58:	1c58      	adds	r0, r3, #1
 8010e5a:	6010      	str	r0, [r2, #0]
 8010e5c:	7019      	strb	r1, [r3, #0]
 8010e5e:	4608      	mov	r0, r1
 8010e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e64:	4770      	bx	lr

08010e66 <__sfputs_r>:
 8010e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e68:	4606      	mov	r6, r0
 8010e6a:	460f      	mov	r7, r1
 8010e6c:	4614      	mov	r4, r2
 8010e6e:	18d5      	adds	r5, r2, r3
 8010e70:	42ac      	cmp	r4, r5
 8010e72:	d101      	bne.n	8010e78 <__sfputs_r+0x12>
 8010e74:	2000      	movs	r0, #0
 8010e76:	e007      	b.n	8010e88 <__sfputs_r+0x22>
 8010e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e7c:	463a      	mov	r2, r7
 8010e7e:	4630      	mov	r0, r6
 8010e80:	f7ff ffda 	bl	8010e38 <__sfputc_r>
 8010e84:	1c43      	adds	r3, r0, #1
 8010e86:	d1f3      	bne.n	8010e70 <__sfputs_r+0xa>
 8010e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e8c <_vfiprintf_r>:
 8010e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e90:	460d      	mov	r5, r1
 8010e92:	b09d      	sub	sp, #116	; 0x74
 8010e94:	4614      	mov	r4, r2
 8010e96:	4698      	mov	r8, r3
 8010e98:	4606      	mov	r6, r0
 8010e9a:	b118      	cbz	r0, 8010ea4 <_vfiprintf_r+0x18>
 8010e9c:	6983      	ldr	r3, [r0, #24]
 8010e9e:	b90b      	cbnz	r3, 8010ea4 <_vfiprintf_r+0x18>
 8010ea0:	f7fd fb7e 	bl	800e5a0 <__sinit>
 8010ea4:	4b89      	ldr	r3, [pc, #548]	; (80110cc <_vfiprintf_r+0x240>)
 8010ea6:	429d      	cmp	r5, r3
 8010ea8:	d11b      	bne.n	8010ee2 <_vfiprintf_r+0x56>
 8010eaa:	6875      	ldr	r5, [r6, #4]
 8010eac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010eae:	07d9      	lsls	r1, r3, #31
 8010eb0:	d405      	bmi.n	8010ebe <_vfiprintf_r+0x32>
 8010eb2:	89ab      	ldrh	r3, [r5, #12]
 8010eb4:	059a      	lsls	r2, r3, #22
 8010eb6:	d402      	bmi.n	8010ebe <_vfiprintf_r+0x32>
 8010eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010eba:	f7fd fc4e 	bl	800e75a <__retarget_lock_acquire_recursive>
 8010ebe:	89ab      	ldrh	r3, [r5, #12]
 8010ec0:	071b      	lsls	r3, r3, #28
 8010ec2:	d501      	bpl.n	8010ec8 <_vfiprintf_r+0x3c>
 8010ec4:	692b      	ldr	r3, [r5, #16]
 8010ec6:	b9eb      	cbnz	r3, 8010f04 <_vfiprintf_r+0x78>
 8010ec8:	4629      	mov	r1, r5
 8010eca:	4630      	mov	r0, r6
 8010ecc:	f000 f96e 	bl	80111ac <__swsetup_r>
 8010ed0:	b1c0      	cbz	r0, 8010f04 <_vfiprintf_r+0x78>
 8010ed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ed4:	07dc      	lsls	r4, r3, #31
 8010ed6:	d50e      	bpl.n	8010ef6 <_vfiprintf_r+0x6a>
 8010ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010edc:	b01d      	add	sp, #116	; 0x74
 8010ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ee2:	4b7b      	ldr	r3, [pc, #492]	; (80110d0 <_vfiprintf_r+0x244>)
 8010ee4:	429d      	cmp	r5, r3
 8010ee6:	d101      	bne.n	8010eec <_vfiprintf_r+0x60>
 8010ee8:	68b5      	ldr	r5, [r6, #8]
 8010eea:	e7df      	b.n	8010eac <_vfiprintf_r+0x20>
 8010eec:	4b79      	ldr	r3, [pc, #484]	; (80110d4 <_vfiprintf_r+0x248>)
 8010eee:	429d      	cmp	r5, r3
 8010ef0:	bf08      	it	eq
 8010ef2:	68f5      	ldreq	r5, [r6, #12]
 8010ef4:	e7da      	b.n	8010eac <_vfiprintf_r+0x20>
 8010ef6:	89ab      	ldrh	r3, [r5, #12]
 8010ef8:	0598      	lsls	r0, r3, #22
 8010efa:	d4ed      	bmi.n	8010ed8 <_vfiprintf_r+0x4c>
 8010efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010efe:	f7fd fc2d 	bl	800e75c <__retarget_lock_release_recursive>
 8010f02:	e7e9      	b.n	8010ed8 <_vfiprintf_r+0x4c>
 8010f04:	2300      	movs	r3, #0
 8010f06:	9309      	str	r3, [sp, #36]	; 0x24
 8010f08:	2320      	movs	r3, #32
 8010f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f12:	2330      	movs	r3, #48	; 0x30
 8010f14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80110d8 <_vfiprintf_r+0x24c>
 8010f18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f1c:	f04f 0901 	mov.w	r9, #1
 8010f20:	4623      	mov	r3, r4
 8010f22:	469a      	mov	sl, r3
 8010f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f28:	b10a      	cbz	r2, 8010f2e <_vfiprintf_r+0xa2>
 8010f2a:	2a25      	cmp	r2, #37	; 0x25
 8010f2c:	d1f9      	bne.n	8010f22 <_vfiprintf_r+0x96>
 8010f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8010f32:	d00b      	beq.n	8010f4c <_vfiprintf_r+0xc0>
 8010f34:	465b      	mov	r3, fp
 8010f36:	4622      	mov	r2, r4
 8010f38:	4629      	mov	r1, r5
 8010f3a:	4630      	mov	r0, r6
 8010f3c:	f7ff ff93 	bl	8010e66 <__sfputs_r>
 8010f40:	3001      	adds	r0, #1
 8010f42:	f000 80aa 	beq.w	801109a <_vfiprintf_r+0x20e>
 8010f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f48:	445a      	add	r2, fp
 8010f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8010f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f000 80a2 	beq.w	801109a <_vfiprintf_r+0x20e>
 8010f56:	2300      	movs	r3, #0
 8010f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f60:	f10a 0a01 	add.w	sl, sl, #1
 8010f64:	9304      	str	r3, [sp, #16]
 8010f66:	9307      	str	r3, [sp, #28]
 8010f68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8010f6e:	4654      	mov	r4, sl
 8010f70:	2205      	movs	r2, #5
 8010f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f76:	4858      	ldr	r0, [pc, #352]	; (80110d8 <_vfiprintf_r+0x24c>)
 8010f78:	f7ef f932 	bl	80001e0 <memchr>
 8010f7c:	9a04      	ldr	r2, [sp, #16]
 8010f7e:	b9d8      	cbnz	r0, 8010fb8 <_vfiprintf_r+0x12c>
 8010f80:	06d1      	lsls	r1, r2, #27
 8010f82:	bf44      	itt	mi
 8010f84:	2320      	movmi	r3, #32
 8010f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f8a:	0713      	lsls	r3, r2, #28
 8010f8c:	bf44      	itt	mi
 8010f8e:	232b      	movmi	r3, #43	; 0x2b
 8010f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f94:	f89a 3000 	ldrb.w	r3, [sl]
 8010f98:	2b2a      	cmp	r3, #42	; 0x2a
 8010f9a:	d015      	beq.n	8010fc8 <_vfiprintf_r+0x13c>
 8010f9c:	9a07      	ldr	r2, [sp, #28]
 8010f9e:	4654      	mov	r4, sl
 8010fa0:	2000      	movs	r0, #0
 8010fa2:	f04f 0c0a 	mov.w	ip, #10
 8010fa6:	4621      	mov	r1, r4
 8010fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fac:	3b30      	subs	r3, #48	; 0x30
 8010fae:	2b09      	cmp	r3, #9
 8010fb0:	d94e      	bls.n	8011050 <_vfiprintf_r+0x1c4>
 8010fb2:	b1b0      	cbz	r0, 8010fe2 <_vfiprintf_r+0x156>
 8010fb4:	9207      	str	r2, [sp, #28]
 8010fb6:	e014      	b.n	8010fe2 <_vfiprintf_r+0x156>
 8010fb8:	eba0 0308 	sub.w	r3, r0, r8
 8010fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8010fc0:	4313      	orrs	r3, r2
 8010fc2:	9304      	str	r3, [sp, #16]
 8010fc4:	46a2      	mov	sl, r4
 8010fc6:	e7d2      	b.n	8010f6e <_vfiprintf_r+0xe2>
 8010fc8:	9b03      	ldr	r3, [sp, #12]
 8010fca:	1d19      	adds	r1, r3, #4
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	9103      	str	r1, [sp, #12]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	bfbb      	ittet	lt
 8010fd4:	425b      	neglt	r3, r3
 8010fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8010fda:	9307      	strge	r3, [sp, #28]
 8010fdc:	9307      	strlt	r3, [sp, #28]
 8010fde:	bfb8      	it	lt
 8010fe0:	9204      	strlt	r2, [sp, #16]
 8010fe2:	7823      	ldrb	r3, [r4, #0]
 8010fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8010fe6:	d10c      	bne.n	8011002 <_vfiprintf_r+0x176>
 8010fe8:	7863      	ldrb	r3, [r4, #1]
 8010fea:	2b2a      	cmp	r3, #42	; 0x2a
 8010fec:	d135      	bne.n	801105a <_vfiprintf_r+0x1ce>
 8010fee:	9b03      	ldr	r3, [sp, #12]
 8010ff0:	1d1a      	adds	r2, r3, #4
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	9203      	str	r2, [sp, #12]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	bfb8      	it	lt
 8010ffa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010ffe:	3402      	adds	r4, #2
 8011000:	9305      	str	r3, [sp, #20]
 8011002:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80110e8 <_vfiprintf_r+0x25c>
 8011006:	7821      	ldrb	r1, [r4, #0]
 8011008:	2203      	movs	r2, #3
 801100a:	4650      	mov	r0, sl
 801100c:	f7ef f8e8 	bl	80001e0 <memchr>
 8011010:	b140      	cbz	r0, 8011024 <_vfiprintf_r+0x198>
 8011012:	2340      	movs	r3, #64	; 0x40
 8011014:	eba0 000a 	sub.w	r0, r0, sl
 8011018:	fa03 f000 	lsl.w	r0, r3, r0
 801101c:	9b04      	ldr	r3, [sp, #16]
 801101e:	4303      	orrs	r3, r0
 8011020:	3401      	adds	r4, #1
 8011022:	9304      	str	r3, [sp, #16]
 8011024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011028:	482c      	ldr	r0, [pc, #176]	; (80110dc <_vfiprintf_r+0x250>)
 801102a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801102e:	2206      	movs	r2, #6
 8011030:	f7ef f8d6 	bl	80001e0 <memchr>
 8011034:	2800      	cmp	r0, #0
 8011036:	d03f      	beq.n	80110b8 <_vfiprintf_r+0x22c>
 8011038:	4b29      	ldr	r3, [pc, #164]	; (80110e0 <_vfiprintf_r+0x254>)
 801103a:	bb1b      	cbnz	r3, 8011084 <_vfiprintf_r+0x1f8>
 801103c:	9b03      	ldr	r3, [sp, #12]
 801103e:	3307      	adds	r3, #7
 8011040:	f023 0307 	bic.w	r3, r3, #7
 8011044:	3308      	adds	r3, #8
 8011046:	9303      	str	r3, [sp, #12]
 8011048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801104a:	443b      	add	r3, r7
 801104c:	9309      	str	r3, [sp, #36]	; 0x24
 801104e:	e767      	b.n	8010f20 <_vfiprintf_r+0x94>
 8011050:	fb0c 3202 	mla	r2, ip, r2, r3
 8011054:	460c      	mov	r4, r1
 8011056:	2001      	movs	r0, #1
 8011058:	e7a5      	b.n	8010fa6 <_vfiprintf_r+0x11a>
 801105a:	2300      	movs	r3, #0
 801105c:	3401      	adds	r4, #1
 801105e:	9305      	str	r3, [sp, #20]
 8011060:	4619      	mov	r1, r3
 8011062:	f04f 0c0a 	mov.w	ip, #10
 8011066:	4620      	mov	r0, r4
 8011068:	f810 2b01 	ldrb.w	r2, [r0], #1
 801106c:	3a30      	subs	r2, #48	; 0x30
 801106e:	2a09      	cmp	r2, #9
 8011070:	d903      	bls.n	801107a <_vfiprintf_r+0x1ee>
 8011072:	2b00      	cmp	r3, #0
 8011074:	d0c5      	beq.n	8011002 <_vfiprintf_r+0x176>
 8011076:	9105      	str	r1, [sp, #20]
 8011078:	e7c3      	b.n	8011002 <_vfiprintf_r+0x176>
 801107a:	fb0c 2101 	mla	r1, ip, r1, r2
 801107e:	4604      	mov	r4, r0
 8011080:	2301      	movs	r3, #1
 8011082:	e7f0      	b.n	8011066 <_vfiprintf_r+0x1da>
 8011084:	ab03      	add	r3, sp, #12
 8011086:	9300      	str	r3, [sp, #0]
 8011088:	462a      	mov	r2, r5
 801108a:	4b16      	ldr	r3, [pc, #88]	; (80110e4 <_vfiprintf_r+0x258>)
 801108c:	a904      	add	r1, sp, #16
 801108e:	4630      	mov	r0, r6
 8011090:	f7fd fcd6 	bl	800ea40 <_printf_float>
 8011094:	4607      	mov	r7, r0
 8011096:	1c78      	adds	r0, r7, #1
 8011098:	d1d6      	bne.n	8011048 <_vfiprintf_r+0x1bc>
 801109a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801109c:	07d9      	lsls	r1, r3, #31
 801109e:	d405      	bmi.n	80110ac <_vfiprintf_r+0x220>
 80110a0:	89ab      	ldrh	r3, [r5, #12]
 80110a2:	059a      	lsls	r2, r3, #22
 80110a4:	d402      	bmi.n	80110ac <_vfiprintf_r+0x220>
 80110a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110a8:	f7fd fb58 	bl	800e75c <__retarget_lock_release_recursive>
 80110ac:	89ab      	ldrh	r3, [r5, #12]
 80110ae:	065b      	lsls	r3, r3, #25
 80110b0:	f53f af12 	bmi.w	8010ed8 <_vfiprintf_r+0x4c>
 80110b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110b6:	e711      	b.n	8010edc <_vfiprintf_r+0x50>
 80110b8:	ab03      	add	r3, sp, #12
 80110ba:	9300      	str	r3, [sp, #0]
 80110bc:	462a      	mov	r2, r5
 80110be:	4b09      	ldr	r3, [pc, #36]	; (80110e4 <_vfiprintf_r+0x258>)
 80110c0:	a904      	add	r1, sp, #16
 80110c2:	4630      	mov	r0, r6
 80110c4:	f7fd ff60 	bl	800ef88 <_printf_i>
 80110c8:	e7e4      	b.n	8011094 <_vfiprintf_r+0x208>
 80110ca:	bf00      	nop
 80110cc:	08011738 	.word	0x08011738
 80110d0:	08011758 	.word	0x08011758
 80110d4:	08011718 	.word	0x08011718
 80110d8:	080119cc 	.word	0x080119cc
 80110dc:	080119d6 	.word	0x080119d6
 80110e0:	0800ea41 	.word	0x0800ea41
 80110e4:	08010e67 	.word	0x08010e67
 80110e8:	080119d2 	.word	0x080119d2

080110ec <__swbuf_r>:
 80110ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ee:	460e      	mov	r6, r1
 80110f0:	4614      	mov	r4, r2
 80110f2:	4605      	mov	r5, r0
 80110f4:	b118      	cbz	r0, 80110fe <__swbuf_r+0x12>
 80110f6:	6983      	ldr	r3, [r0, #24]
 80110f8:	b90b      	cbnz	r3, 80110fe <__swbuf_r+0x12>
 80110fa:	f7fd fa51 	bl	800e5a0 <__sinit>
 80110fe:	4b21      	ldr	r3, [pc, #132]	; (8011184 <__swbuf_r+0x98>)
 8011100:	429c      	cmp	r4, r3
 8011102:	d12b      	bne.n	801115c <__swbuf_r+0x70>
 8011104:	686c      	ldr	r4, [r5, #4]
 8011106:	69a3      	ldr	r3, [r4, #24]
 8011108:	60a3      	str	r3, [r4, #8]
 801110a:	89a3      	ldrh	r3, [r4, #12]
 801110c:	071a      	lsls	r2, r3, #28
 801110e:	d52f      	bpl.n	8011170 <__swbuf_r+0x84>
 8011110:	6923      	ldr	r3, [r4, #16]
 8011112:	b36b      	cbz	r3, 8011170 <__swbuf_r+0x84>
 8011114:	6923      	ldr	r3, [r4, #16]
 8011116:	6820      	ldr	r0, [r4, #0]
 8011118:	1ac0      	subs	r0, r0, r3
 801111a:	6963      	ldr	r3, [r4, #20]
 801111c:	b2f6      	uxtb	r6, r6
 801111e:	4283      	cmp	r3, r0
 8011120:	4637      	mov	r7, r6
 8011122:	dc04      	bgt.n	801112e <__swbuf_r+0x42>
 8011124:	4621      	mov	r1, r4
 8011126:	4628      	mov	r0, r5
 8011128:	f7ff f8ac 	bl	8010284 <_fflush_r>
 801112c:	bb30      	cbnz	r0, 801117c <__swbuf_r+0x90>
 801112e:	68a3      	ldr	r3, [r4, #8]
 8011130:	3b01      	subs	r3, #1
 8011132:	60a3      	str	r3, [r4, #8]
 8011134:	6823      	ldr	r3, [r4, #0]
 8011136:	1c5a      	adds	r2, r3, #1
 8011138:	6022      	str	r2, [r4, #0]
 801113a:	701e      	strb	r6, [r3, #0]
 801113c:	6963      	ldr	r3, [r4, #20]
 801113e:	3001      	adds	r0, #1
 8011140:	4283      	cmp	r3, r0
 8011142:	d004      	beq.n	801114e <__swbuf_r+0x62>
 8011144:	89a3      	ldrh	r3, [r4, #12]
 8011146:	07db      	lsls	r3, r3, #31
 8011148:	d506      	bpl.n	8011158 <__swbuf_r+0x6c>
 801114a:	2e0a      	cmp	r6, #10
 801114c:	d104      	bne.n	8011158 <__swbuf_r+0x6c>
 801114e:	4621      	mov	r1, r4
 8011150:	4628      	mov	r0, r5
 8011152:	f7ff f897 	bl	8010284 <_fflush_r>
 8011156:	b988      	cbnz	r0, 801117c <__swbuf_r+0x90>
 8011158:	4638      	mov	r0, r7
 801115a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801115c:	4b0a      	ldr	r3, [pc, #40]	; (8011188 <__swbuf_r+0x9c>)
 801115e:	429c      	cmp	r4, r3
 8011160:	d101      	bne.n	8011166 <__swbuf_r+0x7a>
 8011162:	68ac      	ldr	r4, [r5, #8]
 8011164:	e7cf      	b.n	8011106 <__swbuf_r+0x1a>
 8011166:	4b09      	ldr	r3, [pc, #36]	; (801118c <__swbuf_r+0xa0>)
 8011168:	429c      	cmp	r4, r3
 801116a:	bf08      	it	eq
 801116c:	68ec      	ldreq	r4, [r5, #12]
 801116e:	e7ca      	b.n	8011106 <__swbuf_r+0x1a>
 8011170:	4621      	mov	r1, r4
 8011172:	4628      	mov	r0, r5
 8011174:	f000 f81a 	bl	80111ac <__swsetup_r>
 8011178:	2800      	cmp	r0, #0
 801117a:	d0cb      	beq.n	8011114 <__swbuf_r+0x28>
 801117c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011180:	e7ea      	b.n	8011158 <__swbuf_r+0x6c>
 8011182:	bf00      	nop
 8011184:	08011738 	.word	0x08011738
 8011188:	08011758 	.word	0x08011758
 801118c:	08011718 	.word	0x08011718

08011190 <__ascii_wctomb>:
 8011190:	b149      	cbz	r1, 80111a6 <__ascii_wctomb+0x16>
 8011192:	2aff      	cmp	r2, #255	; 0xff
 8011194:	bf85      	ittet	hi
 8011196:	238a      	movhi	r3, #138	; 0x8a
 8011198:	6003      	strhi	r3, [r0, #0]
 801119a:	700a      	strbls	r2, [r1, #0]
 801119c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80111a0:	bf98      	it	ls
 80111a2:	2001      	movls	r0, #1
 80111a4:	4770      	bx	lr
 80111a6:	4608      	mov	r0, r1
 80111a8:	4770      	bx	lr
	...

080111ac <__swsetup_r>:
 80111ac:	4b32      	ldr	r3, [pc, #200]	; (8011278 <__swsetup_r+0xcc>)
 80111ae:	b570      	push	{r4, r5, r6, lr}
 80111b0:	681d      	ldr	r5, [r3, #0]
 80111b2:	4606      	mov	r6, r0
 80111b4:	460c      	mov	r4, r1
 80111b6:	b125      	cbz	r5, 80111c2 <__swsetup_r+0x16>
 80111b8:	69ab      	ldr	r3, [r5, #24]
 80111ba:	b913      	cbnz	r3, 80111c2 <__swsetup_r+0x16>
 80111bc:	4628      	mov	r0, r5
 80111be:	f7fd f9ef 	bl	800e5a0 <__sinit>
 80111c2:	4b2e      	ldr	r3, [pc, #184]	; (801127c <__swsetup_r+0xd0>)
 80111c4:	429c      	cmp	r4, r3
 80111c6:	d10f      	bne.n	80111e8 <__swsetup_r+0x3c>
 80111c8:	686c      	ldr	r4, [r5, #4]
 80111ca:	89a3      	ldrh	r3, [r4, #12]
 80111cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80111d0:	0719      	lsls	r1, r3, #28
 80111d2:	d42c      	bmi.n	801122e <__swsetup_r+0x82>
 80111d4:	06dd      	lsls	r5, r3, #27
 80111d6:	d411      	bmi.n	80111fc <__swsetup_r+0x50>
 80111d8:	2309      	movs	r3, #9
 80111da:	6033      	str	r3, [r6, #0]
 80111dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80111e0:	81a3      	strh	r3, [r4, #12]
 80111e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111e6:	e03e      	b.n	8011266 <__swsetup_r+0xba>
 80111e8:	4b25      	ldr	r3, [pc, #148]	; (8011280 <__swsetup_r+0xd4>)
 80111ea:	429c      	cmp	r4, r3
 80111ec:	d101      	bne.n	80111f2 <__swsetup_r+0x46>
 80111ee:	68ac      	ldr	r4, [r5, #8]
 80111f0:	e7eb      	b.n	80111ca <__swsetup_r+0x1e>
 80111f2:	4b24      	ldr	r3, [pc, #144]	; (8011284 <__swsetup_r+0xd8>)
 80111f4:	429c      	cmp	r4, r3
 80111f6:	bf08      	it	eq
 80111f8:	68ec      	ldreq	r4, [r5, #12]
 80111fa:	e7e6      	b.n	80111ca <__swsetup_r+0x1e>
 80111fc:	0758      	lsls	r0, r3, #29
 80111fe:	d512      	bpl.n	8011226 <__swsetup_r+0x7a>
 8011200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011202:	b141      	cbz	r1, 8011216 <__swsetup_r+0x6a>
 8011204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011208:	4299      	cmp	r1, r3
 801120a:	d002      	beq.n	8011212 <__swsetup_r+0x66>
 801120c:	4630      	mov	r0, r6
 801120e:	f7fd facd 	bl	800e7ac <_free_r>
 8011212:	2300      	movs	r3, #0
 8011214:	6363      	str	r3, [r4, #52]	; 0x34
 8011216:	89a3      	ldrh	r3, [r4, #12]
 8011218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801121c:	81a3      	strh	r3, [r4, #12]
 801121e:	2300      	movs	r3, #0
 8011220:	6063      	str	r3, [r4, #4]
 8011222:	6923      	ldr	r3, [r4, #16]
 8011224:	6023      	str	r3, [r4, #0]
 8011226:	89a3      	ldrh	r3, [r4, #12]
 8011228:	f043 0308 	orr.w	r3, r3, #8
 801122c:	81a3      	strh	r3, [r4, #12]
 801122e:	6923      	ldr	r3, [r4, #16]
 8011230:	b94b      	cbnz	r3, 8011246 <__swsetup_r+0x9a>
 8011232:	89a3      	ldrh	r3, [r4, #12]
 8011234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801123c:	d003      	beq.n	8011246 <__swsetup_r+0x9a>
 801123e:	4621      	mov	r1, r4
 8011240:	4630      	mov	r0, r6
 8011242:	f000 f84d 	bl	80112e0 <__smakebuf_r>
 8011246:	89a0      	ldrh	r0, [r4, #12]
 8011248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801124c:	f010 0301 	ands.w	r3, r0, #1
 8011250:	d00a      	beq.n	8011268 <__swsetup_r+0xbc>
 8011252:	2300      	movs	r3, #0
 8011254:	60a3      	str	r3, [r4, #8]
 8011256:	6963      	ldr	r3, [r4, #20]
 8011258:	425b      	negs	r3, r3
 801125a:	61a3      	str	r3, [r4, #24]
 801125c:	6923      	ldr	r3, [r4, #16]
 801125e:	b943      	cbnz	r3, 8011272 <__swsetup_r+0xc6>
 8011260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011264:	d1ba      	bne.n	80111dc <__swsetup_r+0x30>
 8011266:	bd70      	pop	{r4, r5, r6, pc}
 8011268:	0781      	lsls	r1, r0, #30
 801126a:	bf58      	it	pl
 801126c:	6963      	ldrpl	r3, [r4, #20]
 801126e:	60a3      	str	r3, [r4, #8]
 8011270:	e7f4      	b.n	801125c <__swsetup_r+0xb0>
 8011272:	2000      	movs	r0, #0
 8011274:	e7f7      	b.n	8011266 <__swsetup_r+0xba>
 8011276:	bf00      	nop
 8011278:	20000184 	.word	0x20000184
 801127c:	08011738 	.word	0x08011738
 8011280:	08011758 	.word	0x08011758
 8011284:	08011718 	.word	0x08011718

08011288 <abort>:
 8011288:	b508      	push	{r3, lr}
 801128a:	2006      	movs	r0, #6
 801128c:	f000 f898 	bl	80113c0 <raise>
 8011290:	2001      	movs	r0, #1
 8011292:	f7f1 ffdb 	bl	800324c <_exit>

08011296 <__swhatbuf_r>:
 8011296:	b570      	push	{r4, r5, r6, lr}
 8011298:	460e      	mov	r6, r1
 801129a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801129e:	2900      	cmp	r1, #0
 80112a0:	b096      	sub	sp, #88	; 0x58
 80112a2:	4614      	mov	r4, r2
 80112a4:	461d      	mov	r5, r3
 80112a6:	da07      	bge.n	80112b8 <__swhatbuf_r+0x22>
 80112a8:	2300      	movs	r3, #0
 80112aa:	602b      	str	r3, [r5, #0]
 80112ac:	89b3      	ldrh	r3, [r6, #12]
 80112ae:	061a      	lsls	r2, r3, #24
 80112b0:	d410      	bmi.n	80112d4 <__swhatbuf_r+0x3e>
 80112b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112b6:	e00e      	b.n	80112d6 <__swhatbuf_r+0x40>
 80112b8:	466a      	mov	r2, sp
 80112ba:	f000 f89d 	bl	80113f8 <_fstat_r>
 80112be:	2800      	cmp	r0, #0
 80112c0:	dbf2      	blt.n	80112a8 <__swhatbuf_r+0x12>
 80112c2:	9a01      	ldr	r2, [sp, #4]
 80112c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80112c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80112cc:	425a      	negs	r2, r3
 80112ce:	415a      	adcs	r2, r3
 80112d0:	602a      	str	r2, [r5, #0]
 80112d2:	e7ee      	b.n	80112b2 <__swhatbuf_r+0x1c>
 80112d4:	2340      	movs	r3, #64	; 0x40
 80112d6:	2000      	movs	r0, #0
 80112d8:	6023      	str	r3, [r4, #0]
 80112da:	b016      	add	sp, #88	; 0x58
 80112dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080112e0 <__smakebuf_r>:
 80112e0:	898b      	ldrh	r3, [r1, #12]
 80112e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80112e4:	079d      	lsls	r5, r3, #30
 80112e6:	4606      	mov	r6, r0
 80112e8:	460c      	mov	r4, r1
 80112ea:	d507      	bpl.n	80112fc <__smakebuf_r+0x1c>
 80112ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80112f0:	6023      	str	r3, [r4, #0]
 80112f2:	6123      	str	r3, [r4, #16]
 80112f4:	2301      	movs	r3, #1
 80112f6:	6163      	str	r3, [r4, #20]
 80112f8:	b002      	add	sp, #8
 80112fa:	bd70      	pop	{r4, r5, r6, pc}
 80112fc:	ab01      	add	r3, sp, #4
 80112fe:	466a      	mov	r2, sp
 8011300:	f7ff ffc9 	bl	8011296 <__swhatbuf_r>
 8011304:	9900      	ldr	r1, [sp, #0]
 8011306:	4605      	mov	r5, r0
 8011308:	4630      	mov	r0, r6
 801130a:	f7fd fa9f 	bl	800e84c <_malloc_r>
 801130e:	b948      	cbnz	r0, 8011324 <__smakebuf_r+0x44>
 8011310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011314:	059a      	lsls	r2, r3, #22
 8011316:	d4ef      	bmi.n	80112f8 <__smakebuf_r+0x18>
 8011318:	f023 0303 	bic.w	r3, r3, #3
 801131c:	f043 0302 	orr.w	r3, r3, #2
 8011320:	81a3      	strh	r3, [r4, #12]
 8011322:	e7e3      	b.n	80112ec <__smakebuf_r+0xc>
 8011324:	4b0d      	ldr	r3, [pc, #52]	; (801135c <__smakebuf_r+0x7c>)
 8011326:	62b3      	str	r3, [r6, #40]	; 0x28
 8011328:	89a3      	ldrh	r3, [r4, #12]
 801132a:	6020      	str	r0, [r4, #0]
 801132c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011330:	81a3      	strh	r3, [r4, #12]
 8011332:	9b00      	ldr	r3, [sp, #0]
 8011334:	6163      	str	r3, [r4, #20]
 8011336:	9b01      	ldr	r3, [sp, #4]
 8011338:	6120      	str	r0, [r4, #16]
 801133a:	b15b      	cbz	r3, 8011354 <__smakebuf_r+0x74>
 801133c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011340:	4630      	mov	r0, r6
 8011342:	f000 f86b 	bl	801141c <_isatty_r>
 8011346:	b128      	cbz	r0, 8011354 <__smakebuf_r+0x74>
 8011348:	89a3      	ldrh	r3, [r4, #12]
 801134a:	f023 0303 	bic.w	r3, r3, #3
 801134e:	f043 0301 	orr.w	r3, r3, #1
 8011352:	81a3      	strh	r3, [r4, #12]
 8011354:	89a0      	ldrh	r0, [r4, #12]
 8011356:	4305      	orrs	r5, r0
 8011358:	81a5      	strh	r5, [r4, #12]
 801135a:	e7cd      	b.n	80112f8 <__smakebuf_r+0x18>
 801135c:	0800e539 	.word	0x0800e539

08011360 <_malloc_usable_size_r>:
 8011360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011364:	1f18      	subs	r0, r3, #4
 8011366:	2b00      	cmp	r3, #0
 8011368:	bfbc      	itt	lt
 801136a:	580b      	ldrlt	r3, [r1, r0]
 801136c:	18c0      	addlt	r0, r0, r3
 801136e:	4770      	bx	lr

08011370 <_raise_r>:
 8011370:	291f      	cmp	r1, #31
 8011372:	b538      	push	{r3, r4, r5, lr}
 8011374:	4604      	mov	r4, r0
 8011376:	460d      	mov	r5, r1
 8011378:	d904      	bls.n	8011384 <_raise_r+0x14>
 801137a:	2316      	movs	r3, #22
 801137c:	6003      	str	r3, [r0, #0]
 801137e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011382:	bd38      	pop	{r3, r4, r5, pc}
 8011384:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011386:	b112      	cbz	r2, 801138e <_raise_r+0x1e>
 8011388:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801138c:	b94b      	cbnz	r3, 80113a2 <_raise_r+0x32>
 801138e:	4620      	mov	r0, r4
 8011390:	f000 f830 	bl	80113f4 <_getpid_r>
 8011394:	462a      	mov	r2, r5
 8011396:	4601      	mov	r1, r0
 8011398:	4620      	mov	r0, r4
 801139a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801139e:	f000 b817 	b.w	80113d0 <_kill_r>
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	d00a      	beq.n	80113bc <_raise_r+0x4c>
 80113a6:	1c59      	adds	r1, r3, #1
 80113a8:	d103      	bne.n	80113b2 <_raise_r+0x42>
 80113aa:	2316      	movs	r3, #22
 80113ac:	6003      	str	r3, [r0, #0]
 80113ae:	2001      	movs	r0, #1
 80113b0:	e7e7      	b.n	8011382 <_raise_r+0x12>
 80113b2:	2400      	movs	r4, #0
 80113b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80113b8:	4628      	mov	r0, r5
 80113ba:	4798      	blx	r3
 80113bc:	2000      	movs	r0, #0
 80113be:	e7e0      	b.n	8011382 <_raise_r+0x12>

080113c0 <raise>:
 80113c0:	4b02      	ldr	r3, [pc, #8]	; (80113cc <raise+0xc>)
 80113c2:	4601      	mov	r1, r0
 80113c4:	6818      	ldr	r0, [r3, #0]
 80113c6:	f7ff bfd3 	b.w	8011370 <_raise_r>
 80113ca:	bf00      	nop
 80113cc:	20000184 	.word	0x20000184

080113d0 <_kill_r>:
 80113d0:	b538      	push	{r3, r4, r5, lr}
 80113d2:	4d07      	ldr	r5, [pc, #28]	; (80113f0 <_kill_r+0x20>)
 80113d4:	2300      	movs	r3, #0
 80113d6:	4604      	mov	r4, r0
 80113d8:	4608      	mov	r0, r1
 80113da:	4611      	mov	r1, r2
 80113dc:	602b      	str	r3, [r5, #0]
 80113de:	f7f1 ff25 	bl	800322c <_kill>
 80113e2:	1c43      	adds	r3, r0, #1
 80113e4:	d102      	bne.n	80113ec <_kill_r+0x1c>
 80113e6:	682b      	ldr	r3, [r5, #0]
 80113e8:	b103      	cbz	r3, 80113ec <_kill_r+0x1c>
 80113ea:	6023      	str	r3, [r4, #0]
 80113ec:	bd38      	pop	{r3, r4, r5, pc}
 80113ee:	bf00      	nop
 80113f0:	2000de04 	.word	0x2000de04

080113f4 <_getpid_r>:
 80113f4:	f7f1 bf12 	b.w	800321c <_getpid>

080113f8 <_fstat_r>:
 80113f8:	b538      	push	{r3, r4, r5, lr}
 80113fa:	4d07      	ldr	r5, [pc, #28]	; (8011418 <_fstat_r+0x20>)
 80113fc:	2300      	movs	r3, #0
 80113fe:	4604      	mov	r4, r0
 8011400:	4608      	mov	r0, r1
 8011402:	4611      	mov	r1, r2
 8011404:	602b      	str	r3, [r5, #0]
 8011406:	f7f1 ff70 	bl	80032ea <_fstat>
 801140a:	1c43      	adds	r3, r0, #1
 801140c:	d102      	bne.n	8011414 <_fstat_r+0x1c>
 801140e:	682b      	ldr	r3, [r5, #0]
 8011410:	b103      	cbz	r3, 8011414 <_fstat_r+0x1c>
 8011412:	6023      	str	r3, [r4, #0]
 8011414:	bd38      	pop	{r3, r4, r5, pc}
 8011416:	bf00      	nop
 8011418:	2000de04 	.word	0x2000de04

0801141c <_isatty_r>:
 801141c:	b538      	push	{r3, r4, r5, lr}
 801141e:	4d06      	ldr	r5, [pc, #24]	; (8011438 <_isatty_r+0x1c>)
 8011420:	2300      	movs	r3, #0
 8011422:	4604      	mov	r4, r0
 8011424:	4608      	mov	r0, r1
 8011426:	602b      	str	r3, [r5, #0]
 8011428:	f7f1 ff6f 	bl	800330a <_isatty>
 801142c:	1c43      	adds	r3, r0, #1
 801142e:	d102      	bne.n	8011436 <_isatty_r+0x1a>
 8011430:	682b      	ldr	r3, [r5, #0]
 8011432:	b103      	cbz	r3, 8011436 <_isatty_r+0x1a>
 8011434:	6023      	str	r3, [r4, #0]
 8011436:	bd38      	pop	{r3, r4, r5, pc}
 8011438:	2000de04 	.word	0x2000de04

0801143c <_init>:
 801143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801143e:	bf00      	nop
 8011440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011442:	bc08      	pop	{r3}
 8011444:	469e      	mov	lr, r3
 8011446:	4770      	bx	lr

08011448 <_fini>:
 8011448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801144a:	bf00      	nop
 801144c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801144e:	bc08      	pop	{r3}
 8011450:	469e      	mov	lr, r3
 8011452:	4770      	bx	lr
