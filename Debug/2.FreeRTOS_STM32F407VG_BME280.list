
2.FreeRTOS_STM32F407VG_BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  0800ed08  0800ed08  0001ed08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f064  0800f064  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f064  0800f064  0001f064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f06c  0800f06c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f06c  0800f06c  0001f06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f070  0800f070  0001f070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          0000beb0  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000c098  2000c098  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b3ef  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052cd  00000000  00000000  0004b607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce0  00000000  00000000  000508d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b00  00000000  00000000  000525b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000830f  00000000  00000000  000540b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024a10  00000000  00000000  0005c3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db1ac  00000000  00000000  00080dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015bf83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008234  00000000  00000000  0015bfd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ecf0 	.word	0x0800ecf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800ecf0 	.word	0x0800ecf0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c30:	f000 b96e 	b.w	8000f10 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468c      	mov	ip, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8083 	bne.w	8000d62 <__udivmoddi4+0x116>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d947      	bls.n	8000cf2 <__udivmoddi4+0xa6>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b142      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	f1c2 0020 	rsb	r0, r2, #32
 8000c6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4097      	lsls	r7, r2
 8000c74:	ea40 0c01 	orr.w	ip, r0, r1
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbbc f6f8 	udiv	r6, ip, r8
 8000c84:	fa1f fe87 	uxth.w	lr, r7
 8000c88:	fb08 c116 	mls	r1, r8, r6, ip
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f10e 	mul.w	r1, r6, lr
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c9e:	f080 8119 	bcs.w	8000ed4 <__udivmoddi4+0x288>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8116 	bls.w	8000ed4 <__udivmoddi4+0x288>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cca:	f080 8105 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f240 8102 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	443c      	add	r4, r7
 8000cd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xaa>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d150      	bne.n	8000da0 <__udivmoddi4+0x154>
 8000cfe:	1bcb      	subs	r3, r1, r7
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	2601      	movs	r6, #1
 8000d0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb08 f30c 	mul.w	r3, r8, ip
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0xe2>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f200 80e9 	bhi.w	8000f00 <__udivmoddi4+0x2b4>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x10c>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x10a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80d9 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e7bf      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x12e>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80b1 	beq.w	8000ece <__udivmoddi4+0x282>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x1cc>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0x140>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80b8 	bhi.w	8000efc <__udivmoddi4+0x2b0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	468c      	mov	ip, r1
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0a8      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0xa0>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f603 	lsr.w	r6, r0, r3
 8000da8:	4097      	lsls	r7, r2
 8000daa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db2:	40d9      	lsrs	r1, r3
 8000db4:	4330      	orrs	r0, r6
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f108 	mul.w	r1, r6, r8
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x19c>
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000dda:	f080 808d 	bcs.w	8000ef8 <__udivmoddi4+0x2ac>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 808a 	bls.w	8000ef8 <__udivmoddi4+0x2ac>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	443b      	add	r3, r7
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b281      	uxth	r1, r0
 8000dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb00 f308 	mul.w	r3, r0, r8
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x1c4>
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e06:	d273      	bcs.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d971      	bls.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4439      	add	r1, r7
 8000e10:	1acb      	subs	r3, r1, r3
 8000e12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e16:	e778      	b.n	8000d0a <__udivmoddi4+0xbe>
 8000e18:	f1c6 0c20 	rsb	ip, r6, #32
 8000e1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e24:	431c      	orrs	r4, r3
 8000e26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e36:	431f      	orrs	r7, r3
 8000e38:	0c3b      	lsrs	r3, r7, #16
 8000e3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3e:	fa1f f884 	uxth.w	r8, r4
 8000e42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	fa02 f206 	lsl.w	r2, r2, r6
 8000e54:	fa00 f306 	lsl.w	r3, r0, r6
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x220>
 8000e5a:	1861      	adds	r1, r4, r1
 8000e5c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e60:	d248      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e62:	458a      	cmp	sl, r1
 8000e64:	d946      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	4421      	add	r1, r4
 8000e6c:	eba1 010a 	sub.w	r1, r1, sl
 8000e70:	b2bf      	uxth	r7, r7
 8000e72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7e:	fb00 f808 	mul.w	r8, r0, r8
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x24a>
 8000e86:	19e7      	adds	r7, r4, r7
 8000e88:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e8c:	d22e      	bcs.n	8000eec <__udivmoddi4+0x2a0>
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d92c      	bls.n	8000eec <__udivmoddi4+0x2a0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4427      	add	r7, r4
 8000e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9a:	eba7 0708 	sub.w	r7, r7, r8
 8000e9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea2:	454f      	cmp	r7, r9
 8000ea4:	46c6      	mov	lr, r8
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	d31a      	bcc.n	8000ee0 <__udivmoddi4+0x294>
 8000eaa:	d017      	beq.n	8000edc <__udivmoddi4+0x290>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x27a>
 8000eae:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb2:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec0:	40f7      	lsrs	r7, r6
 8000ec2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e70b      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fd      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000edc:	4543      	cmp	r3, r8
 8000ede:	d2e5      	bcs.n	8000eac <__udivmoddi4+0x260>
 8000ee0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7df      	b.n	8000eac <__udivmoddi4+0x260>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e7d2      	b.n	8000e96 <__udivmoddi4+0x24a>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	e78d      	b.n	8000e10 <__udivmoddi4+0x1c4>
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	e7b9      	b.n	8000e6c <__udivmoddi4+0x220>
 8000ef8:	4666      	mov	r6, ip
 8000efa:	e775      	b.n	8000de8 <__udivmoddi4+0x19c>
 8000efc:	4630      	mov	r0, r6
 8000efe:	e74a      	b.n	8000d96 <__udivmoddi4+0x14a>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	4439      	add	r1, r7
 8000f06:	e713      	b.n	8000d30 <__udivmoddi4+0xe4>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	e724      	b.n	8000d58 <__udivmoddi4+0x10c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f1c:	2305      	movs	r3, #5
 8000f1e:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f001 f9f1 	bl	800230c <null_ptr_check>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d133      	bne.n	8000f9e <bme280_init+0x8a>
		while (try_count) {
 8000f36:	e028      	b.n	8000f8a <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f38:	f107 010d 	add.w	r1, r7, #13
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	20d0      	movs	r0, #208	; 0xd0
 8000f42:	f000 f832 	bl	8000faa <bme280_get_regs>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d114      	bne.n	8000f7c <bme280_init+0x68>
 8000f52:	7b7b      	ldrb	r3, [r7, #13]
 8000f54:	2b60      	cmp	r3, #96	; 0x60
 8000f56:	d111      	bne.n	8000f7c <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000f58:	7b7a      	ldrb	r2, [r7, #13]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f976 	bl	8001250 <bme280_soft_reset>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d110      	bne.n	8000f92 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f001 f841 	bl	8001ff8 <get_calib_data>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000f7a:	e00a      	b.n	8000f92 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2001      	movs	r0, #1
 8000f82:	4798      	blx	r3
			--try_count;
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1d3      	bne.n	8000f38 <bme280_init+0x24>
 8000f90:	e000      	b.n	8000f94 <bme280_init+0x80>
				break;
 8000f92:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000f9a:	23fe      	movs	r3, #254	; 0xfe
 8000f9c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000faa:	b590      	push	{r4, r7, lr}
 8000fac:	b087      	sub	sp, #28
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f001 f9a5 	bl	800230c <null_ptr_check>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d117      	bne.n	8000ffe <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	789b      	ldrb	r3, [r3, #2]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d003      	beq.n	8000fde <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fdc:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685c      	ldr	r4, [r3, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7858      	ldrb	r0, [r3, #1]
 8000fe6:	89bb      	ldrh	r3, [r7, #12]
 8000fe8:	7bf9      	ldrb	r1, [r7, #15]
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	47a0      	blx	r4
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8000ffa:	23fc      	movs	r3, #252	; 0xfc
 8000ffc:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000ffe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001002:	4618      	mov	r0, r3
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd90      	pop	{r4, r7, pc}

0800100a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800100a:	b590      	push	{r4, r7, lr}
 800100c:	b08d      	sub	sp, #52	; 0x34
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4613      	mov	r3, r2
 8001018:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b0a      	cmp	r3, #10
 800101e:	d901      	bls.n	8001024 <bme280_set_regs+0x1a>
		len = 10;
 8001020:	230a      	movs	r3, #10
 8001022:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001024:	6838      	ldr	r0, [r7, #0]
 8001026:	f001 f971 	bl	800230c <null_ptr_check>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8001030:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001034:	2b00      	cmp	r3, #0
 8001036:	d154      	bne.n	80010e2 <bme280_set_regs+0xd8>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d051      	beq.n	80010e2 <bme280_set_regs+0xd8>
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d04e      	beq.n	80010e2 <bme280_set_regs+0xd8>
		if (len != 0) {
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d047      	beq.n	80010da <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	789b      	ldrb	r3, [r3, #2]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d01a      	beq.n	800108e <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001058:	2300      	movs	r3, #0
 800105a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800105e:	e011      	b.n	8001084 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001060:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800106e:	68f9      	ldr	r1, [r7, #12]
 8001070:	440b      	add	r3, r1
 8001072:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800107a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800107e:	3301      	adds	r3, #1
 8001080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001084:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	429a      	cmp	r2, r3
 800108c:	d3e8      	bcc.n	8001060 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d90b      	bls.n	80010ac <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f107 0114 	add.w	r1, r7, #20
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 fff0 	bl	8002082 <interleave_reg_addr>
				temp_len = len * 2;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010aa:	e001      	b.n	80010b0 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689c      	ldr	r4, [r3, #8]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	7858      	ldrb	r0, [r3, #1]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	7819      	ldrb	r1, [r3, #0]
 80010bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010be:	f107 0214 	add.w	r2, r7, #20
 80010c2:	47a0      	blx	r4
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80010ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 80010d2:	23fc      	movs	r3, #252	; 0xfc
 80010d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 80010d8:	e007      	b.n	80010ea <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 80010da:	23fd      	movs	r3, #253	; 0xfd
 80010dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 80010e0:	e003      	b.n	80010ea <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80010e2:	23ff      	movs	r3, #255	; 0xff
 80010e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010e8:	e000      	b.n	80010ec <bme280_set_regs+0xe2>
		if (len != 0) {
 80010ea:	bf00      	nop
	}


	return rslt;
 80010ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3734      	adds	r7, #52	; 0x34
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}

080010f8 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001104:	6838      	ldr	r0, [r7, #0]
 8001106:	f001 f901 	bl	800230c <null_ptr_check>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d13f      	bne.n	8001196 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001116:	f107 030e 	add.w	r3, r7, #14
 800111a:	6839      	ldr	r1, [r7, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f874 	bl	800120a <bme280_get_sensor_mode>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d107      	bne.n	800113e <bme280_set_sensor_settings+0x46>
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001134:	6838      	ldr	r0, [r7, #0]
 8001136:	f000 fb4e 	bl	80017d6 <put_device_to_sleep>
 800113a:	4603      	mov	r3, r0
 800113c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d127      	bne.n	8001196 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4619      	mov	r1, r3
 800114a:	2007      	movs	r0, #7
 800114c:	f001 f8c2 	bl	80022d4 <are_settings_changed>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d009      	beq.n	800116a <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f98a 	bl	800147a <set_osr_settings>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d111      	bne.n	8001196 <bme280_set_sensor_settings+0x9e>
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	2018      	movs	r0, #24
 8001178:	f001 f8ac 	bl	80022d4 <are_settings_changed>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fa11 	bl	80015b4 <set_filter_standby_settings>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	6039      	str	r1, [r7, #0]
 80011ac:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f001 f8ac 	bl	800230c <null_ptr_check>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80011b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d11e      	bne.n	80011fe <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80011c0:	f107 030e 	add.w	r3, r7, #14
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f81f 	bl	800120a <bme280_get_sensor_mode>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80011d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d107      	bne.n	80011e8 <bme280_set_sensor_mode+0x46>
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d004      	beq.n	80011e8 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 80011de:	6838      	ldr	r0, [r7, #0]
 80011e0:	f000 faf9 	bl	80017d6 <put_device_to_sleep>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d106      	bne.n	80011fe <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fabb 	bl	8001770 <write_power_mode>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b084      	sub	sp, #16
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001214:	6838      	ldr	r0, [r7, #0]
 8001216:	f001 f879 	bl	800230c <null_ptr_check>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10e      	bne.n	8001244 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2201      	movs	r2, #1
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	20f4      	movs	r0, #244	; 0xf4
 800122e:	f7ff febc 	bl	8000faa <bme280_get_regs>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	b2da      	uxtb	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001258:	23e0      	movs	r3, #224	; 0xe0
 800125a:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 800125c:	23b6      	movs	r3, #182	; 0xb6
 800125e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f001 f853 	bl	800230c <null_ptr_check>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10d      	bne.n	800128e <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001272:	f107 010d 	add.w	r1, r7, #13
 8001276:	f107 000e 	add.w	r0, r7, #14
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f7ff fec4 	bl	800100a <bme280_set_regs>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2002      	movs	r0, #2
 800128c:	4798      	blx	r3
	}

	return rslt;
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b08a      	sub	sp, #40	; 0x28
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f001 f825 	bl	800230c <null_ptr_check>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80012c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d124      	bne.n	800131a <bme280_get_sensor_data+0x80>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d021      	beq.n	800131a <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80012d6:	f107 011c 	add.w	r1, r7, #28
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2208      	movs	r2, #8
 80012de:	20f7      	movs	r0, #247	; 0xf7
 80012e0:	f7ff fe63 	bl	8000faa <bme280_get_regs>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 80012ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d116      	bne.n	8001320 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80012f2:	f107 0210 	add.w	r2, r7, #16
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f815 	bl	800132c <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3310      	adds	r3, #16
 8001306:	f107 0110 	add.w	r1, r7, #16
 800130a:	7bf8      	ldrb	r0, [r7, #15]
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	f000 f853 	bl	80013b8 <bme280_compensate_data>
 8001312:	4603      	mov	r3, r0
 8001314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001318:	e002      	b.n	8001320 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800131a:	23ff      	movs	r3, #255	; 0xff
 800131c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8001320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001324:	4618      	mov	r0, r3
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	031b      	lsls	r3, r3, #12
 800133c:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3302      	adds	r3, #2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	b2db      	uxtb	r3, r3
 8001352:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	431a      	orrs	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	431a      	orrs	r2, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3303      	adds	r3, #3
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	031b      	lsls	r3, r3, #12
 800136a:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3304      	adds	r3, #4
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3305      	adds	r3, #5
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	b2db      	uxtb	r3, r3
 8001380:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	431a      	orrs	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	431a      	orrs	r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3306      	adds	r3, #6
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3307      	adds	r3, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	609a      	str	r2, [r3, #8]
}
 80013ac:	bf00      	nop
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d04b      	beq.n	800146a <bme280_compensate_data+0xb2>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d048      	beq.n	800146a <bme280_compensate_data+0xb2>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d045      	beq.n	800146a <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00a      	beq.n	8001428 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001412:	6839      	ldr	r1, [r7, #0]
 8001414:	68b8      	ldr	r0, [r7, #8]
 8001416:	f000 fa2b 	bl	8001870 <compensate_temperature>
 800141a:	eeb0 7a40 	vmov.f32	s14, s0
 800141e:	eef0 7a60 	vmov.f32	s15, s1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00a      	beq.n	8001448 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001432:	6839      	ldr	r1, [r7, #0]
 8001434:	68b8      	ldr	r0, [r7, #8]
 8001436:	f000 faef 	bl	8001a18 <compensate_pressure>
 800143a:	eeb0 7a40 	vmov.f32	s14, s0
 800143e:	eef0 7a60 	vmov.f32	s15, s1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00d      	beq.n	800146e <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001452:	6839      	ldr	r1, [r7, #0]
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f000 fcaf 	bl	8001db8 <compensate_humidity>
 800145a:	eeb0 7a40 	vmov.f32	s14, s0
 800145e:	eef0 7a60 	vmov.f32	s15, s1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8001468:	e001      	b.n	800146e <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800146a:	23ff      	movs	r3, #255	; 0xff
 800146c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800146e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001488:	2301      	movs	r3, #1
 800148a:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	68b8      	ldr	r0, [r7, #8]
 800149a:	f000 f815 	bl	80014c8 <set_osr_humidity_settings>
 800149e:	4603      	mov	r3, r0
 80014a0:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f842 	bl	800153c <set_osr_press_temp_settings>
 80014b8:	4603      	mov	r3, r0
 80014ba:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80014bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80014d2:	23f2      	movs	r3, #242	; 0xf2
 80014d4:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	789b      	ldrb	r3, [r3, #2]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80014e2:	f107 010e 	add.w	r1, r7, #14
 80014e6:	f107 000c 	add.w	r0, r7, #12
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f7ff fd8c 	bl	800100a <bme280_set_regs>
 80014f2:	4603      	mov	r3, r0
 80014f4:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80014fe:	23f4      	movs	r3, #244	; 0xf4
 8001500:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001502:	7b38      	ldrb	r0, [r7, #12]
 8001504:	f107 010d 	add.w	r1, r7, #13
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	2201      	movs	r2, #1
 800150c:	f7ff fd4d 	bl	8000faa <bme280_get_regs>
 8001510:	4603      	mov	r3, r0
 8001512:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d109      	bne.n	8001530 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800151c:	f107 010d 	add.w	r1, r7, #13
 8001520:	f107 000c 	add.w	r0, r7, #12
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2201      	movs	r2, #1
 8001528:	f7ff fd6f 	bl	800100a <bme280_set_regs>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800154a:	23f4      	movs	r3, #244	; 0xf4
 800154c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800154e:	7db8      	ldrb	r0, [r7, #22]
 8001550:	f107 0115 	add.w	r1, r7, #21
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f7ff fd27 	bl	8000faa <bme280_get_regs>
 800155c:	4603      	mov	r3, r0
 800155e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11f      	bne.n	80015a8 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8001572:	f107 0315 	add.w	r3, r7, #21
 8001576:	68b9      	ldr	r1, [r7, #8]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f88e 	bl	800169a <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8001588:	f107 0315 	add.w	r3, r7, #21
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f8a0 	bl	80016d4 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001594:	f107 0115 	add.w	r1, r7, #21
 8001598:	f107 0016 	add.w	r0, r7, #22
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f7ff fd33 	bl	800100a <bme280_set_regs>
 80015a4:	4603      	mov	r3, r0
 80015a6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80015c2:	23f5      	movs	r3, #245	; 0xf5
 80015c4:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015c6:	7db8      	ldrb	r0, [r7, #22]
 80015c8:	f107 0115 	add.w	r1, r7, #21
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f7ff fceb 	bl	8000faa <bme280_get_regs>
 80015d4:	4603      	mov	r3, r0
 80015d6:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80015d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d11f      	bne.n	8001620 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 80015ea:	f107 0315 	add.w	r3, r7, #21
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 f81b 	bl	800162c <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001600:	f107 0315 	add.w	r3, r7, #21
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f82d 	bl	8001666 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800160c:	f107 0115 	add.w	r1, r7, #21
 8001610:	f107 0016 	add.w	r0, r7, #22
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f7ff fcf7 	bl	800100a <bme280_set_regs>
 800161c:	4603      	mov	r3, r0
 800161e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001620:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b25b      	sxtb	r3, r3
 800163c:	f023 031c 	bic.w	r3, r3, #28
 8001640:	b25a      	sxtb	r2, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	78db      	ldrb	r3, [r3, #3]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	b25b      	sxtb	r3, r3
 800164a:	f003 031c 	and.w	r3, r3, #28
 800164e:	b25b      	sxtb	r3, r3
 8001650:	4313      	orrs	r3, r2
 8001652:	b25b      	sxtb	r3, r3
 8001654:	b2da      	uxtb	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	701a      	strb	r2, [r3, #0]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b25b      	sxtb	r3, r3
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	b25a      	sxtb	r2, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	791b      	ldrb	r3, [r3, #4]
 8001680:	015b      	lsls	r3, r3, #5
 8001682:	b25b      	sxtb	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b25b      	sxtb	r3, r3
 8001688:	b2da      	uxtb	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	701a      	strb	r2, [r3, #0]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	f023 031c 	bic.w	r3, r3, #28
 80016ae:	b25a      	sxtb	r2, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	f003 031c 	and.w	r3, r3, #28
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	701a      	strb	r2, [r3, #0]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	785b      	ldrb	r3, [r3, #1]
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	701a      	strb	r2, [r3, #0]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	b2da      	uxtb	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3302      	adds	r3, #2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	109b      	asrs	r3, r3, #2
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	b2da      	uxtb	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3302      	adds	r3, #2
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	b2da      	uxtb	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3303      	adds	r3, #3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	109b      	asrs	r3, r3, #2
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	b2da      	uxtb	r2, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3303      	adds	r3, #3
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	095b      	lsrs	r3, r3, #5
 800175e:	b2da      	uxtb	r2, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	711a      	strb	r2, [r3, #4]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800177c:	23f4      	movs	r3, #244	; 0xf4
 800177e:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001780:	7bb8      	ldrb	r0, [r7, #14]
 8001782:	f107 010d 	add.w	r1, r7, #13
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2201      	movs	r2, #1
 800178a:	f7ff fc0e 	bl	8000faa <bme280_get_regs>
 800178e:	4603      	mov	r3, r0
 8001790:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d117      	bne.n	80017ca <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800179a:	7b7b      	ldrb	r3, [r7, #13]
 800179c:	b25b      	sxtb	r3, r3
 800179e:	f023 0303 	bic.w	r3, r3, #3
 80017a2:	b25a      	sxtb	r2, r3
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80017b6:	f107 010d 	add.w	r1, r7, #13
 80017ba:	f107 000e 	add.w	r0, r7, #14
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f7ff fc22 	bl	800100a <bme280_set_regs>
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80017de:	f107 0110 	add.w	r1, r7, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2204      	movs	r2, #4
 80017e6:	20f2      	movs	r0, #242	; 0xf2
 80017e8:	f7ff fbdf 	bl	8000faa <bme280_get_regs>
 80017ec:	4603      	mov	r3, r0
 80017ee:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 80017f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d118      	bne.n	800182a <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80017f8:	f107 0208 	add.w	r2, r7, #8
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff80 	bl	8001708 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fd21 	bl	8001250 <bme280_soft_reset>
 800180e:	4603      	mov	r3, r0
 8001810:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001812:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d107      	bne.n	800182a <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f808 	bl	8001836 <reload_device_settings>
 8001826:	4603      	mov	r3, r0
 8001828:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800182a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	201f      	movs	r0, #31
 8001846:	f7ff fe18 	bl	800147a <set_osr_settings>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	201f      	movs	r0, #31
 800185c:	f7ff feaa 	bl	80015b4 <set_filter_standby_settings>
 8001860:	4603      	mov	r3, r0
 8001862:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001864:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b5f      	ldr	r3, [pc, #380]	; (80019fc <compensate_temperature+0x18c>)
 8001880:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	4b5d      	ldr	r3, [pc, #372]	; (8001a00 <compensate_temperature+0x190>)
 800188a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe36 	bl	8000504 <__aeabi_ui2d>
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <compensate_temperature+0x194>)
 800189e:	f7fe ffd5 	bl	800084c <__aeabi_ddiv>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4614      	mov	r4, r2
 80018a8:	461d      	mov	r5, r3
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe28 	bl	8000504 <__aeabi_ui2d>
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <compensate_temperature+0x198>)
 80018ba:	f7fe ffc7 	bl	800084c <__aeabi_ddiv>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7fe fcdf 	bl	8000288 <__aeabi_dsub>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe23 	bl	8000524 <__aeabi_i2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018e6:	f7fe fe87 	bl	80005f8 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe04 	bl	8000504 <__aeabi_ui2d>
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001904:	f7fe ffa2 	bl	800084c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4614      	mov	r4, r2
 800190e:	461d      	mov	r5, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fdf5 	bl	8000504 <__aeabi_ui2d>
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <compensate_temperature+0x19c>)
 8001920:	f7fe ff94 	bl	800084c <__aeabi_ddiv>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4620      	mov	r0, r4
 800192a:	4629      	mov	r1, r5
 800192c:	f7fe fcac 	bl	8000288 <__aeabi_dsub>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8001938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800193c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001940:	f7fe fe5a 	bl	80005f8 <__aeabi_dmul>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4614      	mov	r4, r2
 800194a:	461d      	mov	r5, r3
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fde6 	bl	8000524 <__aeabi_i2d>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4620      	mov	r0, r4
 800195e:	4629      	mov	r1, r5
 8001960:	f7fe fe4a 	bl	80005f8 <__aeabi_dmul>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 800196c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001970:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001974:	f7fe fc8a 	bl	800028c <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff f8d4 	bl	8000b2c <__aeabi_d2iz>
 8001984:	4602      	mov	r2, r0
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 800198a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800198e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001992:	f7fe fc7b 	bl	800028c <__adddf3>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <compensate_temperature+0x1a0>)
 80019a4:	f7fe ff52 	bl	800084c <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80019b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019b8:	f7ff f890 	bl	8000adc <__aeabi_dcmplt>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d004      	beq.n	80019cc <compensate_temperature+0x15c>
		temperature = temperature_min;
 80019c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019ca:	e00c      	b.n	80019e6 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80019cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019d4:	f7ff f8a0 	bl	8000b18 <__aeabi_dcmpgt>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <compensate_temperature+0x176>
		temperature = temperature_max;
 80019de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 80019e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80019ee:	eeb0 0a47 	vmov.f32	s0, s14
 80019f2:	eef0 0a67 	vmov.f32	s1, s15
 80019f6:	3730      	adds	r7, #48	; 0x30
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bdb0      	pop	{r4, r5, r7, pc}
 80019fc:	c0440000 	.word	0xc0440000
 8001a00:	40554000 	.word	0x40554000
 8001a04:	40d00000 	.word	0x40d00000
 8001a08:	40900000 	.word	0x40900000
 8001a0c:	40c00000 	.word	0x40c00000
 8001a10:	40b40000 	.word	0x40b40000
 8001a14:	00000000 	.word	0x00000000

08001a18 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	b08e      	sub	sp, #56	; 0x38
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8001a22:	a3d9      	add	r3, pc, #868	; (adr r3, 8001d88 <compensate_pressure+0x370>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8001a2c:	a3d8      	add	r3, pc, #864	; (adr r3, 8001d90 <compensate_pressure+0x378>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd72 	bl	8000524 <__aeabi_i2d>
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a48:	f7fe ff00 	bl	800084c <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	4bc1      	ldr	r3, [pc, #772]	; (8001d60 <compensate_pressure+0x348>)
 8001a5a:	f7fe fc15 	bl	8000288 <__aeabi_dsub>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001a66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a6e:	f7fe fdc3 	bl	80005f8 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4614      	mov	r4, r2
 8001a78:	461d      	mov	r5, r3
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd4f 	bl	8000524 <__aeabi_i2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	f7fe fdb3 	bl	80005f8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4bb1      	ldr	r3, [pc, #708]	; (8001d64 <compensate_pressure+0x34c>)
 8001aa0:	f7fe fed4 	bl	800084c <__aeabi_ddiv>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd36 	bl	8000524 <__aeabi_i2d>
 8001ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001abc:	f7fe fd9c 	bl	80005f8 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	f7fe fbde 	bl	800028c <__adddf3>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ad8:	f7fe fbd8 	bl	800028c <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4b9f      	ldr	r3, [pc, #636]	; (8001d68 <compensate_pressure+0x350>)
 8001aea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aee:	f7fe fead 	bl	800084c <__aeabi_ddiv>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	461d      	mov	r5, r3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fd0f 	bl	8000524 <__aeabi_i2d>
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	4b98      	ldr	r3, [pc, #608]	; (8001d6c <compensate_pressure+0x354>)
 8001b0c:	f7fe fd74 	bl	80005f8 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4620      	mov	r0, r4
 8001b16:	4629      	mov	r1, r5
 8001b18:	f7fe fbb8 	bl	800028c <__adddf3>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fcfa 	bl	8000524 <__aeabi_i2d>
 8001b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b34:	f7fe fd60 	bl	80005f8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b44:	f7fe fd58 	bl	80005f8 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4b86      	ldr	r3, [pc, #536]	; (8001d70 <compensate_pressure+0x358>)
 8001b56:	f7fe fe79 	bl	800084c <__aeabi_ddiv>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fcdb 	bl	8000524 <__aeabi_i2d>
 8001b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b72:	f7fe fd41 	bl	80005f8 <__aeabi_dmul>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b82:	f7fe fb83 	bl	800028c <__adddf3>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	4b77      	ldr	r3, [pc, #476]	; (8001d70 <compensate_pressure+0x358>)
 8001b94:	f7fe fe5a 	bl	800084c <__aeabi_ddiv>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	4b6f      	ldr	r3, [pc, #444]	; (8001d64 <compensate_pressure+0x34c>)
 8001ba6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001baa:	f7fe fe4f 	bl	800084c <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b6e      	ldr	r3, [pc, #440]	; (8001d74 <compensate_pressure+0x35c>)
 8001bbc:	f7fe fb66 	bl	800028c <__adddf3>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	461d      	mov	r5, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	88db      	ldrh	r3, [r3, #6]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fc99 	bl	8000504 <__aeabi_ui2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	4629      	mov	r1, r5
 8001bda:	f7fe fd0d 	bl	80005f8 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bf2:	f7fe ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 80cd 	bne.w	8001d98 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fc7e 	bl	8000504 <__aeabi_ui2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	f04f 0000 	mov.w	r0, #0
 8001c10:	4959      	ldr	r1, [pc, #356]	; (8001d78 <compensate_pressure+0x360>)
 8001c12:	f7fe fb39 	bl	8000288 <__aeabi_dsub>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <compensate_pressure+0x364>)
 8001c24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c28:	f7fe fe10 	bl	800084c <__aeabi_ddiv>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c34:	f7fe fb28 	bl	8000288 <__aeabi_dsub>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	a345      	add	r3, pc, #276	; (adr r3, 8001d58 <compensate_pressure+0x340>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fcd7 	bl	80005f8 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c56:	f7fe fdf9 	bl	800084c <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc5b 	bl	8000524 <__aeabi_i2d>
 8001c6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c72:	f7fe fcc1 	bl	80005f8 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c82:	f7fe fcb9 	bl	80005f8 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <compensate_pressure+0x368>)
 8001c94:	f7fe fdda 	bl	800084c <__aeabi_ddiv>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc3c 	bl	8000524 <__aeabi_i2d>
 8001cac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cb0:	f7fe fca2 	bl	80005f8 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <compensate_pressure+0x34c>)
 8001cc2:	f7fe fdc3 	bl	800084c <__aeabi_ddiv>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001cce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cd6:	f7fe fad9 	bl	800028c <__adddf3>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4614      	mov	r4, r2
 8001ce0:	461d      	mov	r5, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fc1b 	bl	8000524 <__aeabi_i2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	f7fe fac9 	bl	800028c <__adddf3>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <compensate_pressure+0x36c>)
 8001d08:	f7fe fda0 	bl	800084c <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d14:	f7fe faba 	bl	800028c <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8001d20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d24:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d28:	f7fe fed8 	bl	8000adc <__aeabi_dcmplt>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <compensate_pressure+0x324>
			pressure = pressure_min;
 8001d32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d36:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d3a:	e031      	b.n	8001da0 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8001d3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d40:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d44:	f7fe fee8 	bl	8000b18 <__aeabi_dcmpgt>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d028      	beq.n	8001da0 <compensate_pressure+0x388>
			pressure = pressure_max;
 8001d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d52:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d56:	e023      	b.n	8001da0 <compensate_pressure+0x388>
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	40b86a00 	.word	0x40b86a00
 8001d60:	40ef4000 	.word	0x40ef4000
 8001d64:	40e00000 	.word	0x40e00000
 8001d68:	40100000 	.word	0x40100000
 8001d6c:	40f00000 	.word	0x40f00000
 8001d70:	41200000 	.word	0x41200000
 8001d74:	3ff00000 	.word	0x3ff00000
 8001d78:	41300000 	.word	0x41300000
 8001d7c:	40b00000 	.word	0x40b00000
 8001d80:	41e00000 	.word	0x41e00000
 8001d84:	40300000 	.word	0x40300000
 8001d88:	00000000 	.word	0x00000000
 8001d8c:	40dd4c00 	.word	0x40dd4c00
 8001d90:	00000000 	.word	0x00000000
 8001d94:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8001d98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8001da0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001da4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001da8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dac:	eef0 0a67 	vmov.f32	s1, s15
 8001db0:	3738      	adds	r7, #56	; 0x38
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bdb0      	pop	{r4, r5, r7, pc}
 8001db6:	bf00      	nop

08001db8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001db8:	b5b0      	push	{r4, r5, r7, lr}
 8001dba:	b094      	sub	sp, #80	; 0x50
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <compensate_humidity+0x220>)
 8001dd4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fba1 	bl	8000524 <__aeabi_i2d>
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	4b7d      	ldr	r3, [pc, #500]	; (8001fdc <compensate_humidity+0x224>)
 8001de8:	f7fe fa4e 	bl	8000288 <__aeabi_dsub>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fb92 	bl	8000524 <__aeabi_i2d>
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <compensate_humidity+0x228>)
 8001e06:	f7fe fbf7 	bl	80005f8 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4614      	mov	r4, r2
 8001e10:	461d      	mov	r5, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fb83 	bl	8000524 <__aeabi_i2d>
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	4b70      	ldr	r3, [pc, #448]	; (8001fe4 <compensate_humidity+0x22c>)
 8001e24:	f7fe fd12 	bl	800084c <__aeabi_ddiv>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e34:	f7fe fbe0 	bl	80005f8 <__aeabi_dmul>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	4629      	mov	r1, r5
 8001e40:	f7fe fa24 	bl	800028c <__adddf3>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb57 	bl	8000504 <__aeabi_ui2d>
 8001e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e5a:	f7fe fa15 	bl	8000288 <__aeabi_dsub>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb59 	bl	8000524 <__aeabi_i2d>
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	4b5c      	ldr	r3, [pc, #368]	; (8001fe8 <compensate_humidity+0x230>)
 8001e78:	f7fe fce8 	bl	800084c <__aeabi_ddiv>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	7f1b      	ldrb	r3, [r3, #28]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb3b 	bl	8000504 <__aeabi_ui2d>
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b56      	ldr	r3, [pc, #344]	; (8001fec <compensate_humidity+0x234>)
 8001e94:	f7fe fcda 	bl	800084c <__aeabi_ddiv>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ea4:	f7fe fba8 	bl	80005f8 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <compensate_humidity+0x238>)
 8001eb6:	f7fe f9e9 	bl	800028c <__adddf3>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fb2b 	bl	8000524 <__aeabi_i2d>
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	4b46      	ldr	r3, [pc, #280]	; (8001fec <compensate_humidity+0x234>)
 8001ed4:	f7fe fcba 	bl	800084c <__aeabi_ddiv>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ee4:	f7fe fb88 	bl	80005f8 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ef4:	f7fe fb80 	bl	80005f8 <__aeabi_dmul>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <compensate_humidity+0x238>)
 8001f06:	f7fe f9c1 	bl	800028c <__adddf3>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8001f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f16:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f1a:	f7fe fb6d 	bl	80005f8 <__aeabi_dmul>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4614      	mov	r4, r2
 8001f24:	461d      	mov	r5, r3
 8001f26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f2e:	f7fe fb63 	bl	80005f8 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7fe fb5d 	bl	80005f8 <__aeabi_dmul>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	7e1b      	ldrb	r3, [r3, #24]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fada 	bl	8000504 <__aeabi_ui2d>
 8001f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f54:	f7fe fb50 	bl	80005f8 <__aeabi_dmul>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <compensate_humidity+0x23c>)
 8001f66:	f7fe fc71 	bl	800084c <__aeabi_ddiv>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	f04f 0000 	mov.w	r0, #0
 8001f72:	491f      	ldr	r1, [pc, #124]	; (8001ff0 <compensate_humidity+0x238>)
 8001f74:	f7fe f988 	bl	8000288 <__aeabi_dsub>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f80:	f7fe fb3a 	bl	80005f8 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8001f8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f90:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f94:	f7fe fdc0 	bl	8000b18 <__aeabi_dcmpgt>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d004      	beq.n	8001fa8 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8001f9e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fa2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fa6:	e00c      	b.n	8001fc2 <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8001fa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fb0:	f7fe fd94 	bl	8000adc <__aeabi_dcmplt>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <compensate_humidity+0x20a>
		humidity = humidity_min;
 8001fba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fbe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8001fc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fc6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fca:	eeb0 0a47 	vmov.f32	s0, s14
 8001fce:	eef0 0a67 	vmov.f32	s1, s15
 8001fd2:	3750      	adds	r7, #80	; 0x50
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd8:	40590000 	.word	0x40590000
 8001fdc:	40f2c000 	.word	0x40f2c000
 8001fe0:	40500000 	.word	0x40500000
 8001fe4:	40d00000 	.word	0x40d00000
 8001fe8:	40f00000 	.word	0x40f00000
 8001fec:	41900000 	.word	0x41900000
 8001ff0:	3ff00000 	.word	0x3ff00000
 8001ff4:	41200000 	.word	0x41200000

08001ff8 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002000:	2388      	movs	r3, #136	; 0x88
 8002002:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	611a      	str	r2, [r3, #16]
 800201a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800201c:	f107 010c 	add.w	r1, r7, #12
 8002020:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	221a      	movs	r2, #26
 8002028:	f7fe ffbf 	bl	8000faa <bme280_get_regs>
 800202c:	4603      	mov	r3, r0
 800202e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8002032:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002036:	2b00      	cmp	r3, #0
 8002038:	d11d      	bne.n	8002076 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	f000 f84a 	bl	80020da <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002046:	23e1      	movs	r3, #225	; 0xe1
 8002048:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800204c:	f107 010c 	add.w	r1, r7, #12
 8002050:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2207      	movs	r2, #7
 8002058:	f7fe ffa7 	bl	8000faa <bme280_get_regs>
 800205c:	4603      	mov	r3, r0
 800205e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8002062:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002066:	2b00      	cmp	r3, #0
 8002068:	d105      	bne.n	8002076 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f8e1 	bl	8002238 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8002076:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800207a:	4618      	mov	r0, r3
 800207c:	3728      	adds	r7, #40	; 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8002082:	b480      	push	{r7}
 8002084:	b087      	sub	sp, #28
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8002090:	2301      	movs	r3, #1
 8002092:	75fb      	strb	r3, [r7, #23]
 8002094:	e016      	b.n	80020c4 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8002096:	7dfb      	ldrb	r3, [r7, #23]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	441a      	add	r2, r3
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	3b01      	subs	r3, #1
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	440b      	add	r3, r1
 80020a6:	7812      	ldrb	r2, [r2, #0]
 80020a8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	441a      	add	r2, r3
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4619      	mov	r1, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	440b      	add	r3, r1
 80020ba:	7812      	ldrb	r2, [r2, #0]
 80020bc:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	3301      	adds	r3, #1
 80020c2:	75fb      	strb	r3, [r7, #23]
 80020c4:	7dfa      	ldrb	r2, [r7, #23]
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d3e4      	bcc.n	8002096 <interleave_reg_addr+0x14>
	}
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	3310      	adds	r3, #16
 80020e8:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3301      	adds	r3, #1
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	b21a      	sxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	4313      	orrs	r3, r2
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3303      	adds	r3, #3
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	b21a      	sxth	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3302      	adds	r3, #2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b21b      	sxth	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b21a      	sxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3305      	adds	r3, #5
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	b21a      	sxth	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b21b      	sxth	r3, r3
 8002130:	4313      	orrs	r3, r2
 8002132:	b21a      	sxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3307      	adds	r3, #7
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	b21a      	sxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3306      	adds	r3, #6
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b21b      	sxth	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	b21b      	sxth	r3, r3
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3309      	adds	r3, #9
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	b21a      	sxth	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3308      	adds	r3, #8
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b21a      	sxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	330b      	adds	r3, #11
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	b21a      	sxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	330a      	adds	r3, #10
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b21b      	sxth	r3, r3
 8002180:	4313      	orrs	r3, r2
 8002182:	b21a      	sxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	330d      	adds	r3, #13
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b21a      	sxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	330c      	adds	r3, #12
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b21b      	sxth	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	b21a      	sxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	330f      	adds	r3, #15
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	330e      	adds	r3, #14
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3311      	adds	r3, #17
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3310      	adds	r3, #16
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3313      	adds	r3, #19
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	b21a      	sxth	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3312      	adds	r3, #18
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	4313      	orrs	r3, r2
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3315      	adds	r3, #21
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3314      	adds	r3, #20
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b21b      	sxth	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b21a      	sxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3317      	adds	r3, #23
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	b21a      	sxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3316      	adds	r3, #22
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b21b      	sxth	r3, r3
 800221c:	4313      	orrs	r3, r2
 800221e:	b21a      	sxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7e5a      	ldrb	r2, [r3, #25]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	761a      	strb	r2, [r3, #24]

}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	3310      	adds	r3, #16
 8002246:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3301      	adds	r3, #1
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	b21a      	sxth	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b21b      	sxth	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b21a      	sxth	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	789a      	ldrb	r2, [r3, #2]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3303      	adds	r3, #3
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b25b      	sxtb	r3, r3
 8002270:	b29b      	uxth	r3, r3
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	b29b      	uxth	r3, r3
 8002276:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3304      	adds	r3, #4
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b21b      	sxth	r3, r3
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8002286:	8a7a      	ldrh	r2, [r7, #18]
 8002288:	8a3b      	ldrh	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	b21a      	sxth	r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3305      	adds	r3, #5
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b25b      	sxtb	r3, r3
 800229a:	b29b      	uxth	r3, r3
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	b29b      	uxth	r3, r3
 80022a0:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80022ae:	89fa      	ldrh	r2, [r7, #14]
 80022b0:	89bb      	ldrh	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3306      	adds	r3, #6
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b25a      	sxtb	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80022c8:	bf00      	nop
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	460a      	mov	r2, r1
 80022de:	71fb      	strb	r3, [r7, #7]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 80022e8:	79fa      	ldrb	r2, [r7, #7]
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	4013      	ands	r3, r2
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e001      	b.n	80022fe <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <null_ptr_check+0x26>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <null_ptr_check+0x26>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <null_ptr_check+0x26>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002332:	23ff      	movs	r3, #255	; 0xff
 8002334:	73fb      	strb	r3, [r7, #15]
 8002336:	e001      	b.n	800233c <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800233c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af02      	add	r7, sp, #8
 8002352:	603a      	str	r2, [r7, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
 800235a:	460b      	mov	r3, r1
 800235c:	71bb      	strb	r3, [r7, #6]
 800235e:	4613      	mov	r3, r2
 8002360:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	b29b      	uxth	r3, r3
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	b299      	uxth	r1, r3
 800236a:	1dba      	adds	r2, r7, #6
 800236c:	230a      	movs	r3, #10
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2301      	movs	r3, #1
 8002372:	4811      	ldr	r0, [pc, #68]	; (80023b8 <user_i2c_read+0x6c>)
 8002374:	f001 fb4e 	bl	8003a14 <HAL_I2C_Master_Transmit>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <user_i2c_read+0x38>
 800237e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002382:	e014      	b.n	80023ae <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	b21b      	sxth	r3, r3
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	b21b      	sxth	r3, r3
 8002390:	b299      	uxth	r1, r3
 8002392:	88bb      	ldrh	r3, [r7, #4]
 8002394:	220a      	movs	r2, #10
 8002396:	9200      	str	r2, [sp, #0]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	4807      	ldr	r0, [pc, #28]	; (80023b8 <user_i2c_read+0x6c>)
 800239c:	f001 fc38 	bl	8003c10 <HAL_I2C_Master_Receive>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <user_i2c_read+0x60>
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023aa:	e000      	b.n	80023ae <user_i2c_read+0x62>

  return 0;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20005304 	.word	0x20005304

080023bc <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 ff25 	bl	8003214 <HAL_Delay>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af02      	add	r7, sp, #8
 80023da:	603a      	str	r2, [r7, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
 80023e2:	460b      	mov	r3, r1
 80023e4:	71bb      	strb	r3, [r7, #6]
 80023e6:	4613      	mov	r3, r2
 80023e8:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 80023ea:	88bb      	ldrh	r3, [r7, #4]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4618      	mov	r0, r3
 80023f0:	f00b ff76 	bl	800e2e0 <malloc>
 80023f4:	4603      	mov	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 80023f8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3301      	adds	r3, #1
 8002404:	88ba      	ldrh	r2, [r7, #4]
 8002406:	6839      	ldr	r1, [r7, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f00b ff79 	bl	800e300 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	b29b      	uxth	r3, r3
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	b299      	uxth	r1, r3
 8002416:	88bb      	ldrh	r3, [r7, #4]
 8002418:	3301      	adds	r3, #1
 800241a:	b29b      	uxth	r3, r3
 800241c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002420:	9200      	str	r2, [sp, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4808      	ldr	r0, [pc, #32]	; (8002448 <user_i2c_write+0x74>)
 8002426:	f001 faf5 	bl	8003a14 <HAL_I2C_Master_Transmit>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <user_i2c_write+0x62>
 8002430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002434:	e003      	b.n	800243e <user_i2c_write+0x6a>

  free(buf);
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f00b ff5a 	bl	800e2f0 <free>
  return 0;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20005304 	.word	0x20005304

0800244c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002450:	f000 fe9e 	bl	8003190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002454:	f000 f864 	bl	8002520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002458:	f000 f948 	bl	80026ec <MX_GPIO_Init>
  MX_TIM3_Init();
 800245c:	f000 f8f8 	bl	8002650 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002460:	f000 f8c8 	bl	80025f4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 8002464:	481c      	ldr	r0, [pc, #112]	; (80024d8 <main+0x8c>)
 8002466:	f004 faad 	bl	80069c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800246a:	f007 ff2b 	bl	800a2c4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 800246e:	4a1b      	ldr	r2, [pc, #108]	; (80024dc <main+0x90>)
 8002470:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002474:	200a      	movs	r0, #10
 8002476:	f008 f81c 	bl	800a4b2 <osMessageQueueNew>
 800247a:	4603      	mov	r3, r0
 800247c:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <main+0x94>)
 800247e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <main+0x98>)
 8002482:	2100      	movs	r1, #0
 8002484:	4818      	ldr	r0, [pc, #96]	; (80024e8 <main+0x9c>)
 8002486:	f007 ff67 	bl	800a358 <osThreadNew>
 800248a:	4603      	mov	r3, r0
 800248c:	4a17      	ldr	r2, [pc, #92]	; (80024ec <main+0xa0>)
 800248e:	6013      	str	r3, [r2, #0]

  /* creation of Blue_LED_Blink */
  Blue_LED_BlinkHandle = osThreadNew(Start_Blue_LED_Blink, NULL, &Blue_LED_Blink_attributes);
 8002490:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <main+0xa4>)
 8002492:	2100      	movs	r1, #0
 8002494:	4817      	ldr	r0, [pc, #92]	; (80024f4 <main+0xa8>)
 8002496:	f007 ff5f 	bl	800a358 <osThreadNew>
 800249a:	4603      	mov	r3, r0
 800249c:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <main+0xac>)
 800249e:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <main+0xb0>)
 80024a2:	2100      	movs	r1, #0
 80024a4:	4816      	ldr	r0, [pc, #88]	; (8002500 <main+0xb4>)
 80024a6:	f007 ff57 	bl	800a358 <osThreadNew>
 80024aa:	4603      	mov	r3, r0
 80024ac:	4a15      	ldr	r2, [pc, #84]	; (8002504 <main+0xb8>)
 80024ae:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 80024b0:	4a15      	ldr	r2, [pc, #84]	; (8002508 <main+0xbc>)
 80024b2:	2100      	movs	r1, #0
 80024b4:	4815      	ldr	r0, [pc, #84]	; (800250c <main+0xc0>)
 80024b6:	f007 ff4f 	bl	800a358 <osThreadNew>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4a14      	ldr	r2, [pc, #80]	; (8002510 <main+0xc4>)
 80024be:	6013      	str	r3, [r2, #0]

  /* creation of bme280 */
  bme280Handle = osThreadNew(Start_bme280, NULL, &bme280_attributes);
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <main+0xc8>)
 80024c2:	2100      	movs	r1, #0
 80024c4:	4814      	ldr	r0, [pc, #80]	; (8002518 <main+0xcc>)
 80024c6:	f007 ff47 	bl	800a358 <osThreadNew>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4a13      	ldr	r2, [pc, #76]	; (800251c <main+0xd0>)
 80024ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80024d0:	f007 ff1c 	bl	800a30c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <main+0x88>
 80024d6:	bf00      	nop
 80024d8:	2000934c 	.word	0x2000934c
 80024dc:	0800ef7c 	.word	0x0800ef7c
 80024e0:	20006948 	.word	0x20006948
 80024e4:	0800eec8 	.word	0x0800eec8
 80024e8:	0800296d 	.word	0x0800296d
 80024ec:	200052c0 	.word	0x200052c0
 80024f0:	0800eeec 	.word	0x0800eeec
 80024f4:	08002981 	.word	0x08002981
 80024f8:	200057a8 	.word	0x200057a8
 80024fc:	0800ef10 	.word	0x0800ef10
 8002500:	080029b5 	.word	0x080029b5
 8002504:	2000a59c 	.word	0x2000a59c
 8002508:	0800ef34 	.word	0x0800ef34
 800250c:	08002c25 	.word	0x08002c25
 8002510:	20009394 	.word	0x20009394
 8002514:	0800ef58 	.word	0x0800ef58
 8002518:	08002c81 	.word	0x08002c81
 800251c:	2000a720 	.word	0x2000a720

08002520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b094      	sub	sp, #80	; 0x50
 8002524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002526:	f107 0320 	add.w	r3, r7, #32
 800252a:	2230      	movs	r2, #48	; 0x30
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f00b fef4 	bl	800e31c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	4b28      	ldr	r3, [pc, #160]	; (80025ec <SystemClock_Config+0xcc>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	4a27      	ldr	r2, [pc, #156]	; (80025ec <SystemClock_Config+0xcc>)
 800254e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002552:	6413      	str	r3, [r2, #64]	; 0x40
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <SystemClock_Config+0xcc>)
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <SystemClock_Config+0xd0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <SystemClock_Config+0xd0>)
 800256a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <SystemClock_Config+0xd0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800257c:	2301      	movs	r3, #1
 800257e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002586:	2302      	movs	r3, #2
 8002588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800258a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002590:	2308      	movs	r3, #8
 8002592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002594:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800259a:	2302      	movs	r3, #2
 800259c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800259e:	2307      	movs	r3, #7
 80025a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a2:	f107 0320 	add.w	r3, r7, #32
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fd16 	bl	8005fd8 <HAL_RCC_OscConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80025b2:	f000 fc29 	bl	8002e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b6:	230f      	movs	r3, #15
 80025b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ba:	2302      	movs	r3, #2
 80025bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025ce:	f107 030c 	add.w	r3, r7, #12
 80025d2:	2105      	movs	r1, #5
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 ff77 	bl	80064c8 <HAL_RCC_ClockConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80025e0:	f000 fc12 	bl	8002e08 <Error_Handler>
  }
}
 80025e4:	bf00      	nop
 80025e6:	3750      	adds	r7, #80	; 0x50
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40007000 	.word	0x40007000

080025f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <MX_I2C3_Init+0x50>)
 80025fa:	4a13      	ldr	r2, [pc, #76]	; (8002648 <MX_I2C3_Init+0x54>)
 80025fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_I2C3_Init+0x50>)
 8002600:	4a12      	ldr	r2, [pc, #72]	; (800264c <MX_I2C3_Init+0x58>)
 8002602:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <MX_I2C3_Init+0x50>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_I2C3_Init+0x50>)
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_I2C3_Init+0x50>)
 8002612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002616:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <MX_I2C3_Init+0x50>)
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_I2C3_Init+0x50>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <MX_I2C3_Init+0x50>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_I2C3_Init+0x50>)
 800262c:	2200      	movs	r2, #0
 800262e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <MX_I2C3_Init+0x50>)
 8002632:	f001 f8ab 	bl	800378c <HAL_I2C_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800263c:	f000 fbe4 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20005304 	.word	0x20005304
 8002648:	40005c00 	.word	0x40005c00
 800264c:	000186a0 	.word	0x000186a0

08002650 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002656:	f107 0308 	add.w	r3, r7, #8
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002664:	463b      	mov	r3, r7
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800266c:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <MX_TIM3_Init+0x94>)
 800266e:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <MX_TIM3_Init+0x98>)
 8002670:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8002672:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <MX_TIM3_Init+0x94>)
 8002674:	f240 3247 	movw	r2, #839	; 0x347
 8002678:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <MX_TIM3_Init+0x94>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8002680:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <MX_TIM3_Init+0x94>)
 8002682:	220a      	movs	r2, #10
 8002684:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <MX_TIM3_Init+0x94>)
 8002688:	2200      	movs	r2, #0
 800268a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <MX_TIM3_Init+0x94>)
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002692:	4814      	ldr	r0, [pc, #80]	; (80026e4 <MX_TIM3_Init+0x94>)
 8002694:	f004 f946 	bl	8006924 <HAL_TIM_Base_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800269e:	f000 fbb3 	bl	8002e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026a8:	f107 0308 	add.w	r3, r7, #8
 80026ac:	4619      	mov	r1, r3
 80026ae:	480d      	ldr	r0, [pc, #52]	; (80026e4 <MX_TIM3_Init+0x94>)
 80026b0:	f004 fb00 	bl	8006cb4 <HAL_TIM_ConfigClockSource>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80026ba:	f000 fba5 	bl	8002e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026c6:	463b      	mov	r3, r7
 80026c8:	4619      	mov	r1, r3
 80026ca:	4806      	ldr	r0, [pc, #24]	; (80026e4 <MX_TIM3_Init+0x94>)
 80026cc:	f004 fd1c 	bl	8007108 <HAL_TIMEx_MasterConfigSynchronization>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80026d6:	f000 fb97 	bl	8002e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026da:	bf00      	nop
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000934c 	.word	0x2000934c
 80026e8:	40000400 	.word	0x40000400

080026ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08c      	sub	sp, #48	; 0x30
 80026f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f2:	f107 031c 	add.w	r3, r7, #28
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
 8002700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	4b93      	ldr	r3, [pc, #588]	; (8002954 <MX_GPIO_Init+0x268>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a92      	ldr	r2, [pc, #584]	; (8002954 <MX_GPIO_Init+0x268>)
 800270c:	f043 0310 	orr.w	r3, r3, #16
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b90      	ldr	r3, [pc, #576]	; (8002954 <MX_GPIO_Init+0x268>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	4b8c      	ldr	r3, [pc, #560]	; (8002954 <MX_GPIO_Init+0x268>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a8b      	ldr	r2, [pc, #556]	; (8002954 <MX_GPIO_Init+0x268>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b89      	ldr	r3, [pc, #548]	; (8002954 <MX_GPIO_Init+0x268>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	4b85      	ldr	r3, [pc, #532]	; (8002954 <MX_GPIO_Init+0x268>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a84      	ldr	r2, [pc, #528]	; (8002954 <MX_GPIO_Init+0x268>)
 8002744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b82      	ldr	r3, [pc, #520]	; (8002954 <MX_GPIO_Init+0x268>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b7e      	ldr	r3, [pc, #504]	; (8002954 <MX_GPIO_Init+0x268>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a7d      	ldr	r2, [pc, #500]	; (8002954 <MX_GPIO_Init+0x268>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b7b      	ldr	r3, [pc, #492]	; (8002954 <MX_GPIO_Init+0x268>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	4b77      	ldr	r3, [pc, #476]	; (8002954 <MX_GPIO_Init+0x268>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a76      	ldr	r2, [pc, #472]	; (8002954 <MX_GPIO_Init+0x268>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b74      	ldr	r3, [pc, #464]	; (8002954 <MX_GPIO_Init+0x268>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	4b70      	ldr	r3, [pc, #448]	; (8002954 <MX_GPIO_Init+0x268>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a6f      	ldr	r2, [pc, #444]	; (8002954 <MX_GPIO_Init+0x268>)
 8002798:	f043 0308 	orr.w	r3, r3, #8
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b6d      	ldr	r3, [pc, #436]	; (8002954 <MX_GPIO_Init+0x268>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2108      	movs	r1, #8
 80027ae:	486a      	ldr	r0, [pc, #424]	; (8002958 <MX_GPIO_Init+0x26c>)
 80027b0:	f000 ffd2 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80027b4:	2201      	movs	r2, #1
 80027b6:	2101      	movs	r1, #1
 80027b8:	4868      	ldr	r0, [pc, #416]	; (800295c <MX_GPIO_Init+0x270>)
 80027ba:	f000 ffcd 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80027be:	2200      	movs	r2, #0
 80027c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80027c4:	4866      	ldr	r0, [pc, #408]	; (8002960 <MX_GPIO_Init+0x274>)
 80027c6:	f000 ffc7 	bl	8003758 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80027ca:	2308      	movs	r3, #8
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ce:	2301      	movs	r3, #1
 80027d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80027da:	f107 031c 	add.w	r3, r7, #28
 80027de:	4619      	mov	r1, r3
 80027e0:	485d      	ldr	r0, [pc, #372]	; (8002958 <MX_GPIO_Init+0x26c>)
 80027e2:	f000 fe1d 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ea:	2301      	movs	r3, #1
 80027ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	4619      	mov	r1, r3
 80027fc:	4857      	ldr	r0, [pc, #348]	; (800295c <MX_GPIO_Init+0x270>)
 80027fe:	f000 fe0f 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002802:	2308      	movs	r3, #8
 8002804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002812:	2305      	movs	r3, #5
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002816:	f107 031c 	add.w	r3, r7, #28
 800281a:	4619      	mov	r1, r3
 800281c:	484f      	ldr	r0, [pc, #316]	; (800295c <MX_GPIO_Init+0x270>)
 800281e:	f000 fdff 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002822:	2301      	movs	r3, #1
 8002824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002826:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800282a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	4619      	mov	r1, r3
 8002836:	484b      	ldr	r0, [pc, #300]	; (8002964 <MX_GPIO_Init+0x278>)
 8002838:	f000 fdf2 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800283c:	2310      	movs	r3, #16
 800283e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800284c:	2306      	movs	r3, #6
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	4843      	ldr	r0, [pc, #268]	; (8002964 <MX_GPIO_Init+0x278>)
 8002858:	f000 fde2 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800285c:	23e0      	movs	r3, #224	; 0xe0
 800285e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800286c:	2305      	movs	r3, #5
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	4619      	mov	r1, r3
 8002876:	483b      	ldr	r0, [pc, #236]	; (8002964 <MX_GPIO_Init+0x278>)
 8002878:	f000 fdd2 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800287c:	2304      	movs	r3, #4
 800287e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	4619      	mov	r1, r3
 800288e:	4836      	ldr	r0, [pc, #216]	; (8002968 <MX_GPIO_Init+0x27c>)
 8002890:	f000 fdc6 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028a6:	2305      	movs	r3, #5
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	4619      	mov	r1, r3
 80028b0:	482d      	ldr	r0, [pc, #180]	; (8002968 <MX_GPIO_Init+0x27c>)
 80028b2:	f000 fdb5 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80028b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80028ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028bc:	2301      	movs	r3, #1
 80028be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4619      	mov	r1, r3
 80028ce:	4824      	ldr	r0, [pc, #144]	; (8002960 <MX_GPIO_Init+0x274>)
 80028d0:	f000 fda6 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80028d4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80028d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028e6:	2306      	movs	r3, #6
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ea:	f107 031c 	add.w	r3, r7, #28
 80028ee:	4619      	mov	r1, r3
 80028f0:	481a      	ldr	r0, [pc, #104]	; (800295c <MX_GPIO_Init+0x270>)
 80028f2:	f000 fd95 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80028f6:	2320      	movs	r3, #32
 80028f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002902:	f107 031c 	add.w	r3, r7, #28
 8002906:	4619      	mov	r1, r3
 8002908:	4815      	ldr	r0, [pc, #84]	; (8002960 <MX_GPIO_Init+0x274>)
 800290a:	f000 fd89 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800290e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002914:	2312      	movs	r3, #18
 8002916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002918:	2301      	movs	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002920:	2304      	movs	r3, #4
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	480f      	ldr	r0, [pc, #60]	; (8002968 <MX_GPIO_Init+0x27c>)
 800292c:	f000 fd78 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002930:	2302      	movs	r3, #2
 8002932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002934:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800293e:	f107 031c 	add.w	r3, r7, #28
 8002942:	4619      	mov	r1, r3
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <MX_GPIO_Init+0x26c>)
 8002946:	f000 fd6b 	bl	8003420 <HAL_GPIO_Init>

}
 800294a:	bf00      	nop
 800294c:	3730      	adds	r7, #48	; 0x30
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40021000 	.word	0x40021000
 800295c:	40020800 	.word	0x40020800
 8002960:	40020c00 	.word	0x40020c00
 8002964:	40020000 	.word	0x40020000
 8002968:	40020400 	.word	0x40020400

0800296c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002974:	f00a ff46 	bl	800d804 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8002978:	2001      	movs	r0, #1
 800297a:	f007 fd7f 	bl	800a47c <osDelay>
 800297e:	e7fb      	b.n	8002978 <StartDefaultTask+0xc>

08002980 <Start_Blue_LED_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Blue_LED_Blink */
void Start_Blue_LED_Blink(void *argument)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Blue_LED_Blink */
  /* Infinite loop */
	static uint8_t i = 1;
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8002988:	2201      	movs	r2, #1
 800298a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800298e:	4808      	ldr	r0, [pc, #32]	; (80029b0 <Start_Blue_LED_Blink+0x30>)
 8002990:	f000 fee2 	bl	8003758 <HAL_GPIO_WritePin>
		osDelay(100);
 8002994:	2064      	movs	r0, #100	; 0x64
 8002996:	f007 fd71 	bl	800a47c <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 800299a:	2200      	movs	r2, #0
 800299c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029a0:	4803      	ldr	r0, [pc, #12]	; (80029b0 <Start_Blue_LED_Blink+0x30>)
 80029a2:	f000 fed9 	bl	8003758 <HAL_GPIO_WritePin>
		osDelay(900);
 80029a6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80029aa:	f007 fd67 	bl	800a47c <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 80029ae:	e7eb      	b.n	8002988 <Start_Blue_LED_Blink+0x8>
 80029b0:	40020c00 	.word	0x40020c00

080029b4 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 80029b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b6:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(2000);												// Every 5 second task management will print data
 80029c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029c4:	f007 fd5a 	bl	800a47c <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 80029c8:	4a8d      	ldr	r2, [pc, #564]	; (8002c00 <Start_Show_Resources+0x24c>)
 80029ca:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4611      	mov	r1, r2
 80029d2:	8019      	strh	r1, [r3, #0]
 80029d4:	3302      	adds	r3, #2
 80029d6:	0c12      	lsrs	r2, r2, #16
 80029d8:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 80029da:	232d      	movs	r3, #45	; 0x2d
 80029dc:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	  char buff[10] = {0};
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80029e6:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 80029f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f00b fc8e 	bl	800e31c <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8002a00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fbe3 	bl	80001d0 <strlen>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a12:	4413      	add	r3, r2
 8002a14:	4a7b      	ldr	r2, [pc, #492]	; (8002c04 <Start_Show_Resources+0x250>)
 8002a16:	461d      	mov	r5, r3
 8002a18:	4614      	mov	r4, r2
 8002a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1c:	6028      	str	r0, [r5, #0]
 8002a1e:	6069      	str	r1, [r5, #4]
 8002a20:	60aa      	str	r2, [r5, #8]
 8002a22:	60eb      	str	r3, [r5, #12]
 8002a24:	cc03      	ldmia	r4!, {r0, r1}
 8002a26:	6128      	str	r0, [r5, #16]
 8002a28:	6169      	str	r1, [r5, #20]
 8002a2a:	7823      	ldrb	r3, [r4, #0]
 8002a2c:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8002a2e:	f00a fe21 	bl	800d674 <xPortGetFreeHeapSize>
 8002a32:	4603      	mov	r3, r0
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b74      	ldr	r3, [pc, #464]	; (8002c08 <Start_Show_Resources+0x254>)
 8002a38:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8002a3a:	4b73      	ldr	r3, [pc, #460]	; (8002c08 <Start_Show_Resources+0x254>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8002a42:	220a      	movs	r2, #10
 8002a44:	4618      	mov	r0, r3
 8002a46:	f00b fc47 	bl	800e2d8 <itoa>
	  strcat(msg.Buf, buff);
 8002a4a:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002a4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f00b fdad 	bl	800e5b4 <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8002a5a:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8002a5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f00b fda5 	bl	800e5b4 <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME           | STATUS |   PRIOR	|  STACK  |    NUM  |\n\r\0");
 8002a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fbae 	bl	80001d0 <strlen>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a7c:	4413      	add	r3, r2
 8002a7e:	4a63      	ldr	r2, [pc, #396]	; (8002c0c <Start_Show_Resources+0x258>)
 8002a80:	4618      	mov	r0, r3
 8002a82:	4611      	mov	r1, r2
 8002a84:	2341      	movs	r3, #65	; 0x41
 8002a86:	461a      	mov	r2, r3
 8002a88:	f00b fc3a 	bl	800e300 <memcpy>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8002a8c:	4860      	ldr	r0, [pc, #384]	; (8002c10 <Start_Show_Resources+0x25c>)
 8002a8e:	f009 fdb9 	bl	800c604 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8002a98:	e004      	b.n	8002aa4 <Start_Show_Resources+0xf0>
	  {
	  	buffer_size ++;
 8002a9a:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8002aa4:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8002aa8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002aac:	5cd3      	ldrb	r3, [r2, r3]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f3      	bne.n	8002a9a <Start_Show_Resources+0xe6>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002abe:	e011      	b.n	8002ae4 <Start_Show_Resources+0x130>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002ac0:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8002ac4:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002ac8:	4413      	add	r3, r2
 8002aca:	4951      	ldr	r1, [pc, #324]	; (8002c10 <Start_Show_Resources+0x25c>)
 8002acc:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8002ad0:	440a      	add	r2, r1
 8002ad2:	7811      	ldrb	r1, [r2, #0]
 8002ad4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002ad8:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002ada:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002ae4:	4a4a      	ldr	r2, [pc, #296]	; (8002c10 <Start_Show_Resources+0x25c>)
 8002ae6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e6      	bne.n	8002ac0 <Start_Show_Resources+0x10c>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8002af2:	4b48      	ldr	r3, [pc, #288]	; (8002c14 <Start_Show_Resources+0x260>)
 8002af4:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 8002af8:	461d      	mov	r5, r3
 8002afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002afe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b02:	c403      	stmia	r4!, {r0, r1}
 8002b04:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME           | ABS TIME |              TASK TIME% |\n\r"};
 8002b06:	f107 030c 	add.w	r3, r7, #12
 8002b0a:	4a43      	ldr	r2, [pc, #268]	; (8002c18 <Start_Show_Resources+0x264>)
 8002b0c:	461c      	mov	r4, r3
 8002b0e:	4615      	mov	r5, r2
 8002b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b20:	c407      	stmia	r4!, {r0, r1, r2}
 8002b22:	8023      	strh	r3, [r4, #0]
 8002b24:	3402      	adds	r4, #2
 8002b26:	0c1b      	lsrs	r3, r3, #16
 8002b28:	7023      	strb	r3, [r4, #0]
	  strcat(msg.Buf, str_line);
 8002b2a:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8002b2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f00b fd3d 	bl	800e5b4 <strcat>
	  strcat(msg.Buf, str_head_2);
 8002b3a:	f107 020c 	add.w	r2, r7, #12
 8002b3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f00b fd35 	bl	800e5b4 <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8002b4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b4e:	2100      	movs	r1, #0
 8002b50:	482f      	ldr	r0, [pc, #188]	; (8002c10 <Start_Show_Resources+0x25c>)
 8002b52:	f00b fbe3 	bl	800e31c <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8002b56:	482e      	ldr	r0, [pc, #184]	; (8002c10 <Start_Show_Resources+0x25c>)
 8002b58:	f009 fdea 	bl	800c730 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);           // НЕ ВИВОДИТЬ СТРОКУ !!!!!!!!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<
 8002b5c:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8002b66:	4413      	add	r3, r2
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3357      	adds	r3, #87	; 0x57
 8002b6c:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002b76:	e011      	b.n	8002b9c <Start_Show_Resources+0x1e8>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8002b78:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8002b7c:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002b80:	4413      	add	r3, r2
 8002b82:	4923      	ldr	r1, [pc, #140]	; (8002c10 <Start_Show_Resources+0x25c>)
 8002b84:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8002b88:	440a      	add	r2, r1
 8002b8a:	7811      	ldrb	r1, [r2, #0]
 8002b8c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002b90:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8002b92:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002b96:	3301      	adds	r3, #1
 8002b98:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8002b9c:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <Start_Show_Resources+0x25c>)
 8002b9e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1e6      	bne.n	8002b78 <Start_Show_Resources+0x1c4>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8002baa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fb0e 	bl	80001d0 <strlen>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <Start_Show_Resources+0x268>)
 8002bc0:	4614      	mov	r4, r2
 8002bc2:	469c      	mov	ip, r3
 8002bc4:	f104 0e20 	add.w	lr, r4, #32
 8002bc8:	4665      	mov	r5, ip
 8002bca:	4626      	mov	r6, r4
 8002bcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002bce:	6028      	str	r0, [r5, #0]
 8002bd0:	6069      	str	r1, [r5, #4]
 8002bd2:	60aa      	str	r2, [r5, #8]
 8002bd4:	60eb      	str	r3, [r5, #12]
 8002bd6:	3410      	adds	r4, #16
 8002bd8:	f10c 0c10 	add.w	ip, ip, #16
 8002bdc:	4574      	cmp	r4, lr
 8002bde:	d1f3      	bne.n	8002bc8 <Start_Show_Resources+0x214>
 8002be0:	4665      	mov	r5, ip
 8002be2:	4623      	mov	r3, r4
 8002be4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002be6:	6028      	str	r0, [r5, #0]
 8002be8:	6069      	str	r1, [r5, #4]
 8002bea:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <Start_Show_Resources+0x26c>)
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f007 fccd 	bl	800a598 <osMessageQueuePut>
  {
 8002bfe:	e6df      	b.n	80029c0 <Start_Show_Resources+0xc>
 8002c00:	0800ede0 	.word	0x0800ede0
 8002c04:	0800ed54 	.word	0x0800ed54
 8002c08:	200005ec 	.word	0x200005ec
 8002c0c:	0800ed70 	.word	0x0800ed70
 8002c10:	20000204 	.word	0x20000204
 8002c14:	0800ede4 	.word	0x0800ede4
 8002c18:	0800ee00 	.word	0x0800ee00
 8002c1c:	0800edb4 	.word	0x0800edb4
 8002c20:	20006948 	.word	0x20006948

08002c24 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <Start_UART_Task+0x58>)
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	f107 010c 	add.w	r1, r7, #12
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f007 fd0b 	bl	800a658 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002c48:	e004      	b.n	8002c54 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8002c4a:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8002c54:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002c58:	f107 020c 	add.w	r2, r7, #12
 8002c5c:	5cd3      	ldrb	r3, [r2, r3]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f3      	bne.n	8002c4a <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8002c62:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8002c66:	f107 030c 	add.w	r3, r7, #12
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f00a fe87 	bl	800d980 <CDC_Transmit_FS>
    osDelay(1);
 8002c72:	2001      	movs	r0, #1
 8002c74:	f007 fc02 	bl	800a47c <osDelay>
  {
 8002c78:	e7da      	b.n	8002c30 <Start_UART_Task+0xc>
 8002c7a:	bf00      	nop
 8002c7c:	20006948 	.word	0x20006948

08002c80 <Start_bme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_bme280 */
void Start_bme280(void *argument)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08e      	sub	sp, #56	; 0x38
 8002c84:	af04      	add	r7, sp, #16
 8002c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_bme280 */
  /* Infinite loop */
	uint16_t STATUS=0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t addres_device = 0x76;  		 	// BME280
 8002c8c:	2376      	movs	r3, #118	; 0x76
 8002c8e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t id_addr = 0xD0;
 8002c90:	23d0      	movs	r3, #208	; 0xd0
 8002c92:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t id = 96;							// in hex form
 8002c94:	2360      	movs	r3, #96	; 0x60
 8002c96:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	72fb      	strb	r3, [r7, #11]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8002c9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	b299      	uxth	r1, r3
 8002ca4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	2301      	movs	r3, #1
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	f107 030b 	add.w	r3, r7, #11
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	483c      	ldr	r0, [pc, #240]	; (8002dac <Start_bme280+0x12c>)
 8002cba:	f001 f9cf 	bl	800405c <HAL_I2C_Mem_Read>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	84fb      	strh	r3, [r7, #38]	; 0x26
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d105      	bne.n	8002cd8 <Start_bme280+0x58>
 8002ccc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <Start_bme280+0x58>
	{
		//i2c_device.BME280_ready_status = true;
		int ggg = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
	{
 8002cd6:	e001      	b.n	8002cdc <Start_bme280+0x5c>
	}
	else
	{
		int fff = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61bb      	str	r3, [r7, #24]
	}



	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002cdc:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <Start_bme280+0x130>)
 8002cde:	2276      	movs	r2, #118	; 0x76
 8002ce0:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8002ce2:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <Start_bme280+0x130>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8002ce8:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <Start_bme280+0x130>)
 8002cea:	4a32      	ldr	r2, [pc, #200]	; (8002db4 <Start_bme280+0x134>)
 8002cec:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8002cee:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <Start_bme280+0x130>)
 8002cf0:	4a31      	ldr	r2, [pc, #196]	; (8002db8 <Start_bme280+0x138>)
 8002cf2:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8002cf4:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <Start_bme280+0x130>)
 8002cf6:	4a31      	ldr	r2, [pc, #196]	; (8002dbc <Start_bme280+0x13c>)
 8002cf8:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8002cfa:	482d      	ldr	r0, [pc, #180]	; (8002db0 <Start_bme280+0x130>)
 8002cfc:	f7fe f90a 	bl	8000f14 <bme280_init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <Start_bme280+0x140>)
 8002d06:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <Start_bme280+0x130>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002d10:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <Start_bme280+0x130>)
 8002d12:	2205      	movs	r2, #5
 8002d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <Start_bme280+0x130>)
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8002d20:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <Start_bme280+0x130>)
 8002d22:	2204      	movs	r2, #4
 8002d24:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8002d28:	4921      	ldr	r1, [pc, #132]	; (8002db0 <Start_bme280+0x130>)
 8002d2a:	200f      	movs	r0, #15
 8002d2c:	f7fe f9e4 	bl	80010f8 <bme280_set_sensor_settings>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <Start_bme280+0x140>)
 8002d36:	701a      	strb	r2, [r3, #0]

	//	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8002d38:	491d      	ldr	r1, [pc, #116]	; (8002db0 <Start_bme280+0x130>)
 8002d3a:	2003      	movs	r0, #3
 8002d3c:	f7fe fa31 	bl	80011a2 <bme280_set_sensor_mode>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <Start_bme280+0x140>)
 8002d46:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <Start_bme280+0x130>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2028      	movs	r0, #40	; 0x28
 8002d4e:	4798      	blx	r3

  for(;;)
  {
	  osDelay(1000);
 8002d50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d54:	f007 fb92 	bl	800a47c <osDelay>
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002d58:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <Start_bme280+0x130>)
 8002d5a:	491a      	ldr	r1, [pc, #104]	; (8002dc4 <Start_bme280+0x144>)
 8002d5c:	2007      	movs	r0, #7
 8002d5e:	f7fe fa9c 	bl	800129a <bme280_get_sensor_data>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <Start_bme280+0x140>)
 8002d68:	701a      	strb	r2, [r3, #0]

	  if(rslt == BME280_OK)
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <Start_bme280+0x140>)
 8002d6c:	f993 3000 	ldrsb.w	r3, [r3]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ed      	bne.n	8002d50 <Start_bme280+0xd0>
	  {
	  		// Save data in main structure
	  		float BME280_temperature = comp_data.temperature;
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <Start_bme280+0x144>)
 8002d76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f7fd fefd 	bl	8000b7c <__aeabi_d2f>
 8002d82:	4603      	mov	r3, r0
 8002d84:	617b      	str	r3, [r7, #20]
	  		float BME280_humidity = comp_data.humidity;
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <Start_bme280+0x144>)
 8002d88:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f7fd fef4 	bl	8000b7c <__aeabi_d2f>
 8002d94:	4603      	mov	r3, r0
 8002d96:	613b      	str	r3, [r7, #16]
	  		float BME280_preasure = comp_data.pressure;
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <Start_bme280+0x144>)
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7fd feeb 	bl	8000b7c <__aeabi_d2f>
 8002da6:	4603      	mov	r3, r0
 8002da8:	60fb      	str	r3, [r7, #12]
	  osDelay(1000);
 8002daa:	e7d1      	b.n	8002d50 <Start_bme280+0xd0>
 8002dac:	20005304 	.word	0x20005304
 8002db0:	200052c4 	.word	0x200052c4
 8002db4:	0800234d 	.word	0x0800234d
 8002db8:	080023d5 	.word	0x080023d5
 8002dbc:	080023bd 	.word	0x080023bd
 8002dc0:	200057ac 	.word	0x200057ac
 8002dc4:	200057b0 	.word	0x200057b0

08002dc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM3)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d104      	bne.n	8002de4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002de2:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8002dee:	f000 f9f1 	bl	80031d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	2000a598 	.word	0x2000a598
 8002e04:	40010000 	.word	0x40010000

08002e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e0c:	b672      	cpsid	i
}
 8002e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e10:	e7fe      	b.n	8002e10 <Error_Handler+0x8>
	...

08002e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_MspInit+0x54>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <HAL_MspInit+0x54>)
 8002e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e28:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_MspInit+0x54>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_MspInit+0x54>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_MspInit+0x54>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <HAL_MspInit+0x54>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	210f      	movs	r1, #15
 8002e56:	f06f 0001 	mvn.w	r0, #1
 8002e5a:	f000 fab7 	bl	80033cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800

08002e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a29      	ldr	r2, [pc, #164]	; (8002f30 <HAL_I2C_MspInit+0xc4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d14b      	bne.n	8002f26 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <HAL_I2C_MspInit+0xc8>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a27      	ldr	r2, [pc, #156]	; (8002f34 <HAL_I2C_MspInit+0xc8>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_I2C_MspInit+0xc8>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <HAL_I2C_MspInit+0xc8>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <HAL_I2C_MspInit+0xc8>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <HAL_I2C_MspInit+0xc8>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ecc:	2312      	movs	r3, #18
 8002ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4815      	ldr	r0, [pc, #84]	; (8002f38 <HAL_I2C_MspInit+0xcc>)
 8002ee4:	f000 fa9c 	bl	8003420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eee:	2312      	movs	r3, #18
 8002ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002efa:	2304      	movs	r3, #4
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efe:	f107 0314 	add.w	r3, r7, #20
 8002f02:	4619      	mov	r1, r3
 8002f04:	480d      	ldr	r0, [pc, #52]	; (8002f3c <HAL_I2C_MspInit+0xd0>)
 8002f06:	f000 fa8b 	bl	8003420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_I2C_MspInit+0xc8>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <HAL_I2C_MspInit+0xc8>)
 8002f14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f18:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_I2C_MspInit+0xc8>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f26:	bf00      	nop
 8002f28:	3728      	adds	r7, #40	; 0x28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40005c00 	.word	0x40005c00
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40020800 	.word	0x40020800
 8002f3c:	40020000 	.word	0x40020000

08002f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <HAL_TIM_Base_MspInit+0x48>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d115      	bne.n	8002f7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <HAL_TIM_Base_MspInit+0x4c>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a0c      	ldr	r2, [pc, #48]	; (8002f8c <HAL_TIM_Base_MspInit+0x4c>)
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_TIM_Base_MspInit+0x4c>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2105      	movs	r1, #5
 8002f72:	201d      	movs	r0, #29
 8002f74:	f000 fa2a 	bl	80033cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f78:	201d      	movs	r0, #29
 8002f7a:	f000 fa43 	bl	8003404 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40023800 	.word	0x40023800

08002f90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08c      	sub	sp, #48	; 0x30
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	2019      	movs	r0, #25
 8002fa6:	f000 fa11 	bl	80033cc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002faa:	2019      	movs	r0, #25
 8002fac:	f000 fa2a 	bl	8003404 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <HAL_InitTick+0xa4>)
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <HAL_InitTick+0xa4>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc0:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <HAL_InitTick+0xa4>)
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fcc:	f107 0210 	add.w	r2, r7, #16
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 fc72 	bl	80068c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002fdc:	f003 fc5c 	bl	8006898 <HAL_RCC_GetPCLK2Freq>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	4a13      	ldr	r2, [pc, #76]	; (8003038 <HAL_InitTick+0xa8>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0c9b      	lsrs	r3, r3, #18
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_InitTick+0xac>)
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_InitTick+0xb0>)
 8002ff8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_InitTick+0xac>)
 8002ffc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003000:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003002:	4a0e      	ldr	r2, [pc, #56]	; (800303c <HAL_InitTick+0xac>)
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_InitTick+0xac>)
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_InitTick+0xac>)
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003014:	4809      	ldr	r0, [pc, #36]	; (800303c <HAL_InitTick+0xac>)
 8003016:	f003 fc85 	bl	8006924 <HAL_TIM_Base_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d104      	bne.n	800302a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003020:	4806      	ldr	r0, [pc, #24]	; (800303c <HAL_InitTick+0xac>)
 8003022:	f003 fccf 	bl	80069c4 <HAL_TIM_Base_Start_IT>
 8003026:	4603      	mov	r3, r0
 8003028:	e000      	b.n	800302c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
}
 800302c:	4618      	mov	r0, r3
 800302e:	3730      	adds	r7, #48	; 0x30
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40023800 	.word	0x40023800
 8003038:	431bde83 	.word	0x431bde83
 800303c:	2000a724 	.word	0x2000a724
 8003040:	40010000 	.word	0x40010000

08003044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003048:	e7fe      	b.n	8003048 <NMI_Handler+0x4>

0800304a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800304e:	e7fe      	b.n	800304e <HardFault_Handler+0x4>

08003050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003054:	e7fe      	b.n	8003054 <MemManage_Handler+0x4>

08003056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800305a:	e7fe      	b.n	800305a <BusFault_Handler+0x4>

0800305c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003060:	e7fe      	b.n	8003060 <UsageFault_Handler+0x4>

08003062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003062:	b480      	push	{r7}
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003074:	4802      	ldr	r0, [pc, #8]	; (8003080 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003076:	f003 fd15 	bl	8006aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	2000a724 	.word	0x2000a724

08003084 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <TIM3_IRQHandler+0x10>)
 800308a:	f003 fd0b 	bl	8006aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	2000934c 	.word	0x2000934c

08003098 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <OTG_FS_IRQHandler+0x10>)
 800309e:	f001 ff68 	bl	8004f72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2000bc80 	.word	0x2000bc80

080030ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b4:	4a14      	ldr	r2, [pc, #80]	; (8003108 <_sbrk+0x5c>)
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <_sbrk+0x60>)
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <_sbrk+0x64>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <_sbrk+0x64>)
 80030ca:	4a12      	ldr	r2, [pc, #72]	; (8003114 <_sbrk+0x68>)
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <_sbrk+0x64>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d207      	bcs.n	80030ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030dc:	f00b f8ba 	bl	800e254 <__errno>
 80030e0:	4603      	mov	r3, r0
 80030e2:	220c      	movs	r2, #12
 80030e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030ea:	e009      	b.n	8003100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <_sbrk+0x64>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <_sbrk+0x64>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	4a05      	ldr	r2, [pc, #20]	; (8003110 <_sbrk+0x64>)
 80030fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030fe:	68fb      	ldr	r3, [r7, #12]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20020000 	.word	0x20020000
 800310c:	00000400 	.word	0x00000400
 8003110:	200005f0 	.word	0x200005f0
 8003114:	2000c098 	.word	0x2000c098

08003118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <SystemInit+0x20>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <SystemInit+0x20>)
 8003124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800313c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003140:	480d      	ldr	r0, [pc, #52]	; (8003178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003142:	490e      	ldr	r1, [pc, #56]	; (800317c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003144:	4a0e      	ldr	r2, [pc, #56]	; (8003180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003148:	e002      	b.n	8003150 <LoopCopyDataInit>

0800314a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800314c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800314e:	3304      	adds	r3, #4

08003150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003154:	d3f9      	bcc.n	800314a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003156:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003158:	4c0b      	ldr	r4, [pc, #44]	; (8003188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800315c:	e001      	b.n	8003162 <LoopFillZerobss>

0800315e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800315e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003160:	3204      	adds	r2, #4

08003162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003164:	d3fb      	bcc.n	800315e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003166:	f7ff ffd7 	bl	8003118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800316a:	f00b f879 	bl	800e260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800316e:	f7ff f96d 	bl	800244c <main>
  bx  lr    
 8003172:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800317c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003180:	0800f074 	.word	0x0800f074
  ldr r2, =_sbss
 8003184:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003188:	2000c098 	.word	0x2000c098

0800318c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800318c:	e7fe      	b.n	800318c <ADC_IRQHandler>
	...

08003190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <HAL_Init+0x40>)
 800319a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800319e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_Init+0x40>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <HAL_Init+0x40>)
 80031a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_Init+0x40>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_Init+0x40>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b8:	2003      	movs	r0, #3
 80031ba:	f000 f8fc 	bl	80033b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031be:	200f      	movs	r0, #15
 80031c0:	f7ff fee6 	bl	8002f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c4:	f7ff fe26 	bl	8002e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023c00 	.word	0x40023c00

080031d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_IncTick+0x20>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_IncTick+0x24>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4413      	add	r3, r2
 80031e4:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <HAL_IncTick+0x24>)
 80031e6:	6013      	str	r3, [r2, #0]
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000008 	.word	0x20000008
 80031f8:	2000a76c 	.word	0x2000a76c

080031fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003200:	4b03      	ldr	r3, [pc, #12]	; (8003210 <HAL_GetTick+0x14>)
 8003202:	681b      	ldr	r3, [r3, #0]
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	2000a76c 	.word	0x2000a76c

08003214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800321c:	f7ff ffee 	bl	80031fc <HAL_GetTick>
 8003220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800322c:	d005      	beq.n	800323a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <HAL_Delay+0x44>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800323a:	bf00      	nop
 800323c:	f7ff ffde 	bl	80031fc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	429a      	cmp	r2, r3
 800324a:	d8f7      	bhi.n	800323c <HAL_Delay+0x28>
  {
  }
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000008 	.word	0x20000008

0800325c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <__NVIC_SetPriorityGrouping+0x44>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003278:	4013      	ands	r3, r2
 800327a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800328c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328e:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	60d3      	str	r3, [r2, #12]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a8:	4b04      	ldr	r3, [pc, #16]	; (80032bc <__NVIC_GetPriorityGrouping+0x18>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	f003 0307 	and.w	r3, r3, #7
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	db0b      	blt.n	80032ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	f003 021f 	and.w	r2, r3, #31
 80032d8:	4907      	ldr	r1, [pc, #28]	; (80032f8 <__NVIC_EnableIRQ+0x38>)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2001      	movs	r0, #1
 80032e2:	fa00 f202 	lsl.w	r2, r0, r2
 80032e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000e100 	.word	0xe000e100

080032fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	6039      	str	r1, [r7, #0]
 8003306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330c:	2b00      	cmp	r3, #0
 800330e:	db0a      	blt.n	8003326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	490c      	ldr	r1, [pc, #48]	; (8003348 <__NVIC_SetPriority+0x4c>)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	0112      	lsls	r2, r2, #4
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	440b      	add	r3, r1
 8003320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003324:	e00a      	b.n	800333c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	4908      	ldr	r1, [pc, #32]	; (800334c <__NVIC_SetPriority+0x50>)
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	3b04      	subs	r3, #4
 8003334:	0112      	lsls	r2, r2, #4
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	440b      	add	r3, r1
 800333a:	761a      	strb	r2, [r3, #24]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000e100 	.word	0xe000e100
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003350:	b480      	push	{r7}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f1c3 0307 	rsb	r3, r3, #7
 800336a:	2b04      	cmp	r3, #4
 800336c:	bf28      	it	cs
 800336e:	2304      	movcs	r3, #4
 8003370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3304      	adds	r3, #4
 8003376:	2b06      	cmp	r3, #6
 8003378:	d902      	bls.n	8003380 <NVIC_EncodePriority+0x30>
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3b03      	subs	r3, #3
 800337e:	e000      	b.n	8003382 <NVIC_EncodePriority+0x32>
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43da      	mvns	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	401a      	ands	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	43d9      	mvns	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a8:	4313      	orrs	r3, r2
         );
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3724      	adds	r7, #36	; 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ff4c 	bl	800325c <__NVIC_SetPriorityGrouping>
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033de:	f7ff ff61 	bl	80032a4 <__NVIC_GetPriorityGrouping>
 80033e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	6978      	ldr	r0, [r7, #20]
 80033ea:	f7ff ffb1 	bl	8003350 <NVIC_EncodePriority>
 80033ee:	4602      	mov	r2, r0
 80033f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f4:	4611      	mov	r1, r2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff ff80 	bl	80032fc <__NVIC_SetPriority>
}
 80033fc:	bf00      	nop
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ff54 	bl	80032c0 <__NVIC_EnableIRQ>
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	e16b      	b.n	8003714 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800343c:	2201      	movs	r2, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	f040 815a 	bne.w	800370e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d005      	beq.n	8003472 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346e:	2b02      	cmp	r3, #2
 8003470:	d130      	bne.n	80034d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a8:	2201      	movs	r2, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 0201 	and.w	r2, r3, #1
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d017      	beq.n	8003510 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d123      	bne.n	8003564 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	08da      	lsrs	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3208      	adds	r2, #8
 8003524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	220f      	movs	r2, #15
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	08da      	lsrs	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3208      	adds	r2, #8
 800355e:	69b9      	ldr	r1, [r7, #24]
 8003560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	2203      	movs	r2, #3
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0203 	and.w	r2, r3, #3
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80b4 	beq.w	800370e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	4b60      	ldr	r3, [pc, #384]	; (800372c <HAL_GPIO_Init+0x30c>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	4a5f      	ldr	r2, [pc, #380]	; (800372c <HAL_GPIO_Init+0x30c>)
 80035b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b4:	6453      	str	r3, [r2, #68]	; 0x44
 80035b6:	4b5d      	ldr	r3, [pc, #372]	; (800372c <HAL_GPIO_Init+0x30c>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035c2:	4a5b      	ldr	r2, [pc, #364]	; (8003730 <HAL_GPIO_Init+0x310>)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	3302      	adds	r3, #2
 80035ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	220f      	movs	r2, #15
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a52      	ldr	r2, [pc, #328]	; (8003734 <HAL_GPIO_Init+0x314>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d02b      	beq.n	8003646 <HAL_GPIO_Init+0x226>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a51      	ldr	r2, [pc, #324]	; (8003738 <HAL_GPIO_Init+0x318>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d025      	beq.n	8003642 <HAL_GPIO_Init+0x222>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a50      	ldr	r2, [pc, #320]	; (800373c <HAL_GPIO_Init+0x31c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01f      	beq.n	800363e <HAL_GPIO_Init+0x21e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4f      	ldr	r2, [pc, #316]	; (8003740 <HAL_GPIO_Init+0x320>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d019      	beq.n	800363a <HAL_GPIO_Init+0x21a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4e      	ldr	r2, [pc, #312]	; (8003744 <HAL_GPIO_Init+0x324>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <HAL_GPIO_Init+0x216>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4d      	ldr	r2, [pc, #308]	; (8003748 <HAL_GPIO_Init+0x328>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00d      	beq.n	8003632 <HAL_GPIO_Init+0x212>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4c      	ldr	r2, [pc, #304]	; (800374c <HAL_GPIO_Init+0x32c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <HAL_GPIO_Init+0x20e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4b      	ldr	r2, [pc, #300]	; (8003750 <HAL_GPIO_Init+0x330>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_GPIO_Init+0x20a>
 8003626:	2307      	movs	r3, #7
 8003628:	e00e      	b.n	8003648 <HAL_GPIO_Init+0x228>
 800362a:	2308      	movs	r3, #8
 800362c:	e00c      	b.n	8003648 <HAL_GPIO_Init+0x228>
 800362e:	2306      	movs	r3, #6
 8003630:	e00a      	b.n	8003648 <HAL_GPIO_Init+0x228>
 8003632:	2305      	movs	r3, #5
 8003634:	e008      	b.n	8003648 <HAL_GPIO_Init+0x228>
 8003636:	2304      	movs	r3, #4
 8003638:	e006      	b.n	8003648 <HAL_GPIO_Init+0x228>
 800363a:	2303      	movs	r3, #3
 800363c:	e004      	b.n	8003648 <HAL_GPIO_Init+0x228>
 800363e:	2302      	movs	r3, #2
 8003640:	e002      	b.n	8003648 <HAL_GPIO_Init+0x228>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <HAL_GPIO_Init+0x228>
 8003646:	2300      	movs	r3, #0
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	f002 0203 	and.w	r2, r2, #3
 800364e:	0092      	lsls	r2, r2, #2
 8003650:	4093      	lsls	r3, r2
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4313      	orrs	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003658:	4935      	ldr	r1, [pc, #212]	; (8003730 <HAL_GPIO_Init+0x310>)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	089b      	lsrs	r3, r3, #2
 800365e:	3302      	adds	r3, #2
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003666:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <HAL_GPIO_Init+0x334>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800368a:	4a32      	ldr	r2, [pc, #200]	; (8003754 <HAL_GPIO_Init+0x334>)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003690:	4b30      	ldr	r3, [pc, #192]	; (8003754 <HAL_GPIO_Init+0x334>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036b4:	4a27      	ldr	r2, [pc, #156]	; (8003754 <HAL_GPIO_Init+0x334>)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_GPIO_Init+0x334>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036de:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_GPIO_Init+0x334>)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_GPIO_Init+0x334>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003708:	4a12      	ldr	r2, [pc, #72]	; (8003754 <HAL_GPIO_Init+0x334>)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3301      	adds	r3, #1
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2b0f      	cmp	r3, #15
 8003718:	f67f ae90 	bls.w	800343c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3724      	adds	r7, #36	; 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	40013800 	.word	0x40013800
 8003734:	40020000 	.word	0x40020000
 8003738:	40020400 	.word	0x40020400
 800373c:	40020800 	.word	0x40020800
 8003740:	40020c00 	.word	0x40020c00
 8003744:	40021000 	.word	0x40021000
 8003748:	40021400 	.word	0x40021400
 800374c:	40021800 	.word	0x40021800
 8003750:	40021c00 	.word	0x40021c00
 8003754:	40013c00 	.word	0x40013c00

08003758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
 8003764:	4613      	mov	r3, r2
 8003766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003768:	787b      	ldrb	r3, [r7, #1]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003774:	e003      	b.n	800377e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	041a      	lsls	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	619a      	str	r2, [r3, #24]
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e12b      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fb5a 	bl	8002e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f0:	f003 f83e 	bl	8006870 <HAL_RCC_GetPCLK1Freq>
 80037f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a81      	ldr	r2, [pc, #516]	; (8003a00 <HAL_I2C_Init+0x274>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d807      	bhi.n	8003810 <HAL_I2C_Init+0x84>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a80      	ldr	r2, [pc, #512]	; (8003a04 <HAL_I2C_Init+0x278>)
 8003804:	4293      	cmp	r3, r2
 8003806:	bf94      	ite	ls
 8003808:	2301      	movls	r3, #1
 800380a:	2300      	movhi	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e006      	b.n	800381e <HAL_I2C_Init+0x92>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a7d      	ldr	r2, [pc, #500]	; (8003a08 <HAL_I2C_Init+0x27c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	bf94      	ite	ls
 8003818:	2301      	movls	r3, #1
 800381a:	2300      	movhi	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0e7      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a78      	ldr	r2, [pc, #480]	; (8003a0c <HAL_I2C_Init+0x280>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0c9b      	lsrs	r3, r3, #18
 8003830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a6a      	ldr	r2, [pc, #424]	; (8003a00 <HAL_I2C_Init+0x274>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d802      	bhi.n	8003860 <HAL_I2C_Init+0xd4>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3301      	adds	r3, #1
 800385e:	e009      	b.n	8003874 <HAL_I2C_Init+0xe8>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	4a69      	ldr	r2, [pc, #420]	; (8003a10 <HAL_I2C_Init+0x284>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	3301      	adds	r3, #1
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003886:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	495c      	ldr	r1, [pc, #368]	; (8003a00 <HAL_I2C_Init+0x274>)
 8003890:	428b      	cmp	r3, r1
 8003892:	d819      	bhi.n	80038c8 <HAL_I2C_Init+0x13c>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e59      	subs	r1, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038a8:	400b      	ands	r3, r1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_I2C_Init+0x138>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1e59      	subs	r1, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c2:	e051      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e04f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d111      	bne.n	80038f4 <HAL_I2C_Init+0x168>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e58      	subs	r0, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e012      	b.n	800391a <HAL_I2C_Init+0x18e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	0099      	lsls	r1, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	fbb0 f3f3 	udiv	r3, r0, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Init+0x196>
 800391e:	2301      	movs	r3, #1
 8003920:	e022      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10e      	bne.n	8003948 <HAL_I2C_Init+0x1bc>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1e58      	subs	r0, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	440b      	add	r3, r1
 8003938:	fbb0 f3f3 	udiv	r3, r0, r3
 800393c:	3301      	adds	r3, #1
 800393e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003946:	e00f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	0099      	lsls	r1, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	fbb0 f3f3 	udiv	r3, r0, r3
 800395e:	3301      	adds	r3, #1
 8003960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	6809      	ldr	r1, [r1, #0]
 800396c:	4313      	orrs	r3, r2
 800396e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003996:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6911      	ldr	r1, [r2, #16]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	000186a0 	.word	0x000186a0
 8003a04:	001e847f 	.word	0x001e847f
 8003a08:	003d08ff 	.word	0x003d08ff
 8003a0c:	431bde83 	.word	0x431bde83
 8003a10:	10624dd3 	.word	0x10624dd3

08003a14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	460b      	mov	r3, r1
 8003a22:	817b      	strh	r3, [r7, #10]
 8003a24:	4613      	mov	r3, r2
 8003a26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a28:	f7ff fbe8 	bl	80031fc <HAL_GetTick>
 8003a2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	f040 80e0 	bne.w	8003bfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	2319      	movs	r3, #25
 8003a42:	2201      	movs	r2, #1
 8003a44:	4970      	ldr	r1, [pc, #448]	; (8003c08 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 ff66 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
 8003a54:	e0d3      	b.n	8003bfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_I2C_Master_Transmit+0x50>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e0cc      	b.n	8003bfe <HAL_I2C_Master_Transmit+0x1ea>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d007      	beq.n	8003a8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2221      	movs	r2, #33	; 0x21
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	893a      	ldrh	r2, [r7, #8]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a50      	ldr	r2, [pc, #320]	; (8003c0c <HAL_I2C_Master_Transmit+0x1f8>)
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003acc:	8979      	ldrh	r1, [r7, #10]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	6a3a      	ldr	r2, [r7, #32]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fce8 	bl	80044a8 <I2C_MasterRequestWrite>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e08d      	b.n	8003bfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003af8:	e066      	b.n	8003bc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	6a39      	ldr	r1, [r7, #32]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 ffe0 	bl	8004ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00d      	beq.n	8003b26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d107      	bne.n	8003b22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e06b      	b.n	8003bfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	781a      	ldrb	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d11b      	bne.n	8003b9c <HAL_I2C_Master_Transmit+0x188>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d017      	beq.n	8003b9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	6a39      	ldr	r1, [r7, #32]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 ffd0 	bl	8004b46 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00d      	beq.n	8003bc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d107      	bne.n	8003bc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e01a      	b.n	8003bfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d194      	bne.n	8003afa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e000      	b.n	8003bfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
  }
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	00100002 	.word	0x00100002
 8003c0c:	ffff0000 	.word	0xffff0000

08003c10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08c      	sub	sp, #48	; 0x30
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	817b      	strh	r3, [r7, #10]
 8003c20:	4613      	mov	r3, r2
 8003c22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7ff faea 	bl	80031fc <HAL_GetTick>
 8003c28:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	f040 820b 	bne.w	800404e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2319      	movs	r3, #25
 8003c3e:	2201      	movs	r2, #1
 8003c40:	497c      	ldr	r1, [pc, #496]	; (8003e34 <HAL_I2C_Master_Receive+0x224>)
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fe68 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e1fe      	b.n	8004050 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2C_Master_Receive+0x50>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e1f7      	b.n	8004050 <HAL_I2C_Master_Receive+0x440>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d007      	beq.n	8003c86 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0201 	orr.w	r2, r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2222      	movs	r2, #34	; 0x22
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	893a      	ldrh	r2, [r7, #8]
 8003cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a5c      	ldr	r2, [pc, #368]	; (8003e38 <HAL_I2C_Master_Receive+0x228>)
 8003cc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cc8:	8979      	ldrh	r1, [r7, #10]
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fc6c 	bl	80045ac <I2C_MasterRequestRead>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e1b8      	b.n	8004050 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d113      	bne.n	8003d0e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	623b      	str	r3, [r7, #32]
 8003cfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e18c      	b.n	8004028 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d11b      	bne.n	8003d4e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e16c      	b.n	8004028 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d11b      	bne.n	8003d8e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	e14c      	b.n	8004028 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003db4:	e138      	b.n	8004028 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	f200 80f1 	bhi.w	8003fa2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d123      	bne.n	8003e10 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 fefb 	bl	8004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e139      	b.n	8004050 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e0e:	e10b      	b.n	8004028 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d14e      	bne.n	8003eb6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	2200      	movs	r2, #0
 8003e20:	4906      	ldr	r1, [pc, #24]	; (8003e3c <HAL_I2C_Master_Receive+0x22c>)
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fd78 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e10e      	b.n	8004050 <HAL_I2C_Master_Receive+0x440>
 8003e32:	bf00      	nop
 8003e34:	00100002 	.word	0x00100002
 8003e38:	ffff0000 	.word	0xffff0000
 8003e3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eb4:	e0b8      	b.n	8004028 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	4966      	ldr	r1, [pc, #408]	; (8004058 <HAL_I2C_Master_Receive+0x448>)
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fd29 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0bf      	b.n	8004050 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	2200      	movs	r2, #0
 8003f1a:	494f      	ldr	r1, [pc, #316]	; (8004058 <HAL_I2C_Master_Receive+0x448>)
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fcfb 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e091      	b.n	8004050 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fa0:	e042      	b.n	8004028 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fe0e 	bl	8004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e04c      	b.n	8004050 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d118      	bne.n	8004028 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	f47f aec2 	bne.w	8003db6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	e000      	b.n	8004050 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800404e:	2302      	movs	r3, #2
  }
}
 8004050:	4618      	mov	r0, r3
 8004052:	3728      	adds	r7, #40	; 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	00010004 	.word	0x00010004

0800405c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08c      	sub	sp, #48	; 0x30
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	4608      	mov	r0, r1
 8004066:	4611      	mov	r1, r2
 8004068:	461a      	mov	r2, r3
 800406a:	4603      	mov	r3, r0
 800406c:	817b      	strh	r3, [r7, #10]
 800406e:	460b      	mov	r3, r1
 8004070:	813b      	strh	r3, [r7, #8]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004076:	f7ff f8c1 	bl	80031fc <HAL_GetTick>
 800407a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b20      	cmp	r3, #32
 8004086:	f040 8208 	bne.w	800449a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2319      	movs	r3, #25
 8004090:	2201      	movs	r2, #1
 8004092:	497b      	ldr	r1, [pc, #492]	; (8004280 <HAL_I2C_Mem_Read+0x224>)
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fc3f 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
 80040a2:	e1fb      	b.n	800449c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_I2C_Mem_Read+0x56>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e1f4      	b.n	800449c <HAL_I2C_Mem_Read+0x440>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d007      	beq.n	80040d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2222      	movs	r2, #34	; 0x22
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2240      	movs	r2, #64	; 0x40
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004102:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4a5b      	ldr	r2, [pc, #364]	; (8004284 <HAL_I2C_Mem_Read+0x228>)
 8004118:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800411a:	88f8      	ldrh	r0, [r7, #6]
 800411c:	893a      	ldrh	r2, [r7, #8]
 800411e:	8979      	ldrh	r1, [r7, #10]
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	9301      	str	r3, [sp, #4]
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	4603      	mov	r3, r0
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 fb0c 	bl	8004748 <I2C_RequestMemoryRead>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e1b0      	b.n	800449c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	2b00      	cmp	r3, #0
 8004140:	d113      	bne.n	800416a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004142:	2300      	movs	r3, #0
 8004144:	623b      	str	r3, [r7, #32]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	623b      	str	r3, [r7, #32]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	623b      	str	r3, [r7, #32]
 8004156:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e184      	b.n	8004474 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	2b01      	cmp	r3, #1
 8004170:	d11b      	bne.n	80041aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e164      	b.n	8004474 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d11b      	bne.n	80041ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d2:	2300      	movs	r3, #0
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	e144      	b.n	8004474 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004200:	e138      	b.n	8004474 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	2b03      	cmp	r3, #3
 8004208:	f200 80f1 	bhi.w	80043ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	2b01      	cmp	r3, #1
 8004212:	d123      	bne.n	800425c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004216:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 fcd5 	bl	8004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e139      	b.n	800449c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	855a      	strh	r2, [r3, #42]	; 0x2a
 800425a:	e10b      	b.n	8004474 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004260:	2b02      	cmp	r3, #2
 8004262:	d14e      	bne.n	8004302 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	2200      	movs	r2, #0
 800426c:	4906      	ldr	r1, [pc, #24]	; (8004288 <HAL_I2C_Mem_Read+0x22c>)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fb52 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e10e      	b.n	800449c <HAL_I2C_Mem_Read+0x440>
 800427e:	bf00      	nop
 8004280:	00100002 	.word	0x00100002
 8004284:	ffff0000 	.word	0xffff0000
 8004288:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004300:	e0b8      	b.n	8004474 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	2200      	movs	r2, #0
 800430a:	4966      	ldr	r1, [pc, #408]	; (80044a4 <HAL_I2C_Mem_Read+0x448>)
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fb03 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0bf      	b.n	800449c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004364:	2200      	movs	r2, #0
 8004366:	494f      	ldr	r1, [pc, #316]	; (80044a4 <HAL_I2C_Mem_Read+0x448>)
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fad5 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e091      	b.n	800449c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043ec:	e042      	b.n	8004474 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fbe8 	bl	8004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e04c      	b.n	800449c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b04      	cmp	r3, #4
 8004440:	d118      	bne.n	8004474 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	f47f aec2 	bne.w	8004202 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800449a:	2302      	movs	r3, #2
  }
}
 800449c:	4618      	mov	r0, r3
 800449e:	3728      	adds	r7, #40	; 0x28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	00010004 	.word	0x00010004

080044a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	460b      	mov	r3, r1
 80044b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d006      	beq.n	80044d2 <I2C_MasterRequestWrite+0x2a>
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d003      	beq.n	80044d2 <I2C_MasterRequestWrite+0x2a>
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044d0:	d108      	bne.n	80044e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e00b      	b.n	80044fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	2b12      	cmp	r3, #18
 80044ea:	d107      	bne.n	80044fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fa05 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00d      	beq.n	8004530 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004522:	d103      	bne.n	800452c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e035      	b.n	800459c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004538:	d108      	bne.n	800454c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800453a:	897b      	ldrh	r3, [r7, #10]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004548:	611a      	str	r2, [r3, #16]
 800454a:	e01b      	b.n	8004584 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800454c:	897b      	ldrh	r3, [r7, #10]
 800454e:	11db      	asrs	r3, r3, #7
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f003 0306 	and.w	r3, r3, #6
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f063 030f 	orn	r3, r3, #15
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	490e      	ldr	r1, [pc, #56]	; (80045a4 <I2C_MasterRequestWrite+0xfc>)
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 fa2b 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e010      	b.n	800459c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800457a:	897b      	ldrh	r3, [r7, #10]
 800457c:	b2da      	uxtb	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	4907      	ldr	r1, [pc, #28]	; (80045a8 <I2C_MasterRequestWrite+0x100>)
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 fa1b 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	00010008 	.word	0x00010008
 80045a8:	00010002 	.word	0x00010002

080045ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	460b      	mov	r3, r1
 80045ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d006      	beq.n	80045e6 <I2C_MasterRequestRead+0x3a>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d003      	beq.n	80045e6 <I2C_MasterRequestRead+0x3a>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045e4:	d108      	bne.n	80045f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e00b      	b.n	8004610 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	2b11      	cmp	r3, #17
 80045fe:	d107      	bne.n	8004610 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800460e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f97b 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00d      	beq.n	8004644 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004636:	d103      	bne.n	8004640 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e079      	b.n	8004738 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800464c:	d108      	bne.n	8004660 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800464e:	897b      	ldrh	r3, [r7, #10]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	611a      	str	r2, [r3, #16]
 800465e:	e05f      	b.n	8004720 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004660:	897b      	ldrh	r3, [r7, #10]
 8004662:	11db      	asrs	r3, r3, #7
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f003 0306 	and.w	r3, r3, #6
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f063 030f 	orn	r3, r3, #15
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4930      	ldr	r1, [pc, #192]	; (8004740 <I2C_MasterRequestRead+0x194>)
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f9a1 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e054      	b.n	8004738 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800468e:	897b      	ldrh	r3, [r7, #10]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	4929      	ldr	r1, [pc, #164]	; (8004744 <I2C_MasterRequestRead+0x198>)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f991 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e044      	b.n	8004738 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f919 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fa:	d103      	bne.n	8004704 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004702:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e017      	b.n	8004738 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004708:	897b      	ldrh	r3, [r7, #10]
 800470a:	11db      	asrs	r3, r3, #7
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 0306 	and.w	r3, r3, #6
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f063 030e 	orn	r3, r3, #14
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4907      	ldr	r1, [pc, #28]	; (8004744 <I2C_MasterRequestRead+0x198>)
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f94d 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	00010008 	.word	0x00010008
 8004744:	00010002 	.word	0x00010002

08004748 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af02      	add	r7, sp, #8
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	4608      	mov	r0, r1
 8004752:	4611      	mov	r1, r2
 8004754:	461a      	mov	r2, r3
 8004756:	4603      	mov	r3, r0
 8004758:	817b      	strh	r3, [r7, #10]
 800475a:	460b      	mov	r3, r1
 800475c:	813b      	strh	r3, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004770:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004780:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	2200      	movs	r2, #0
 800478a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f8c2 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00d      	beq.n	80047b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a8:	d103      	bne.n	80047b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e0aa      	b.n	800490c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047b6:	897b      	ldrh	r3, [r7, #10]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	6a3a      	ldr	r2, [r7, #32]
 80047ca:	4952      	ldr	r1, [pc, #328]	; (8004914 <I2C_RequestMemoryRead+0x1cc>)
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f8fa 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e097      	b.n	800490c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f4:	6a39      	ldr	r1, [r7, #32]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f964 	bl	8004ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00d      	beq.n	800481e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	2b04      	cmp	r3, #4
 8004808:	d107      	bne.n	800481a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004818:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e076      	b.n	800490c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d105      	bne.n	8004830 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004824:	893b      	ldrh	r3, [r7, #8]
 8004826:	b2da      	uxtb	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	611a      	str	r2, [r3, #16]
 800482e:	e021      	b.n	8004874 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004830:	893b      	ldrh	r3, [r7, #8]
 8004832:	0a1b      	lsrs	r3, r3, #8
 8004834:	b29b      	uxth	r3, r3
 8004836:	b2da      	uxtb	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800483e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004840:	6a39      	ldr	r1, [r7, #32]
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f93e 	bl	8004ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00d      	beq.n	800486a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2b04      	cmp	r3, #4
 8004854:	d107      	bne.n	8004866 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004864:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e050      	b.n	800490c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800486a:	893b      	ldrh	r3, [r7, #8]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004876:	6a39      	ldr	r1, [r7, #32]
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f923 	bl	8004ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00d      	beq.n	80048a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	2b04      	cmp	r3, #4
 800488a:	d107      	bne.n	800489c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e035      	b.n	800490c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f82b 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00d      	beq.n	80048e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d6:	d103      	bne.n	80048e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e013      	b.n	800490c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048e4:	897b      	ldrh	r3, [r7, #10]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	6a3a      	ldr	r2, [r7, #32]
 80048f8:	4906      	ldr	r1, [pc, #24]	; (8004914 <I2C_RequestMemoryRead+0x1cc>)
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f863 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	00010002 	.word	0x00010002

08004918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004928:	e025      	b.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004930:	d021      	beq.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fe fc63 	bl	80031fc <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d116      	bne.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e023      	b.n	80049be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d10d      	bne.n	800499c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	43da      	mvns	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4013      	ands	r3, r2
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf0c      	ite	eq
 8004992:	2301      	moveq	r3, #1
 8004994:	2300      	movne	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	e00c      	b.n	80049b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	43da      	mvns	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4013      	ands	r3, r2
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d0b6      	beq.n	800492a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049d4:	e051      	b.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d123      	bne.n	8004a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f043 0204 	orr.w	r2, r3, #4
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e046      	b.n	8004abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a34:	d021      	beq.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fe fbe1 	bl	80031fc <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d116      	bne.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e020      	b.n	8004abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d10c      	bne.n	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bf14      	ite	ne
 8004a96:	2301      	movne	r3, #1
 8004a98:	2300      	moveq	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	e00b      	b.n	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	43da      	mvns	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d18d      	bne.n	80049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ad0:	e02d      	b.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f8ce 	bl	8004c74 <I2C_IsAcknowledgeFailed>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e02d      	b.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae8:	d021      	beq.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fe fb87 	bl	80031fc <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d116      	bne.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e007      	b.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	2b80      	cmp	r3, #128	; 0x80
 8004b3a:	d1ca      	bne.n	8004ad2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b52:	e02d      	b.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f88d 	bl	8004c74 <I2C_IsAcknowledgeFailed>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e02d      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b6a:	d021      	beq.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6c:	f7fe fb46 	bl	80031fc <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d302      	bcc.n	8004b82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d116      	bne.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e007      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d1ca      	bne.n	8004b54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bd4:	e042      	b.n	8004c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d119      	bne.n	8004c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0210 	mvn.w	r2, #16
 8004bec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e029      	b.n	8004c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c18:	f7fe faf0 	bl	80031fc <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d116      	bne.n	8004c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e007      	b.n	8004c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d1b5      	bne.n	8004bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8a:	d11b      	bne.n	8004cc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	f043 0204 	orr.w	r2, r3, #4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd4:	b08f      	sub	sp, #60	; 0x3c
 8004cd6:	af0a      	add	r7, sp, #40	; 0x28
 8004cd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e10f      	b.n	8004f04 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f008 ff86 	bl	800dc10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2203      	movs	r2, #3
 8004d08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f002 fb95 	bl	8007452 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	687e      	ldr	r6, [r7, #4]
 8004d30:	466d      	mov	r5, sp
 8004d32:	f106 0410 	add.w	r4, r6, #16
 8004d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d42:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d46:	1d33      	adds	r3, r6, #4
 8004d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d4a:	6838      	ldr	r0, [r7, #0]
 8004d4c:	f002 fa6c 	bl	8007228 <USB_CoreInit>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e0d0      	b.n	8004f04 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f002 fb83 	bl	8007474 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]
 8004d72:	e04a      	b.n	8004e0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d74:	7bfa      	ldrb	r2, [r7, #15]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	333d      	adds	r3, #61	; 0x3d
 8004d84:	2201      	movs	r2, #1
 8004d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d88:	7bfa      	ldrb	r2, [r7, #15]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	333c      	adds	r3, #60	; 0x3c
 8004d98:	7bfa      	ldrb	r2, [r7, #15]
 8004d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d9c:	7bfa      	ldrb	r2, [r7, #15]
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	b298      	uxth	r0, r3
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	3342      	adds	r3, #66	; 0x42
 8004db0:	4602      	mov	r2, r0
 8004db2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004db4:	7bfa      	ldrb	r2, [r7, #15]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	333f      	adds	r3, #63	; 0x3f
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004dc8:	7bfa      	ldrb	r2, [r7, #15]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	3344      	adds	r3, #68	; 0x44
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ddc:	7bfa      	ldrb	r2, [r7, #15]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	3348      	adds	r3, #72	; 0x48
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	3350      	adds	r3, #80	; 0x50
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	3301      	adds	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	7bfa      	ldrb	r2, [r7, #15]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d3af      	bcc.n	8004d74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e14:	2300      	movs	r3, #0
 8004e16:	73fb      	strb	r3, [r7, #15]
 8004e18:	e044      	b.n	8004ea4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e1a:	7bfa      	ldrb	r2, [r7, #15]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e30:	7bfa      	ldrb	r2, [r7, #15]
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	4613      	mov	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004e42:	7bfa      	ldrb	r2, [r7, #15]
 8004e44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e46:	7bfa      	ldrb	r2, [r7, #15]
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e5c:	7bfa      	ldrb	r2, [r7, #15]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
 8004ea4:	7bfa      	ldrb	r2, [r7, #15]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d3b5      	bcc.n	8004e1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	687e      	ldr	r6, [r7, #4]
 8004eb6:	466d      	mov	r5, sp
 8004eb8:	f106 0410 	add.w	r4, r6, #16
 8004ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ec4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ec8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ecc:	1d33      	adds	r3, r6, #4
 8004ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ed0:	6838      	ldr	r0, [r7, #0]
 8004ed2:	f002 fb1b 	bl	800750c <USB_DevInit>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e00d      	b.n	8004f04 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f003 fb97 	bl	8008630 <USB_DevDisconnect>

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_PCD_Start+0x1c>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e020      	b.n	8004f6a <HAL_PCD_Start+0x5e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d109      	bne.n	8004f4c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d005      	beq.n	8004f4c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f002 fa6d 	bl	8007430 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f003 fb47 	bl	80085ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f72:	b590      	push	{r4, r7, lr}
 8004f74:	b08d      	sub	sp, #52	; 0x34
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f003 fc05 	bl	8008798 <USB_GetMode>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f040 839d 	bne.w	80056d0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f003 fb69 	bl	8008672 <USB_ReadInterrupts>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8393 	beq.w	80056ce <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f003 fb60 	bl	8008672 <USB_ReadInterrupts>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d107      	bne.n	8004fcc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695a      	ldr	r2, [r3, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f002 0202 	and.w	r2, r2, #2
 8004fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f003 fb4e 	bl	8008672 <USB_ReadInterrupts>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d161      	bne.n	80050a4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0210 	bic.w	r2, r2, #16
 8004fee:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	f003 020f 	and.w	r2, r3, #15
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	4413      	add	r3, r2
 800500c:	3304      	adds	r3, #4
 800500e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	0c5b      	lsrs	r3, r3, #17
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	2b02      	cmp	r3, #2
 800501a:	d124      	bne.n	8005066 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d035      	beq.n	8005094 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6a38      	ldr	r0, [r7, #32]
 800503c:	f003 f985 	bl	800834a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800504c:	441a      	add	r2, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800505e:	441a      	add	r2, r3
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	619a      	str	r2, [r3, #24]
 8005064:	e016      	b.n	8005094 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	0c5b      	lsrs	r3, r3, #17
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	2b06      	cmp	r3, #6
 8005070:	d110      	bne.n	8005094 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005078:	2208      	movs	r2, #8
 800507a:	4619      	mov	r1, r3
 800507c:	6a38      	ldr	r0, [r7, #32]
 800507e:	f003 f964 	bl	800834a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800508e:	441a      	add	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0210 	orr.w	r2, r2, #16
 80050a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f003 fae2 	bl	8008672 <USB_ReadInterrupts>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050b8:	d16e      	bne.n	8005198 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f003 fae8 	bl	8008698 <USB_ReadDevAllOutEpInterrupt>
 80050c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80050ca:	e062      	b.n	8005192 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d057      	beq.n	8005186 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	4611      	mov	r1, r2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f003 fb0d 	bl	8008700 <USB_ReadDevOutEPInterrupt>
 80050e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00c      	beq.n	800510c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	461a      	mov	r2, r3
 8005100:	2301      	movs	r3, #1
 8005102:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fdb0 	bl	8005c6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00c      	beq.n	8005130 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005122:	461a      	mov	r2, r3
 8005124:	2308      	movs	r3, #8
 8005126:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 feaa 	bl	8005e84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b00      	cmp	r3, #0
 8005138:	d008      	beq.n	800514c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	461a      	mov	r2, r3
 8005148:	2310      	movs	r3, #16
 800514a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d008      	beq.n	8005168 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	461a      	mov	r2, r3
 8005164:	2320      	movs	r3, #32
 8005166:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	461a      	mov	r2, r3
 8005180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005184:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	3301      	adds	r3, #1
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	2b00      	cmp	r3, #0
 8005196:	d199      	bne.n	80050cc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f003 fa68 	bl	8008672 <USB_ReadInterrupts>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051ac:	f040 80c0 	bne.w	8005330 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f003 fa89 	bl	80086cc <USB_ReadDevAllInEpInterrupt>
 80051ba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80051c0:	e0b2      	b.n	8005328 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80a7 	beq.w	800531c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	4611      	mov	r1, r2
 80051d8:	4618      	mov	r0, r3
 80051da:	f003 faaf 	bl	800873c <USB_ReadDevInEPInterrupt>
 80051de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d057      	beq.n	800529a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	2201      	movs	r2, #1
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	43db      	mvns	r3, r3
 8005204:	69f9      	ldr	r1, [r7, #28]
 8005206:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800520a:	4013      	ands	r3, r2
 800520c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521a:	461a      	mov	r2, r3
 800521c:	2301      	movs	r3, #1
 800521e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d132      	bne.n	800528e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	4613      	mov	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	3348      	adds	r3, #72	; 0x48
 8005238:	6819      	ldr	r1, [r3, #0]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4403      	add	r3, r0
 8005248:	3344      	adds	r3, #68	; 0x44
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4419      	add	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005252:	4613      	mov	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4403      	add	r3, r0
 800525c:	3348      	adds	r3, #72	; 0x48
 800525e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	2b00      	cmp	r3, #0
 8005264:	d113      	bne.n	800528e <HAL_PCD_IRQHandler+0x31c>
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	3350      	adds	r3, #80	; 0x50
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d108      	bne.n	800528e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005286:	461a      	mov	r2, r3
 8005288:	2101      	movs	r1, #1
 800528a:	f003 fab7 	bl	80087fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	b2db      	uxtb	r3, r3
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f008 fd4a 	bl	800dd2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	461a      	mov	r2, r3
 80052b2:	2308      	movs	r3, #8
 80052b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	461a      	mov	r2, r3
 80052ce:	2310      	movs	r3, #16
 80052d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d008      	beq.n	80052ee <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e8:	461a      	mov	r2, r3
 80052ea:	2340      	movs	r3, #64	; 0x40
 80052ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005304:	461a      	mov	r2, r3
 8005306:	2302      	movs	r3, #2
 8005308:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fc1b 	bl	8005b52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	3301      	adds	r3, #1
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	f47f af49 	bne.w	80051c2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f003 f99c 	bl	8008672 <USB_ReadInterrupts>
 800533a:	4603      	mov	r3, r0
 800533c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005344:	d122      	bne.n	800538c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005360:	2b01      	cmp	r3, #1
 8005362:	d108      	bne.n	8005376 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800536c:	2100      	movs	r1, #0
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fe26 	bl	8005fc0 <HAL_PCDEx_LPM_Callback>
 8005374:	e002      	b.n	800537c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f008 fd50 	bl	800de1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695a      	ldr	r2, [r3, #20]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800538a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f003 f96e 	bl	8008672 <USB_ReadInterrupts>
 8005396:	4603      	mov	r3, r0
 8005398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800539c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a0:	d112      	bne.n	80053c8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d102      	bne.n	80053b8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f008 fd0c 	bl	800ddd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80053c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f003 f950 	bl	8008672 <USB_ReadInterrupts>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053dc:	f040 80c7 	bne.w	800556e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2110      	movs	r1, #16
 80053fa:	4618      	mov	r0, r3
 80053fc:	f002 f9ea 	bl	80077d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005400:	2300      	movs	r3, #0
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005404:	e056      	b.n	80054b4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005412:	461a      	mov	r2, r3
 8005414:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005418:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	440a      	add	r2, r1
 8005430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005438:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	440a      	add	r2, r1
 8005450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005454:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005458:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	461a      	mov	r2, r3
 8005468:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800546c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547e:	0151      	lsls	r1, r2, #5
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	440a      	add	r2, r1
 8005484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005488:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800548c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b0:	3301      	adds	r3, #1
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d3a3      	bcc.n	8005406 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80054d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d016      	beq.n	8005508 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ea:	f043 030b 	orr.w	r3, r3, #11
 80054ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005500:	f043 030b 	orr.w	r3, r3, #11
 8005504:	6453      	str	r3, [r2, #68]	; 0x44
 8005506:	e015      	b.n	8005534 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005516:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800551a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800551e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552e:	f043 030b 	orr.w	r3, r3, #11
 8005532:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005542:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005546:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005558:	461a      	mov	r2, r3
 800555a:	f003 f94f 	bl	80087fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695a      	ldr	r2, [r3, #20]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800556c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f003 f87d 	bl	8008672 <USB_ReadInterrupts>
 8005578:	4603      	mov	r3, r0
 800557a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800557e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005582:	d124      	bne.n	80055ce <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f003 f913 	bl	80087b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f002 f97b 	bl	800788e <USB_GetDevSpeed>
 8005598:	4603      	mov	r3, r0
 800559a:	461a      	mov	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681c      	ldr	r4, [r3, #0]
 80055a4:	f001 f958 	bl	8006858 <HAL_RCC_GetHCLKFreq>
 80055a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	4620      	mov	r0, r4
 80055b4:	f001 fe9a 	bl	80072ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f008 fbe0 	bl	800dd7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80055cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f003 f84d 	bl	8008672 <USB_ReadInterrupts>
 80055d8:	4603      	mov	r3, r0
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d10a      	bne.n	80055f8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f008 fbbd 	bl	800dd62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695a      	ldr	r2, [r3, #20]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f002 0208 	and.w	r2, r2, #8
 80055f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f003 f838 	bl	8008672 <USB_ReadInterrupts>
 8005602:	4603      	mov	r3, r0
 8005604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560c:	d10f      	bne.n	800562e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	b2db      	uxtb	r3, r3
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f008 fc1f 	bl	800de5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800562c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f003 f81d 	bl	8008672 <USB_ReadInterrupts>
 8005638:	4603      	mov	r3, r0
 800563a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800563e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005642:	d10f      	bne.n	8005664 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	b2db      	uxtb	r3, r3
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f008 fbf2 	bl	800de38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695a      	ldr	r2, [r3, #20]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f003 f802 	bl	8008672 <USB_ReadInterrupts>
 800566e:	4603      	mov	r3, r0
 8005670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005678:	d10a      	bne.n	8005690 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f008 fc00 	bl	800de80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800568e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f002 ffec 	bl	8008672 <USB_ReadInterrupts>
 800569a:	4603      	mov	r3, r0
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d115      	bne.n	80056d0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f008 fbf0 	bl	800de9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6859      	ldr	r1, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
 80056cc:	e000      	b.n	80056d0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80056ce:	bf00      	nop
    }
  }
}
 80056d0:	3734      	adds	r7, #52	; 0x34
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd90      	pop	{r4, r7, pc}

080056d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	460b      	mov	r3, r1
 80056e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_PCD_SetAddress+0x1a>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e013      	b.n	8005718 <HAL_PCD_SetAddress+0x42>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	78fa      	ldrb	r2, [r7, #3]
 80056fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	78fa      	ldrb	r2, [r7, #3]
 8005706:	4611      	mov	r1, r2
 8005708:	4618      	mov	r0, r3
 800570a:	f002 ff4a 	bl	80085a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	4608      	mov	r0, r1
 800572a:	4611      	mov	r1, r2
 800572c:	461a      	mov	r2, r3
 800572e:	4603      	mov	r3, r0
 8005730:	70fb      	strb	r3, [r7, #3]
 8005732:	460b      	mov	r3, r1
 8005734:	803b      	strh	r3, [r7, #0]
 8005736:	4613      	mov	r3, r2
 8005738:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800573e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005742:	2b00      	cmp	r3, #0
 8005744:	da0f      	bge.n	8005766 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	f003 020f 	and.w	r2, r3, #15
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	3338      	adds	r3, #56	; 0x38
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	4413      	add	r3, r2
 800575a:	3304      	adds	r3, #4
 800575c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	705a      	strb	r2, [r3, #1]
 8005764:	e00f      	b.n	8005786 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	f003 020f 	and.w	r2, r3, #15
 800576c:	4613      	mov	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	4413      	add	r3, r2
 800577c:	3304      	adds	r3, #4
 800577e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	b2da      	uxtb	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005792:	883a      	ldrh	r2, [r7, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	78ba      	ldrb	r2, [r7, #2]
 800579c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	785b      	ldrb	r3, [r3, #1]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d004      	beq.n	80057b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80057b0:	78bb      	ldrb	r3, [r7, #2]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d102      	bne.n	80057bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_PCD_EP_Open+0xaa>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e00e      	b.n	80057e8 <HAL_PCD_EP_Open+0xc8>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68f9      	ldr	r1, [r7, #12]
 80057d8:	4618      	mov	r0, r3
 80057da:	f002 f87d 	bl	80078d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80057e6:	7afb      	ldrb	r3, [r7, #11]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005800:	2b00      	cmp	r3, #0
 8005802:	da0f      	bge.n	8005824 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	f003 020f 	and.w	r2, r3, #15
 800580a:	4613      	mov	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	3338      	adds	r3, #56	; 0x38
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	4413      	add	r3, r2
 8005818:	3304      	adds	r3, #4
 800581a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	705a      	strb	r2, [r3, #1]
 8005822:	e00f      	b.n	8005844 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	f003 020f 	and.w	r2, r3, #15
 800582a:	4613      	mov	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	4413      	add	r3, r2
 800583a:	3304      	adds	r3, #4
 800583c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	b2da      	uxtb	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_PCD_EP_Close+0x6e>
 800585a:	2302      	movs	r3, #2
 800585c:	e00e      	b.n	800587c <HAL_PCD_EP_Close+0x8c>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	4618      	mov	r0, r3
 800586e:	f002 f8bb 	bl	80079e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	607a      	str	r2, [r7, #4]
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	460b      	mov	r3, r1
 8005892:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005894:	7afb      	ldrb	r3, [r7, #11]
 8005896:	f003 020f 	and.w	r2, r3, #15
 800589a:	4613      	mov	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	3304      	adds	r3, #4
 80058ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2200      	movs	r2, #0
 80058be:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2200      	movs	r2, #0
 80058c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058c6:	7afb      	ldrb	r3, [r7, #11]
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d102      	bne.n	80058e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058e0:	7afb      	ldrb	r3, [r7, #11]
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	6979      	ldr	r1, [r7, #20]
 80058f8:	f002 fb96 	bl	8008028 <USB_EP0StartXfer>
 80058fc:	e008      	b.n	8005910 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	461a      	mov	r2, r3
 800590a:	6979      	ldr	r1, [r7, #20]
 800590c:	f002 f948 	bl	8007ba0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	f003 020f 	and.w	r2, r3, #15
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800593c:	681b      	ldr	r3, [r3, #0]
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b086      	sub	sp, #24
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
 8005956:	460b      	mov	r3, r1
 8005958:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800595a:	7afb      	ldrb	r3, [r7, #11]
 800595c:	f003 020f 	and.w	r2, r3, #15
 8005960:	4613      	mov	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	1a9b      	subs	r3, r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	3338      	adds	r3, #56	; 0x38
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	3304      	adds	r3, #4
 8005970:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2200      	movs	r2, #0
 8005982:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2201      	movs	r2, #1
 8005988:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800598a:	7afb      	ldrb	r3, [r7, #11]
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	b2da      	uxtb	r2, r3
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d102      	bne.n	80059a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059a4:	7afb      	ldrb	r3, [r7, #11]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d109      	bne.n	80059c2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	6979      	ldr	r1, [r7, #20]
 80059bc:	f002 fb34 	bl	8008028 <USB_EP0StartXfer>
 80059c0:	e008      	b.n	80059d4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	6979      	ldr	r1, [r7, #20]
 80059d0:	f002 f8e6 	bl	8007ba0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	460b      	mov	r3, r1
 80059e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	f003 020f 	and.w	r2, r3, #15
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d901      	bls.n	80059fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e050      	b.n	8005a9e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da0f      	bge.n	8005a24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	f003 020f 	and.w	r2, r3, #15
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	3338      	adds	r3, #56	; 0x38
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4413      	add	r3, r2
 8005a18:	3304      	adds	r3, #4
 8005a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	705a      	strb	r2, [r3, #1]
 8005a22:	e00d      	b.n	8005a40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a24:	78fa      	ldrb	r2, [r7, #3]
 8005a26:	4613      	mov	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	4413      	add	r3, r2
 8005a36:	3304      	adds	r3, #4
 8005a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_PCD_EP_SetStall+0x82>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e01e      	b.n	8005a9e <HAL_PCD_EP_SetStall+0xc0>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68f9      	ldr	r1, [r7, #12]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f002 fcc3 	bl	80083fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	b2d9      	uxtb	r1, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f002 feb4 	bl	80087fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	f003 020f 	and.w	r2, r3, #15
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d901      	bls.n	8005ac4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e042      	b.n	8005b4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	da0f      	bge.n	8005aec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	f003 020f 	and.w	r2, r3, #15
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	3338      	adds	r3, #56	; 0x38
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	4413      	add	r3, r2
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	705a      	strb	r2, [r3, #1]
 8005aea:	e00f      	b.n	8005b0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	f003 020f 	and.w	r2, r3, #15
 8005af2:	4613      	mov	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	4413      	add	r3, r2
 8005b02:	3304      	adds	r3, #4
 8005b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_PCD_EP_ClrStall+0x86>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e00e      	b.n	8005b4a <HAL_PCD_EP_ClrStall+0xa4>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68f9      	ldr	r1, [r7, #12]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f002 fccb 	bl	80084d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b08a      	sub	sp, #40	; 0x28
 8005b56:	af02      	add	r7, sp, #8
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	3338      	adds	r3, #56	; 0x38
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	3304      	adds	r3, #4
 8005b78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d901      	bls.n	8005b8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e06c      	b.n	8005c64 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	695a      	ldr	r2, [r3, #20]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d902      	bls.n	8005ba6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	3303      	adds	r3, #3
 8005baa:	089b      	lsrs	r3, r3, #2
 8005bac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bae:	e02b      	b.n	8005c08 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	695a      	ldr	r2, [r3, #20]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d902      	bls.n	8005bcc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	3303      	adds	r3, #3
 8005bd0:	089b      	lsrs	r3, r3, #2
 8005bd2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68d9      	ldr	r1, [r3, #12]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	4603      	mov	r3, r0
 8005bea:	6978      	ldr	r0, [r7, #20]
 8005bec:	f002 fb6f 	bl	80082ce <USB_WritePacket>

    ep->xfer_buff  += len;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	441a      	add	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	699a      	ldr	r2, [r3, #24]
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	441a      	add	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d809      	bhi.n	8005c32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d203      	bcs.n	8005c32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1be      	bne.n	8005bb0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	695a      	ldr	r2, [r3, #20]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d811      	bhi.n	8005c62 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	2201      	movs	r2, #1
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	43db      	mvns	r3, r3
 8005c58:	6939      	ldr	r1, [r7, #16]
 8005c5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c5e:	4013      	ands	r3, r2
 8005c60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	333c      	adds	r3, #60	; 0x3c
 8005c84:	3304      	adds	r3, #4
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	f040 80a0 	bne.w	8005de4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d015      	beq.n	8005cda <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4a72      	ldr	r2, [pc, #456]	; (8005e7c <PCD_EP_OutXfrComplete_int+0x210>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	f240 80dd 	bls.w	8005e72 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 80d7 	beq.w	8005e72 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd6:	6093      	str	r3, [r2, #8]
 8005cd8:	e0cb      	b.n	8005e72 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d009      	beq.n	8005cf8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	2320      	movs	r3, #32
 8005cf4:	6093      	str	r3, [r2, #8]
 8005cf6:	e0bc      	b.n	8005e72 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f040 80b7 	bne.w	8005e72 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4a5d      	ldr	r2, [pc, #372]	; (8005e7c <PCD_EP_OutXfrComplete_int+0x210>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d90f      	bls.n	8005d2c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	461a      	mov	r2, r3
 8005d24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d28:	6093      	str	r3, [r2, #8]
 8005d2a:	e0a2      	b.n	8005e72 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005d3e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	0159      	lsls	r1, r3, #5
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	440b      	add	r3, r1
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005d52:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	1a9b      	subs	r3, r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4403      	add	r3, r0
 8005d62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005d66:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d7a:	6819      	ldr	r1, [r3, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4403      	add	r3, r0
 8005d8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4419      	add	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	4613      	mov	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4403      	add	r3, r0
 8005da0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005da4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d114      	bne.n	8005dd6 <PCD_EP_OutXfrComplete_int+0x16a>
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	4613      	mov	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d108      	bne.n	8005dd6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005dce:	461a      	mov	r2, r3
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	f002 fd13 	bl	80087fc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f007 ff8b 	bl	800dcf8 <HAL_PCD_DataOutStageCallback>
 8005de2:	e046      	b.n	8005e72 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a26      	ldr	r2, [pc, #152]	; (8005e80 <PCD_EP_OutXfrComplete_int+0x214>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d124      	bne.n	8005e36 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e02:	461a      	mov	r2, r3
 8005e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e08:	6093      	str	r3, [r2, #8]
 8005e0a:	e032      	b.n	8005e72 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d008      	beq.n	8005e28 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	461a      	mov	r2, r3
 8005e24:	2320      	movs	r3, #32
 8005e26:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f007 ff62 	bl	800dcf8 <HAL_PCD_DataOutStageCallback>
 8005e34:	e01d      	b.n	8005e72 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d114      	bne.n	8005e66 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005e3c:	6879      	ldr	r1, [r7, #4]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d108      	bne.n	8005e66 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e5e:	461a      	mov	r2, r3
 8005e60:	2100      	movs	r1, #0
 8005e62:	f002 fccb 	bl	80087fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f007 ff43 	bl	800dcf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	4f54300a 	.word	0x4f54300a
 8005e80:	4f54310a 	.word	0x4f54310a

08005e84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	333c      	adds	r3, #60	; 0x3c
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <PCD_EP_OutSetupPacket_int+0x88>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d90e      	bls.n	8005ed8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d009      	beq.n	8005ed8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ed6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f007 fefb 	bl	800dcd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <PCD_EP_OutSetupPacket_int+0x88>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d90c      	bls.n	8005f00 <PCD_EP_OutSetupPacket_int+0x7c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d108      	bne.n	8005f00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ef8:	461a      	mov	r2, r3
 8005efa:	2101      	movs	r1, #1
 8005efc:	f002 fc7e 	bl	80087fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	4f54300a 	.word	0x4f54300a

08005f10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d107      	bne.n	8005f3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f2e:	883b      	ldrh	r3, [r7, #0]
 8005f30:	0419      	lsls	r1, r3, #16
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8005f3c:	e028      	b.n	8005f90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	4413      	add	r3, r2
 8005f4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	73fb      	strb	r3, [r7, #15]
 8005f50:	e00d      	b.n	8005f6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	3340      	adds	r3, #64	; 0x40
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	0c1b      	lsrs	r3, r3, #16
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	4413      	add	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	73fb      	strb	r3, [r7, #15]
 8005f6e:	7bfa      	ldrb	r2, [r7, #15]
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d3ec      	bcc.n	8005f52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f78:	883b      	ldrh	r3, [r7, #0]
 8005f7a:	0418      	lsls	r0, r3, #16
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6819      	ldr	r1, [r3, #0]
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	4302      	orrs	r2, r0
 8005f88:	3340      	adds	r3, #64	; 0x40
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	887a      	ldrh	r2, [r7, #2]
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e264      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d075      	beq.n	80060e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ff6:	4ba3      	ldr	r3, [pc, #652]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 030c 	and.w	r3, r3, #12
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d00c      	beq.n	800601c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006002:	4ba0      	ldr	r3, [pc, #640]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800600a:	2b08      	cmp	r3, #8
 800600c:	d112      	bne.n	8006034 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800600e:	4b9d      	ldr	r3, [pc, #628]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800601a:	d10b      	bne.n	8006034 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800601c:	4b99      	ldr	r3, [pc, #612]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d05b      	beq.n	80060e0 <HAL_RCC_OscConfig+0x108>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d157      	bne.n	80060e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e23f      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800603c:	d106      	bne.n	800604c <HAL_RCC_OscConfig+0x74>
 800603e:	4b91      	ldr	r3, [pc, #580]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a90      	ldr	r2, [pc, #576]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	e01d      	b.n	8006088 <HAL_RCC_OscConfig+0xb0>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006054:	d10c      	bne.n	8006070 <HAL_RCC_OscConfig+0x98>
 8006056:	4b8b      	ldr	r3, [pc, #556]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a8a      	ldr	r2, [pc, #552]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 800605c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	4b88      	ldr	r3, [pc, #544]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a87      	ldr	r2, [pc, #540]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	e00b      	b.n	8006088 <HAL_RCC_OscConfig+0xb0>
 8006070:	4b84      	ldr	r3, [pc, #528]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a83      	ldr	r2, [pc, #524]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	4b81      	ldr	r3, [pc, #516]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a80      	ldr	r2, [pc, #512]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d013      	beq.n	80060b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006090:	f7fd f8b4 	bl	80031fc <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006098:	f7fd f8b0 	bl	80031fc <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b64      	cmp	r3, #100	; 0x64
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e204      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060aa:	4b76      	ldr	r3, [pc, #472]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0f0      	beq.n	8006098 <HAL_RCC_OscConfig+0xc0>
 80060b6:	e014      	b.n	80060e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b8:	f7fd f8a0 	bl	80031fc <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060c0:	f7fd f89c 	bl	80031fc <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b64      	cmp	r3, #100	; 0x64
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e1f0      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060d2:	4b6c      	ldr	r3, [pc, #432]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0xe8>
 80060de:	e000      	b.n	80060e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d063      	beq.n	80061b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060ee:	4b65      	ldr	r3, [pc, #404]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 030c 	and.w	r3, r3, #12
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00b      	beq.n	8006112 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060fa:	4b62      	ldr	r3, [pc, #392]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006102:	2b08      	cmp	r3, #8
 8006104:	d11c      	bne.n	8006140 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006106:	4b5f      	ldr	r3, [pc, #380]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d116      	bne.n	8006140 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006112:	4b5c      	ldr	r3, [pc, #368]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <HAL_RCC_OscConfig+0x152>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d001      	beq.n	800612a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e1c4      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612a:	4b56      	ldr	r3, [pc, #344]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	4952      	ldr	r1, [pc, #328]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 800613a:	4313      	orrs	r3, r2
 800613c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800613e:	e03a      	b.n	80061b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d020      	beq.n	800618a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006148:	4b4f      	ldr	r3, [pc, #316]	; (8006288 <HAL_RCC_OscConfig+0x2b0>)
 800614a:	2201      	movs	r2, #1
 800614c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614e:	f7fd f855 	bl	80031fc <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006156:	f7fd f851 	bl	80031fc <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e1a5      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006168:	4b46      	ldr	r3, [pc, #280]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0f0      	beq.n	8006156 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006174:	4b43      	ldr	r3, [pc, #268]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	4940      	ldr	r1, [pc, #256]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006184:	4313      	orrs	r3, r2
 8006186:	600b      	str	r3, [r1, #0]
 8006188:	e015      	b.n	80061b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800618a:	4b3f      	ldr	r3, [pc, #252]	; (8006288 <HAL_RCC_OscConfig+0x2b0>)
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006190:	f7fd f834 	bl	80031fc <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006198:	f7fd f830 	bl	80031fc <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e184      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061aa:	4b36      	ldr	r3, [pc, #216]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f0      	bne.n	8006198 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d030      	beq.n	8006224 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d016      	beq.n	80061f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061ca:	4b30      	ldr	r3, [pc, #192]	; (800628c <HAL_RCC_OscConfig+0x2b4>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d0:	f7fd f814 	bl	80031fc <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061d8:	f7fd f810 	bl	80031fc <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e164      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ea:	4b26      	ldr	r3, [pc, #152]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 80061ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0f0      	beq.n	80061d8 <HAL_RCC_OscConfig+0x200>
 80061f6:	e015      	b.n	8006224 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061f8:	4b24      	ldr	r3, [pc, #144]	; (800628c <HAL_RCC_OscConfig+0x2b4>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061fe:	f7fc fffd 	bl	80031fc <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006206:	f7fc fff9 	bl	80031fc <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e14d      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006218:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 800621a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f0      	bne.n	8006206 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80a0 	beq.w	8006372 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006232:	2300      	movs	r3, #0
 8006234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006236:	4b13      	ldr	r3, [pc, #76]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10f      	bne.n	8006262 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006242:	2300      	movs	r3, #0
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	4a0e      	ldr	r2, [pc, #56]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 800624c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006250:	6413      	str	r3, [r2, #64]	; 0x40
 8006252:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <HAL_RCC_OscConfig+0x2ac>)
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625a:	60bb      	str	r3, [r7, #8]
 800625c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800625e:	2301      	movs	r3, #1
 8006260:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006262:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <HAL_RCC_OscConfig+0x2b8>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626a:	2b00      	cmp	r3, #0
 800626c:	d121      	bne.n	80062b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800626e:	4b08      	ldr	r3, [pc, #32]	; (8006290 <HAL_RCC_OscConfig+0x2b8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a07      	ldr	r2, [pc, #28]	; (8006290 <HAL_RCC_OscConfig+0x2b8>)
 8006274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800627a:	f7fc ffbf 	bl	80031fc <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006280:	e011      	b.n	80062a6 <HAL_RCC_OscConfig+0x2ce>
 8006282:	bf00      	nop
 8006284:	40023800 	.word	0x40023800
 8006288:	42470000 	.word	0x42470000
 800628c:	42470e80 	.word	0x42470e80
 8006290:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006294:	f7fc ffb2 	bl	80031fc <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e106      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a6:	4b85      	ldr	r3, [pc, #532]	; (80064bc <HAL_RCC_OscConfig+0x4e4>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0f0      	beq.n	8006294 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d106      	bne.n	80062c8 <HAL_RCC_OscConfig+0x2f0>
 80062ba:	4b81      	ldr	r3, [pc, #516]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 80062bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062be:	4a80      	ldr	r2, [pc, #512]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 80062c0:	f043 0301 	orr.w	r3, r3, #1
 80062c4:	6713      	str	r3, [r2, #112]	; 0x70
 80062c6:	e01c      	b.n	8006302 <HAL_RCC_OscConfig+0x32a>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	2b05      	cmp	r3, #5
 80062ce:	d10c      	bne.n	80062ea <HAL_RCC_OscConfig+0x312>
 80062d0:	4b7b      	ldr	r3, [pc, #492]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 80062d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d4:	4a7a      	ldr	r2, [pc, #488]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 80062d6:	f043 0304 	orr.w	r3, r3, #4
 80062da:	6713      	str	r3, [r2, #112]	; 0x70
 80062dc:	4b78      	ldr	r3, [pc, #480]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 80062de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e0:	4a77      	ldr	r2, [pc, #476]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 80062e2:	f043 0301 	orr.w	r3, r3, #1
 80062e6:	6713      	str	r3, [r2, #112]	; 0x70
 80062e8:	e00b      	b.n	8006302 <HAL_RCC_OscConfig+0x32a>
 80062ea:	4b75      	ldr	r3, [pc, #468]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	4a74      	ldr	r2, [pc, #464]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 80062f0:	f023 0301 	bic.w	r3, r3, #1
 80062f4:	6713      	str	r3, [r2, #112]	; 0x70
 80062f6:	4b72      	ldr	r3, [pc, #456]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 80062f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fa:	4a71      	ldr	r2, [pc, #452]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 80062fc:	f023 0304 	bic.w	r3, r3, #4
 8006300:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d015      	beq.n	8006336 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630a:	f7fc ff77 	bl	80031fc <HAL_GetTick>
 800630e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006310:	e00a      	b.n	8006328 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006312:	f7fc ff73 	bl	80031fc <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006320:	4293      	cmp	r3, r2
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e0c5      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006328:	4b65      	ldr	r3, [pc, #404]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 800632a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0ee      	beq.n	8006312 <HAL_RCC_OscConfig+0x33a>
 8006334:	e014      	b.n	8006360 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006336:	f7fc ff61 	bl	80031fc <HAL_GetTick>
 800633a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800633c:	e00a      	b.n	8006354 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800633e:	f7fc ff5d 	bl	80031fc <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	f241 3288 	movw	r2, #5000	; 0x1388
 800634c:	4293      	cmp	r3, r2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e0af      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006354:	4b5a      	ldr	r3, [pc, #360]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1ee      	bne.n	800633e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006360:	7dfb      	ldrb	r3, [r7, #23]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d105      	bne.n	8006372 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006366:	4b56      	ldr	r3, [pc, #344]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	4a55      	ldr	r2, [pc, #340]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 800636c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006370:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 809b 	beq.w	80064b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800637c:	4b50      	ldr	r3, [pc, #320]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 030c 	and.w	r3, r3, #12
 8006384:	2b08      	cmp	r3, #8
 8006386:	d05c      	beq.n	8006442 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d141      	bne.n	8006414 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006390:	4b4c      	ldr	r3, [pc, #304]	; (80064c4 <HAL_RCC_OscConfig+0x4ec>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006396:	f7fc ff31 	bl	80031fc <HAL_GetTick>
 800639a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800639c:	e008      	b.n	80063b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800639e:	f7fc ff2d 	bl	80031fc <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e081      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b0:	4b43      	ldr	r3, [pc, #268]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1f0      	bne.n	800639e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	019b      	lsls	r3, r3, #6
 80063cc:	431a      	orrs	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	3b01      	subs	r3, #1
 80063d6:	041b      	lsls	r3, r3, #16
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063de:	061b      	lsls	r3, r3, #24
 80063e0:	4937      	ldr	r1, [pc, #220]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063e6:	4b37      	ldr	r3, [pc, #220]	; (80064c4 <HAL_RCC_OscConfig+0x4ec>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ec:	f7fc ff06 	bl	80031fc <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063f4:	f7fc ff02 	bl	80031fc <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e056      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006406:	4b2e      	ldr	r3, [pc, #184]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f0      	beq.n	80063f4 <HAL_RCC_OscConfig+0x41c>
 8006412:	e04e      	b.n	80064b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006414:	4b2b      	ldr	r3, [pc, #172]	; (80064c4 <HAL_RCC_OscConfig+0x4ec>)
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641a:	f7fc feef 	bl	80031fc <HAL_GetTick>
 800641e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006420:	e008      	b.n	8006434 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006422:	f7fc feeb 	bl	80031fc <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e03f      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006434:	4b22      	ldr	r3, [pc, #136]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f0      	bne.n	8006422 <HAL_RCC_OscConfig+0x44a>
 8006440:	e037      	b.n	80064b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e032      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800644e:	4b1c      	ldr	r3, [pc, #112]	; (80064c0 <HAL_RCC_OscConfig+0x4e8>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d028      	beq.n	80064ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006466:	429a      	cmp	r2, r3
 8006468:	d121      	bne.n	80064ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006474:	429a      	cmp	r2, r3
 8006476:	d11a      	bne.n	80064ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800647e:	4013      	ands	r3, r2
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006484:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006486:	4293      	cmp	r3, r2
 8006488:	d111      	bne.n	80064ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	3b01      	subs	r3, #1
 8006498:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800649a:	429a      	cmp	r2, r3
 800649c:	d107      	bne.n	80064ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d001      	beq.n	80064b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40007000 	.word	0x40007000
 80064c0:	40023800 	.word	0x40023800
 80064c4:	42470060 	.word	0x42470060

080064c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0cc      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064dc:	4b68      	ldr	r3, [pc, #416]	; (8006680 <HAL_RCC_ClockConfig+0x1b8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d90c      	bls.n	8006504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ea:	4b65      	ldr	r3, [pc, #404]	; (8006680 <HAL_RCC_ClockConfig+0x1b8>)
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064f2:	4b63      	ldr	r3, [pc, #396]	; (8006680 <HAL_RCC_ClockConfig+0x1b8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d001      	beq.n	8006504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0b8      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d020      	beq.n	8006552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800651c:	4b59      	ldr	r3, [pc, #356]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	4a58      	ldr	r2, [pc, #352]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006534:	4b53      	ldr	r3, [pc, #332]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	4a52      	ldr	r2, [pc, #328]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800653e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006540:	4b50      	ldr	r3, [pc, #320]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	494d      	ldr	r1, [pc, #308]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800654e:	4313      	orrs	r3, r2
 8006550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d044      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d107      	bne.n	8006576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006566:	4b47      	ldr	r3, [pc, #284]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d119      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e07f      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d003      	beq.n	8006586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006582:	2b03      	cmp	r3, #3
 8006584:	d107      	bne.n	8006596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006586:	4b3f      	ldr	r3, [pc, #252]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d109      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e06f      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006596:	4b3b      	ldr	r3, [pc, #236]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e067      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065a6:	4b37      	ldr	r3, [pc, #220]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f023 0203 	bic.w	r2, r3, #3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	4934      	ldr	r1, [pc, #208]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065b8:	f7fc fe20 	bl	80031fc <HAL_GetTick>
 80065bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065be:	e00a      	b.n	80065d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c0:	f7fc fe1c 	bl	80031fc <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e04f      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d6:	4b2b      	ldr	r3, [pc, #172]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 020c 	and.w	r2, r3, #12
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d1eb      	bne.n	80065c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065e8:	4b25      	ldr	r3, [pc, #148]	; (8006680 <HAL_RCC_ClockConfig+0x1b8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d20c      	bcs.n	8006610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f6:	4b22      	ldr	r3, [pc, #136]	; (8006680 <HAL_RCC_ClockConfig+0x1b8>)
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fe:	4b20      	ldr	r3, [pc, #128]	; (8006680 <HAL_RCC_ClockConfig+0x1b8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d001      	beq.n	8006610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e032      	b.n	8006676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d008      	beq.n	800662e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800661c:	4b19      	ldr	r3, [pc, #100]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	4916      	ldr	r1, [pc, #88]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800662a:	4313      	orrs	r3, r2
 800662c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0308 	and.w	r3, r3, #8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d009      	beq.n	800664e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800663a:	4b12      	ldr	r3, [pc, #72]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	490e      	ldr	r1, [pc, #56]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 800664a:	4313      	orrs	r3, r2
 800664c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800664e:	f000 f821 	bl	8006694 <HAL_RCC_GetSysClockFreq>
 8006652:	4602      	mov	r2, r0
 8006654:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <HAL_RCC_ClockConfig+0x1bc>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	091b      	lsrs	r3, r3, #4
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	490a      	ldr	r1, [pc, #40]	; (8006688 <HAL_RCC_ClockConfig+0x1c0>)
 8006660:	5ccb      	ldrb	r3, [r1, r3]
 8006662:	fa22 f303 	lsr.w	r3, r2, r3
 8006666:	4a09      	ldr	r2, [pc, #36]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 8006668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800666a:	4b09      	ldr	r3, [pc, #36]	; (8006690 <HAL_RCC_ClockConfig+0x1c8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4618      	mov	r0, r3
 8006670:	f7fc fc8e 	bl	8002f90 <HAL_InitTick>

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40023c00 	.word	0x40023c00
 8006684:	40023800 	.word	0x40023800
 8006688:	0800ef94 	.word	0x0800ef94
 800668c:	20000000 	.word	0x20000000
 8006690:	20000004 	.word	0x20000004

08006694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006694:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	607b      	str	r3, [r7, #4]
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	2300      	movs	r3, #0
 80066a6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066ac:	4b67      	ldr	r3, [pc, #412]	; (800684c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f003 030c 	and.w	r3, r3, #12
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d00d      	beq.n	80066d4 <HAL_RCC_GetSysClockFreq+0x40>
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	f200 80bd 	bhi.w	8006838 <HAL_RCC_GetSysClockFreq+0x1a4>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_RCC_GetSysClockFreq+0x34>
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d003      	beq.n	80066ce <HAL_RCC_GetSysClockFreq+0x3a>
 80066c6:	e0b7      	b.n	8006838 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066c8:	4b61      	ldr	r3, [pc, #388]	; (8006850 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80066ca:	60bb      	str	r3, [r7, #8]
       break;
 80066cc:	e0b7      	b.n	800683e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066ce:	4b61      	ldr	r3, [pc, #388]	; (8006854 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80066d0:	60bb      	str	r3, [r7, #8]
      break;
 80066d2:	e0b4      	b.n	800683e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066d4:	4b5d      	ldr	r3, [pc, #372]	; (800684c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066de:	4b5b      	ldr	r3, [pc, #364]	; (800684c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d04d      	beq.n	8006786 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ea:	4b58      	ldr	r3, [pc, #352]	; (800684c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	099b      	lsrs	r3, r3, #6
 80066f0:	461a      	mov	r2, r3
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80066fa:	f04f 0100 	mov.w	r1, #0
 80066fe:	ea02 0800 	and.w	r8, r2, r0
 8006702:	ea03 0901 	and.w	r9, r3, r1
 8006706:	4640      	mov	r0, r8
 8006708:	4649      	mov	r1, r9
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	014b      	lsls	r3, r1, #5
 8006714:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006718:	0142      	lsls	r2, r0, #5
 800671a:	4610      	mov	r0, r2
 800671c:	4619      	mov	r1, r3
 800671e:	ebb0 0008 	subs.w	r0, r0, r8
 8006722:	eb61 0109 	sbc.w	r1, r1, r9
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	018b      	lsls	r3, r1, #6
 8006730:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006734:	0182      	lsls	r2, r0, #6
 8006736:	1a12      	subs	r2, r2, r0
 8006738:	eb63 0301 	sbc.w	r3, r3, r1
 800673c:	f04f 0000 	mov.w	r0, #0
 8006740:	f04f 0100 	mov.w	r1, #0
 8006744:	00d9      	lsls	r1, r3, #3
 8006746:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800674a:	00d0      	lsls	r0, r2, #3
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	eb12 0208 	adds.w	r2, r2, r8
 8006754:	eb43 0309 	adc.w	r3, r3, r9
 8006758:	f04f 0000 	mov.w	r0, #0
 800675c:	f04f 0100 	mov.w	r1, #0
 8006760:	0259      	lsls	r1, r3, #9
 8006762:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006766:	0250      	lsls	r0, r2, #9
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4610      	mov	r0, r2
 800676e:	4619      	mov	r1, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	461a      	mov	r2, r3
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	f7fa fa50 	bl	8000c1c <__aeabi_uldivmod>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4613      	mov	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	e04a      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006786:	4b31      	ldr	r3, [pc, #196]	; (800684c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	099b      	lsrs	r3, r3, #6
 800678c:	461a      	mov	r2, r3
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006796:	f04f 0100 	mov.w	r1, #0
 800679a:	ea02 0400 	and.w	r4, r2, r0
 800679e:	ea03 0501 	and.w	r5, r3, r1
 80067a2:	4620      	mov	r0, r4
 80067a4:	4629      	mov	r1, r5
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	f04f 0300 	mov.w	r3, #0
 80067ae:	014b      	lsls	r3, r1, #5
 80067b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80067b4:	0142      	lsls	r2, r0, #5
 80067b6:	4610      	mov	r0, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	1b00      	subs	r0, r0, r4
 80067bc:	eb61 0105 	sbc.w	r1, r1, r5
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	018b      	lsls	r3, r1, #6
 80067ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80067ce:	0182      	lsls	r2, r0, #6
 80067d0:	1a12      	subs	r2, r2, r0
 80067d2:	eb63 0301 	sbc.w	r3, r3, r1
 80067d6:	f04f 0000 	mov.w	r0, #0
 80067da:	f04f 0100 	mov.w	r1, #0
 80067de:	00d9      	lsls	r1, r3, #3
 80067e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067e4:	00d0      	lsls	r0, r2, #3
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	1912      	adds	r2, r2, r4
 80067ec:	eb45 0303 	adc.w	r3, r5, r3
 80067f0:	f04f 0000 	mov.w	r0, #0
 80067f4:	f04f 0100 	mov.w	r1, #0
 80067f8:	0299      	lsls	r1, r3, #10
 80067fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80067fe:	0290      	lsls	r0, r2, #10
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4610      	mov	r0, r2
 8006806:	4619      	mov	r1, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	461a      	mov	r2, r3
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	f7fa fa04 	bl	8000c1c <__aeabi_uldivmod>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4613      	mov	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	0c1b      	lsrs	r3, r3, #16
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	3301      	adds	r3, #1
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	fbb2 f3f3 	udiv	r3, r2, r3
 8006834:	60bb      	str	r3, [r7, #8]
      break;
 8006836:	e002      	b.n	800683e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006838:	4b05      	ldr	r3, [pc, #20]	; (8006850 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800683a:	60bb      	str	r3, [r7, #8]
      break;
 800683c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800683e:	68bb      	ldr	r3, [r7, #8]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800684a:	bf00      	nop
 800684c:	40023800 	.word	0x40023800
 8006850:	00f42400 	.word	0x00f42400
 8006854:	007a1200 	.word	0x007a1200

08006858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800685c:	4b03      	ldr	r3, [pc, #12]	; (800686c <HAL_RCC_GetHCLKFreq+0x14>)
 800685e:	681b      	ldr	r3, [r3, #0]
}
 8006860:	4618      	mov	r0, r3
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20000000 	.word	0x20000000

08006870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006874:	f7ff fff0 	bl	8006858 <HAL_RCC_GetHCLKFreq>
 8006878:	4602      	mov	r2, r0
 800687a:	4b05      	ldr	r3, [pc, #20]	; (8006890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	0a9b      	lsrs	r3, r3, #10
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	4903      	ldr	r1, [pc, #12]	; (8006894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006886:	5ccb      	ldrb	r3, [r1, r3]
 8006888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800688c:	4618      	mov	r0, r3
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40023800 	.word	0x40023800
 8006894:	0800efa4 	.word	0x0800efa4

08006898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800689c:	f7ff ffdc 	bl	8006858 <HAL_RCC_GetHCLKFreq>
 80068a0:	4602      	mov	r2, r0
 80068a2:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	0b5b      	lsrs	r3, r3, #13
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	4903      	ldr	r1, [pc, #12]	; (80068bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80068ae:	5ccb      	ldrb	r3, [r1, r3]
 80068b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40023800 	.word	0x40023800
 80068bc:	0800efa4 	.word	0x0800efa4

080068c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	220f      	movs	r2, #15
 80068ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068d0:	4b12      	ldr	r3, [pc, #72]	; (800691c <HAL_RCC_GetClockConfig+0x5c>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 0203 	and.w	r2, r3, #3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80068dc:	4b0f      	ldr	r3, [pc, #60]	; (800691c <HAL_RCC_GetClockConfig+0x5c>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80068e8:	4b0c      	ldr	r3, [pc, #48]	; (800691c <HAL_RCC_GetClockConfig+0x5c>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80068f4:	4b09      	ldr	r3, [pc, #36]	; (800691c <HAL_RCC_GetClockConfig+0x5c>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	08db      	lsrs	r3, r3, #3
 80068fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006902:	4b07      	ldr	r3, [pc, #28]	; (8006920 <HAL_RCC_GetClockConfig+0x60>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0207 	and.w	r2, r3, #7
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	601a      	str	r2, [r3, #0]
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40023800 	.word	0x40023800
 8006920:	40023c00 	.word	0x40023c00

08006924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e041      	b.n	80069ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fc faf8 	bl	8002f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3304      	adds	r3, #4
 8006960:	4619      	mov	r1, r3
 8006962:	4610      	mov	r0, r2
 8006964:	f000 fa96 	bl	8006e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d001      	beq.n	80069dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e04e      	b.n	8006a7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0201 	orr.w	r2, r2, #1
 80069f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a23      	ldr	r2, [pc, #140]	; (8006a88 <HAL_TIM_Base_Start_IT+0xc4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d022      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a06:	d01d      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1f      	ldr	r2, [pc, #124]	; (8006a8c <HAL_TIM_Base_Start_IT+0xc8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d018      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1e      	ldr	r2, [pc, #120]	; (8006a90 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1c      	ldr	r2, [pc, #112]	; (8006a94 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00e      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1b      	ldr	r2, [pc, #108]	; (8006a98 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d009      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <HAL_TIM_Base_Start_IT+0xd8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x80>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a18      	ldr	r2, [pc, #96]	; (8006aa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d111      	bne.n	8006a68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b06      	cmp	r3, #6
 8006a54:	d010      	beq.n	8006a78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0201 	orr.w	r2, r2, #1
 8006a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a66:	e007      	b.n	8006a78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0201 	orr.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40000400 	.word	0x40000400
 8006a90:	40000800 	.word	0x40000800
 8006a94:	40000c00 	.word	0x40000c00
 8006a98:	40010400 	.word	0x40010400
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40001800 	.word	0x40001800

08006aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d122      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d11b      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0202 	mvn.w	r2, #2
 8006ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f9b5 	bl	8006e56 <HAL_TIM_IC_CaptureCallback>
 8006aec:	e005      	b.n	8006afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f9a7 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f9b8 	bl	8006e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d122      	bne.n	8006b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d11b      	bne.n	8006b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0204 	mvn.w	r2, #4
 8006b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f98b 	bl	8006e56 <HAL_TIM_IC_CaptureCallback>
 8006b40:	e005      	b.n	8006b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f97d 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f98e 	bl	8006e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	d122      	bne.n	8006ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d11b      	bne.n	8006ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f06f 0208 	mvn.w	r2, #8
 8006b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f961 	bl	8006e56 <HAL_TIM_IC_CaptureCallback>
 8006b94:	e005      	b.n	8006ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f953 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f964 	bl	8006e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	2b10      	cmp	r3, #16
 8006bb4:	d122      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f003 0310 	and.w	r3, r3, #16
 8006bc0:	2b10      	cmp	r3, #16
 8006bc2:	d11b      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f06f 0210 	mvn.w	r2, #16
 8006bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2208      	movs	r2, #8
 8006bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f937 	bl	8006e56 <HAL_TIM_IC_CaptureCallback>
 8006be8:	e005      	b.n	8006bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f929 	bl	8006e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f93a 	bl	8006e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d10e      	bne.n	8006c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d107      	bne.n	8006c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f06f 0201 	mvn.w	r2, #1
 8006c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fc f8d0 	bl	8002dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c32:	2b80      	cmp	r3, #128	; 0x80
 8006c34:	d10e      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c40:	2b80      	cmp	r3, #128	; 0x80
 8006c42:	d107      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fae0 	bl	8007214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d10e      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6c:	2b40      	cmp	r3, #64	; 0x40
 8006c6e:	d107      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f8ff 	bl	8006e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d10e      	bne.n	8006cac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	d107      	bne.n	8006cac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0220 	mvn.w	r2, #32
 8006ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 faaa 	bl	8007200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cac:	bf00      	nop
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_TIM_ConfigClockSource+0x1c>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e0b4      	b.n	8006e3a <HAL_TIM_ConfigClockSource+0x186>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d08:	d03e      	beq.n	8006d88 <HAL_TIM_ConfigClockSource+0xd4>
 8006d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0e:	f200 8087 	bhi.w	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d16:	f000 8086 	beq.w	8006e26 <HAL_TIM_ConfigClockSource+0x172>
 8006d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1e:	d87f      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d20:	2b70      	cmp	r3, #112	; 0x70
 8006d22:	d01a      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0xa6>
 8006d24:	2b70      	cmp	r3, #112	; 0x70
 8006d26:	d87b      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d28:	2b60      	cmp	r3, #96	; 0x60
 8006d2a:	d050      	beq.n	8006dce <HAL_TIM_ConfigClockSource+0x11a>
 8006d2c:	2b60      	cmp	r3, #96	; 0x60
 8006d2e:	d877      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d30:	2b50      	cmp	r3, #80	; 0x50
 8006d32:	d03c      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0xfa>
 8006d34:	2b50      	cmp	r3, #80	; 0x50
 8006d36:	d873      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d38:	2b40      	cmp	r3, #64	; 0x40
 8006d3a:	d058      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0x13a>
 8006d3c:	2b40      	cmp	r3, #64	; 0x40
 8006d3e:	d86f      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d40:	2b30      	cmp	r3, #48	; 0x30
 8006d42:	d064      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x15a>
 8006d44:	2b30      	cmp	r3, #48	; 0x30
 8006d46:	d86b      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d060      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x15a>
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	d867      	bhi.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d05c      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x15a>
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d05a      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x15a>
 8006d58:	e062      	b.n	8006e20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6899      	ldr	r1, [r3, #8]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f000 f9ad 	bl	80070c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	609a      	str	r2, [r3, #8]
      break;
 8006d86:	e04f      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	6899      	ldr	r1, [r3, #8]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f000 f996 	bl	80070c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006daa:	609a      	str	r2, [r3, #8]
      break;
 8006dac:	e03c      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	6859      	ldr	r1, [r3, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f000 f90a 	bl	8006fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2150      	movs	r1, #80	; 0x50
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 f963 	bl	8007092 <TIM_ITRx_SetConfig>
      break;
 8006dcc:	e02c      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6859      	ldr	r1, [r3, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f000 f929 	bl	8007032 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2160      	movs	r1, #96	; 0x60
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 f953 	bl	8007092 <TIM_ITRx_SetConfig>
      break;
 8006dec:	e01c      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6859      	ldr	r1, [r3, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f000 f8ea 	bl	8006fd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2140      	movs	r1, #64	; 0x40
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 f943 	bl	8007092 <TIM_ITRx_SetConfig>
      break;
 8006e0c:	e00c      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4619      	mov	r1, r3
 8006e18:	4610      	mov	r0, r2
 8006e1a:	f000 f93a 	bl	8007092 <TIM_ITRx_SetConfig>
      break;
 8006e1e:	e003      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	73fb      	strb	r3, [r7, #15]
      break;
 8006e24:	e000      	b.n	8006e28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e5e:	bf00      	nop
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a40      	ldr	r2, [pc, #256]	; (8006fa8 <TIM_Base_SetConfig+0x114>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d013      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb2:	d00f      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a3d      	ldr	r2, [pc, #244]	; (8006fac <TIM_Base_SetConfig+0x118>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00b      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a3c      	ldr	r2, [pc, #240]	; (8006fb0 <TIM_Base_SetConfig+0x11c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d007      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a3b      	ldr	r2, [pc, #236]	; (8006fb4 <TIM_Base_SetConfig+0x120>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d003      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a3a      	ldr	r2, [pc, #232]	; (8006fb8 <TIM_Base_SetConfig+0x124>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d108      	bne.n	8006ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a2f      	ldr	r2, [pc, #188]	; (8006fa8 <TIM_Base_SetConfig+0x114>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d02b      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef4:	d027      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a2c      	ldr	r2, [pc, #176]	; (8006fac <TIM_Base_SetConfig+0x118>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d023      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a2b      	ldr	r2, [pc, #172]	; (8006fb0 <TIM_Base_SetConfig+0x11c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d01f      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a2a      	ldr	r2, [pc, #168]	; (8006fb4 <TIM_Base_SetConfig+0x120>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d01b      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a29      	ldr	r2, [pc, #164]	; (8006fb8 <TIM_Base_SetConfig+0x124>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d017      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a28      	ldr	r2, [pc, #160]	; (8006fbc <TIM_Base_SetConfig+0x128>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d013      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a27      	ldr	r2, [pc, #156]	; (8006fc0 <TIM_Base_SetConfig+0x12c>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00f      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a26      	ldr	r2, [pc, #152]	; (8006fc4 <TIM_Base_SetConfig+0x130>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d00b      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a25      	ldr	r2, [pc, #148]	; (8006fc8 <TIM_Base_SetConfig+0x134>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d007      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a24      	ldr	r2, [pc, #144]	; (8006fcc <TIM_Base_SetConfig+0x138>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d003      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a23      	ldr	r2, [pc, #140]	; (8006fd0 <TIM_Base_SetConfig+0x13c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d108      	bne.n	8006f58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <TIM_Base_SetConfig+0x114>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <TIM_Base_SetConfig+0xf8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a0c      	ldr	r2, [pc, #48]	; (8006fb8 <TIM_Base_SetConfig+0x124>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d103      	bne.n	8006f94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	615a      	str	r2, [r3, #20]
}
 8006f9a:	bf00      	nop
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	40010000 	.word	0x40010000
 8006fac:	40000400 	.word	0x40000400
 8006fb0:	40000800 	.word	0x40000800
 8006fb4:	40000c00 	.word	0x40000c00
 8006fb8:	40010400 	.word	0x40010400
 8006fbc:	40014000 	.word	0x40014000
 8006fc0:	40014400 	.word	0x40014400
 8006fc4:	40014800 	.word	0x40014800
 8006fc8:	40001800 	.word	0x40001800
 8006fcc:	40001c00 	.word	0x40001c00
 8006fd0:	40002000 	.word	0x40002000

08006fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f023 0201 	bic.w	r2, r3, #1
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f023 030a 	bic.w	r3, r3, #10
 8007010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	621a      	str	r2, [r3, #32]
}
 8007026:	bf00      	nop
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007032:	b480      	push	{r7}
 8007034:	b087      	sub	sp, #28
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	f023 0210 	bic.w	r2, r3, #16
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800705c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	031b      	lsls	r3, r3, #12
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800706e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	621a      	str	r2, [r3, #32]
}
 8007086:	bf00      	nop
 8007088:	371c      	adds	r7, #28
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007092:	b480      	push	{r7}
 8007094:	b085      	sub	sp, #20
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f043 0307 	orr.w	r3, r3, #7
 80070b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	609a      	str	r2, [r3, #8]
}
 80070bc:	bf00      	nop
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	021a      	lsls	r2, r3, #8
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	431a      	orrs	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	609a      	str	r2, [r3, #8]
}
 80070fc:	bf00      	nop
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800711c:	2302      	movs	r3, #2
 800711e:	e05a      	b.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a21      	ldr	r2, [pc, #132]	; (80071e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d022      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716c:	d01d      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d018      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a1b      	ldr	r2, [pc, #108]	; (80071ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d013      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1a      	ldr	r2, [pc, #104]	; (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00e      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a18      	ldr	r2, [pc, #96]	; (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d009      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a17      	ldr	r2, [pc, #92]	; (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d004      	beq.n	80071aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a15      	ldr	r2, [pc, #84]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d10c      	bne.n	80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40010000 	.word	0x40010000
 80071e8:	40000400 	.word	0x40000400
 80071ec:	40000800 	.word	0x40000800
 80071f0:	40000c00 	.word	0x40000c00
 80071f4:	40010400 	.word	0x40010400
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40001800 	.word	0x40001800

08007200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007228:	b084      	sub	sp, #16
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	f107 001c 	add.w	r0, r7, #28
 8007236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	2b01      	cmp	r3, #1
 800723e:	d122      	bne.n	8007286 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726a:	2b01      	cmp	r3, #1
 800726c:	d105      	bne.n	800727a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 fb1c 	bl	80088b8 <USB_CoreReset>
 8007280:	4603      	mov	r3, r0
 8007282:	73fb      	strb	r3, [r7, #15]
 8007284:	e01a      	b.n	80072bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fb10 	bl	80088b8 <USB_CoreReset>
 8007298:	4603      	mov	r3, r0
 800729a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800729c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38
 80072ae:	e005      	b.n	80072bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d10b      	bne.n	80072da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f043 0206 	orr.w	r2, r3, #6
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f043 0220 	orr.w	r2, r3, #32
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072da:	7bfb      	ldrb	r3, [r7, #15]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072e6:	b004      	add	sp, #16
 80072e8:	4770      	bx	lr
	...

080072ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	4613      	mov	r3, r2
 80072f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80072fa:	79fb      	ldrb	r3, [r7, #7]
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d165      	bne.n	80073cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4a41      	ldr	r2, [pc, #260]	; (8007408 <USB_SetTurnaroundTime+0x11c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d906      	bls.n	8007316 <USB_SetTurnaroundTime+0x2a>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4a40      	ldr	r2, [pc, #256]	; (800740c <USB_SetTurnaroundTime+0x120>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d202      	bcs.n	8007316 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007310:	230f      	movs	r3, #15
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	e062      	b.n	80073dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	4a3c      	ldr	r2, [pc, #240]	; (800740c <USB_SetTurnaroundTime+0x120>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d306      	bcc.n	800732c <USB_SetTurnaroundTime+0x40>
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	4a3b      	ldr	r2, [pc, #236]	; (8007410 <USB_SetTurnaroundTime+0x124>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d202      	bcs.n	800732c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007326:	230e      	movs	r3, #14
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	e057      	b.n	80073dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4a38      	ldr	r2, [pc, #224]	; (8007410 <USB_SetTurnaroundTime+0x124>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d306      	bcc.n	8007342 <USB_SetTurnaroundTime+0x56>
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4a37      	ldr	r2, [pc, #220]	; (8007414 <USB_SetTurnaroundTime+0x128>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d202      	bcs.n	8007342 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800733c:	230d      	movs	r3, #13
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	e04c      	b.n	80073dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4a33      	ldr	r2, [pc, #204]	; (8007414 <USB_SetTurnaroundTime+0x128>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d306      	bcc.n	8007358 <USB_SetTurnaroundTime+0x6c>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	4a32      	ldr	r2, [pc, #200]	; (8007418 <USB_SetTurnaroundTime+0x12c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d802      	bhi.n	8007358 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007352:	230c      	movs	r3, #12
 8007354:	617b      	str	r3, [r7, #20]
 8007356:	e041      	b.n	80073dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4a2f      	ldr	r2, [pc, #188]	; (8007418 <USB_SetTurnaroundTime+0x12c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d906      	bls.n	800736e <USB_SetTurnaroundTime+0x82>
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4a2e      	ldr	r2, [pc, #184]	; (800741c <USB_SetTurnaroundTime+0x130>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d802      	bhi.n	800736e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007368:	230b      	movs	r3, #11
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	e036      	b.n	80073dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4a2a      	ldr	r2, [pc, #168]	; (800741c <USB_SetTurnaroundTime+0x130>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d906      	bls.n	8007384 <USB_SetTurnaroundTime+0x98>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	4a29      	ldr	r2, [pc, #164]	; (8007420 <USB_SetTurnaroundTime+0x134>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d802      	bhi.n	8007384 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800737e:	230a      	movs	r3, #10
 8007380:	617b      	str	r3, [r7, #20]
 8007382:	e02b      	b.n	80073dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4a26      	ldr	r2, [pc, #152]	; (8007420 <USB_SetTurnaroundTime+0x134>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d906      	bls.n	800739a <USB_SetTurnaroundTime+0xae>
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	4a25      	ldr	r2, [pc, #148]	; (8007424 <USB_SetTurnaroundTime+0x138>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d202      	bcs.n	800739a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007394:	2309      	movs	r3, #9
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	e020      	b.n	80073dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	4a21      	ldr	r2, [pc, #132]	; (8007424 <USB_SetTurnaroundTime+0x138>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d306      	bcc.n	80073b0 <USB_SetTurnaroundTime+0xc4>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	4a20      	ldr	r2, [pc, #128]	; (8007428 <USB_SetTurnaroundTime+0x13c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d802      	bhi.n	80073b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80073aa:	2308      	movs	r3, #8
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	e015      	b.n	80073dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <USB_SetTurnaroundTime+0x13c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d906      	bls.n	80073c6 <USB_SetTurnaroundTime+0xda>
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4a1c      	ldr	r2, [pc, #112]	; (800742c <USB_SetTurnaroundTime+0x140>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d202      	bcs.n	80073c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80073c0:	2307      	movs	r3, #7
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	e00a      	b.n	80073dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80073c6:	2306      	movs	r3, #6
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	e007      	b.n	80073dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80073d2:	2309      	movs	r3, #9
 80073d4:	617b      	str	r3, [r7, #20]
 80073d6:	e001      	b.n	80073dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80073d8:	2309      	movs	r3, #9
 80073da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	029b      	lsls	r3, r3, #10
 80073f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80073f4:	431a      	orrs	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	00d8acbf 	.word	0x00d8acbf
 800740c:	00e4e1c0 	.word	0x00e4e1c0
 8007410:	00f42400 	.word	0x00f42400
 8007414:	01067380 	.word	0x01067380
 8007418:	011a499f 	.word	0x011a499f
 800741c:	01312cff 	.word	0x01312cff
 8007420:	014ca43f 	.word	0x014ca43f
 8007424:	016e3600 	.word	0x016e3600
 8007428:	01a6ab1f 	.word	0x01a6ab1f
 800742c:	01e84800 	.word	0x01e84800

08007430 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f043 0201 	orr.w	r2, r3, #1
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f023 0201 	bic.w	r2, r3, #1
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	460b      	mov	r3, r1
 800747e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d115      	bne.n	80074c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074a2:	2001      	movs	r0, #1
 80074a4:	f7fb feb6 	bl	8003214 <HAL_Delay>
      ms++;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 f972 	bl	8008798 <USB_GetMode>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d01e      	beq.n	80074f8 <USB_SetCurrentMode+0x84>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b31      	cmp	r3, #49	; 0x31
 80074be:	d9f0      	bls.n	80074a2 <USB_SetCurrentMode+0x2e>
 80074c0:	e01a      	b.n	80074f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d115      	bne.n	80074f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074d4:	2001      	movs	r0, #1
 80074d6:	f7fb fe9d 	bl	8003214 <HAL_Delay>
      ms++;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3301      	adds	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 f959 	bl	8008798 <USB_GetMode>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <USB_SetCurrentMode+0x84>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b31      	cmp	r3, #49	; 0x31
 80074f0:	d9f0      	bls.n	80074d4 <USB_SetCurrentMode+0x60>
 80074f2:	e001      	b.n	80074f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e005      	b.n	8007504 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b32      	cmp	r3, #50	; 0x32
 80074fc:	d101      	bne.n	8007502 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e000      	b.n	8007504 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800750c:	b084      	sub	sp, #16
 800750e:	b580      	push	{r7, lr}
 8007510:	b086      	sub	sp, #24
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800751a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007526:	2300      	movs	r3, #0
 8007528:	613b      	str	r3, [r7, #16]
 800752a:	e009      	b.n	8007540 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	3340      	adds	r3, #64	; 0x40
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	2200      	movs	r2, #0
 8007538:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	3301      	adds	r3, #1
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2b0e      	cmp	r3, #14
 8007544:	d9f2      	bls.n	800752c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d11c      	bne.n	8007586 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800755a:	f043 0302 	orr.w	r3, r3, #2
 800755e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007570:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	639a      	str	r2, [r3, #56]	; 0x38
 8007584:	e00b      	b.n	800759e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007596:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075a4:	461a      	mov	r2, r3
 80075a6:	2300      	movs	r3, #0
 80075a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b0:	4619      	mov	r1, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b8:	461a      	mov	r2, r3
 80075ba:	680b      	ldr	r3, [r1, #0]
 80075bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d10c      	bne.n	80075de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d104      	bne.n	80075d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075ca:	2100      	movs	r1, #0
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f945 	bl	800785c <USB_SetDevSpeed>
 80075d2:	e008      	b.n	80075e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075d4:	2101      	movs	r1, #1
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f940 	bl	800785c <USB_SetDevSpeed>
 80075dc:	e003      	b.n	80075e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075de:	2103      	movs	r1, #3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f93b 	bl	800785c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075e6:	2110      	movs	r1, #16
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f8f3 	bl	80077d4 <USB_FlushTxFifo>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f90f 	bl	800781c <USB_FlushRxFifo>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760e:	461a      	mov	r2, r3
 8007610:	2300      	movs	r3, #0
 8007612:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800761a:	461a      	mov	r2, r3
 800761c:	2300      	movs	r3, #0
 800761e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007626:	461a      	mov	r2, r3
 8007628:	2300      	movs	r3, #0
 800762a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800762c:	2300      	movs	r3, #0
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	e043      	b.n	80076ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007648:	d118      	bne.n	800767c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765c:	461a      	mov	r2, r3
 800765e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	e013      	b.n	800768e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007672:	461a      	mov	r2, r3
 8007674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	e008      	b.n	800768e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007688:	461a      	mov	r2, r3
 800768a:	2300      	movs	r3, #0
 800768c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769a:	461a      	mov	r2, r3
 800769c:	2300      	movs	r3, #0
 800769e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ac:	461a      	mov	r2, r3
 80076ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	3301      	adds	r3, #1
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d3b7      	bcc.n	8007632 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	e043      	b.n	8007750 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076de:	d118      	bne.n	8007712 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f2:	461a      	mov	r2, r3
 80076f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	e013      	b.n	8007724 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007708:	461a      	mov	r2, r3
 800770a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	e008      	b.n	8007724 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771e:	461a      	mov	r2, r3
 8007720:	2300      	movs	r3, #0
 8007722:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007730:	461a      	mov	r2, r3
 8007732:	2300      	movs	r3, #0
 8007734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007742:	461a      	mov	r2, r3
 8007744:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007748:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	3301      	adds	r3, #1
 800774e:	613b      	str	r3, [r7, #16]
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	429a      	cmp	r2, r3
 8007756:	d3b7      	bcc.n	80076c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800776a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007778:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	2b00      	cmp	r3, #0
 800777e:	d105      	bne.n	800778c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	f043 0210 	orr.w	r2, r3, #16
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	699a      	ldr	r2, [r3, #24]
 8007790:	4b0f      	ldr	r3, [pc, #60]	; (80077d0 <USB_DevInit+0x2c4>)
 8007792:	4313      	orrs	r3, r2
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779a:	2b00      	cmp	r3, #0
 800779c:	d005      	beq.n	80077aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	f043 0208 	orr.w	r2, r3, #8
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d107      	bne.n	80077c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077b8:	f043 0304 	orr.w	r3, r3, #4
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077cc:	b004      	add	sp, #16
 80077ce:	4770      	bx	lr
 80077d0:	803c3800 	.word	0x803c3800

080077d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	019b      	lsls	r3, r3, #6
 80077e6:	f043 0220 	orr.w	r2, r3, #32
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	4a08      	ldr	r2, [pc, #32]	; (8007818 <USB_FlushTxFifo+0x44>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d901      	bls.n	80077fe <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e006      	b.n	800780c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b20      	cmp	r3, #32
 8007808:	d0f1      	beq.n	80077ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	00030d40 	.word	0x00030d40

0800781c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2210      	movs	r2, #16
 800782c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3301      	adds	r3, #1
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	4a08      	ldr	r2, [pc, #32]	; (8007858 <USB_FlushRxFifo+0x3c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d901      	bls.n	800783e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e006      	b.n	800784c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0310 	and.w	r3, r3, #16
 8007846:	2b10      	cmp	r3, #16
 8007848:	d0f1      	beq.n	800782e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr
 8007858:	00030d40 	.word	0x00030d40

0800785c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800787c:	4313      	orrs	r3, r2
 800787e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800788e:	b480      	push	{r7}
 8007890:	b087      	sub	sp, #28
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 0306 	and.w	r3, r3, #6
 80078a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d102      	bne.n	80078b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75fb      	strb	r3, [r7, #23]
 80078b2:	e00a      	b.n	80078ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d002      	beq.n	80078c0 <USB_GetDevSpeed+0x32>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b06      	cmp	r3, #6
 80078be:	d102      	bne.n	80078c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80078c0:	2302      	movs	r3, #2
 80078c2:	75fb      	strb	r3, [r7, #23]
 80078c4:	e001      	b.n	80078ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80078c6:	230f      	movs	r3, #15
 80078c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	785b      	ldrb	r3, [r3, #1]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d13a      	bne.n	800796a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fa:	69da      	ldr	r2, [r3, #28]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	2101      	movs	r1, #1
 8007906:	fa01 f303 	lsl.w	r3, r1, r3
 800790a:	b29b      	uxth	r3, r3
 800790c:	68f9      	ldr	r1, [r7, #12]
 800790e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007912:	4313      	orrs	r3, r2
 8007914:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d155      	bne.n	80079d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	78db      	ldrb	r3, [r3, #3]
 8007946:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007948:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	059b      	lsls	r3, r3, #22
 800794e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007950:	4313      	orrs	r3, r2
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	0151      	lsls	r1, r2, #5
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	440a      	add	r2, r1
 800795a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800795e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	e036      	b.n	80079d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007970:	69da      	ldr	r2, [r3, #28]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	2101      	movs	r1, #1
 800797c:	fa01 f303 	lsl.w	r3, r1, r3
 8007980:	041b      	lsls	r3, r3, #16
 8007982:	68f9      	ldr	r1, [r7, #12]
 8007984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007988:	4313      	orrs	r3, r2
 800798a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d11a      	bne.n	80079d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	78db      	ldrb	r3, [r3, #3]
 80079bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079be:	430b      	orrs	r3, r1
 80079c0:	4313      	orrs	r3, r2
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d161      	bne.n	8007ac8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a1a:	d11f      	bne.n	8007a5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	0151      	lsls	r1, r2, #5
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	440a      	add	r2, r1
 8007a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	0151      	lsls	r1, r2, #5
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	440a      	add	r2, r1
 8007a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	f003 030f 	and.w	r3, r3, #15
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	43db      	mvns	r3, r3
 8007a76:	68f9      	ldr	r1, [r7, #12]
 8007a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a86:	69da      	ldr	r2, [r3, #28]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	f003 030f 	and.w	r3, r3, #15
 8007a90:	2101      	movs	r1, #1
 8007a92:	fa01 f303 	lsl.w	r3, r1, r3
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	43db      	mvns	r3, r3
 8007a9a:	68f9      	ldr	r1, [r7, #12]
 8007a9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	0159      	lsls	r1, r3, #5
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	440b      	add	r3, r1
 8007aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4b35      	ldr	r3, [pc, #212]	; (8007b98 <USB_DeactivateEndpoint+0x1b0>)
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	600b      	str	r3, [r1, #0]
 8007ac6:	e060      	b.n	8007b8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ade:	d11f      	bne.n	8007b20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007afa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007afe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	f003 030f 	and.w	r3, r3, #15
 8007b30:	2101      	movs	r1, #1
 8007b32:	fa01 f303 	lsl.w	r3, r1, r3
 8007b36:	041b      	lsls	r3, r3, #16
 8007b38:	43db      	mvns	r3, r3
 8007b3a:	68f9      	ldr	r1, [r7, #12]
 8007b3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b40:	4013      	ands	r3, r2
 8007b42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	f003 030f 	and.w	r3, r3, #15
 8007b54:	2101      	movs	r1, #1
 8007b56:	fa01 f303 	lsl.w	r3, r1, r3
 8007b5a:	041b      	lsls	r3, r3, #16
 8007b5c:	43db      	mvns	r3, r3
 8007b5e:	68f9      	ldr	r1, [r7, #12]
 8007b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b64:	4013      	ands	r3, r2
 8007b66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	0159      	lsls	r1, r3, #5
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	440b      	add	r3, r1
 8007b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b82:	4619      	mov	r1, r3
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <USB_DeactivateEndpoint+0x1b4>)
 8007b86:	4013      	ands	r3, r2
 8007b88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	ec337800 	.word	0xec337800
 8007b9c:	eff37800 	.word	0xeff37800

08007ba0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08a      	sub	sp, #40	; 0x28
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4613      	mov	r3, r2
 8007bac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	785b      	ldrb	r3, [r3, #1]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	f040 815c 	bne.w	8007e7a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d132      	bne.n	8007c30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	0151      	lsls	r1, r2, #5
 8007bdc:	69fa      	ldr	r2, [r7, #28]
 8007bde:	440a      	add	r2, r1
 8007be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007be8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007bec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	0151      	lsls	r1, r2, #5
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	440a      	add	r2, r1
 8007c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c28:	0cdb      	lsrs	r3, r3, #19
 8007c2a:	04db      	lsls	r3, r3, #19
 8007c2c:	6113      	str	r3, [r2, #16]
 8007c2e:	e074      	b.n	8007d1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	0151      	lsls	r1, r2, #5
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	440a      	add	r2, r1
 8007c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c4a:	0cdb      	lsrs	r3, r3, #19
 8007c4c:	04db      	lsls	r3, r3, #19
 8007c4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	0151      	lsls	r1, r2, #5
 8007c62:	69fa      	ldr	r2, [r7, #28]
 8007c64:	440a      	add	r2, r1
 8007c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	6959      	ldr	r1, [r3, #20]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	440b      	add	r3, r1
 8007c8c:	1e59      	subs	r1, r3, #1
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007c98:	4b9d      	ldr	r3, [pc, #628]	; (8007f10 <USB_EPStartXfer+0x370>)
 8007c9a:	400b      	ands	r3, r1
 8007c9c:	69b9      	ldr	r1, [r7, #24]
 8007c9e:	0148      	lsls	r0, r1, #5
 8007ca0:	69f9      	ldr	r1, [r7, #28]
 8007ca2:	4401      	add	r1, r0
 8007ca4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cc2:	69b9      	ldr	r1, [r7, #24]
 8007cc4:	0148      	lsls	r0, r1, #5
 8007cc6:	69f9      	ldr	r1, [r7, #28]
 8007cc8:	4401      	add	r1, r0
 8007cca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	78db      	ldrb	r3, [r3, #3]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d11f      	bne.n	8007d1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	0151      	lsls	r1, r2, #5
 8007cec:	69fa      	ldr	r2, [r7, #28]
 8007cee:	440a      	add	r2, r1
 8007cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007cf8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	0151      	lsls	r1, r2, #5
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	440a      	add	r2, r1
 8007d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007d1a:	79fb      	ldrb	r3, [r7, #7]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d14b      	bne.n	8007db8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d009      	beq.n	8007d3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d34:	461a      	mov	r2, r3
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	78db      	ldrb	r3, [r3, #3]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d128      	bne.n	8007d96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d110      	bne.n	8007d76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	0151      	lsls	r1, r2, #5
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	440a      	add	r2, r1
 8007d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	e00f      	b.n	8007d96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	0151      	lsls	r1, r2, #5
 8007d88:	69fa      	ldr	r2, [r7, #28]
 8007d8a:	440a      	add	r2, r1
 8007d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	0151      	lsls	r1, r2, #5
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	440a      	add	r2, r1
 8007dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007db0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	e12f      	b.n	8008018 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	0151      	lsls	r1, r2, #5
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	440a      	add	r2, r1
 8007dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	78db      	ldrb	r3, [r3, #3]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d015      	beq.n	8007e0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8117 	beq.w	8008018 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	f003 030f 	and.w	r3, r3, #15
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8007e00:	69f9      	ldr	r1, [r7, #28]
 8007e02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e06:	4313      	orrs	r3, r2
 8007e08:	634b      	str	r3, [r1, #52]	; 0x34
 8007e0a:	e105      	b.n	8008018 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d110      	bne.n	8007e3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	0151      	lsls	r1, r2, #5
 8007e2e:	69fa      	ldr	r2, [r7, #28]
 8007e30:	440a      	add	r2, r1
 8007e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e3a:	6013      	str	r3, [r2, #0]
 8007e3c:	e00f      	b.n	8007e5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	0151      	lsls	r1, r2, #5
 8007e50:	69fa      	ldr	r2, [r7, #28]
 8007e52:	440a      	add	r2, r1
 8007e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	68d9      	ldr	r1, [r3, #12]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	781a      	ldrb	r2, [r3, #0]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	b298      	uxth	r0, r3
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	4603      	mov	r3, r0
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fa2b 	bl	80082ce <USB_WritePacket>
 8007e78:	e0ce      	b.n	8008018 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	0151      	lsls	r1, r2, #5
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	440a      	add	r2, r1
 8007e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e94:	0cdb      	lsrs	r3, r3, #19
 8007e96:	04db      	lsls	r3, r3, #19
 8007e98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	0151      	lsls	r1, r2, #5
 8007eac:	69fa      	ldr	r2, [r7, #28]
 8007eae:	440a      	add	r2, r1
 8007eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007eb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ebc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d126      	bne.n	8007f14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed2:	691a      	ldr	r2, [r3, #16]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007edc:	69b9      	ldr	r1, [r7, #24]
 8007ede:	0148      	lsls	r0, r1, #5
 8007ee0:	69f9      	ldr	r1, [r7, #28]
 8007ee2:	4401      	add	r1, r0
 8007ee4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	0151      	lsls	r1, r2, #5
 8007efe:	69fa      	ldr	r2, [r7, #28]
 8007f00:	440a      	add	r2, r1
 8007f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f0a:	6113      	str	r3, [r2, #16]
 8007f0c:	e036      	b.n	8007f7c <USB_EPStartXfer+0x3dc>
 8007f0e:	bf00      	nop
 8007f10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	695a      	ldr	r2, [r3, #20]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	1e5a      	subs	r2, r3, #1
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f28:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f36:	691a      	ldr	r2, [r3, #16]
 8007f38:	8afb      	ldrh	r3, [r7, #22]
 8007f3a:	04d9      	lsls	r1, r3, #19
 8007f3c:	4b39      	ldr	r3, [pc, #228]	; (8008024 <USB_EPStartXfer+0x484>)
 8007f3e:	400b      	ands	r3, r1
 8007f40:	69b9      	ldr	r1, [r7, #24]
 8007f42:	0148      	lsls	r0, r1, #5
 8007f44:	69f9      	ldr	r1, [r7, #28]
 8007f46:	4401      	add	r1, r0
 8007f48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5c:	691a      	ldr	r2, [r3, #16]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	8af9      	ldrh	r1, [r7, #22]
 8007f64:	fb01 f303 	mul.w	r3, r1, r3
 8007f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f6c:	69b9      	ldr	r1, [r7, #24]
 8007f6e:	0148      	lsls	r0, r1, #5
 8007f70:	69f9      	ldr	r1, [r7, #28]
 8007f72:	4401      	add	r1, r0
 8007f74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d10d      	bne.n	8007f9e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d009      	beq.n	8007f9e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	68d9      	ldr	r1, [r3, #12]
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9a:	460a      	mov	r2, r1
 8007f9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	78db      	ldrb	r3, [r3, #3]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d128      	bne.n	8007ff8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d110      	bne.n	8007fd8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	0151      	lsls	r1, r2, #5
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	440a      	add	r2, r1
 8007fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	e00f      	b.n	8007ff8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	0151      	lsls	r1, r2, #5
 8007fea:	69fa      	ldr	r2, [r7, #28]
 8007fec:	440a      	add	r2, r1
 8007fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	440a      	add	r2, r1
 800800e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008012:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008016:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	1ff80000 	.word	0x1ff80000

08008028 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	785b      	ldrb	r3, [r3, #1]
 8008044:	2b01      	cmp	r3, #1
 8008046:	f040 80cd 	bne.w	80081e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d132      	bne.n	80080b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	0151      	lsls	r1, r2, #5
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	440a      	add	r2, r1
 8008068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008070:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008074:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	4413      	add	r3, r2
 800807e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	0151      	lsls	r1, r2, #5
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	440a      	add	r2, r1
 800808c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008090:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008094:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	0151      	lsls	r1, r2, #5
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	440a      	add	r2, r1
 80080ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080b0:	0cdb      	lsrs	r3, r3, #19
 80080b2:	04db      	lsls	r3, r3, #19
 80080b4:	6113      	str	r3, [r2, #16]
 80080b6:	e04e      	b.n	8008156 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	0151      	lsls	r1, r2, #5
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	440a      	add	r2, r1
 80080ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080d2:	0cdb      	lsrs	r3, r3, #19
 80080d4:	04db      	lsls	r3, r3, #19
 80080d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	0151      	lsls	r1, r2, #5
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	440a      	add	r2, r1
 80080ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	695a      	ldr	r2, [r3, #20]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	429a      	cmp	r2, r3
 8008106:	d903      	bls.n	8008110 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	0151      	lsls	r1, r2, #5
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	440a      	add	r2, r1
 8008126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800812a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800812e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008146:	6939      	ldr	r1, [r7, #16]
 8008148:	0148      	lsls	r0, r1, #5
 800814a:	6979      	ldr	r1, [r7, #20]
 800814c:	4401      	add	r1, r0
 800814e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008152:	4313      	orrs	r3, r2
 8008154:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008156:	79fb      	ldrb	r3, [r7, #7]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d11e      	bne.n	800819a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d009      	beq.n	8008178 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008170:	461a      	mov	r2, r3
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	0151      	lsls	r1, r2, #5
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	440a      	add	r2, r1
 800818e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008192:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008196:	6013      	str	r3, [r2, #0]
 8008198:	e092      	b.n	80082c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d07e      	beq.n	80082c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	f003 030f 	and.w	r3, r3, #15
 80081d2:	2101      	movs	r1, #1
 80081d4:	fa01 f303 	lsl.w	r3, r1, r3
 80081d8:	6979      	ldr	r1, [r7, #20]
 80081da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081de:	4313      	orrs	r3, r2
 80081e0:	634b      	str	r3, [r1, #52]	; 0x34
 80081e2:	e06d      	b.n	80082c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	0151      	lsls	r1, r2, #5
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	440a      	add	r2, r1
 80081fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081fe:	0cdb      	lsrs	r3, r3, #19
 8008200:	04db      	lsls	r3, r3, #19
 8008202:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	0151      	lsls	r1, r2, #5
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	440a      	add	r2, r1
 800821a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800821e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008222:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008226:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	0151      	lsls	r1, r2, #5
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	440a      	add	r2, r1
 800824e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008252:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008256:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008264:	691a      	ldr	r2, [r3, #16]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800826e:	6939      	ldr	r1, [r7, #16]
 8008270:	0148      	lsls	r0, r1, #5
 8008272:	6979      	ldr	r1, [r7, #20]
 8008274:	4401      	add	r1, r0
 8008276:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800827a:	4313      	orrs	r3, r2
 800827c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800827e:	79fb      	ldrb	r3, [r7, #7]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d10d      	bne.n	80082a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d009      	beq.n	80082a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	68d9      	ldr	r1, [r3, #12]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829c:	460a      	mov	r2, r1
 800829e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	0151      	lsls	r1, r2, #5
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	440a      	add	r2, r1
 80082b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b089      	sub	sp, #36	; 0x24
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	4611      	mov	r1, r2
 80082da:	461a      	mov	r2, r3
 80082dc:	460b      	mov	r3, r1
 80082de:	71fb      	strb	r3, [r7, #7]
 80082e0:	4613      	mov	r3, r2
 80082e2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d123      	bne.n	800833c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082f4:	88bb      	ldrh	r3, [r7, #4]
 80082f6:	3303      	adds	r3, #3
 80082f8:	089b      	lsrs	r3, r3, #2
 80082fa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082fc:	2300      	movs	r3, #0
 80082fe:	61bb      	str	r3, [r7, #24]
 8008300:	e018      	b.n	8008334 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	031a      	lsls	r2, r3, #12
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	4413      	add	r3, r2
 800830a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800830e:	461a      	mov	r2, r3
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	3301      	adds	r3, #1
 800831a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	3301      	adds	r3, #1
 8008320:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	3301      	adds	r3, #1
 8008326:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	3301      	adds	r3, #1
 800832c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	3301      	adds	r3, #1
 8008332:	61bb      	str	r3, [r7, #24]
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	429a      	cmp	r2, r3
 800833a:	d3e2      	bcc.n	8008302 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3724      	adds	r7, #36	; 0x24
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800834a:	b480      	push	{r7}
 800834c:	b08b      	sub	sp, #44	; 0x2c
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	4613      	mov	r3, r2
 8008356:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	089b      	lsrs	r3, r3, #2
 8008364:	b29b      	uxth	r3, r3
 8008366:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008368:	88fb      	ldrh	r3, [r7, #6]
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008370:	2300      	movs	r3, #0
 8008372:	623b      	str	r3, [r7, #32]
 8008374:	e014      	b.n	80083a0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	601a      	str	r2, [r3, #0]
    pDest++;
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	3301      	adds	r3, #1
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	3301      	adds	r3, #1
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	3301      	adds	r3, #1
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	3301      	adds	r3, #1
 8008398:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	3301      	adds	r3, #1
 800839e:	623b      	str	r3, [r7, #32]
 80083a0:	6a3a      	ldr	r2, [r7, #32]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d3e6      	bcc.n	8008376 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80083a8:	8bfb      	ldrh	r3, [r7, #30]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d01e      	beq.n	80083ec <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b8:	461a      	mov	r2, r3
 80083ba:	f107 0310 	add.w	r3, r7, #16
 80083be:	6812      	ldr	r2, [r2, #0]
 80083c0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	fa22 f303 	lsr.w	r3, r2, r3
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	701a      	strb	r2, [r3, #0]
      i++;
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	3301      	adds	r3, #1
 80083d8:	623b      	str	r3, [r7, #32]
      pDest++;
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	3301      	adds	r3, #1
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80083e0:	8bfb      	ldrh	r3, [r7, #30]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083e6:	8bfb      	ldrh	r3, [r7, #30]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1ea      	bne.n	80083c2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	372c      	adds	r7, #44	; 0x2c
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b085      	sub	sp, #20
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	785b      	ldrb	r3, [r3, #1]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d12c      	bne.n	8008470 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	db12      	blt.n	800844e <USB_EPSetStall+0x54>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00f      	beq.n	800844e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	0151      	lsls	r1, r2, #5
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	440a      	add	r2, r1
 8008444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008448:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800844c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4413      	add	r3, r2
 8008456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	0151      	lsls	r1, r2, #5
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	440a      	add	r2, r1
 8008464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	e02b      	b.n	80084c8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	db12      	blt.n	80084a8 <USB_EPSetStall+0xae>
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00f      	beq.n	80084a8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	0151      	lsls	r1, r2, #5
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	440a      	add	r2, r1
 800849e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084a6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	0151      	lsls	r1, r2, #5
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	440a      	add	r2, r1
 80084be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d128      	bne.n	8008544 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	0151      	lsls	r1, r2, #5
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	440a      	add	r2, r1
 8008508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800850c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008510:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	78db      	ldrb	r3, [r3, #3]
 8008516:	2b03      	cmp	r3, #3
 8008518:	d003      	beq.n	8008522 <USB_EPClearStall+0x4c>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	78db      	ldrb	r3, [r3, #3]
 800851e:	2b02      	cmp	r3, #2
 8008520:	d138      	bne.n	8008594 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	0151      	lsls	r1, r2, #5
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	440a      	add	r2, r1
 8008538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008540:	6013      	str	r3, [r2, #0]
 8008542:	e027      	b.n	8008594 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	440a      	add	r2, r1
 800855a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800855e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008562:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	78db      	ldrb	r3, [r3, #3]
 8008568:	2b03      	cmp	r3, #3
 800856a:	d003      	beq.n	8008574 <USB_EPClearStall+0x9e>
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	78db      	ldrb	r3, [r3, #3]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d10f      	bne.n	8008594 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	0151      	lsls	r1, r2, #5
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	440a      	add	r2, r1
 800858a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800858e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008592:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b085      	sub	sp, #20
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	460b      	mov	r3, r1
 80085ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80085c4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80085d6:	68f9      	ldr	r1, [r7, #12]
 80085d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085dc:	4313      	orrs	r3, r2
 80085de:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b085      	sub	sp, #20
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008608:	f023 0303 	bic.w	r3, r3, #3
 800860c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800861c:	f023 0302 	bic.w	r3, r3, #2
 8008620:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800864a:	f023 0303 	bic.w	r3, r3, #3
 800864e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800865e:	f043 0302 	orr.w	r3, r3, #2
 8008662:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4013      	ands	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800868a:	68fb      	ldr	r3, [r7, #12]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	4013      	ands	r3, r2
 80086ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	0c1b      	lsrs	r3, r3, #16
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	4013      	ands	r3, r2
 80086ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	b29b      	uxth	r3, r3
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	4013      	ands	r3, r2
 800872c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800872e:	68bb      	ldr	r3, [r7, #8]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	f003 030f 	and.w	r3, r3, #15
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	fa22 f303 	lsr.w	r3, r2, r3
 800876c:	01db      	lsls	r3, r3, #7
 800876e:	b2db      	uxtb	r3, r3
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	4313      	orrs	r3, r2
 8008774:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008776:	78fb      	ldrb	r3, [r7, #3]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	4013      	ands	r3, r2
 8008788:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800878a:	68bb      	ldr	r3, [r7, #8]
}
 800878c:	4618      	mov	r0, r3
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	f003 0301 	and.w	r3, r3, #1
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80087d2:	f023 0307 	bic.w	r3, r3, #7
 80087d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
	...

080087fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	460b      	mov	r3, r1
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	333c      	adds	r3, #60	; 0x3c
 8008812:	3304      	adds	r3, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <USB_EP0_OutStart+0xb8>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d90a      	bls.n	8008836 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800882c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008830:	d101      	bne.n	8008836 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	e037      	b.n	80088a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883c:	461a      	mov	r2, r3
 800883e:	2300      	movs	r3, #0
 8008840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008854:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008864:	f043 0318 	orr.w	r3, r3, #24
 8008868:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008878:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800887c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800887e:	7afb      	ldrb	r3, [r7, #11]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d10f      	bne.n	80088a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80088a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	4f54300a 	.word	0x4f54300a

080088b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3301      	adds	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	4a13      	ldr	r2, [pc, #76]	; (8008918 <USB_CoreReset+0x60>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d901      	bls.n	80088d4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e01a      	b.n	800890a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	daf3      	bge.n	80088c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f043 0201 	orr.w	r2, r3, #1
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	3301      	adds	r3, #1
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	4a09      	ldr	r2, [pc, #36]	; (8008918 <USB_CoreReset+0x60>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d901      	bls.n	80088fc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e006      	b.n	800890a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	2b01      	cmp	r3, #1
 8008906:	d0f1      	beq.n	80088ec <USB_CoreReset+0x34>

  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	00030d40 	.word	0x00030d40

0800891c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008928:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800892c:	f005 fc4e 	bl	800e1cc <USBD_static_malloc>
 8008930:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d105      	bne.n	8008944 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008940:	2302      	movs	r3, #2
 8008942:	e066      	b.n	8008a12 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7c1b      	ldrb	r3, [r3, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d119      	bne.n	8008988 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008958:	2202      	movs	r2, #2
 800895a:	2181      	movs	r1, #129	; 0x81
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f005 fb12 	bl	800df86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800896c:	2202      	movs	r2, #2
 800896e:	2101      	movs	r1, #1
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f005 fb08 	bl	800df86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2210      	movs	r2, #16
 8008982:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008986:	e016      	b.n	80089b6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008988:	2340      	movs	r3, #64	; 0x40
 800898a:	2202      	movs	r2, #2
 800898c:	2181      	movs	r1, #129	; 0x81
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f005 faf9 	bl	800df86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800899a:	2340      	movs	r3, #64	; 0x40
 800899c:	2202      	movs	r2, #2
 800899e:	2101      	movs	r1, #1
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f005 faf0 	bl	800df86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2210      	movs	r2, #16
 80089b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089b6:	2308      	movs	r3, #8
 80089b8:	2203      	movs	r2, #3
 80089ba:	2182      	movs	r1, #130	; 0x82
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f005 fae2 	bl	800df86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	7c1b      	ldrb	r3, [r3, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d109      	bne.n	8008a00 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089f6:	2101      	movs	r1, #1
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f005 fbb3 	bl	800e164 <USBD_LL_PrepareReceive>
 80089fe:	e007      	b.n	8008a10 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a06:	2340      	movs	r3, #64	; 0x40
 8008a08:	2101      	movs	r1, #1
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f005 fbaa 	bl	800e164 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b082      	sub	sp, #8
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	460b      	mov	r3, r1
 8008a24:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008a26:	2181      	movs	r1, #129	; 0x81
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f005 fad2 	bl	800dfd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008a34:	2101      	movs	r1, #1
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f005 facb 	bl	800dfd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a44:	2182      	movs	r1, #130	; 0x82
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f005 fac3 	bl	800dfd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00e      	beq.n	8008a84 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a76:	4618      	mov	r0, r3
 8008a78:	f005 fbb6 	bl	800e1e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aa0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e0af      	b.n	8008c18 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d03f      	beq.n	8008b44 <USBD_CDC_Setup+0xb4>
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	f040 809f 	bne.w	8008c08 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	88db      	ldrh	r3, [r3, #6]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d02e      	beq.n	8008b30 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	b25b      	sxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	da16      	bge.n	8008b0a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008ae8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	88d2      	ldrh	r2, [r2, #6]
 8008aee:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	88db      	ldrh	r3, [r3, #6]
 8008af4:	2b07      	cmp	r3, #7
 8008af6:	bf28      	it	cs
 8008af8:	2307      	movcs	r3, #7
 8008afa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	89fa      	ldrh	r2, [r7, #14]
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 fb19 	bl	800a13a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008b08:	e085      	b.n	8008c16 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	785a      	ldrb	r2, [r3, #1]
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	88db      	ldrh	r3, [r3, #6]
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008b20:	6939      	ldr	r1, [r7, #16]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	88db      	ldrh	r3, [r3, #6]
 8008b26:	461a      	mov	r2, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 fb32 	bl	800a192 <USBD_CtlPrepareRx>
      break;
 8008b2e:	e072      	b.n	8008c16 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	7850      	ldrb	r0, [r2, #1]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	4798      	blx	r3
      break;
 8008b42:	e068      	b.n	8008c16 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	785b      	ldrb	r3, [r3, #1]
 8008b48:	2b0b      	cmp	r3, #11
 8008b4a:	d852      	bhi.n	8008bf2 <USBD_CDC_Setup+0x162>
 8008b4c:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <USBD_CDC_Setup+0xc4>)
 8008b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b52:	bf00      	nop
 8008b54:	08008b85 	.word	0x08008b85
 8008b58:	08008c01 	.word	0x08008c01
 8008b5c:	08008bf3 	.word	0x08008bf3
 8008b60:	08008bf3 	.word	0x08008bf3
 8008b64:	08008bf3 	.word	0x08008bf3
 8008b68:	08008bf3 	.word	0x08008bf3
 8008b6c:	08008bf3 	.word	0x08008bf3
 8008b70:	08008bf3 	.word	0x08008bf3
 8008b74:	08008bf3 	.word	0x08008bf3
 8008b78:	08008bf3 	.word	0x08008bf3
 8008b7c:	08008baf 	.word	0x08008baf
 8008b80:	08008bd9 	.word	0x08008bd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d107      	bne.n	8008ba0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b90:	f107 030a 	add.w	r3, r7, #10
 8008b94:	2202      	movs	r2, #2
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 face 	bl	800a13a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b9e:	e032      	b.n	8008c06 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 fa58 	bl	800a058 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	75fb      	strb	r3, [r7, #23]
          break;
 8008bac:	e02b      	b.n	8008c06 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d107      	bne.n	8008bca <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008bba:	f107 030d 	add.w	r3, r7, #13
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f001 fab9 	bl	800a13a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bc8:	e01d      	b.n	8008c06 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008bca:	6839      	ldr	r1, [r7, #0]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f001 fa43 	bl	800a058 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	75fb      	strb	r3, [r7, #23]
          break;
 8008bd6:	e016      	b.n	8008c06 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d00f      	beq.n	8008c04 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f001 fa36 	bl	800a058 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bec:	2303      	movs	r3, #3
 8008bee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008bf0:	e008      	b.n	8008c04 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f001 fa2f 	bl	800a058 <USBD_CtlError>
          ret = USBD_FAIL;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8008bfe:	e002      	b.n	8008c06 <USBD_CDC_Setup+0x176>
          break;
 8008c00:	bf00      	nop
 8008c02:	e008      	b.n	8008c16 <USBD_CDC_Setup+0x186>
          break;
 8008c04:	bf00      	nop
      }
      break;
 8008c06:	e006      	b.n	8008c16 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 fa24 	bl	800a058 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c10:	2303      	movs	r3, #3
 8008c12:	75fb      	strb	r3, [r7, #23]
      break;
 8008c14:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e04f      	b.n	8008ce2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	440b      	add	r3, r1
 8008c58:	3318      	adds	r3, #24
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d029      	beq.n	8008cb4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008c60:	78fa      	ldrb	r2, [r7, #3]
 8008c62:	6879      	ldr	r1, [r7, #4]
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	440b      	add	r3, r1
 8008c6e:	3318      	adds	r3, #24
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	78f9      	ldrb	r1, [r7, #3]
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	460b      	mov	r3, r1
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	1a5b      	subs	r3, r3, r1
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4403      	add	r3, r0
 8008c80:	3344      	adds	r3, #68	; 0x44
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c88:	fb03 f301 	mul.w	r3, r3, r1
 8008c8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d110      	bne.n	8008cb4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008c92:	78fa      	ldrb	r2, [r7, #3]
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	440b      	add	r3, r1
 8008ca0:	3318      	adds	r3, #24
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ca6:	78f9      	ldrb	r1, [r7, #3]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	2200      	movs	r2, #0
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f005 fa38 	bl	800e122 <USBD_LL_Transmit>
 8008cb2:	e015      	b.n	8008ce0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00b      	beq.n	8008ce0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008cdc:	78fa      	ldrb	r2, [r7, #3]
 8008cde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e015      	b.n	8008d38 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d0c:	78fb      	ldrb	r3, [r7, #3]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f005 fa48 	bl	800e1a6 <USBD_LL_GetRxDataSize>
 8008d16:	4602      	mov	r2, r0
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d32:	4611      	mov	r1, r2
 8008d34:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d101      	bne.n	8008d5a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e01b      	b.n	8008d92 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d015      	beq.n	8008d90 <USBD_CDC_EP0_RxReady+0x50>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d6a:	2bff      	cmp	r3, #255	; 0xff
 8008d6c:	d010      	beq.n	8008d90 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008d7c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d84:	b292      	uxth	r2, r2
 8008d86:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	22ff      	movs	r2, #255	; 0xff
 8008d8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2243      	movs	r2, #67	; 0x43
 8008da8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008daa:	4b03      	ldr	r3, [pc, #12]	; (8008db8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	20000094 	.word	0x20000094

08008dbc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2243      	movs	r2, #67	; 0x43
 8008dc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008dca:	4b03      	ldr	r3, [pc, #12]	; (8008dd8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	20000050 	.word	0x20000050

08008ddc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2243      	movs	r2, #67	; 0x43
 8008de8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008dea:	4b03      	ldr	r3, [pc, #12]	; (8008df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	200000d8 	.word	0x200000d8

08008dfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	220a      	movs	r2, #10
 8008e08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008e0a:	4b03      	ldr	r3, [pc, #12]	; (8008e18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	2000000c 	.word	0x2000000c

08008e1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e004      	b.n	8008e3a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b087      	sub	sp, #28
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e58:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e008      	b.n	8008e76 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	371c      	adds	r7, #28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b085      	sub	sp, #20
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e92:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e004      	b.n	8008ea8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ec2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e01a      	b.n	8008f0c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d114      	bne.n	8008f0a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008efe:	2181      	movs	r1, #129	; 0x81
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f005 f90e 	bl	800e122 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e016      	b.n	8008f60 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	7c1b      	ldrb	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f44:	2101      	movs	r1, #1
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f005 f90c 	bl	800e164 <USBD_LL_PrepareReceive>
 8008f4c:	e007      	b.n	8008f5e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f54:	2340      	movs	r3, #64	; 0x40
 8008f56:	2101      	movs	r1, #1
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f005 f903 	bl	800e164 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e01f      	b.n	8008fc0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	79fa      	ldrb	r2, [r7, #7]
 8008fb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f004 ff7f 	bl	800deb8 <USBD_LL_Init>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3718      	adds	r7, #24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e016      	b.n	800900e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00b      	beq.n	800900c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffc:	f107 020e 	add.w	r2, r7, #14
 8009000:	4610      	mov	r0, r2
 8009002:	4798      	blx	r3
 8009004:	4602      	mov	r2, r0
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f004 ff96 	bl	800df50 <USBD_LL_Start>
 8009024:	4603      	mov	r3, r0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800902e:	b480      	push	{r7}
 8009030:	b083      	sub	sp, #12
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009050:	2303      	movs	r3, #3
 8009052:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800905a:	2b00      	cmp	r3, #0
 800905c:	d009      	beq.n	8009072 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	78fa      	ldrb	r2, [r7, #3]
 8009068:	4611      	mov	r1, r2
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	4798      	blx	r3
 800906e:	4603      	mov	r3, r0
 8009070:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	78fa      	ldrb	r2, [r7, #3]
 800909c:	4611      	mov	r1, r2
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	4798      	blx	r3
  }

  return USBD_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 ff90 	bl	8009fe4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80090d2:	461a      	mov	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090e0:	f003 031f 	and.w	r3, r3, #31
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d01a      	beq.n	800911e <USBD_LL_SetupStage+0x72>
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d822      	bhi.n	8009132 <USBD_LL_SetupStage+0x86>
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <USBD_LL_SetupStage+0x4a>
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d00a      	beq.n	800910a <USBD_LL_SetupStage+0x5e>
 80090f4:	e01d      	b.n	8009132 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fa62 	bl	80095c8 <USBD_StdDevReq>
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]
      break;
 8009108:	e020      	b.n	800914c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fac6 	bl	80096a4 <USBD_StdItfReq>
 8009118:	4603      	mov	r3, r0
 800911a:	73fb      	strb	r3, [r7, #15]
      break;
 800911c:	e016      	b.n	800914c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fb05 	bl	8009736 <USBD_StdEPReq>
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]
      break;
 8009130:	e00c      	b.n	800914c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009138:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800913c:	b2db      	uxtb	r3, r3
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f004 ff65 	bl	800e010 <USBD_LL_StallEP>
 8009146:	4603      	mov	r3, r0
 8009148:	73fb      	strb	r3, [r7, #15]
      break;
 800914a:	bf00      	nop
  }

  return ret;
 800914c:	7bfb      	ldrb	r3, [r7, #15]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b086      	sub	sp, #24
 800915a:	af00      	add	r7, sp, #0
 800915c:	60f8      	str	r0, [r7, #12]
 800915e:	460b      	mov	r3, r1
 8009160:	607a      	str	r2, [r7, #4]
 8009162:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009164:	7afb      	ldrb	r3, [r7, #11]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d138      	bne.n	80091dc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009170:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009178:	2b03      	cmp	r3, #3
 800917a:	d14a      	bne.n	8009212 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	429a      	cmp	r2, r3
 8009186:	d913      	bls.n	80091b0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	689a      	ldr	r2, [r3, #8]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	1ad2      	subs	r2, r2, r3
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	68da      	ldr	r2, [r3, #12]
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	4293      	cmp	r3, r2
 80091a0:	bf28      	it	cs
 80091a2:	4613      	movcs	r3, r2
 80091a4:	461a      	mov	r2, r3
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f001 f80f 	bl	800a1cc <USBD_CtlContinueRx>
 80091ae:	e030      	b.n	8009212 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d10b      	bne.n	80091d4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d005      	beq.n	80091d4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f001 f80a 	bl	800a1ee <USBD_CtlSendStatus>
 80091da:	e01a      	b.n	8009212 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d114      	bne.n	8009212 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00e      	beq.n	8009212 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	7afa      	ldrb	r2, [r7, #11]
 80091fe:	4611      	mov	r1, r2
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	4798      	blx	r3
 8009204:	4603      	mov	r3, r0
 8009206:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	e000      	b.n	8009214 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	460b      	mov	r3, r1
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800922a:	7afb      	ldrb	r3, [r7, #11]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d16b      	bne.n	8009308 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3314      	adds	r3, #20
 8009234:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800923c:	2b02      	cmp	r3, #2
 800923e:	d156      	bne.n	80092ee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	429a      	cmp	r2, r3
 800924a:	d914      	bls.n	8009276 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	1ad2      	subs	r2, r2, r3
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	461a      	mov	r2, r3
 8009260:	6879      	ldr	r1, [r7, #4]
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 ff84 	bl	800a170 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009268:	2300      	movs	r3, #0
 800926a:	2200      	movs	r2, #0
 800926c:	2100      	movs	r1, #0
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f004 ff78 	bl	800e164 <USBD_LL_PrepareReceive>
 8009274:	e03b      	b.n	80092ee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	429a      	cmp	r2, r3
 8009280:	d11c      	bne.n	80092bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800928a:	429a      	cmp	r2, r3
 800928c:	d316      	bcc.n	80092bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009298:	429a      	cmp	r2, r3
 800929a:	d20f      	bcs.n	80092bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800929c:	2200      	movs	r2, #0
 800929e:	2100      	movs	r1, #0
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 ff65 	bl	800a170 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092ae:	2300      	movs	r3, #0
 80092b0:	2200      	movs	r2, #0
 80092b2:	2100      	movs	r1, #0
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f004 ff55 	bl	800e164 <USBD_LL_PrepareReceive>
 80092ba:	e018      	b.n	80092ee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d10b      	bne.n	80092e0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d005      	beq.n	80092e0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092e0:	2180      	movs	r1, #128	; 0x80
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f004 fe94 	bl	800e010 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 ff93 	bl	800a214 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d122      	bne.n	800933e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f7ff fe98 	bl	800902e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009306:	e01a      	b.n	800933e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b03      	cmp	r3, #3
 8009312:	d114      	bne.n	800933e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00e      	beq.n	800933e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009326:	695b      	ldr	r3, [r3, #20]
 8009328:	7afa      	ldrb	r2, [r7, #11]
 800932a:	4611      	mov	r1, r2
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	4798      	blx	r3
 8009330:	4603      	mov	r3, r0
 8009332:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	e000      	b.n	8009340 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009378:	2303      	movs	r3, #3
 800937a:	e02f      	b.n	80093dc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00f      	beq.n	80093a6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d009      	beq.n	80093a6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	6852      	ldr	r2, [r2, #4]
 800939e:	b2d2      	uxtb	r2, r2
 80093a0:	4611      	mov	r1, r2
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093a6:	2340      	movs	r3, #64	; 0x40
 80093a8:	2200      	movs	r2, #0
 80093aa:	2100      	movs	r1, #0
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f004 fdea 	bl	800df86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2240      	movs	r2, #64	; 0x40
 80093be:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093c2:	2340      	movs	r3, #64	; 0x40
 80093c4:	2200      	movs	r2, #0
 80093c6:	2180      	movs	r1, #128	; 0x80
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f004 fddc 	bl	800df86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2240      	movs	r2, #64	; 0x40
 80093d8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	78fa      	ldrb	r2, [r7, #3]
 80093f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009412:	b2da      	uxtb	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2204      	movs	r2, #4
 800941e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b04      	cmp	r3, #4
 8009442:	d106      	bne.n	8009452 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800944a:	b2da      	uxtb	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009472:	2303      	movs	r3, #3
 8009474:	e012      	b.n	800949c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b03      	cmp	r3, #3
 8009480:	d10b      	bne.n	800949a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d005      	beq.n	800949a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d101      	bne.n	80094be <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e014      	b.n	80094e8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	d10d      	bne.n	80094e6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d007      	beq.n	80094e6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	78fa      	ldrb	r2, [r7, #3]
 80094e0:	4611      	mov	r1, r2
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009506:	2303      	movs	r3, #3
 8009508:	e014      	b.n	8009534 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b03      	cmp	r3, #3
 8009514:	d10d      	bne.n	8009532 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	2b00      	cmp	r3, #0
 8009520:	d007      	beq.n	8009532 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952a:	78fa      	ldrb	r2, [r7, #3]
 800952c:	4611      	mov	r1, r2
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b082      	sub	sp, #8
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	6852      	ldr	r2, [r2, #4]
 8009578:	b2d2      	uxtb	r2, r2
 800957a:	4611      	mov	r1, r2
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	4798      	blx	r3
  }

  return USBD_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800958a:	b480      	push	{r7}
 800958c:	b087      	sub	sp, #28
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	3301      	adds	r3, #1
 80095a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80095a8:	8a3b      	ldrh	r3, [r7, #16]
 80095aa:	021b      	lsls	r3, r3, #8
 80095ac:	b21a      	sxth	r2, r3
 80095ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	b21b      	sxth	r3, r3
 80095b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80095b8:	89fb      	ldrh	r3, [r7, #14]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	371c      	adds	r7, #28
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
	...

080095c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095de:	2b40      	cmp	r3, #64	; 0x40
 80095e0:	d005      	beq.n	80095ee <USBD_StdDevReq+0x26>
 80095e2:	2b40      	cmp	r3, #64	; 0x40
 80095e4:	d853      	bhi.n	800968e <USBD_StdDevReq+0xc6>
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00b      	beq.n	8009602 <USBD_StdDevReq+0x3a>
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d14f      	bne.n	800968e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	4798      	blx	r3
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009600:	e04a      	b.n	8009698 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	785b      	ldrb	r3, [r3, #1]
 8009606:	2b09      	cmp	r3, #9
 8009608:	d83b      	bhi.n	8009682 <USBD_StdDevReq+0xba>
 800960a:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <USBD_StdDevReq+0x48>)
 800960c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009610:	08009665 	.word	0x08009665
 8009614:	08009679 	.word	0x08009679
 8009618:	08009683 	.word	0x08009683
 800961c:	0800966f 	.word	0x0800966f
 8009620:	08009683 	.word	0x08009683
 8009624:	08009643 	.word	0x08009643
 8009628:	08009639 	.word	0x08009639
 800962c:	08009683 	.word	0x08009683
 8009630:	0800965b 	.word	0x0800965b
 8009634:	0800964d 	.word	0x0800964d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f9de 	bl	80099fc <USBD_GetDescriptor>
          break;
 8009640:	e024      	b.n	800968c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fb43 	bl	8009cd0 <USBD_SetAddress>
          break;
 800964a:	e01f      	b.n	800968c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fb82 	bl	8009d58 <USBD_SetConfig>
 8009654:	4603      	mov	r3, r0
 8009656:	73fb      	strb	r3, [r7, #15]
          break;
 8009658:	e018      	b.n	800968c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fc21 	bl	8009ea4 <USBD_GetConfig>
          break;
 8009662:	e013      	b.n	800968c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fc52 	bl	8009f10 <USBD_GetStatus>
          break;
 800966c:	e00e      	b.n	800968c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fc81 	bl	8009f78 <USBD_SetFeature>
          break;
 8009676:	e009      	b.n	800968c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fc90 	bl	8009fa0 <USBD_ClrFeature>
          break;
 8009680:	e004      	b.n	800968c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fce7 	bl	800a058 <USBD_CtlError>
          break;
 800968a:	bf00      	nop
      }
      break;
 800968c:	e004      	b.n	8009698 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fce1 	bl	800a058 <USBD_CtlError>
      break;
 8009696:	bf00      	nop
  }

  return ret;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop

080096a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096ba:	2b40      	cmp	r3, #64	; 0x40
 80096bc:	d005      	beq.n	80096ca <USBD_StdItfReq+0x26>
 80096be:	2b40      	cmp	r3, #64	; 0x40
 80096c0:	d82f      	bhi.n	8009722 <USBD_StdItfReq+0x7e>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <USBD_StdItfReq+0x26>
 80096c6:	2b20      	cmp	r3, #32
 80096c8:	d12b      	bne.n	8009722 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	3b01      	subs	r3, #1
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d81d      	bhi.n	8009714 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	889b      	ldrh	r3, [r3, #4]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d813      	bhi.n	800970a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	4798      	blx	r3
 80096f0:	4603      	mov	r3, r0
 80096f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	88db      	ldrh	r3, [r3, #6]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d110      	bne.n	800971e <USBD_StdItfReq+0x7a>
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10d      	bne.n	800971e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fd73 	bl	800a1ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009708:	e009      	b.n	800971e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fca3 	bl	800a058 <USBD_CtlError>
          break;
 8009712:	e004      	b.n	800971e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fc9e 	bl	800a058 <USBD_CtlError>
          break;
 800971c:	e000      	b.n	8009720 <USBD_StdItfReq+0x7c>
          break;
 800971e:	bf00      	nop
      }
      break;
 8009720:	e004      	b.n	800972c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fc97 	bl	800a058 <USBD_CtlError>
      break;
 800972a:	bf00      	nop
  }

  return ret;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	889b      	ldrh	r3, [r3, #4]
 8009748:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009752:	2b40      	cmp	r3, #64	; 0x40
 8009754:	d007      	beq.n	8009766 <USBD_StdEPReq+0x30>
 8009756:	2b40      	cmp	r3, #64	; 0x40
 8009758:	f200 8145 	bhi.w	80099e6 <USBD_StdEPReq+0x2b0>
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00c      	beq.n	800977a <USBD_StdEPReq+0x44>
 8009760:	2b20      	cmp	r3, #32
 8009762:	f040 8140 	bne.w	80099e6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	4798      	blx	r3
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]
      break;
 8009778:	e13a      	b.n	80099f0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	785b      	ldrb	r3, [r3, #1]
 800977e:	2b03      	cmp	r3, #3
 8009780:	d007      	beq.n	8009792 <USBD_StdEPReq+0x5c>
 8009782:	2b03      	cmp	r3, #3
 8009784:	f300 8129 	bgt.w	80099da <USBD_StdEPReq+0x2a4>
 8009788:	2b00      	cmp	r3, #0
 800978a:	d07f      	beq.n	800988c <USBD_StdEPReq+0x156>
 800978c:	2b01      	cmp	r3, #1
 800978e:	d03c      	beq.n	800980a <USBD_StdEPReq+0xd4>
 8009790:	e123      	b.n	80099da <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b02      	cmp	r3, #2
 800979c:	d002      	beq.n	80097a4 <USBD_StdEPReq+0x6e>
 800979e:	2b03      	cmp	r3, #3
 80097a0:	d016      	beq.n	80097d0 <USBD_StdEPReq+0x9a>
 80097a2:	e02c      	b.n	80097fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00d      	beq.n	80097c6 <USBD_StdEPReq+0x90>
 80097aa:	7bbb      	ldrb	r3, [r7, #14]
 80097ac:	2b80      	cmp	r3, #128	; 0x80
 80097ae:	d00a      	beq.n	80097c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f004 fc2b 	bl	800e010 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80097ba:	2180      	movs	r1, #128	; 0x80
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f004 fc27 	bl	800e010 <USBD_LL_StallEP>
 80097c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097c4:	e020      	b.n	8009808 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fc45 	bl	800a058 <USBD_CtlError>
              break;
 80097ce:	e01b      	b.n	8009808 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	885b      	ldrh	r3, [r3, #2]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10e      	bne.n	80097f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00b      	beq.n	80097f6 <USBD_StdEPReq+0xc0>
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	2b80      	cmp	r3, #128	; 0x80
 80097e2:	d008      	beq.n	80097f6 <USBD_StdEPReq+0xc0>
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	88db      	ldrh	r3, [r3, #6]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d104      	bne.n	80097f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f004 fc0d 	bl	800e010 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fcf9 	bl	800a1ee <USBD_CtlSendStatus>

              break;
 80097fc:	e004      	b.n	8009808 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fc29 	bl	800a058 <USBD_CtlError>
              break;
 8009806:	bf00      	nop
          }
          break;
 8009808:	e0ec      	b.n	80099e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b02      	cmp	r3, #2
 8009814:	d002      	beq.n	800981c <USBD_StdEPReq+0xe6>
 8009816:	2b03      	cmp	r3, #3
 8009818:	d016      	beq.n	8009848 <USBD_StdEPReq+0x112>
 800981a:	e030      	b.n	800987e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800981c:	7bbb      	ldrb	r3, [r7, #14]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00d      	beq.n	800983e <USBD_StdEPReq+0x108>
 8009822:	7bbb      	ldrb	r3, [r7, #14]
 8009824:	2b80      	cmp	r3, #128	; 0x80
 8009826:	d00a      	beq.n	800983e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009828:	7bbb      	ldrb	r3, [r7, #14]
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f004 fbef 	bl	800e010 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009832:	2180      	movs	r1, #128	; 0x80
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f004 fbeb 	bl	800e010 <USBD_LL_StallEP>
 800983a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800983c:	e025      	b.n	800988a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fc09 	bl	800a058 <USBD_CtlError>
              break;
 8009846:	e020      	b.n	800988a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	885b      	ldrh	r3, [r3, #2]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d11b      	bne.n	8009888 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009850:	7bbb      	ldrb	r3, [r7, #14]
 8009852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009856:	2b00      	cmp	r3, #0
 8009858:	d004      	beq.n	8009864 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f004 fbf5 	bl	800e04e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fcc2 	bl	800a1ee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	4798      	blx	r3
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800987c:	e004      	b.n	8009888 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fbe9 	bl	800a058 <USBD_CtlError>
              break;
 8009886:	e000      	b.n	800988a <USBD_StdEPReq+0x154>
              break;
 8009888:	bf00      	nop
          }
          break;
 800988a:	e0ab      	b.n	80099e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b02      	cmp	r3, #2
 8009896:	d002      	beq.n	800989e <USBD_StdEPReq+0x168>
 8009898:	2b03      	cmp	r3, #3
 800989a:	d032      	beq.n	8009902 <USBD_StdEPReq+0x1cc>
 800989c:	e097      	b.n	80099ce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800989e:	7bbb      	ldrb	r3, [r7, #14]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d007      	beq.n	80098b4 <USBD_StdEPReq+0x17e>
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	2b80      	cmp	r3, #128	; 0x80
 80098a8:	d004      	beq.n	80098b4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fbd3 	bl	800a058 <USBD_CtlError>
                break;
 80098b2:	e091      	b.n	80099d8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	da0b      	bge.n	80098d4 <USBD_StdEPReq+0x19e>
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098c2:	4613      	mov	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	3310      	adds	r3, #16
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	4413      	add	r3, r2
 80098d0:	3304      	adds	r3, #4
 80098d2:	e00b      	b.n	80098ec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
 80098d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098da:	4613      	mov	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	4413      	add	r3, r2
 80098ea:	3304      	adds	r3, #4
 80098ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2200      	movs	r2, #0
 80098f2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2202      	movs	r2, #2
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fc1d 	bl	800a13a <USBD_CtlSendData>
              break;
 8009900:	e06a      	b.n	80099d8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009902:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009906:	2b00      	cmp	r3, #0
 8009908:	da11      	bge.n	800992e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	f003 020f 	and.w	r2, r3, #15
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	440b      	add	r3, r1
 800991c:	3324      	adds	r3, #36	; 0x24
 800991e:	881b      	ldrh	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d117      	bne.n	8009954 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fb96 	bl	800a058 <USBD_CtlError>
                  break;
 800992c:	e054      	b.n	80099d8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800992e:	7bbb      	ldrb	r3, [r7, #14]
 8009930:	f003 020f 	and.w	r2, r3, #15
 8009934:	6879      	ldr	r1, [r7, #4]
 8009936:	4613      	mov	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4413      	add	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	440b      	add	r3, r1
 8009940:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d104      	bne.n	8009954 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fb83 	bl	800a058 <USBD_CtlError>
                  break;
 8009952:	e041      	b.n	80099d8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009958:	2b00      	cmp	r3, #0
 800995a:	da0b      	bge.n	8009974 <USBD_StdEPReq+0x23e>
 800995c:	7bbb      	ldrb	r3, [r7, #14]
 800995e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009962:	4613      	mov	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	3310      	adds	r3, #16
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	4413      	add	r3, r2
 8009970:	3304      	adds	r3, #4
 8009972:	e00b      	b.n	800998c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800997a:	4613      	mov	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	4413      	add	r3, r2
 800998a:	3304      	adds	r3, #4
 800998c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800998e:	7bbb      	ldrb	r3, [r7, #14]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <USBD_StdEPReq+0x264>
 8009994:	7bbb      	ldrb	r3, [r7, #14]
 8009996:	2b80      	cmp	r3, #128	; 0x80
 8009998:	d103      	bne.n	80099a2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	e00e      	b.n	80099c0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f004 fb70 	bl	800e08c <USBD_LL_IsStallEP>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d003      	beq.n	80099ba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2201      	movs	r2, #1
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	e002      	b.n	80099c0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	2200      	movs	r2, #0
 80099be:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2202      	movs	r2, #2
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fbb7 	bl	800a13a <USBD_CtlSendData>
              break;
 80099cc:	e004      	b.n	80099d8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fb41 	bl	800a058 <USBD_CtlError>
              break;
 80099d6:	bf00      	nop
          }
          break;
 80099d8:	e004      	b.n	80099e4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fb3b 	bl	800a058 <USBD_CtlError>
          break;
 80099e2:	bf00      	nop
      }
      break;
 80099e4:	e004      	b.n	80099f0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fb35 	bl	800a058 <USBD_CtlError>
      break;
 80099ee:	bf00      	nop
  }

  return ret;
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a06:	2300      	movs	r3, #0
 8009a08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	885b      	ldrh	r3, [r3, #2]
 8009a16:	0a1b      	lsrs	r3, r3, #8
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	2b06      	cmp	r3, #6
 8009a1e:	f200 8128 	bhi.w	8009c72 <USBD_GetDescriptor+0x276>
 8009a22:	a201      	add	r2, pc, #4	; (adr r2, 8009a28 <USBD_GetDescriptor+0x2c>)
 8009a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a28:	08009a45 	.word	0x08009a45
 8009a2c:	08009a5d 	.word	0x08009a5d
 8009a30:	08009a9d 	.word	0x08009a9d
 8009a34:	08009c73 	.word	0x08009c73
 8009a38:	08009c73 	.word	0x08009c73
 8009a3c:	08009c13 	.word	0x08009c13
 8009a40:	08009c3f 	.word	0x08009c3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	7c12      	ldrb	r2, [r2, #16]
 8009a50:	f107 0108 	add.w	r1, r7, #8
 8009a54:	4610      	mov	r0, r2
 8009a56:	4798      	blx	r3
 8009a58:	60f8      	str	r0, [r7, #12]
      break;
 8009a5a:	e112      	b.n	8009c82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	7c1b      	ldrb	r3, [r3, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10d      	bne.n	8009a80 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6c:	f107 0208 	add.w	r2, r7, #8
 8009a70:	4610      	mov	r0, r2
 8009a72:	4798      	blx	r3
 8009a74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a7e:	e100      	b.n	8009c82 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	f107 0208 	add.w	r2, r7, #8
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	4798      	blx	r3
 8009a90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3301      	adds	r3, #1
 8009a96:	2202      	movs	r2, #2
 8009a98:	701a      	strb	r2, [r3, #0]
      break;
 8009a9a:	e0f2      	b.n	8009c82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	885b      	ldrh	r3, [r3, #2]
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b05      	cmp	r3, #5
 8009aa4:	f200 80ac 	bhi.w	8009c00 <USBD_GetDescriptor+0x204>
 8009aa8:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <USBD_GetDescriptor+0xb4>)
 8009aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aae:	bf00      	nop
 8009ab0:	08009ac9 	.word	0x08009ac9
 8009ab4:	08009afd 	.word	0x08009afd
 8009ab8:	08009b31 	.word	0x08009b31
 8009abc:	08009b65 	.word	0x08009b65
 8009ac0:	08009b99 	.word	0x08009b99
 8009ac4:	08009bcd 	.word	0x08009bcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	7c12      	ldrb	r2, [r2, #16]
 8009ae0:	f107 0108 	add.w	r1, r7, #8
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	4798      	blx	r3
 8009ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aea:	e091      	b.n	8009c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fab2 	bl	800a058 <USBD_CtlError>
            err++;
 8009af4:	7afb      	ldrb	r3, [r7, #11]
 8009af6:	3301      	adds	r3, #1
 8009af8:	72fb      	strb	r3, [r7, #11]
          break;
 8009afa:	e089      	b.n	8009c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	7c12      	ldrb	r2, [r2, #16]
 8009b14:	f107 0108 	add.w	r1, r7, #8
 8009b18:	4610      	mov	r0, r2
 8009b1a:	4798      	blx	r3
 8009b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b1e:	e077      	b.n	8009c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fa98 	bl	800a058 <USBD_CtlError>
            err++;
 8009b28:	7afb      	ldrb	r3, [r7, #11]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b2e:	e06f      	b.n	8009c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00b      	beq.n	8009b54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	7c12      	ldrb	r2, [r2, #16]
 8009b48:	f107 0108 	add.w	r1, r7, #8
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4798      	blx	r3
 8009b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b52:	e05d      	b.n	8009c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fa7e 	bl	800a058 <USBD_CtlError>
            err++;
 8009b5c:	7afb      	ldrb	r3, [r7, #11]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	72fb      	strb	r3, [r7, #11]
          break;
 8009b62:	e055      	b.n	8009c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	7c12      	ldrb	r2, [r2, #16]
 8009b7c:	f107 0108 	add.w	r1, r7, #8
 8009b80:	4610      	mov	r0, r2
 8009b82:	4798      	blx	r3
 8009b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b86:	e043      	b.n	8009c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fa64 	bl	800a058 <USBD_CtlError>
            err++;
 8009b90:	7afb      	ldrb	r3, [r7, #11]
 8009b92:	3301      	adds	r3, #1
 8009b94:	72fb      	strb	r3, [r7, #11]
          break;
 8009b96:	e03b      	b.n	8009c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b9e:	695b      	ldr	r3, [r3, #20]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	7c12      	ldrb	r2, [r2, #16]
 8009bb0:	f107 0108 	add.w	r1, r7, #8
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	4798      	blx	r3
 8009bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bba:	e029      	b.n	8009c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fa4a 	bl	800a058 <USBD_CtlError>
            err++;
 8009bc4:	7afb      	ldrb	r3, [r7, #11]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bca:	e021      	b.n	8009c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00b      	beq.n	8009bf0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	7c12      	ldrb	r2, [r2, #16]
 8009be4:	f107 0108 	add.w	r1, r7, #8
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bee:	e00f      	b.n	8009c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fa30 	bl	800a058 <USBD_CtlError>
            err++;
 8009bf8:	7afb      	ldrb	r3, [r7, #11]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bfe:	e007      	b.n	8009c10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa28 	bl	800a058 <USBD_CtlError>
          err++;
 8009c08:	7afb      	ldrb	r3, [r7, #11]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009c0e:	bf00      	nop
      }
      break;
 8009c10:	e037      	b.n	8009c82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	7c1b      	ldrb	r3, [r3, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d109      	bne.n	8009c2e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c22:	f107 0208 	add.w	r2, r7, #8
 8009c26:	4610      	mov	r0, r2
 8009c28:	4798      	blx	r3
 8009c2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c2c:	e029      	b.n	8009c82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fa11 	bl	800a058 <USBD_CtlError>
        err++;
 8009c36:	7afb      	ldrb	r3, [r7, #11]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c3c:	e021      	b.n	8009c82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	7c1b      	ldrb	r3, [r3, #16]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10d      	bne.n	8009c62 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4e:	f107 0208 	add.w	r2, r7, #8
 8009c52:	4610      	mov	r0, r2
 8009c54:	4798      	blx	r3
 8009c56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	2207      	movs	r2, #7
 8009c5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c60:	e00f      	b.n	8009c82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f9f7 	bl	800a058 <USBD_CtlError>
        err++;
 8009c6a:	7afb      	ldrb	r3, [r7, #11]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c70:	e007      	b.n	8009c82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f9ef 	bl	800a058 <USBD_CtlError>
      err++;
 8009c7a:	7afb      	ldrb	r3, [r7, #11]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c80:	bf00      	nop
  }

  if (err != 0U)
 8009c82:	7afb      	ldrb	r3, [r7, #11]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d11e      	bne.n	8009cc6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	88db      	ldrh	r3, [r3, #6]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d016      	beq.n	8009cbe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009c90:	893b      	ldrh	r3, [r7, #8]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00e      	beq.n	8009cb4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	88da      	ldrh	r2, [r3, #6]
 8009c9a:	893b      	ldrh	r3, [r7, #8]
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	bf28      	it	cs
 8009ca0:	4613      	movcs	r3, r2
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ca6:	893b      	ldrh	r3, [r7, #8]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	68f9      	ldr	r1, [r7, #12]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fa44 	bl	800a13a <USBD_CtlSendData>
 8009cb2:	e009      	b.n	8009cc8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f9ce 	bl	800a058 <USBD_CtlError>
 8009cbc:	e004      	b.n	8009cc8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa95 	bl	800a1ee <USBD_CtlSendStatus>
 8009cc4:	e000      	b.n	8009cc8 <USBD_GetDescriptor+0x2cc>
    return;
 8009cc6:	bf00      	nop
  }
}
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop

08009cd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	889b      	ldrh	r3, [r3, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d131      	bne.n	8009d46 <USBD_SetAddress+0x76>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	88db      	ldrh	r3, [r3, #6]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d12d      	bne.n	8009d46 <USBD_SetAddress+0x76>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	885b      	ldrh	r3, [r3, #2]
 8009cee:	2b7f      	cmp	r3, #127	; 0x7f
 8009cf0:	d829      	bhi.n	8009d46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	885b      	ldrh	r3, [r3, #2]
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d104      	bne.n	8009d14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f9a3 	bl	800a058 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d12:	e01d      	b.n	8009d50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7bfa      	ldrb	r2, [r7, #15]
 8009d18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f004 f9df 	bl	800e0e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa61 	bl	800a1ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d004      	beq.n	8009d3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2202      	movs	r2, #2
 8009d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d3a:	e009      	b.n	8009d50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d44:	e004      	b.n	8009d50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f985 	bl	800a058 <USBD_CtlError>
  }
}
 8009d4e:	bf00      	nop
 8009d50:	bf00      	nop
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	885b      	ldrh	r3, [r3, #2]
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	4b4c      	ldr	r3, [pc, #304]	; (8009ea0 <USBD_SetConfig+0x148>)
 8009d6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d70:	4b4b      	ldr	r3, [pc, #300]	; (8009ea0 <USBD_SetConfig+0x148>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d905      	bls.n	8009d84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f96c 	bl	800a058 <USBD_CtlError>
    return USBD_FAIL;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e088      	b.n	8009e96 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d002      	beq.n	8009d96 <USBD_SetConfig+0x3e>
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d025      	beq.n	8009de0 <USBD_SetConfig+0x88>
 8009d94:	e071      	b.n	8009e7a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d96:	4b42      	ldr	r3, [pc, #264]	; (8009ea0 <USBD_SetConfig+0x148>)
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d01c      	beq.n	8009dd8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009d9e:	4b40      	ldr	r3, [pc, #256]	; (8009ea0 <USBD_SetConfig+0x148>)
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009da8:	4b3d      	ldr	r3, [pc, #244]	; (8009ea0 <USBD_SetConfig+0x148>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff f948 	bl	8009044 <USBD_SetClassConfig>
 8009db4:	4603      	mov	r3, r0
 8009db6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d004      	beq.n	8009dc8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f949 	bl	800a058 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009dc6:	e065      	b.n	8009e94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fa10 	bl	800a1ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2203      	movs	r2, #3
 8009dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009dd6:	e05d      	b.n	8009e94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fa08 	bl	800a1ee <USBD_CtlSendStatus>
      break;
 8009dde:	e059      	b.n	8009e94 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009de0:	4b2f      	ldr	r3, [pc, #188]	; (8009ea0 <USBD_SetConfig+0x148>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d112      	bne.n	8009e0e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2202      	movs	r2, #2
 8009dec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009df0:	4b2b      	ldr	r3, [pc, #172]	; (8009ea0 <USBD_SetConfig+0x148>)
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	461a      	mov	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dfa:	4b29      	ldr	r3, [pc, #164]	; (8009ea0 <USBD_SetConfig+0x148>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7ff f93b 	bl	800907c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f9f1 	bl	800a1ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e0c:	e042      	b.n	8009e94 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009e0e:	4b24      	ldr	r3, [pc, #144]	; (8009ea0 <USBD_SetConfig+0x148>)
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d02a      	beq.n	8009e72 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7ff f929 	bl	800907c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e2a:	4b1d      	ldr	r3, [pc, #116]	; (8009ea0 <USBD_SetConfig+0x148>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e34:	4b1a      	ldr	r3, [pc, #104]	; (8009ea0 <USBD_SetConfig+0x148>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7ff f902 	bl	8009044 <USBD_SetClassConfig>
 8009e40:	4603      	mov	r3, r0
 8009e42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00f      	beq.n	8009e6a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f903 	bl	800a058 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7ff f90e 	bl	800907c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2202      	movs	r2, #2
 8009e64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e68:	e014      	b.n	8009e94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f9bf 	bl	800a1ee <USBD_CtlSendStatus>
      break;
 8009e70:	e010      	b.n	8009e94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f9bb 	bl	800a1ee <USBD_CtlSendStatus>
      break;
 8009e78:	e00c      	b.n	8009e94 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f8eb 	bl	800a058 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e82:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <USBD_SetConfig+0x148>)
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff f8f7 	bl	800907c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	73fb      	strb	r3, [r7, #15]
      break;
 8009e92:	bf00      	nop
  }

  return ret;
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	200005f4 	.word	0x200005f4

08009ea4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	88db      	ldrh	r3, [r3, #6]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d004      	beq.n	8009ec0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f8cd 	bl	800a058 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ebe:	e023      	b.n	8009f08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	dc02      	bgt.n	8009ed2 <USBD_GetConfig+0x2e>
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	dc03      	bgt.n	8009ed8 <USBD_GetConfig+0x34>
 8009ed0:	e015      	b.n	8009efe <USBD_GetConfig+0x5a>
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d00b      	beq.n	8009eee <USBD_GetConfig+0x4a>
 8009ed6:	e012      	b.n	8009efe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f927 	bl	800a13a <USBD_CtlSendData>
        break;
 8009eec:	e00c      	b.n	8009f08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f91f 	bl	800a13a <USBD_CtlSendData>
        break;
 8009efc:	e004      	b.n	8009f08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f8a9 	bl	800a058 <USBD_CtlError>
        break;
 8009f06:	bf00      	nop
}
 8009f08:	bf00      	nop
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	3b01      	subs	r3, #1
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d81e      	bhi.n	8009f66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	88db      	ldrh	r3, [r3, #6]
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d004      	beq.n	8009f3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f890 	bl	800a058 <USBD_CtlError>
        break;
 8009f38:	e01a      	b.n	8009f70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d005      	beq.n	8009f56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	f043 0202 	orr.w	r2, r3, #2
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	330c      	adds	r3, #12
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f8eb 	bl	800a13a <USBD_CtlSendData>
      break;
 8009f64:	e004      	b.n	8009f70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f875 	bl	800a058 <USBD_CtlError>
      break;
 8009f6e:	bf00      	nop
  }
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	885b      	ldrh	r3, [r3, #2]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d106      	bne.n	8009f98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f92b 	bl	800a1ee <USBD_CtlSendStatus>
  }
}
 8009f98:	bf00      	nop
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d80b      	bhi.n	8009fd0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	885b      	ldrh	r3, [r3, #2]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d10c      	bne.n	8009fda <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f910 	bl	800a1ee <USBD_CtlSendStatus>
      }
      break;
 8009fce:	e004      	b.n	8009fda <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f840 	bl	800a058 <USBD_CtlError>
      break;
 8009fd8:	e000      	b.n	8009fdc <USBD_ClrFeature+0x3c>
      break;
 8009fda:	bf00      	nop
  }
}
 8009fdc:	bf00      	nop
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	781a      	ldrb	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	781a      	ldrb	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3301      	adds	r3, #1
 800a00c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f7ff fabb 	bl	800958a <SWAPBYTE>
 800a014:	4603      	mov	r3, r0
 800a016:	461a      	mov	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3301      	adds	r3, #1
 800a026:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f7ff faae 	bl	800958a <SWAPBYTE>
 800a02e:	4603      	mov	r3, r0
 800a030:	461a      	mov	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3301      	adds	r3, #1
 800a03a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3301      	adds	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f7ff faa1 	bl	800958a <SWAPBYTE>
 800a048:	4603      	mov	r3, r0
 800a04a:	461a      	mov	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	80da      	strh	r2, [r3, #6]
}
 800a050:	bf00      	nop
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a062:	2180      	movs	r1, #128	; 0x80
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f003 ffd3 	bl	800e010 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a06a:	2100      	movs	r1, #0
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f003 ffcf 	bl	800e010 <USBD_LL_StallEP>
}
 800a072:	bf00      	nop
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b086      	sub	sp, #24
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a086:	2300      	movs	r3, #0
 800a088:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d036      	beq.n	800a0fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a094:	6938      	ldr	r0, [r7, #16]
 800a096:	f000 f836 	bl	800a106 <USBD_GetLen>
 800a09a:	4603      	mov	r3, r0
 800a09c:	3301      	adds	r3, #1
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	005b      	lsls	r3, r3, #1
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	7812      	ldrb	r2, [r2, #0]
 800a0b2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0b4:	7dfb      	ldrb	r3, [r7, #23]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	4413      	add	r3, r2
 800a0c0:	2203      	movs	r2, #3
 800a0c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a0ca:	e013      	b.n	800a0f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	693a      	ldr	r2, [r7, #16]
 800a0d4:	7812      	ldrb	r2, [r2, #0]
 800a0d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	613b      	str	r3, [r7, #16]
    idx++;
 800a0de:	7dfb      	ldrb	r3, [r7, #23]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a0e4:	7dfb      	ldrb	r3, [r7, #23]
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	701a      	strb	r2, [r3, #0]
    idx++;
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e7      	bne.n	800a0cc <USBD_GetString+0x52>
 800a0fc:	e000      	b.n	800a100 <USBD_GetString+0x86>
    return;
 800a0fe:	bf00      	nop
  }
}
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a106:	b480      	push	{r7}
 800a108:	b085      	sub	sp, #20
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a116:	e005      	b.n	800a124 <USBD_GetLen+0x1e>
  {
    len++;
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	3301      	adds	r3, #1
 800a11c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	3301      	adds	r3, #1
 800a122:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1f5      	bne.n	800a118 <USBD_GetLen+0x12>
  }

  return len;
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2202      	movs	r2, #2
 800a14a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	2100      	movs	r1, #0
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f003 ffde 	bl	800e122 <USBD_LL_Transmit>

  return USBD_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	2100      	movs	r1, #0
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f003 ffcd 	bl	800e122 <USBD_LL_Transmit>

  return USBD_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2203      	movs	r2, #3
 800a1a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f003 ffd1 	bl	800e164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	2100      	movs	r1, #0
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f003 ffc0 	bl	800e164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2204      	movs	r2, #4
 800a1fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1fe:	2300      	movs	r3, #0
 800a200:	2200      	movs	r2, #0
 800a202:	2100      	movs	r1, #0
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f003 ff8c 	bl	800e122 <USBD_LL_Transmit>

  return USBD_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2205      	movs	r2, #5
 800a220:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a224:	2300      	movs	r3, #0
 800a226:	2200      	movs	r2, #0
 800a228:	2100      	movs	r1, #0
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f003 ff9a 	bl	800e164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <__NVIC_SetPriority>:
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	6039      	str	r1, [r7, #0]
 800a246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	db0a      	blt.n	800a266 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	b2da      	uxtb	r2, r3
 800a254:	490c      	ldr	r1, [pc, #48]	; (800a288 <__NVIC_SetPriority+0x4c>)
 800a256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a25a:	0112      	lsls	r2, r2, #4
 800a25c:	b2d2      	uxtb	r2, r2
 800a25e:	440b      	add	r3, r1
 800a260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a264:	e00a      	b.n	800a27c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	4908      	ldr	r1, [pc, #32]	; (800a28c <__NVIC_SetPriority+0x50>)
 800a26c:	79fb      	ldrb	r3, [r7, #7]
 800a26e:	f003 030f 	and.w	r3, r3, #15
 800a272:	3b04      	subs	r3, #4
 800a274:	0112      	lsls	r2, r2, #4
 800a276:	b2d2      	uxtb	r2, r2
 800a278:	440b      	add	r3, r1
 800a27a:	761a      	strb	r2, [r3, #24]
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	e000e100 	.word	0xe000e100
 800a28c:	e000ed00 	.word	0xe000ed00

0800a290 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a290:	b580      	push	{r7, lr}
 800a292:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a294:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <SysTick_Handler+0x1c>)
 800a296:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a298:	f002 f902 	bl	800c4a0 <xTaskGetSchedulerState>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d001      	beq.n	800a2a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a2a2:	f003 f829 	bl	800d2f8 <xPortSysTickHandler>
  }
}
 800a2a6:	bf00      	nop
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	e000e010 	.word	0xe000e010

0800a2b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	f06f 0004 	mvn.w	r0, #4
 800a2ba:	f7ff ffbf 	bl	800a23c <__NVIC_SetPriority>
#endif
}
 800a2be:	bf00      	nop
 800a2c0:	bd80      	pop	{r7, pc}
	...

0800a2c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2ca:	f3ef 8305 	mrs	r3, IPSR
 800a2ce:	603b      	str	r3, [r7, #0]
  return(result);
 800a2d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a2d6:	f06f 0305 	mvn.w	r3, #5
 800a2da:	607b      	str	r3, [r7, #4]
 800a2dc:	e00c      	b.n	800a2f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a2de:	4b0a      	ldr	r3, [pc, #40]	; (800a308 <osKernelInitialize+0x44>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d105      	bne.n	800a2f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a2e6:	4b08      	ldr	r3, [pc, #32]	; (800a308 <osKernelInitialize+0x44>)
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	607b      	str	r3, [r7, #4]
 800a2f0:	e002      	b.n	800a2f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a2f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2f8:	687b      	ldr	r3, [r7, #4]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	200005f8 	.word	0x200005f8

0800a30c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a312:	f3ef 8305 	mrs	r3, IPSR
 800a316:	603b      	str	r3, [r7, #0]
  return(result);
 800a318:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a31e:	f06f 0305 	mvn.w	r3, #5
 800a322:	607b      	str	r3, [r7, #4]
 800a324:	e010      	b.n	800a348 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a326:	4b0b      	ldr	r3, [pc, #44]	; (800a354 <osKernelStart+0x48>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d109      	bne.n	800a342 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a32e:	f7ff ffbf 	bl	800a2b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a332:	4b08      	ldr	r3, [pc, #32]	; (800a354 <osKernelStart+0x48>)
 800a334:	2202      	movs	r2, #2
 800a336:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a338:	f001 fad0 	bl	800b8dc <vTaskStartScheduler>
      stat = osOK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	607b      	str	r3, [r7, #4]
 800a340:	e002      	b.n	800a348 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a346:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a348:	687b      	ldr	r3, [r7, #4]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	200005f8 	.word	0x200005f8

0800a358 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08e      	sub	sp, #56	; 0x38
 800a35c:	af04      	add	r7, sp, #16
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a364:	2300      	movs	r3, #0
 800a366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a368:	f3ef 8305 	mrs	r3, IPSR
 800a36c:	617b      	str	r3, [r7, #20]
  return(result);
 800a36e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a370:	2b00      	cmp	r3, #0
 800a372:	d17e      	bne.n	800a472 <osThreadNew+0x11a>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d07b      	beq.n	800a472 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a37a:	2380      	movs	r3, #128	; 0x80
 800a37c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a37e:	2318      	movs	r3, #24
 800a380:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a382:	2300      	movs	r3, #0
 800a384:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a38a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d045      	beq.n	800a41e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <osThreadNew+0x48>
        name = attr->name;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d008      	beq.n	800a3c6 <osThreadNew+0x6e>
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	2b38      	cmp	r3, #56	; 0x38
 800a3b8:	d805      	bhi.n	800a3c6 <osThreadNew+0x6e>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <osThreadNew+0x72>
        return (NULL);
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e054      	b.n	800a474 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	695b      	ldr	r3, [r3, #20]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	089b      	lsrs	r3, r3, #2
 800a3d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00e      	beq.n	800a400 <osThreadNew+0xa8>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	2bbf      	cmp	r3, #191	; 0xbf
 800a3e8:	d90a      	bls.n	800a400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d006      	beq.n	800a400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <osThreadNew+0xa8>
        mem = 1;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	61bb      	str	r3, [r7, #24]
 800a3fe:	e010      	b.n	800a422 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10c      	bne.n	800a422 <osThreadNew+0xca>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d108      	bne.n	800a422 <osThreadNew+0xca>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d104      	bne.n	800a422 <osThreadNew+0xca>
          mem = 0;
 800a418:	2300      	movs	r3, #0
 800a41a:	61bb      	str	r3, [r7, #24]
 800a41c:	e001      	b.n	800a422 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d110      	bne.n	800a44a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a430:	9202      	str	r2, [sp, #8]
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	6a3a      	ldr	r2, [r7, #32]
 800a43c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 fff6 	bl	800b430 <xTaskCreateStatic>
 800a444:	4603      	mov	r3, r0
 800a446:	613b      	str	r3, [r7, #16]
 800a448:	e013      	b.n	800a472 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d110      	bne.n	800a472 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	b29a      	uxth	r2, r3
 800a454:	f107 0310 	add.w	r3, r7, #16
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	9300      	str	r3, [sp, #0]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f001 f841 	bl	800b4ea <xTaskCreate>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d001      	beq.n	800a472 <osThreadNew+0x11a>
            hTask = NULL;
 800a46e:	2300      	movs	r3, #0
 800a470:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a472:	693b      	ldr	r3, [r7, #16]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3728      	adds	r7, #40	; 0x28
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a484:	f3ef 8305 	mrs	r3, IPSR
 800a488:	60bb      	str	r3, [r7, #8]
  return(result);
 800a48a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d003      	beq.n	800a498 <osDelay+0x1c>
    stat = osErrorISR;
 800a490:	f06f 0305 	mvn.w	r3, #5
 800a494:	60fb      	str	r3, [r7, #12]
 800a496:	e007      	b.n	800a4a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a498:	2300      	movs	r3, #0
 800a49a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d002      	beq.n	800a4a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 f980 	bl	800b7a8 <vTaskDelay>
    }
  }

  return (stat);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b08a      	sub	sp, #40	; 0x28
 800a4b6:	af02      	add	r7, sp, #8
 800a4b8:	60f8      	str	r0, [r7, #12]
 800a4ba:	60b9      	str	r1, [r7, #8]
 800a4bc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4c2:	f3ef 8305 	mrs	r3, IPSR
 800a4c6:	613b      	str	r3, [r7, #16]
  return(result);
 800a4c8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d15f      	bne.n	800a58e <osMessageQueueNew+0xdc>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d05c      	beq.n	800a58e <osMessageQueueNew+0xdc>
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d059      	beq.n	800a58e <osMessageQueueNew+0xdc>
    mem = -1;
 800a4da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d029      	beq.n	800a53a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d012      	beq.n	800a514 <osMessageQueueNew+0x62>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	2b4f      	cmp	r3, #79	; 0x4f
 800a4f4:	d90e      	bls.n	800a514 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	695a      	ldr	r2, [r3, #20]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	68b9      	ldr	r1, [r7, #8]
 800a506:	fb01 f303 	mul.w	r3, r1, r3
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d302      	bcc.n	800a514 <osMessageQueueNew+0x62>
        mem = 1;
 800a50e:	2301      	movs	r3, #1
 800a510:	61bb      	str	r3, [r7, #24]
 800a512:	e014      	b.n	800a53e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d110      	bne.n	800a53e <osMessageQueueNew+0x8c>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10c      	bne.n	800a53e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d108      	bne.n	800a53e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d104      	bne.n	800a53e <osMessageQueueNew+0x8c>
          mem = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	61bb      	str	r3, [r7, #24]
 800a538:	e001      	b.n	800a53e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d10b      	bne.n	800a55c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	691a      	ldr	r2, [r3, #16]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	2100      	movs	r1, #0
 800a54e:	9100      	str	r1, [sp, #0]
 800a550:	68b9      	ldr	r1, [r7, #8]
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f000 fa2e 	bl	800a9b4 <xQueueGenericCreateStatic>
 800a558:	61f8      	str	r0, [r7, #28]
 800a55a:	e008      	b.n	800a56e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d105      	bne.n	800a56e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a562:	2200      	movs	r2, #0
 800a564:	68b9      	ldr	r1, [r7, #8]
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f000 fa9c 	bl	800aaa4 <xQueueGenericCreate>
 800a56c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00c      	beq.n	800a58e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	617b      	str	r3, [r7, #20]
 800a580:	e001      	b.n	800a586 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a582:	2300      	movs	r3, #0
 800a584:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a586:	6979      	ldr	r1, [r7, #20]
 800a588:	69f8      	ldr	r0, [r7, #28]
 800a58a:	f000 fef3 	bl	800b374 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a58e:	69fb      	ldr	r3, [r7, #28]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3720      	adds	r7, #32
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a598:	b580      	push	{r7, lr}
 800a59a:	b088      	sub	sp, #32
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	603b      	str	r3, [r7, #0]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5b0:	f3ef 8305 	mrs	r3, IPSR
 800a5b4:	617b      	str	r3, [r7, #20]
  return(result);
 800a5b6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d028      	beq.n	800a60e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d005      	beq.n	800a5ce <osMessageQueuePut+0x36>
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d002      	beq.n	800a5ce <osMessageQueuePut+0x36>
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a5ce:	f06f 0303 	mvn.w	r3, #3
 800a5d2:	61fb      	str	r3, [r7, #28]
 800a5d4:	e038      	b.n	800a648 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a5da:	f107 0210 	add.w	r2, r7, #16
 800a5de:	2300      	movs	r3, #0
 800a5e0:	68b9      	ldr	r1, [r7, #8]
 800a5e2:	69b8      	ldr	r0, [r7, #24]
 800a5e4:	f000 fbba 	bl	800ad5c <xQueueGenericSendFromISR>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d003      	beq.n	800a5f6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a5ee:	f06f 0302 	mvn.w	r3, #2
 800a5f2:	61fb      	str	r3, [r7, #28]
 800a5f4:	e028      	b.n	800a648 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d025      	beq.n	800a648 <osMessageQueuePut+0xb0>
 800a5fc:	4b15      	ldr	r3, [pc, #84]	; (800a654 <osMessageQueuePut+0xbc>)
 800a5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	e01c      	b.n	800a648 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d002      	beq.n	800a61a <osMessageQueuePut+0x82>
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d103      	bne.n	800a622 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a61a:	f06f 0303 	mvn.w	r3, #3
 800a61e:	61fb      	str	r3, [r7, #28]
 800a620:	e012      	b.n	800a648 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a622:	2300      	movs	r3, #0
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	68b9      	ldr	r1, [r7, #8]
 800a628:	69b8      	ldr	r0, [r7, #24]
 800a62a:	f000 fa99 	bl	800ab60 <xQueueGenericSend>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b01      	cmp	r3, #1
 800a632:	d009      	beq.n	800a648 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d003      	beq.n	800a642 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a63a:	f06f 0301 	mvn.w	r3, #1
 800a63e:	61fb      	str	r3, [r7, #28]
 800a640:	e002      	b.n	800a648 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a642:	f06f 0302 	mvn.w	r3, #2
 800a646:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a648:	69fb      	ldr	r3, [r7, #28]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3720      	adds	r7, #32
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	e000ed04 	.word	0xe000ed04

0800a658 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
 800a664:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a66e:	f3ef 8305 	mrs	r3, IPSR
 800a672:	617b      	str	r3, [r7, #20]
  return(result);
 800a674:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a676:	2b00      	cmp	r3, #0
 800a678:	d028      	beq.n	800a6cc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d005      	beq.n	800a68c <osMessageQueueGet+0x34>
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <osMessageQueueGet+0x34>
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d003      	beq.n	800a694 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a68c:	f06f 0303 	mvn.w	r3, #3
 800a690:	61fb      	str	r3, [r7, #28]
 800a692:	e037      	b.n	800a704 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a694:	2300      	movs	r3, #0
 800a696:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a698:	f107 0310 	add.w	r3, r7, #16
 800a69c:	461a      	mov	r2, r3
 800a69e:	68b9      	ldr	r1, [r7, #8]
 800a6a0:	69b8      	ldr	r0, [r7, #24]
 800a6a2:	f000 fcd7 	bl	800b054 <xQueueReceiveFromISR>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d003      	beq.n	800a6b4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a6ac:	f06f 0302 	mvn.w	r3, #2
 800a6b0:	61fb      	str	r3, [r7, #28]
 800a6b2:	e027      	b.n	800a704 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d024      	beq.n	800a704 <osMessageQueueGet+0xac>
 800a6ba:	4b15      	ldr	r3, [pc, #84]	; (800a710 <osMessageQueueGet+0xb8>)
 800a6bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6c0:	601a      	str	r2, [r3, #0]
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	e01b      	b.n	800a704 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d002      	beq.n	800a6d8 <osMessageQueueGet+0x80>
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d103      	bne.n	800a6e0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a6d8:	f06f 0303 	mvn.w	r3, #3
 800a6dc:	61fb      	str	r3, [r7, #28]
 800a6de:	e011      	b.n	800a704 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	68b9      	ldr	r1, [r7, #8]
 800a6e4:	69b8      	ldr	r0, [r7, #24]
 800a6e6:	f000 fbd5 	bl	800ae94 <xQueueReceive>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d009      	beq.n	800a704 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d003      	beq.n	800a6fe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a6f6:	f06f 0301 	mvn.w	r3, #1
 800a6fa:	61fb      	str	r3, [r7, #28]
 800a6fc:	e002      	b.n	800a704 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a6fe:	f06f 0302 	mvn.w	r3, #2
 800a702:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a704:	69fb      	ldr	r3, [r7, #28]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3720      	adds	r7, #32
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	e000ed04 	.word	0xe000ed04

0800a714 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4a07      	ldr	r2, [pc, #28]	; (800a740 <vApplicationGetIdleTaskMemory+0x2c>)
 800a724:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	4a06      	ldr	r2, [pc, #24]	; (800a744 <vApplicationGetIdleTaskMemory+0x30>)
 800a72a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2280      	movs	r2, #128	; 0x80
 800a730:	601a      	str	r2, [r3, #0]
}
 800a732:	bf00      	nop
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	200005fc 	.word	0x200005fc
 800a744:	200006bc 	.word	0x200006bc

0800a748 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4a07      	ldr	r2, [pc, #28]	; (800a774 <vApplicationGetTimerTaskMemory+0x2c>)
 800a758:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	4a06      	ldr	r2, [pc, #24]	; (800a778 <vApplicationGetTimerTaskMemory+0x30>)
 800a75e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a766:	601a      	str	r2, [r3, #0]
}
 800a768:	bf00      	nop
 800a76a:	3714      	adds	r7, #20
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	200008bc 	.word	0x200008bc
 800a778:	2000097c 	.word	0x2000097c

0800a77c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f103 0208 	add.w	r2, r3, #8
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a794:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f103 0208 	add.w	r2, r3, #8
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f103 0208 	add.w	r2, r3, #8
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7ca:	bf00      	nop
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b085      	sub	sp, #20
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	689a      	ldr	r2, [r3, #8]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	683a      	ldr	r2, [r7, #0]
 800a7fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	1c5a      	adds	r2, r3, #1
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	601a      	str	r2, [r3, #0]
}
 800a812:	bf00      	nop
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a81e:	b480      	push	{r7}
 800a820:	b085      	sub	sp, #20
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a834:	d103      	bne.n	800a83e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	e00c      	b.n	800a858 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3308      	adds	r3, #8
 800a842:	60fb      	str	r3, [r7, #12]
 800a844:	e002      	b.n	800a84c <vListInsert+0x2e>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	429a      	cmp	r2, r3
 800a856:	d2f6      	bcs.n	800a846 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	685a      	ldr	r2, [r3, #4]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	683a      	ldr	r2, [r7, #0]
 800a872:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	601a      	str	r2, [r3, #0]
}
 800a884:	bf00      	nop
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	6892      	ldr	r2, [r2, #8]
 800a8a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	6852      	ldr	r2, [r2, #4]
 800a8b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d103      	bne.n	800a8c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	1e5a      	subs	r2, r3, #1
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10a      	bne.n	800a90e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a90a:	bf00      	nop
 800a90c:	e7fe      	b.n	800a90c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a90e:	f002 fc61 	bl	800d1d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a91a:	68f9      	ldr	r1, [r7, #12]
 800a91c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a91e:	fb01 f303 	mul.w	r3, r1, r3
 800a922:	441a      	add	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93e:	3b01      	subs	r3, #1
 800a940:	68f9      	ldr	r1, [r7, #12]
 800a942:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a944:	fb01 f303 	mul.w	r3, r1, r3
 800a948:	441a      	add	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	22ff      	movs	r2, #255	; 0xff
 800a952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	22ff      	movs	r2, #255	; 0xff
 800a95a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d114      	bne.n	800a98e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d01a      	beq.n	800a9a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3310      	adds	r3, #16
 800a970:	4618      	mov	r0, r3
 800a972:	f001 faff 	bl	800bf74 <xTaskRemoveFromEventList>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d012      	beq.n	800a9a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a97c:	4b0c      	ldr	r3, [pc, #48]	; (800a9b0 <xQueueGenericReset+0xcc>)
 800a97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	e009      	b.n	800a9a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	3310      	adds	r3, #16
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff fef2 	bl	800a77c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	3324      	adds	r3, #36	; 0x24
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7ff feed 	bl	800a77c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a9a2:	f002 fc47 	bl	800d234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a9a6:	2301      	movs	r3, #1
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	e000ed04 	.word	0xe000ed04

0800a9b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b08e      	sub	sp, #56	; 0x38
 800a9b8:	af02      	add	r7, sp, #8
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
 800a9c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10a      	bne.n	800a9de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9da:	bf00      	nop
 800a9dc:	e7fe      	b.n	800a9dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10a      	bne.n	800a9fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a9f6:	bf00      	nop
 800a9f8:	e7fe      	b.n	800a9f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d002      	beq.n	800aa06 <xQueueGenericCreateStatic+0x52>
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <xQueueGenericCreateStatic+0x56>
 800aa06:	2301      	movs	r3, #1
 800aa08:	e000      	b.n	800aa0c <xQueueGenericCreateStatic+0x58>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10a      	bne.n	800aa26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	623b      	str	r3, [r7, #32]
}
 800aa22:	bf00      	nop
 800aa24:	e7fe      	b.n	800aa24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d102      	bne.n	800aa32 <xQueueGenericCreateStatic+0x7e>
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <xQueueGenericCreateStatic+0x82>
 800aa32:	2301      	movs	r3, #1
 800aa34:	e000      	b.n	800aa38 <xQueueGenericCreateStatic+0x84>
 800aa36:	2300      	movs	r3, #0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10a      	bne.n	800aa52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	61fb      	str	r3, [r7, #28]
}
 800aa4e:	bf00      	nop
 800aa50:	e7fe      	b.n	800aa50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa52:	2350      	movs	r3, #80	; 0x50
 800aa54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	2b50      	cmp	r3, #80	; 0x50
 800aa5a:	d00a      	beq.n	800aa72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	61bb      	str	r3, [r7, #24]
}
 800aa6e:	bf00      	nop
 800aa70:	e7fe      	b.n	800aa70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aa72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00d      	beq.n	800aa9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa80:	2201      	movs	r2, #1
 800aa82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	68b9      	ldr	r1, [r7, #8]
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f000 f83f 	bl	800ab18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3730      	adds	r7, #48	; 0x30
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08a      	sub	sp, #40	; 0x28
 800aaa8:	af02      	add	r7, sp, #8
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	4613      	mov	r3, r2
 800aab0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <xQueueGenericCreate+0x2a>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	613b      	str	r3, [r7, #16]
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	fb02 f303 	mul.w	r3, r2, r3
 800aad6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	3350      	adds	r3, #80	; 0x50
 800aadc:	4618      	mov	r0, r3
 800aade:	f002 fc9b 	bl	800d418 <pvPortMalloc>
 800aae2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d011      	beq.n	800ab0e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	3350      	adds	r3, #80	; 0x50
 800aaf2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aafc:	79fa      	ldrb	r2, [r7, #7]
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	4613      	mov	r3, r2
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	68b9      	ldr	r1, [r7, #8]
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f000 f805 	bl	800ab18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab0e:	69bb      	ldr	r3, [r7, #24]
	}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3720      	adds	r7, #32
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d103      	bne.n	800ab34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	e002      	b.n	800ab3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab46:	2101      	movs	r1, #1
 800ab48:	69b8      	ldr	r0, [r7, #24]
 800ab4a:	f7ff fecb 	bl	800a8e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	78fa      	ldrb	r2, [r7, #3]
 800ab52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab56:	bf00      	nop
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
	...

0800ab60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08e      	sub	sp, #56	; 0x38
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10a      	bne.n	800ab92 <xQueueGenericSend+0x32>
	__asm volatile
 800ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab8e:	bf00      	nop
 800ab90:	e7fe      	b.n	800ab90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d103      	bne.n	800aba0 <xQueueGenericSend+0x40>
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d101      	bne.n	800aba4 <xQueueGenericSend+0x44>
 800aba0:	2301      	movs	r3, #1
 800aba2:	e000      	b.n	800aba6 <xQueueGenericSend+0x46>
 800aba4:	2300      	movs	r3, #0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10a      	bne.n	800abc0 <xQueueGenericSend+0x60>
	__asm volatile
 800abaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abbc:	bf00      	nop
 800abbe:	e7fe      	b.n	800abbe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d103      	bne.n	800abce <xQueueGenericSend+0x6e>
 800abc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d101      	bne.n	800abd2 <xQueueGenericSend+0x72>
 800abce:	2301      	movs	r3, #1
 800abd0:	e000      	b.n	800abd4 <xQueueGenericSend+0x74>
 800abd2:	2300      	movs	r3, #0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10a      	bne.n	800abee <xQueueGenericSend+0x8e>
	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	623b      	str	r3, [r7, #32]
}
 800abea:	bf00      	nop
 800abec:	e7fe      	b.n	800abec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abee:	f001 fc57 	bl	800c4a0 <xTaskGetSchedulerState>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d102      	bne.n	800abfe <xQueueGenericSend+0x9e>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <xQueueGenericSend+0xa2>
 800abfe:	2301      	movs	r3, #1
 800ac00:	e000      	b.n	800ac04 <xQueueGenericSend+0xa4>
 800ac02:	2300      	movs	r3, #0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10a      	bne.n	800ac1e <xQueueGenericSend+0xbe>
	__asm volatile
 800ac08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0c:	f383 8811 	msr	BASEPRI, r3
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	61fb      	str	r3, [r7, #28]
}
 800ac1a:	bf00      	nop
 800ac1c:	e7fe      	b.n	800ac1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac1e:	f002 fad9 	bl	800d1d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d302      	bcc.n	800ac34 <xQueueGenericSend+0xd4>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	d129      	bne.n	800ac88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	68b9      	ldr	r1, [r7, #8]
 800ac38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac3a:	f000 fa8b 	bl	800b154 <prvCopyDataToQueue>
 800ac3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d010      	beq.n	800ac6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	3324      	adds	r3, #36	; 0x24
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f001 f991 	bl	800bf74 <xTaskRemoveFromEventList>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d013      	beq.n	800ac80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac58:	4b3f      	ldr	r3, [pc, #252]	; (800ad58 <xQueueGenericSend+0x1f8>)
 800ac5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac5e:	601a      	str	r2, [r3, #0]
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	e00a      	b.n	800ac80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ac6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d007      	beq.n	800ac80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac70:	4b39      	ldr	r3, [pc, #228]	; (800ad58 <xQueueGenericSend+0x1f8>)
 800ac72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac76:	601a      	str	r2, [r3, #0]
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac80:	f002 fad8 	bl	800d234 <vPortExitCritical>
				return pdPASS;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e063      	b.n	800ad50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d103      	bne.n	800ac96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac8e:	f002 fad1 	bl	800d234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	e05c      	b.n	800ad50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d106      	bne.n	800acaa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac9c:	f107 0314 	add.w	r3, r7, #20
 800aca0:	4618      	mov	r0, r3
 800aca2:	f001 f9cb 	bl	800c03c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aca6:	2301      	movs	r3, #1
 800aca8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acaa:	f002 fac3 	bl	800d234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acae:	f000 fe89 	bl	800b9c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acb2:	f002 fa8f 	bl	800d1d4 <vPortEnterCritical>
 800acb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acbc:	b25b      	sxtb	r3, r3
 800acbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acc2:	d103      	bne.n	800accc <xQueueGenericSend+0x16c>
 800acc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800accc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acd2:	b25b      	sxtb	r3, r3
 800acd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acd8:	d103      	bne.n	800ace2 <xQueueGenericSend+0x182>
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ace2:	f002 faa7 	bl	800d234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ace6:	1d3a      	adds	r2, r7, #4
 800ace8:	f107 0314 	add.w	r3, r7, #20
 800acec:	4611      	mov	r1, r2
 800acee:	4618      	mov	r0, r3
 800acf0:	f001 f9ba 	bl	800c068 <xTaskCheckForTimeOut>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d124      	bne.n	800ad44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800acfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acfc:	f000 fb22 	bl	800b344 <prvIsQueueFull>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d018      	beq.n	800ad38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	3310      	adds	r3, #16
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f001 f8e0 	bl	800bed4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ad14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad16:	f000 faad 	bl	800b274 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ad1a:	f000 fe61 	bl	800b9e0 <xTaskResumeAll>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f47f af7c 	bne.w	800ac1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ad26:	4b0c      	ldr	r3, [pc, #48]	; (800ad58 <xQueueGenericSend+0x1f8>)
 800ad28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	e772      	b.n	800ac1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ad38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad3a:	f000 fa9b 	bl	800b274 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad3e:	f000 fe4f 	bl	800b9e0 <xTaskResumeAll>
 800ad42:	e76c      	b.n	800ac1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ad44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad46:	f000 fa95 	bl	800b274 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad4a:	f000 fe49 	bl	800b9e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ad4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3738      	adds	r7, #56	; 0x38
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	e000ed04 	.word	0xe000ed04

0800ad5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b090      	sub	sp, #64	; 0x40
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
 800ad68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ad6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10a      	bne.n	800ad8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad86:	bf00      	nop
 800ad88:	e7fe      	b.n	800ad88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d103      	bne.n	800ad98 <xQueueGenericSendFromISR+0x3c>
 800ad90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <xQueueGenericSendFromISR+0x40>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e000      	b.n	800ad9e <xQueueGenericSendFromISR+0x42>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10a      	bne.n	800adb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ada2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adb4:	bf00      	nop
 800adb6:	e7fe      	b.n	800adb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d103      	bne.n	800adc6 <xQueueGenericSendFromISR+0x6a>
 800adbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d101      	bne.n	800adca <xQueueGenericSendFromISR+0x6e>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e000      	b.n	800adcc <xQueueGenericSendFromISR+0x70>
 800adca:	2300      	movs	r3, #0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10a      	bne.n	800ade6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	623b      	str	r3, [r7, #32]
}
 800ade2:	bf00      	nop
 800ade4:	e7fe      	b.n	800ade4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ade6:	f002 fad7 	bl	800d398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800adea:	f3ef 8211 	mrs	r2, BASEPRI
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	61fa      	str	r2, [r7, #28]
 800ae00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ae02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d302      	bcc.n	800ae18 <xQueueGenericSendFromISR+0xbc>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d12f      	bne.n	800ae78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae2e:	f000 f991 	bl	800b154 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ae32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ae36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae3a:	d112      	bne.n	800ae62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d016      	beq.n	800ae72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae46:	3324      	adds	r3, #36	; 0x24
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f001 f893 	bl	800bf74 <xTaskRemoveFromEventList>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00e      	beq.n	800ae72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00b      	beq.n	800ae72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	e007      	b.n	800ae72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae66:	3301      	adds	r3, #1
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	b25a      	sxtb	r2, r3
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ae72:	2301      	movs	r3, #1
 800ae74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ae76:	e001      	b.n	800ae7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3740      	adds	r7, #64	; 0x40
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
	...

0800ae94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08c      	sub	sp, #48	; 0x30
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aea0:	2300      	movs	r3, #0
 800aea2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10a      	bne.n	800aec4 <xQueueReceive+0x30>
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	623b      	str	r3, [r7, #32]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d103      	bne.n	800aed2 <xQueueReceive+0x3e>
 800aeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d101      	bne.n	800aed6 <xQueueReceive+0x42>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e000      	b.n	800aed8 <xQueueReceive+0x44>
 800aed6:	2300      	movs	r3, #0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10a      	bne.n	800aef2 <xQueueReceive+0x5e>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	61fb      	str	r3, [r7, #28]
}
 800aeee:	bf00      	nop
 800aef0:	e7fe      	b.n	800aef0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aef2:	f001 fad5 	bl	800c4a0 <xTaskGetSchedulerState>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d102      	bne.n	800af02 <xQueueReceive+0x6e>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d101      	bne.n	800af06 <xQueueReceive+0x72>
 800af02:	2301      	movs	r3, #1
 800af04:	e000      	b.n	800af08 <xQueueReceive+0x74>
 800af06:	2300      	movs	r3, #0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10a      	bne.n	800af22 <xQueueReceive+0x8e>
	__asm volatile
 800af0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af10:	f383 8811 	msr	BASEPRI, r3
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	f3bf 8f4f 	dsb	sy
 800af1c:	61bb      	str	r3, [r7, #24]
}
 800af1e:	bf00      	nop
 800af20:	e7fe      	b.n	800af20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af22:	f002 f957 	bl	800d1d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d01f      	beq.n	800af72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af32:	68b9      	ldr	r1, [r7, #8]
 800af34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af36:	f000 f977 	bl	800b228 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00f      	beq.n	800af6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4c:	3310      	adds	r3, #16
 800af4e:	4618      	mov	r0, r3
 800af50:	f001 f810 	bl	800bf74 <xTaskRemoveFromEventList>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d007      	beq.n	800af6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af5a:	4b3d      	ldr	r3, [pc, #244]	; (800b050 <xQueueReceive+0x1bc>)
 800af5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af6a:	f002 f963 	bl	800d234 <vPortExitCritical>
				return pdPASS;
 800af6e:	2301      	movs	r3, #1
 800af70:	e069      	b.n	800b046 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d103      	bne.n	800af80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af78:	f002 f95c 	bl	800d234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af7c:	2300      	movs	r3, #0
 800af7e:	e062      	b.n	800b046 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af82:	2b00      	cmp	r3, #0
 800af84:	d106      	bne.n	800af94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af86:	f107 0310 	add.w	r3, r7, #16
 800af8a:	4618      	mov	r0, r3
 800af8c:	f001 f856 	bl	800c03c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af90:	2301      	movs	r3, #1
 800af92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af94:	f002 f94e 	bl	800d234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af98:	f000 fd14 	bl	800b9c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af9c:	f002 f91a 	bl	800d1d4 <vPortEnterCritical>
 800afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afa6:	b25b      	sxtb	r3, r3
 800afa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afac:	d103      	bne.n	800afb6 <xQueueReceive+0x122>
 800afae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afbc:	b25b      	sxtb	r3, r3
 800afbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afc2:	d103      	bne.n	800afcc <xQueueReceive+0x138>
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afcc:	f002 f932 	bl	800d234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afd0:	1d3a      	adds	r2, r7, #4
 800afd2:	f107 0310 	add.w	r3, r7, #16
 800afd6:	4611      	mov	r1, r2
 800afd8:	4618      	mov	r0, r3
 800afda:	f001 f845 	bl	800c068 <xTaskCheckForTimeOut>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d123      	bne.n	800b02c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afe6:	f000 f997 	bl	800b318 <prvIsQueueEmpty>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d017      	beq.n	800b020 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff2:	3324      	adds	r3, #36	; 0x24
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	4611      	mov	r1, r2
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 ff6b 	bl	800bed4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800affe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b000:	f000 f938 	bl	800b274 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b004:	f000 fcec 	bl	800b9e0 <xTaskResumeAll>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d189      	bne.n	800af22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b00e:	4b10      	ldr	r3, [pc, #64]	; (800b050 <xQueueReceive+0x1bc>)
 800b010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b014:	601a      	str	r2, [r3, #0]
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	e780      	b.n	800af22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b022:	f000 f927 	bl	800b274 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b026:	f000 fcdb 	bl	800b9e0 <xTaskResumeAll>
 800b02a:	e77a      	b.n	800af22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b02c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b02e:	f000 f921 	bl	800b274 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b032:	f000 fcd5 	bl	800b9e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b038:	f000 f96e 	bl	800b318 <prvIsQueueEmpty>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f43f af6f 	beq.w	800af22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b044:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b046:	4618      	mov	r0, r3
 800b048:	3730      	adds	r7, #48	; 0x30
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	e000ed04 	.word	0xe000ed04

0800b054 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08e      	sub	sp, #56	; 0x38
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10a      	bne.n	800b080 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	623b      	str	r3, [r7, #32]
}
 800b07c:	bf00      	nop
 800b07e:	e7fe      	b.n	800b07e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d103      	bne.n	800b08e <xQueueReceiveFromISR+0x3a>
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <xQueueReceiveFromISR+0x3e>
 800b08e:	2301      	movs	r3, #1
 800b090:	e000      	b.n	800b094 <xQueueReceiveFromISR+0x40>
 800b092:	2300      	movs	r3, #0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10a      	bne.n	800b0ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09c:	f383 8811 	msr	BASEPRI, r3
 800b0a0:	f3bf 8f6f 	isb	sy
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	61fb      	str	r3, [r7, #28]
}
 800b0aa:	bf00      	nop
 800b0ac:	e7fe      	b.n	800b0ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0ae:	f002 f973 	bl	800d398 <vPortValidateInterruptPriority>
	__asm volatile
 800b0b2:	f3ef 8211 	mrs	r2, BASEPRI
 800b0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	61ba      	str	r2, [r7, #24]
 800b0c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b0ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d02f      	beq.n	800b13a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0e4:	68b9      	ldr	r1, [r7, #8]
 800b0e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0e8:	f000 f89e 	bl	800b228 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	1e5a      	subs	r2, r3, #1
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b0f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0fc:	d112      	bne.n	800b124 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d016      	beq.n	800b134 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	3310      	adds	r3, #16
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 ff32 	bl	800bf74 <xTaskRemoveFromEventList>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00e      	beq.n	800b134 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00b      	beq.n	800b134 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	e007      	b.n	800b134 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b128:	3301      	adds	r3, #1
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	b25a      	sxtb	r2, r3
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b134:	2301      	movs	r3, #1
 800b136:	637b      	str	r3, [r7, #52]	; 0x34
 800b138:	e001      	b.n	800b13e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	637b      	str	r3, [r7, #52]	; 0x34
 800b13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b140:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f383 8811 	msr	BASEPRI, r3
}
 800b148:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3738      	adds	r7, #56	; 0x38
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b160:	2300      	movs	r3, #0
 800b162:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b168:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10d      	bne.n	800b18e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d14d      	bne.n	800b216 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	4618      	mov	r0, r3
 800b180:	f001 f9ac 	bl	800c4dc <xTaskPriorityDisinherit>
 800b184:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	609a      	str	r2, [r3, #8]
 800b18c:	e043      	b.n	800b216 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d119      	bne.n	800b1c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6858      	ldr	r0, [r3, #4]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19c:	461a      	mov	r2, r3
 800b19e:	68b9      	ldr	r1, [r7, #8]
 800b1a0:	f003 f8ae 	bl	800e300 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ac:	441a      	add	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d32b      	bcc.n	800b216 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	605a      	str	r2, [r3, #4]
 800b1c6:	e026      	b.n	800b216 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	68d8      	ldr	r0, [r3, #12]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	68b9      	ldr	r1, [r7, #8]
 800b1d4:	f003 f894 	bl	800e300 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68da      	ldr	r2, [r3, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e0:	425b      	negs	r3, r3
 800b1e2:	441a      	add	r2, r3
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d207      	bcs.n	800b204 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	689a      	ldr	r2, [r3, #8]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	425b      	negs	r3, r3
 800b1fe:	441a      	add	r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b02      	cmp	r3, #2
 800b208:	d105      	bne.n	800b216 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	3b01      	subs	r3, #1
 800b214:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	1c5a      	adds	r2, r3, #1
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b21e:	697b      	ldr	r3, [r7, #20]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3718      	adds	r7, #24
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b236:	2b00      	cmp	r3, #0
 800b238:	d018      	beq.n	800b26c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	68da      	ldr	r2, [r3, #12]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b242:	441a      	add	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68da      	ldr	r2, [r3, #12]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	429a      	cmp	r2, r3
 800b252:	d303      	bcc.n	800b25c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68d9      	ldr	r1, [r3, #12]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b264:	461a      	mov	r2, r3
 800b266:	6838      	ldr	r0, [r7, #0]
 800b268:	f003 f84a 	bl	800e300 <memcpy>
	}
}
 800b26c:	bf00      	nop
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b27c:	f001 ffaa 	bl	800d1d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b286:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b288:	e011      	b.n	800b2ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d012      	beq.n	800b2b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	3324      	adds	r3, #36	; 0x24
 800b296:	4618      	mov	r0, r3
 800b298:	f000 fe6c 	bl	800bf74 <xTaskRemoveFromEventList>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2a2:	f000 ff43 	bl	800c12c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	dce9      	bgt.n	800b28a <prvUnlockQueue+0x16>
 800b2b6:	e000      	b.n	800b2ba <prvUnlockQueue+0x46>
					break;
 800b2b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	22ff      	movs	r2, #255	; 0xff
 800b2be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2c2:	f001 ffb7 	bl	800d234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2c6:	f001 ff85 	bl	800d1d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2d2:	e011      	b.n	800b2f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d012      	beq.n	800b302 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3310      	adds	r3, #16
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 fe47 	bl	800bf74 <xTaskRemoveFromEventList>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2ec:	f000 ff1e 	bl	800c12c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b2f0:	7bbb      	ldrb	r3, [r7, #14]
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	dce9      	bgt.n	800b2d4 <prvUnlockQueue+0x60>
 800b300:	e000      	b.n	800b304 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b302:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	22ff      	movs	r2, #255	; 0xff
 800b308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b30c:	f001 ff92 	bl	800d234 <vPortExitCritical>
}
 800b310:	bf00      	nop
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b320:	f001 ff58 	bl	800d1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d102      	bne.n	800b332 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b32c:	2301      	movs	r3, #1
 800b32e:	60fb      	str	r3, [r7, #12]
 800b330:	e001      	b.n	800b336 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b332:	2300      	movs	r3, #0
 800b334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b336:	f001 ff7d 	bl	800d234 <vPortExitCritical>

	return xReturn;
 800b33a:	68fb      	ldr	r3, [r7, #12]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b34c:	f001 ff42 	bl	800d1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b358:	429a      	cmp	r2, r3
 800b35a:	d102      	bne.n	800b362 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b35c:	2301      	movs	r3, #1
 800b35e:	60fb      	str	r3, [r7, #12]
 800b360:	e001      	b.n	800b366 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b362:	2300      	movs	r3, #0
 800b364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b366:	f001 ff65 	bl	800d234 <vPortExitCritical>

	return xReturn;
 800b36a:	68fb      	ldr	r3, [r7, #12]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b37e:	2300      	movs	r3, #0
 800b380:	60fb      	str	r3, [r7, #12]
 800b382:	e014      	b.n	800b3ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b384:	4a0f      	ldr	r2, [pc, #60]	; (800b3c4 <vQueueAddToRegistry+0x50>)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10b      	bne.n	800b3a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b390:	490c      	ldr	r1, [pc, #48]	; (800b3c4 <vQueueAddToRegistry+0x50>)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b39a:	4a0a      	ldr	r2, [pc, #40]	; (800b3c4 <vQueueAddToRegistry+0x50>)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	00db      	lsls	r3, r3, #3
 800b3a0:	4413      	add	r3, r2
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3a6:	e006      	b.n	800b3b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	60fb      	str	r3, [r7, #12]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2b07      	cmp	r3, #7
 800b3b2:	d9e7      	bls.n	800b384 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	2000a770 	.word	0x2000a770

0800b3c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b3d8:	f001 fefc 	bl	800d1d4 <vPortEnterCritical>
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3e2:	b25b      	sxtb	r3, r3
 800b3e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3e8:	d103      	bne.n	800b3f2 <vQueueWaitForMessageRestricted+0x2a>
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3f8:	b25b      	sxtb	r3, r3
 800b3fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3fe:	d103      	bne.n	800b408 <vQueueWaitForMessageRestricted+0x40>
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b408:	f001 ff14 	bl	800d234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b410:	2b00      	cmp	r3, #0
 800b412:	d106      	bne.n	800b422 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	3324      	adds	r3, #36	; 0x24
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	68b9      	ldr	r1, [r7, #8]
 800b41c:	4618      	mov	r0, r3
 800b41e:	f000 fd7d 	bl	800bf1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b422:	6978      	ldr	r0, [r7, #20]
 800b424:	f7ff ff26 	bl	800b274 <prvUnlockQueue>
	}
 800b428:	bf00      	nop
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b430:	b580      	push	{r7, lr}
 800b432:	b08e      	sub	sp, #56	; 0x38
 800b434:	af04      	add	r7, sp, #16
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10a      	bne.n	800b45a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	623b      	str	r3, [r7, #32]
}
 800b456:	bf00      	nop
 800b458:	e7fe      	b.n	800b458 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10a      	bne.n	800b476 <xTaskCreateStatic+0x46>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	61fb      	str	r3, [r7, #28]
}
 800b472:	bf00      	nop
 800b474:	e7fe      	b.n	800b474 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b476:	23c0      	movs	r3, #192	; 0xc0
 800b478:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	2bc0      	cmp	r3, #192	; 0xc0
 800b47e:	d00a      	beq.n	800b496 <xTaskCreateStatic+0x66>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	61bb      	str	r3, [r7, #24]
}
 800b492:	bf00      	nop
 800b494:	e7fe      	b.n	800b494 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b496:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d01e      	beq.n	800b4dc <xTaskCreateStatic+0xac>
 800b49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d01b      	beq.n	800b4dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b0:	2202      	movs	r2, #2
 800b4b2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	9303      	str	r3, [sp, #12]
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	9302      	str	r3, [sp, #8]
 800b4be:	f107 0314 	add.w	r3, r7, #20
 800b4c2:	9301      	str	r3, [sp, #4]
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	68b9      	ldr	r1, [r7, #8]
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f000 f850 	bl	800b574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4d6:	f000 f8f7 	bl	800b6c8 <prvAddNewTaskToReadyList>
 800b4da:	e001      	b.n	800b4e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4e0:	697b      	ldr	r3, [r7, #20]
	}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3728      	adds	r7, #40	; 0x28
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b08c      	sub	sp, #48	; 0x30
 800b4ee:	af04      	add	r7, sp, #16
 800b4f0:	60f8      	str	r0, [r7, #12]
 800b4f2:	60b9      	str	r1, [r7, #8]
 800b4f4:	603b      	str	r3, [r7, #0]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b4fa:	88fb      	ldrh	r3, [r7, #6]
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4618      	mov	r0, r3
 800b500:	f001 ff8a 	bl	800d418 <pvPortMalloc>
 800b504:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00e      	beq.n	800b52a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b50c:	20c0      	movs	r0, #192	; 0xc0
 800b50e:	f001 ff83 	bl	800d418 <pvPortMalloc>
 800b512:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d003      	beq.n	800b522 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	631a      	str	r2, [r3, #48]	; 0x30
 800b520:	e005      	b.n	800b52e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b522:	6978      	ldr	r0, [r7, #20]
 800b524:	f002 f844 	bl	800d5b0 <vPortFree>
 800b528:	e001      	b.n	800b52e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d017      	beq.n	800b564 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b53c:	88fa      	ldrh	r2, [r7, #6]
 800b53e:	2300      	movs	r3, #0
 800b540:	9303      	str	r3, [sp, #12]
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	9302      	str	r3, [sp, #8]
 800b546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b548:	9301      	str	r3, [sp, #4]
 800b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54c:	9300      	str	r3, [sp, #0]
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	68b9      	ldr	r1, [r7, #8]
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f000 f80e 	bl	800b574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b558:	69f8      	ldr	r0, [r7, #28]
 800b55a:	f000 f8b5 	bl	800b6c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b55e:	2301      	movs	r3, #1
 800b560:	61bb      	str	r3, [r7, #24]
 800b562:	e002      	b.n	800b56a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b568:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b56a:	69bb      	ldr	r3, [r7, #24]
	}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3720      	adds	r7, #32
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b088      	sub	sp, #32
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
 800b580:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b584:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	461a      	mov	r2, r3
 800b58c:	21a5      	movs	r1, #165	; 0xa5
 800b58e:	f002 fec5 	bl	800e31c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b59c:	3b01      	subs	r3, #1
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	f023 0307 	bic.w	r3, r3, #7
 800b5aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	f003 0307 	and.w	r3, r3, #7
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00a      	beq.n	800b5cc <prvInitialiseNewTask+0x58>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	617b      	str	r3, [r7, #20]
}
 800b5c8:	bf00      	nop
 800b5ca:	e7fe      	b.n	800b5ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d01f      	beq.n	800b612 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	61fb      	str	r3, [r7, #28]
 800b5d6:	e012      	b.n	800b5fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	4413      	add	r3, r2
 800b5de:	7819      	ldrb	r1, [r3, #0]
 800b5e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	3334      	adds	r3, #52	; 0x34
 800b5e8:	460a      	mov	r2, r1
 800b5ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b5ec:	68ba      	ldr	r2, [r7, #8]
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d006      	beq.n	800b606 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	61fb      	str	r3, [r7, #28]
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	2b0f      	cmp	r3, #15
 800b602:	d9e9      	bls.n	800b5d8 <prvInitialiseNewTask+0x64>
 800b604:	e000      	b.n	800b608 <prvInitialiseNewTask+0x94>
			{
				break;
 800b606:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b610:	e003      	b.n	800b61a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	2200      	movs	r2, #0
 800b616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61c:	2b37      	cmp	r3, #55	; 0x37
 800b61e:	d901      	bls.n	800b624 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b620:	2337      	movs	r3, #55	; 0x37
 800b622:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b628:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b62e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b632:	2200      	movs	r2, #0
 800b634:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b638:	3304      	adds	r3, #4
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7ff f8be 	bl	800a7bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b642:	3318      	adds	r3, #24
 800b644:	4618      	mov	r0, r3
 800b646:	f7ff f8b9 	bl	800a7bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b64e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b652:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b65e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b662:	2200      	movs	r2, #0
 800b664:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	2200      	movs	r2, #0
 800b66a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	2200      	movs	r2, #0
 800b672:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	3358      	adds	r3, #88	; 0x58
 800b67a:	2260      	movs	r2, #96	; 0x60
 800b67c:	2100      	movs	r1, #0
 800b67e:	4618      	mov	r0, r3
 800b680:	f002 fe4c 	bl	800e31c <memset>
 800b684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b686:	4a0d      	ldr	r2, [pc, #52]	; (800b6bc <prvInitialiseNewTask+0x148>)
 800b688:	65da      	str	r2, [r3, #92]	; 0x5c
 800b68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68c:	4a0c      	ldr	r2, [pc, #48]	; (800b6c0 <prvInitialiseNewTask+0x14c>)
 800b68e:	661a      	str	r2, [r3, #96]	; 0x60
 800b690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b692:	4a0c      	ldr	r2, [pc, #48]	; (800b6c4 <prvInitialiseNewTask+0x150>)
 800b694:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	68f9      	ldr	r1, [r7, #12]
 800b69a:	69b8      	ldr	r0, [r7, #24]
 800b69c:	f001 fc6e 	bl	800cf7c <pxPortInitialiseStack>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6b2:	bf00      	nop
 800b6b4:	3720      	adds	r7, #32
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	0800efcc 	.word	0x0800efcc
 800b6c0:	0800efec 	.word	0x0800efec
 800b6c4:	0800efac 	.word	0x0800efac

0800b6c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6d0:	f001 fd80 	bl	800d1d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6d4:	4b2d      	ldr	r3, [pc, #180]	; (800b78c <prvAddNewTaskToReadyList+0xc4>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	4a2c      	ldr	r2, [pc, #176]	; (800b78c <prvAddNewTaskToReadyList+0xc4>)
 800b6dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b6de:	4b2c      	ldr	r3, [pc, #176]	; (800b790 <prvAddNewTaskToReadyList+0xc8>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d109      	bne.n	800b6fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b6e6:	4a2a      	ldr	r2, [pc, #168]	; (800b790 <prvAddNewTaskToReadyList+0xc8>)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b6ec:	4b27      	ldr	r3, [pc, #156]	; (800b78c <prvAddNewTaskToReadyList+0xc4>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d110      	bne.n	800b716 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b6f4:	f000 fd3e 	bl	800c174 <prvInitialiseTaskLists>
 800b6f8:	e00d      	b.n	800b716 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b6fa:	4b26      	ldr	r3, [pc, #152]	; (800b794 <prvAddNewTaskToReadyList+0xcc>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d109      	bne.n	800b716 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b702:	4b23      	ldr	r3, [pc, #140]	; (800b790 <prvAddNewTaskToReadyList+0xc8>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d802      	bhi.n	800b716 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b710:	4a1f      	ldr	r2, [pc, #124]	; (800b790 <prvAddNewTaskToReadyList+0xc8>)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b716:	4b20      	ldr	r3, [pc, #128]	; (800b798 <prvAddNewTaskToReadyList+0xd0>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3301      	adds	r3, #1
 800b71c:	4a1e      	ldr	r2, [pc, #120]	; (800b798 <prvAddNewTaskToReadyList+0xd0>)
 800b71e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b720:	4b1d      	ldr	r3, [pc, #116]	; (800b798 <prvAddNewTaskToReadyList+0xd0>)
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72c:	4b1b      	ldr	r3, [pc, #108]	; (800b79c <prvAddNewTaskToReadyList+0xd4>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	429a      	cmp	r2, r3
 800b732:	d903      	bls.n	800b73c <prvAddNewTaskToReadyList+0x74>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b738:	4a18      	ldr	r2, [pc, #96]	; (800b79c <prvAddNewTaskToReadyList+0xd4>)
 800b73a:	6013      	str	r3, [r2, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b740:	4613      	mov	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	4413      	add	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4a15      	ldr	r2, [pc, #84]	; (800b7a0 <prvAddNewTaskToReadyList+0xd8>)
 800b74a:	441a      	add	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	3304      	adds	r3, #4
 800b750:	4619      	mov	r1, r3
 800b752:	4610      	mov	r0, r2
 800b754:	f7ff f83f 	bl	800a7d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b758:	f001 fd6c 	bl	800d234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b75c:	4b0d      	ldr	r3, [pc, #52]	; (800b794 <prvAddNewTaskToReadyList+0xcc>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00e      	beq.n	800b782 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b764:	4b0a      	ldr	r3, [pc, #40]	; (800b790 <prvAddNewTaskToReadyList+0xc8>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76e:	429a      	cmp	r2, r3
 800b770:	d207      	bcs.n	800b782 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b772:	4b0c      	ldr	r3, [pc, #48]	; (800b7a4 <prvAddNewTaskToReadyList+0xdc>)
 800b774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b782:	bf00      	nop
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	20001250 	.word	0x20001250
 800b790:	20000d7c 	.word	0x20000d7c
 800b794:	2000125c 	.word	0x2000125c
 800b798:	2000126c 	.word	0x2000126c
 800b79c:	20001258 	.word	0x20001258
 800b7a0:	20000d80 	.word	0x20000d80
 800b7a4:	e000ed04 	.word	0xe000ed04

0800b7a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d017      	beq.n	800b7ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7ba:	4b13      	ldr	r3, [pc, #76]	; (800b808 <vTaskDelay+0x60>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00a      	beq.n	800b7d8 <vTaskDelay+0x30>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	60bb      	str	r3, [r7, #8]
}
 800b7d4:	bf00      	nop
 800b7d6:	e7fe      	b.n	800b7d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b7d8:	f000 f8f4 	bl	800b9c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7dc:	2100      	movs	r1, #0
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f001 f82a 	bl	800c838 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7e4:	f000 f8fc 	bl	800b9e0 <xTaskResumeAll>
 800b7e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d107      	bne.n	800b800 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b7f0:	4b06      	ldr	r3, [pc, #24]	; (800b80c <vTaskDelay+0x64>)
 800b7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b800:	bf00      	nop
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	20001278 	.word	0x20001278
 800b80c:	e000ed04 	.word	0xe000ed04

0800b810 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800b810:	b580      	push	{r7, lr}
 800b812:	b088      	sub	sp, #32
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <eTaskGetState+0x28>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	60bb      	str	r3, [r7, #8]
}
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800b838:	4b23      	ldr	r3, [pc, #140]	; (800b8c8 <eTaskGetState+0xb8>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	69ba      	ldr	r2, [r7, #24]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d102      	bne.n	800b848 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800b842:	2300      	movs	r3, #0
 800b844:	77fb      	strb	r3, [r7, #31]
 800b846:	e03a      	b.n	800b8be <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800b848:	f001 fcc4 	bl	800d1d4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	695b      	ldr	r3, [r3, #20]
 800b850:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800b852:	4b1e      	ldr	r3, [pc, #120]	; (800b8cc <eTaskGetState+0xbc>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800b858:	4b1d      	ldr	r3, [pc, #116]	; (800b8d0 <eTaskGetState+0xc0>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800b85e:	f001 fce9 	bl	800d234 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800b862:	697a      	ldr	r2, [r7, #20]
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	429a      	cmp	r2, r3
 800b868:	d003      	beq.n	800b872 <eTaskGetState+0x62>
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d102      	bne.n	800b878 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800b872:	2302      	movs	r3, #2
 800b874:	77fb      	strb	r3, [r7, #31]
 800b876:	e022      	b.n	800b8be <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	4a16      	ldr	r2, [pc, #88]	; (800b8d4 <eTaskGetState+0xc4>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d112      	bne.n	800b8a6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10b      	bne.n	800b8a0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	2b01      	cmp	r3, #1
 800b892:	d102      	bne.n	800b89a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800b894:	2302      	movs	r3, #2
 800b896:	77fb      	strb	r3, [r7, #31]
 800b898:	e011      	b.n	800b8be <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800b89a:	2303      	movs	r3, #3
 800b89c:	77fb      	strb	r3, [r7, #31]
 800b89e:	e00e      	b.n	800b8be <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	77fb      	strb	r3, [r7, #31]
 800b8a4:	e00b      	b.n	800b8be <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	4a0b      	ldr	r2, [pc, #44]	; (800b8d8 <eTaskGetState+0xc8>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d002      	beq.n	800b8b4 <eTaskGetState+0xa4>
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d102      	bne.n	800b8ba <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800b8b4:	2304      	movs	r3, #4
 800b8b6:	77fb      	strb	r3, [r7, #31]
 800b8b8:	e001      	b.n	800b8be <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800b8be:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3720      	adds	r7, #32
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	20000d7c 	.word	0x20000d7c
 800b8cc:	20001208 	.word	0x20001208
 800b8d0:	2000120c 	.word	0x2000120c
 800b8d4:	2000123c 	.word	0x2000123c
 800b8d8:	20001224 	.word	0x20001224

0800b8dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b08a      	sub	sp, #40	; 0x28
 800b8e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8ea:	463a      	mov	r2, r7
 800b8ec:	1d39      	adds	r1, r7, #4
 800b8ee:	f107 0308 	add.w	r3, r7, #8
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe ff0e 	bl	800a714 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	9202      	str	r2, [sp, #8]
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	2300      	movs	r3, #0
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	2300      	movs	r3, #0
 800b908:	460a      	mov	r2, r1
 800b90a:	4925      	ldr	r1, [pc, #148]	; (800b9a0 <vTaskStartScheduler+0xc4>)
 800b90c:	4825      	ldr	r0, [pc, #148]	; (800b9a4 <vTaskStartScheduler+0xc8>)
 800b90e:	f7ff fd8f 	bl	800b430 <xTaskCreateStatic>
 800b912:	4603      	mov	r3, r0
 800b914:	4a24      	ldr	r2, [pc, #144]	; (800b9a8 <vTaskStartScheduler+0xcc>)
 800b916:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b918:	4b23      	ldr	r3, [pc, #140]	; (800b9a8 <vTaskStartScheduler+0xcc>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b920:	2301      	movs	r3, #1
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	e001      	b.n	800b92a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b926:	2300      	movs	r3, #0
 800b928:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d102      	bne.n	800b936 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b930:	f000 ffd6 	bl	800c8e0 <xTimerCreateTimerTask>
 800b934:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d11e      	bne.n	800b97a <vTaskStartScheduler+0x9e>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	613b      	str	r3, [r7, #16]
}
 800b94e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b950:	4b16      	ldr	r3, [pc, #88]	; (800b9ac <vTaskStartScheduler+0xd0>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	3358      	adds	r3, #88	; 0x58
 800b956:	4a16      	ldr	r2, [pc, #88]	; (800b9b0 <vTaskStartScheduler+0xd4>)
 800b958:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b95a:	4b16      	ldr	r3, [pc, #88]	; (800b9b4 <vTaskStartScheduler+0xd8>)
 800b95c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b960:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b962:	4b15      	ldr	r3, [pc, #84]	; (800b9b8 <vTaskStartScheduler+0xdc>)
 800b964:	2201      	movs	r2, #1
 800b966:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b968:	4b14      	ldr	r3, [pc, #80]	; (800b9bc <vTaskStartScheduler+0xe0>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b96e:	4b14      	ldr	r3, [pc, #80]	; (800b9c0 <vTaskStartScheduler+0xe4>)
 800b970:	2200      	movs	r2, #0
 800b972:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b974:	f001 fb8c 	bl	800d090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b978:	e00e      	b.n	800b998 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b980:	d10a      	bne.n	800b998 <vTaskStartScheduler+0xbc>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	60fb      	str	r3, [r7, #12]
}
 800b994:	bf00      	nop
 800b996:	e7fe      	b.n	800b996 <vTaskStartScheduler+0xba>
}
 800b998:	bf00      	nop
 800b99a:	3718      	adds	r7, #24
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	0800ee40 	.word	0x0800ee40
 800b9a4:	0800c145 	.word	0x0800c145
 800b9a8:	20001274 	.word	0x20001274
 800b9ac:	20000d7c 	.word	0x20000d7c
 800b9b0:	20000184 	.word	0x20000184
 800b9b4:	20001270 	.word	0x20001270
 800b9b8:	2000125c 	.word	0x2000125c
 800b9bc:	20001254 	.word	0x20001254
 800b9c0:	2000a598 	.word	0x2000a598

0800b9c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b9c8:	4b04      	ldr	r3, [pc, #16]	; (800b9dc <vTaskSuspendAll+0x18>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	4a03      	ldr	r2, [pc, #12]	; (800b9dc <vTaskSuspendAll+0x18>)
 800b9d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9d2:	bf00      	nop
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	20001278 	.word	0x20001278

0800b9e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9ee:	4b42      	ldr	r3, [pc, #264]	; (800baf8 <xTaskResumeAll+0x118>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10a      	bne.n	800ba0c <xTaskResumeAll+0x2c>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	603b      	str	r3, [r7, #0]
}
 800ba08:	bf00      	nop
 800ba0a:	e7fe      	b.n	800ba0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba0c:	f001 fbe2 	bl	800d1d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba10:	4b39      	ldr	r3, [pc, #228]	; (800baf8 <xTaskResumeAll+0x118>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3b01      	subs	r3, #1
 800ba16:	4a38      	ldr	r2, [pc, #224]	; (800baf8 <xTaskResumeAll+0x118>)
 800ba18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba1a:	4b37      	ldr	r3, [pc, #220]	; (800baf8 <xTaskResumeAll+0x118>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d162      	bne.n	800bae8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba22:	4b36      	ldr	r3, [pc, #216]	; (800bafc <xTaskResumeAll+0x11c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d05e      	beq.n	800bae8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba2a:	e02f      	b.n	800ba8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba2c:	4b34      	ldr	r3, [pc, #208]	; (800bb00 <xTaskResumeAll+0x120>)
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	3318      	adds	r3, #24
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7fe ff29 	bl	800a890 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	3304      	adds	r3, #4
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fe ff24 	bl	800a890 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4c:	4b2d      	ldr	r3, [pc, #180]	; (800bb04 <xTaskResumeAll+0x124>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d903      	bls.n	800ba5c <xTaskResumeAll+0x7c>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba58:	4a2a      	ldr	r2, [pc, #168]	; (800bb04 <xTaskResumeAll+0x124>)
 800ba5a:	6013      	str	r3, [r2, #0]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba60:	4613      	mov	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4413      	add	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4a27      	ldr	r2, [pc, #156]	; (800bb08 <xTaskResumeAll+0x128>)
 800ba6a:	441a      	add	r2, r3
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3304      	adds	r3, #4
 800ba70:	4619      	mov	r1, r3
 800ba72:	4610      	mov	r0, r2
 800ba74:	f7fe feaf 	bl	800a7d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba7c:	4b23      	ldr	r3, [pc, #140]	; (800bb0c <xTaskResumeAll+0x12c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d302      	bcc.n	800ba8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba86:	4b22      	ldr	r3, [pc, #136]	; (800bb10 <xTaskResumeAll+0x130>)
 800ba88:	2201      	movs	r2, #1
 800ba8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba8c:	4b1c      	ldr	r3, [pc, #112]	; (800bb00 <xTaskResumeAll+0x120>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1cb      	bne.n	800ba2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba9a:	f000 fce1 	bl	800c460 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba9e:	4b1d      	ldr	r3, [pc, #116]	; (800bb14 <xTaskResumeAll+0x134>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d010      	beq.n	800bacc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800baaa:	f000 f8d7 	bl	800bc5c <xTaskIncrementTick>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bab4:	4b16      	ldr	r3, [pc, #88]	; (800bb10 <xTaskResumeAll+0x130>)
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	3b01      	subs	r3, #1
 800babe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1f1      	bne.n	800baaa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bac6:	4b13      	ldr	r3, [pc, #76]	; (800bb14 <xTaskResumeAll+0x134>)
 800bac8:	2200      	movs	r2, #0
 800baca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bacc:	4b10      	ldr	r3, [pc, #64]	; (800bb10 <xTaskResumeAll+0x130>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d009      	beq.n	800bae8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bad4:	2301      	movs	r3, #1
 800bad6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bad8:	4b0f      	ldr	r3, [pc, #60]	; (800bb18 <xTaskResumeAll+0x138>)
 800bada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bae8:	f001 fba4 	bl	800d234 <vPortExitCritical>

	return xAlreadyYielded;
 800baec:	68bb      	ldr	r3, [r7, #8]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	20001278 	.word	0x20001278
 800bafc:	20001250 	.word	0x20001250
 800bb00:	20001210 	.word	0x20001210
 800bb04:	20001258 	.word	0x20001258
 800bb08:	20000d80 	.word	0x20000d80
 800bb0c:	20000d7c 	.word	0x20000d7c
 800bb10:	20001264 	.word	0x20001264
 800bb14:	20001260 	.word	0x20001260
 800bb18:	e000ed04 	.word	0xe000ed04

0800bb1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb22:	4b05      	ldr	r3, [pc, #20]	; (800bb38 <xTaskGetTickCount+0x1c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb28:	687b      	ldr	r3, [r7, #4]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	370c      	adds	r7, #12
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	20001254 	.word	0x20001254

0800bb3c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	617b      	str	r3, [r7, #20]
 800bb4c:	2338      	movs	r3, #56	; 0x38
 800bb4e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800bb50:	f7ff ff38 	bl	800b9c4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800bb54:	4b3a      	ldr	r3, [pc, #232]	; (800bc40 <uxTaskGetSystemState+0x104>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d369      	bcc.n	800bc32 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800bb64:	697a      	ldr	r2, [r7, #20]
 800bb66:	4613      	mov	r3, r2
 800bb68:	00db      	lsls	r3, r3, #3
 800bb6a:	4413      	add	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	461a      	mov	r2, r3
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	1898      	adds	r0, r3, r2
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	4613      	mov	r3, r2
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	4413      	add	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4a31      	ldr	r2, [pc, #196]	; (800bc44 <uxTaskGetSystemState+0x108>)
 800bb80:	4413      	add	r3, r2
 800bb82:	2201      	movs	r2, #1
 800bb84:	4619      	mov	r1, r3
 800bb86:	f000 fbc9 	bl	800c31c <prvListTasksWithinSingleList>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	4413      	add	r3, r2
 800bb90:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1e2      	bne.n	800bb5e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	4413      	add	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	461a      	mov	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4413      	add	r3, r2
 800bba8:	4a27      	ldr	r2, [pc, #156]	; (800bc48 <uxTaskGetSystemState+0x10c>)
 800bbaa:	6811      	ldr	r1, [r2, #0]
 800bbac:	2202      	movs	r2, #2
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 fbb4 	bl	800c31c <prvListTasksWithinSingleList>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	4413      	add	r3, r2
 800bbba:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800bbbc:	697a      	ldr	r2, [r7, #20]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	00db      	lsls	r3, r3, #3
 800bbc2:	4413      	add	r3, r2
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4413      	add	r3, r2
 800bbcc:	4a1f      	ldr	r2, [pc, #124]	; (800bc4c <uxTaskGetSystemState+0x110>)
 800bbce:	6811      	ldr	r1, [r2, #0]
 800bbd0:	2202      	movs	r2, #2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 fba2 	bl	800c31c <prvListTasksWithinSingleList>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	4413      	add	r3, r2
 800bbde:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	00db      	lsls	r3, r3, #3
 800bbe6:	4413      	add	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	461a      	mov	r2, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4413      	add	r3, r2
 800bbf0:	2204      	movs	r2, #4
 800bbf2:	4917      	ldr	r1, [pc, #92]	; (800bc50 <uxTaskGetSystemState+0x114>)
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f000 fb91 	bl	800c31c <prvListTasksWithinSingleList>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	4413      	add	r3, r2
 800bc00:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800bc02:	697a      	ldr	r2, [r7, #20]
 800bc04:	4613      	mov	r3, r2
 800bc06:	00db      	lsls	r3, r3, #3
 800bc08:	4413      	add	r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	4413      	add	r3, r2
 800bc12:	2203      	movs	r2, #3
 800bc14:	490f      	ldr	r1, [pc, #60]	; (800bc54 <uxTaskGetSystemState+0x118>)
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 fb80 	bl	800c31c <prvListTasksWithinSingleList>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	4413      	add	r3, r2
 800bc22:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bc2a:	4b0b      	ldr	r3, [pc, #44]	; (800bc58 <uxTaskGetSystemState+0x11c>)
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800bc32:	f7ff fed5 	bl	800b9e0 <xTaskResumeAll>

		return uxTask;
 800bc36:	697b      	ldr	r3, [r7, #20]
	}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3718      	adds	r7, #24
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	20001250 	.word	0x20001250
 800bc44:	20000d80 	.word	0x20000d80
 800bc48:	20001208 	.word	0x20001208
 800bc4c:	2000120c 	.word	0x2000120c
 800bc50:	20001224 	.word	0x20001224
 800bc54:	2000123c 	.word	0x2000123c
 800bc58:	2000a598 	.word	0x2000a598

0800bc5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc62:	2300      	movs	r3, #0
 800bc64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc66:	4b4f      	ldr	r3, [pc, #316]	; (800bda4 <xTaskIncrementTick+0x148>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	f040 808f 	bne.w	800bd8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc70:	4b4d      	ldr	r3, [pc, #308]	; (800bda8 <xTaskIncrementTick+0x14c>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	3301      	adds	r3, #1
 800bc76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc78:	4a4b      	ldr	r2, [pc, #300]	; (800bda8 <xTaskIncrementTick+0x14c>)
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d120      	bne.n	800bcc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc84:	4b49      	ldr	r3, [pc, #292]	; (800bdac <xTaskIncrementTick+0x150>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00a      	beq.n	800bca4 <xTaskIncrementTick+0x48>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	603b      	str	r3, [r7, #0]
}
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <xTaskIncrementTick+0x46>
 800bca4:	4b41      	ldr	r3, [pc, #260]	; (800bdac <xTaskIncrementTick+0x150>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	4b41      	ldr	r3, [pc, #260]	; (800bdb0 <xTaskIncrementTick+0x154>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a3f      	ldr	r2, [pc, #252]	; (800bdac <xTaskIncrementTick+0x150>)
 800bcb0:	6013      	str	r3, [r2, #0]
 800bcb2:	4a3f      	ldr	r2, [pc, #252]	; (800bdb0 <xTaskIncrementTick+0x154>)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	4b3e      	ldr	r3, [pc, #248]	; (800bdb4 <xTaskIncrementTick+0x158>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	4a3d      	ldr	r2, [pc, #244]	; (800bdb4 <xTaskIncrementTick+0x158>)
 800bcc0:	6013      	str	r3, [r2, #0]
 800bcc2:	f000 fbcd 	bl	800c460 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bcc6:	4b3c      	ldr	r3, [pc, #240]	; (800bdb8 <xTaskIncrementTick+0x15c>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	693a      	ldr	r2, [r7, #16]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d349      	bcc.n	800bd64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcd0:	4b36      	ldr	r3, [pc, #216]	; (800bdac <xTaskIncrementTick+0x150>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d104      	bne.n	800bce4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcda:	4b37      	ldr	r3, [pc, #220]	; (800bdb8 <xTaskIncrementTick+0x15c>)
 800bcdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bce0:	601a      	str	r2, [r3, #0]
					break;
 800bce2:	e03f      	b.n	800bd64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce4:	4b31      	ldr	r3, [pc, #196]	; (800bdac <xTaskIncrementTick+0x150>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d203      	bcs.n	800bd04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bcfc:	4a2e      	ldr	r2, [pc, #184]	; (800bdb8 <xTaskIncrementTick+0x15c>)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd02:	e02f      	b.n	800bd64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	3304      	adds	r3, #4
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7fe fdc1 	bl	800a890 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d004      	beq.n	800bd20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	3318      	adds	r3, #24
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fe fdb8 	bl	800a890 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd24:	4b25      	ldr	r3, [pc, #148]	; (800bdbc <xTaskIncrementTick+0x160>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d903      	bls.n	800bd34 <xTaskIncrementTick+0xd8>
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd30:	4a22      	ldr	r2, [pc, #136]	; (800bdbc <xTaskIncrementTick+0x160>)
 800bd32:	6013      	str	r3, [r2, #0]
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd38:	4613      	mov	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4a1f      	ldr	r2, [pc, #124]	; (800bdc0 <xTaskIncrementTick+0x164>)
 800bd42:	441a      	add	r2, r3
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	3304      	adds	r3, #4
 800bd48:	4619      	mov	r1, r3
 800bd4a:	4610      	mov	r0, r2
 800bd4c:	f7fe fd43 	bl	800a7d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd54:	4b1b      	ldr	r3, [pc, #108]	; (800bdc4 <xTaskIncrementTick+0x168>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d3b8      	bcc.n	800bcd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd62:	e7b5      	b.n	800bcd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd64:	4b17      	ldr	r3, [pc, #92]	; (800bdc4 <xTaskIncrementTick+0x168>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd6a:	4915      	ldr	r1, [pc, #84]	; (800bdc0 <xTaskIncrementTick+0x164>)
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	440b      	add	r3, r1
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d901      	bls.n	800bd80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bd80:	4b11      	ldr	r3, [pc, #68]	; (800bdc8 <xTaskIncrementTick+0x16c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d007      	beq.n	800bd98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	617b      	str	r3, [r7, #20]
 800bd8c:	e004      	b.n	800bd98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <xTaskIncrementTick+0x170>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3301      	adds	r3, #1
 800bd94:	4a0d      	ldr	r2, [pc, #52]	; (800bdcc <xTaskIncrementTick+0x170>)
 800bd96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bd98:	697b      	ldr	r3, [r7, #20]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3718      	adds	r7, #24
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	20001278 	.word	0x20001278
 800bda8:	20001254 	.word	0x20001254
 800bdac:	20001208 	.word	0x20001208
 800bdb0:	2000120c 	.word	0x2000120c
 800bdb4:	20001268 	.word	0x20001268
 800bdb8:	20001270 	.word	0x20001270
 800bdbc:	20001258 	.word	0x20001258
 800bdc0:	20000d80 	.word	0x20000d80
 800bdc4:	20000d7c 	.word	0x20000d7c
 800bdc8:	20001264 	.word	0x20001264
 800bdcc:	20001260 	.word	0x20001260

0800bdd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bdd6:	4b36      	ldr	r3, [pc, #216]	; (800beb0 <vTaskSwitchContext+0xe0>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d003      	beq.n	800bde6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bdde:	4b35      	ldr	r3, [pc, #212]	; (800beb4 <vTaskSwitchContext+0xe4>)
 800bde0:	2201      	movs	r2, #1
 800bde2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bde4:	e05e      	b.n	800bea4 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800bde6:	4b33      	ldr	r3, [pc, #204]	; (800beb4 <vTaskSwitchContext+0xe4>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bdec:	4b32      	ldr	r3, [pc, #200]	; (800beb8 <vTaskSwitchContext+0xe8>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a32      	ldr	r2, [pc, #200]	; (800bebc <vTaskSwitchContext+0xec>)
 800bdf2:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800bdf4:	4b31      	ldr	r3, [pc, #196]	; (800bebc <vTaskSwitchContext+0xec>)
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	4b31      	ldr	r3, [pc, #196]	; (800bec0 <vTaskSwitchContext+0xf0>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d909      	bls.n	800be14 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800be00:	4b30      	ldr	r3, [pc, #192]	; (800bec4 <vTaskSwitchContext+0xf4>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be06:	4a2d      	ldr	r2, [pc, #180]	; (800bebc <vTaskSwitchContext+0xec>)
 800be08:	6810      	ldr	r0, [r2, #0]
 800be0a:	4a2d      	ldr	r2, [pc, #180]	; (800bec0 <vTaskSwitchContext+0xf0>)
 800be0c:	6812      	ldr	r2, [r2, #0]
 800be0e:	1a82      	subs	r2, r0, r2
 800be10:	440a      	add	r2, r1
 800be12:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800be14:	4b29      	ldr	r3, [pc, #164]	; (800bebc <vTaskSwitchContext+0xec>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a29      	ldr	r2, [pc, #164]	; (800bec0 <vTaskSwitchContext+0xf0>)
 800be1a:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be1c:	4b2a      	ldr	r3, [pc, #168]	; (800bec8 <vTaskSwitchContext+0xf8>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	60fb      	str	r3, [r7, #12]
 800be22:	e010      	b.n	800be46 <vTaskSwitchContext+0x76>
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10a      	bne.n	800be40 <vTaskSwitchContext+0x70>
	__asm volatile
 800be2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2e:	f383 8811 	msr	BASEPRI, r3
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	f3bf 8f4f 	dsb	sy
 800be3a:	607b      	str	r3, [r7, #4]
}
 800be3c:	bf00      	nop
 800be3e:	e7fe      	b.n	800be3e <vTaskSwitchContext+0x6e>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	3b01      	subs	r3, #1
 800be44:	60fb      	str	r3, [r7, #12]
 800be46:	4921      	ldr	r1, [pc, #132]	; (800becc <vTaskSwitchContext+0xfc>)
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	4613      	mov	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4413      	add	r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	440b      	add	r3, r1
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d0e4      	beq.n	800be24 <vTaskSwitchContext+0x54>
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	4613      	mov	r3, r2
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	4413      	add	r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4a19      	ldr	r2, [pc, #100]	; (800becc <vTaskSwitchContext+0xfc>)
 800be66:	4413      	add	r3, r2
 800be68:	60bb      	str	r3, [r7, #8]
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	685a      	ldr	r2, [r3, #4]
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	605a      	str	r2, [r3, #4]
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	3308      	adds	r3, #8
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d104      	bne.n	800be8a <vTaskSwitchContext+0xba>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	685a      	ldr	r2, [r3, #4]
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	605a      	str	r2, [r3, #4]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	4a0c      	ldr	r2, [pc, #48]	; (800bec4 <vTaskSwitchContext+0xf4>)
 800be92:	6013      	str	r3, [r2, #0]
 800be94:	4a0c      	ldr	r2, [pc, #48]	; (800bec8 <vTaskSwitchContext+0xf8>)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be9a:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <vTaskSwitchContext+0xf4>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	3358      	adds	r3, #88	; 0x58
 800bea0:	4a0b      	ldr	r2, [pc, #44]	; (800bed0 <vTaskSwitchContext+0x100>)
 800bea2:	6013      	str	r3, [r2, #0]
}
 800bea4:	bf00      	nop
 800bea6:	3714      	adds	r7, #20
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	20001278 	.word	0x20001278
 800beb4:	20001264 	.word	0x20001264
 800beb8:	2000a598 	.word	0x2000a598
 800bebc:	20001280 	.word	0x20001280
 800bec0:	2000127c 	.word	0x2000127c
 800bec4:	20000d7c 	.word	0x20000d7c
 800bec8:	20001258 	.word	0x20001258
 800becc:	20000d80 	.word	0x20000d80
 800bed0:	20000184 	.word	0x20000184

0800bed4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10a      	bne.n	800befa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	60fb      	str	r3, [r7, #12]
}
 800bef6:	bf00      	nop
 800bef8:	e7fe      	b.n	800bef8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800befa:	4b07      	ldr	r3, [pc, #28]	; (800bf18 <vTaskPlaceOnEventList+0x44>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3318      	adds	r3, #24
 800bf00:	4619      	mov	r1, r3
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7fe fc8b 	bl	800a81e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf08:	2101      	movs	r1, #1
 800bf0a:	6838      	ldr	r0, [r7, #0]
 800bf0c:	f000 fc94 	bl	800c838 <prvAddCurrentTaskToDelayedList>
}
 800bf10:	bf00      	nop
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	20000d7c 	.word	0x20000d7c

0800bf1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10a      	bne.n	800bf44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	617b      	str	r3, [r7, #20]
}
 800bf40:	bf00      	nop
 800bf42:	e7fe      	b.n	800bf42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf44:	4b0a      	ldr	r3, [pc, #40]	; (800bf70 <vTaskPlaceOnEventListRestricted+0x54>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3318      	adds	r3, #24
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f7fe fc42 	bl	800a7d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d002      	beq.n	800bf5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bf58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bf5e:	6879      	ldr	r1, [r7, #4]
 800bf60:	68b8      	ldr	r0, [r7, #8]
 800bf62:	f000 fc69 	bl	800c838 <prvAddCurrentTaskToDelayedList>
	}
 800bf66:	bf00      	nop
 800bf68:	3718      	adds	r7, #24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	20000d7c 	.word	0x20000d7c

0800bf74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10a      	bne.n	800bfa0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	60fb      	str	r3, [r7, #12]
}
 800bf9c:	bf00      	nop
 800bf9e:	e7fe      	b.n	800bf9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	3318      	adds	r3, #24
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe fc73 	bl	800a890 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfaa:	4b1e      	ldr	r3, [pc, #120]	; (800c024 <xTaskRemoveFromEventList+0xb0>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d11d      	bne.n	800bfee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fe fc6a 	bl	800a890 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc0:	4b19      	ldr	r3, [pc, #100]	; (800c028 <xTaskRemoveFromEventList+0xb4>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d903      	bls.n	800bfd0 <xTaskRemoveFromEventList+0x5c>
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfcc:	4a16      	ldr	r2, [pc, #88]	; (800c028 <xTaskRemoveFromEventList+0xb4>)
 800bfce:	6013      	str	r3, [r2, #0]
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4a13      	ldr	r2, [pc, #76]	; (800c02c <xTaskRemoveFromEventList+0xb8>)
 800bfde:	441a      	add	r2, r3
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	3304      	adds	r3, #4
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	f7fe fbf5 	bl	800a7d6 <vListInsertEnd>
 800bfec:	e005      	b.n	800bffa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	3318      	adds	r3, #24
 800bff2:	4619      	mov	r1, r3
 800bff4:	480e      	ldr	r0, [pc, #56]	; (800c030 <xTaskRemoveFromEventList+0xbc>)
 800bff6:	f7fe fbee 	bl	800a7d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffe:	4b0d      	ldr	r3, [pc, #52]	; (800c034 <xTaskRemoveFromEventList+0xc0>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c004:	429a      	cmp	r2, r3
 800c006:	d905      	bls.n	800c014 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c008:	2301      	movs	r3, #1
 800c00a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c00c:	4b0a      	ldr	r3, [pc, #40]	; (800c038 <xTaskRemoveFromEventList+0xc4>)
 800c00e:	2201      	movs	r2, #1
 800c010:	601a      	str	r2, [r3, #0]
 800c012:	e001      	b.n	800c018 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c014:	2300      	movs	r3, #0
 800c016:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c018:	697b      	ldr	r3, [r7, #20]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3718      	adds	r7, #24
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	20001278 	.word	0x20001278
 800c028:	20001258 	.word	0x20001258
 800c02c:	20000d80 	.word	0x20000d80
 800c030:	20001210 	.word	0x20001210
 800c034:	20000d7c 	.word	0x20000d7c
 800c038:	20001264 	.word	0x20001264

0800c03c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c044:	4b06      	ldr	r3, [pc, #24]	; (800c060 <vTaskInternalSetTimeOutState+0x24>)
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c04c:	4b05      	ldr	r3, [pc, #20]	; (800c064 <vTaskInternalSetTimeOutState+0x28>)
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	605a      	str	r2, [r3, #4]
}
 800c054:	bf00      	nop
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	20001268 	.word	0x20001268
 800c064:	20001254 	.word	0x20001254

0800c068 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b088      	sub	sp, #32
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10a      	bne.n	800c08e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	613b      	str	r3, [r7, #16]
}
 800c08a:	bf00      	nop
 800c08c:	e7fe      	b.n	800c08c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	60fb      	str	r3, [r7, #12]
}
 800c0a6:	bf00      	nop
 800c0a8:	e7fe      	b.n	800c0a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c0aa:	f001 f893 	bl	800d1d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c0ae:	4b1d      	ldr	r3, [pc, #116]	; (800c124 <xTaskCheckForTimeOut+0xbc>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	69ba      	ldr	r2, [r7, #24]
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0c6:	d102      	bne.n	800c0ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	61fb      	str	r3, [r7, #28]
 800c0cc:	e023      	b.n	800c116 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	4b15      	ldr	r3, [pc, #84]	; (800c128 <xTaskCheckForTimeOut+0xc0>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d007      	beq.n	800c0ea <xTaskCheckForTimeOut+0x82>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	69ba      	ldr	r2, [r7, #24]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d302      	bcc.n	800c0ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	61fb      	str	r3, [r7, #28]
 800c0e8:	e015      	b.n	800c116 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	697a      	ldr	r2, [r7, #20]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d20b      	bcs.n	800c10c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	1ad2      	subs	r2, r2, r3
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7ff ff9b 	bl	800c03c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c106:	2300      	movs	r3, #0
 800c108:	61fb      	str	r3, [r7, #28]
 800c10a:	e004      	b.n	800c116 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	2200      	movs	r2, #0
 800c110:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c112:	2301      	movs	r3, #1
 800c114:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c116:	f001 f88d 	bl	800d234 <vPortExitCritical>

	return xReturn;
 800c11a:	69fb      	ldr	r3, [r7, #28]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3720      	adds	r7, #32
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	20001254 	.word	0x20001254
 800c128:	20001268 	.word	0x20001268

0800c12c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c12c:	b480      	push	{r7}
 800c12e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c130:	4b03      	ldr	r3, [pc, #12]	; (800c140 <vTaskMissedYield+0x14>)
 800c132:	2201      	movs	r2, #1
 800c134:	601a      	str	r2, [r3, #0]
}
 800c136:	bf00      	nop
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	20001264 	.word	0x20001264

0800c144 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c14c:	f000 f852 	bl	800c1f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c150:	4b06      	ldr	r3, [pc, #24]	; (800c16c <prvIdleTask+0x28>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b01      	cmp	r3, #1
 800c156:	d9f9      	bls.n	800c14c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c158:	4b05      	ldr	r3, [pc, #20]	; (800c170 <prvIdleTask+0x2c>)
 800c15a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c15e:	601a      	str	r2, [r3, #0]
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c168:	e7f0      	b.n	800c14c <prvIdleTask+0x8>
 800c16a:	bf00      	nop
 800c16c:	20000d80 	.word	0x20000d80
 800c170:	e000ed04 	.word	0xe000ed04

0800c174 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c17a:	2300      	movs	r3, #0
 800c17c:	607b      	str	r3, [r7, #4]
 800c17e:	e00c      	b.n	800c19a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	4613      	mov	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4a12      	ldr	r2, [pc, #72]	; (800c1d4 <prvInitialiseTaskLists+0x60>)
 800c18c:	4413      	add	r3, r2
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fe faf4 	bl	800a77c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	3301      	adds	r3, #1
 800c198:	607b      	str	r3, [r7, #4]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b37      	cmp	r3, #55	; 0x37
 800c19e:	d9ef      	bls.n	800c180 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c1a0:	480d      	ldr	r0, [pc, #52]	; (800c1d8 <prvInitialiseTaskLists+0x64>)
 800c1a2:	f7fe faeb 	bl	800a77c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c1a6:	480d      	ldr	r0, [pc, #52]	; (800c1dc <prvInitialiseTaskLists+0x68>)
 800c1a8:	f7fe fae8 	bl	800a77c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c1ac:	480c      	ldr	r0, [pc, #48]	; (800c1e0 <prvInitialiseTaskLists+0x6c>)
 800c1ae:	f7fe fae5 	bl	800a77c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c1b2:	480c      	ldr	r0, [pc, #48]	; (800c1e4 <prvInitialiseTaskLists+0x70>)
 800c1b4:	f7fe fae2 	bl	800a77c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c1b8:	480b      	ldr	r0, [pc, #44]	; (800c1e8 <prvInitialiseTaskLists+0x74>)
 800c1ba:	f7fe fadf 	bl	800a77c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c1be:	4b0b      	ldr	r3, [pc, #44]	; (800c1ec <prvInitialiseTaskLists+0x78>)
 800c1c0:	4a05      	ldr	r2, [pc, #20]	; (800c1d8 <prvInitialiseTaskLists+0x64>)
 800c1c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c1c4:	4b0a      	ldr	r3, [pc, #40]	; (800c1f0 <prvInitialiseTaskLists+0x7c>)
 800c1c6:	4a05      	ldr	r2, [pc, #20]	; (800c1dc <prvInitialiseTaskLists+0x68>)
 800c1c8:	601a      	str	r2, [r3, #0]
}
 800c1ca:	bf00      	nop
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	20000d80 	.word	0x20000d80
 800c1d8:	200011e0 	.word	0x200011e0
 800c1dc:	200011f4 	.word	0x200011f4
 800c1e0:	20001210 	.word	0x20001210
 800c1e4:	20001224 	.word	0x20001224
 800c1e8:	2000123c 	.word	0x2000123c
 800c1ec:	20001208 	.word	0x20001208
 800c1f0:	2000120c 	.word	0x2000120c

0800c1f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1fa:	e019      	b.n	800c230 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c1fc:	f000 ffea 	bl	800d1d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c200:	4b10      	ldr	r3, [pc, #64]	; (800c244 <prvCheckTasksWaitingTermination+0x50>)
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	3304      	adds	r3, #4
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fe fb3f 	bl	800a890 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c212:	4b0d      	ldr	r3, [pc, #52]	; (800c248 <prvCheckTasksWaitingTermination+0x54>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3b01      	subs	r3, #1
 800c218:	4a0b      	ldr	r2, [pc, #44]	; (800c248 <prvCheckTasksWaitingTermination+0x54>)
 800c21a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c21c:	4b0b      	ldr	r3, [pc, #44]	; (800c24c <prvCheckTasksWaitingTermination+0x58>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3b01      	subs	r3, #1
 800c222:	4a0a      	ldr	r2, [pc, #40]	; (800c24c <prvCheckTasksWaitingTermination+0x58>)
 800c224:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c226:	f001 f805 	bl	800d234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 f8e4 	bl	800c3f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c230:	4b06      	ldr	r3, [pc, #24]	; (800c24c <prvCheckTasksWaitingTermination+0x58>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1e1      	bne.n	800c1fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c238:	bf00      	nop
 800c23a:	bf00      	nop
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	20001224 	.word	0x20001224
 800c248:	20001250 	.word	0x20001250
 800c24c:	20001238 	.word	0x20001238

0800c250 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d102      	bne.n	800c26a <vTaskGetInfo+0x1a>
 800c264:	4b2c      	ldr	r3, [pc, #176]	; (800c318 <vTaskGetInfo+0xc8>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	e000      	b.n	800c26c <vTaskGetInfo+0x1c>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	697a      	ldr	r2, [r7, #20]
 800c272:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800c2a6:	78fb      	ldrb	r3, [r7, #3]
 800c2a8:	2b05      	cmp	r3, #5
 800c2aa:	d01a      	beq.n	800c2e2 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800c2ac:	4b1a      	ldr	r3, [pc, #104]	; (800c318 <vTaskGetInfo+0xc8>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d103      	bne.n	800c2be <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	731a      	strb	r2, [r3, #12]
 800c2bc:	e018      	b.n	800c2f0 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	78fa      	ldrb	r2, [r7, #3]
 800c2c2:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800c2c4:	78fb      	ldrb	r3, [r7, #3]
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	d112      	bne.n	800c2f0 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800c2ca:	f7ff fb7b 	bl	800b9c4 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	2202      	movs	r2, #2
 800c2da:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800c2dc:	f7ff fb80 	bl	800b9e0 <xTaskResumeAll>
 800c2e0:	e006      	b.n	800c2f0 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800c2e2:	6978      	ldr	r0, [r7, #20]
 800c2e4:	f7ff fa94 	bl	800b810 <eTaskGetState>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d009      	beq.n	800c30a <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 f860 	bl	800c3c0 <prvTaskCheckFreeStackSpace>
 800c300:	4603      	mov	r3, r0
 800c302:	461a      	mov	r2, r3
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800c308:	e002      	b.n	800c310 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	2200      	movs	r2, #0
 800c30e:	841a      	strh	r2, [r3, #32]
	}
 800c310:	bf00      	nop
 800c312:	3718      	adds	r7, #24
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	20000d7c 	.word	0x20000d7c

0800c31c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08a      	sub	sp, #40	; 0x28
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	4613      	mov	r3, r2
 800c328:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d03f      	beq.n	800c3b6 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	623b      	str	r3, [r7, #32]
 800c33a:	6a3b      	ldr	r3, [r7, #32]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	685a      	ldr	r2, [r3, #4]
 800c340:	6a3b      	ldr	r3, [r7, #32]
 800c342:	605a      	str	r2, [r3, #4]
 800c344:	6a3b      	ldr	r3, [r7, #32]
 800c346:	685a      	ldr	r2, [r3, #4]
 800c348:	6a3b      	ldr	r3, [r7, #32]
 800c34a:	3308      	adds	r3, #8
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d104      	bne.n	800c35a <prvListTasksWithinSingleList+0x3e>
 800c350:	6a3b      	ldr	r3, [r7, #32]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	6a3b      	ldr	r3, [r7, #32]
 800c358:	605a      	str	r2, [r3, #4]
 800c35a:	6a3b      	ldr	r3, [r7, #32]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	61bb      	str	r3, [r7, #24]
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	685a      	ldr	r2, [r3, #4]
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	605a      	str	r2, [r3, #4]
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	685a      	ldr	r2, [r3, #4]
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	3308      	adds	r3, #8
 800c378:	429a      	cmp	r2, r3
 800c37a:	d104      	bne.n	800c386 <prvListTasksWithinSingleList+0x6a>
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	685a      	ldr	r2, [r3, #4]
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	605a      	str	r2, [r3, #4]
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800c38e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c390:	4613      	mov	r3, r2
 800c392:	00db      	lsls	r3, r3, #3
 800c394:	4413      	add	r3, r2
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	461a      	mov	r2, r3
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	1899      	adds	r1, r3, r2
 800c39e:	79fb      	ldrb	r3, [r7, #7]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	6978      	ldr	r0, [r7, #20]
 800c3a4:	f7ff ff54 	bl	800c250 <vTaskGetInfo>
				uxTask++;
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800c3ae:	697a      	ldr	r2, [r7, #20]
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d1d5      	bne.n	800c362 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800c3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3728      	adds	r7, #40	; 0x28
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c3cc:	e005      	b.n	800c3da <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	2ba5      	cmp	r3, #165	; 0xa5
 800c3e0:	d0f5      	beq.n	800c3ce <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	089b      	lsrs	r3, r3, #2
 800c3e6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	b29b      	uxth	r3, r3
	}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3714      	adds	r7, #20
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	3358      	adds	r3, #88	; 0x58
 800c404:	4618      	mov	r0, r3
 800c406:	f002 f849 	bl	800e49c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c410:	2b00      	cmp	r3, #0
 800c412:	d108      	bne.n	800c426 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c418:	4618      	mov	r0, r3
 800c41a:	f001 f8c9 	bl	800d5b0 <vPortFree>
				vPortFree( pxTCB );
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f001 f8c6 	bl	800d5b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c424:	e018      	b.n	800c458 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d103      	bne.n	800c438 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f001 f8bd 	bl	800d5b0 <vPortFree>
	}
 800c436:	e00f      	b.n	800c458 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d00a      	beq.n	800c458 <prvDeleteTCB+0x60>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	60fb      	str	r3, [r7, #12]
}
 800c454:	bf00      	nop
 800c456:	e7fe      	b.n	800c456 <prvDeleteTCB+0x5e>
	}
 800c458:	bf00      	nop
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c466:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <prvResetNextTaskUnblockTime+0x38>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d104      	bne.n	800c47a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c470:	4b0a      	ldr	r3, [pc, #40]	; (800c49c <prvResetNextTaskUnblockTime+0x3c>)
 800c472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c476:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c478:	e008      	b.n	800c48c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c47a:	4b07      	ldr	r3, [pc, #28]	; (800c498 <prvResetNextTaskUnblockTime+0x38>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	4a04      	ldr	r2, [pc, #16]	; (800c49c <prvResetNextTaskUnblockTime+0x3c>)
 800c48a:	6013      	str	r3, [r2, #0]
}
 800c48c:	bf00      	nop
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr
 800c498:	20001208 	.word	0x20001208
 800c49c:	20001270 	.word	0x20001270

0800c4a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4a6:	4b0b      	ldr	r3, [pc, #44]	; (800c4d4 <xTaskGetSchedulerState+0x34>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d102      	bne.n	800c4b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	607b      	str	r3, [r7, #4]
 800c4b2:	e008      	b.n	800c4c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4b4:	4b08      	ldr	r3, [pc, #32]	; (800c4d8 <xTaskGetSchedulerState+0x38>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d102      	bne.n	800c4c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4bc:	2302      	movs	r3, #2
 800c4be:	607b      	str	r3, [r7, #4]
 800c4c0:	e001      	b.n	800c4c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4c6:	687b      	ldr	r3, [r7, #4]
	}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	2000125c 	.word	0x2000125c
 800c4d8:	20001278 	.word	0x20001278

0800c4dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d056      	beq.n	800c5a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c4f2:	4b2e      	ldr	r3, [pc, #184]	; (800c5ac <xTaskPriorityDisinherit+0xd0>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	693a      	ldr	r2, [r7, #16]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d00a      	beq.n	800c512 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	60fb      	str	r3, [r7, #12]
}
 800c50e:	bf00      	nop
 800c510:	e7fe      	b.n	800c510 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10a      	bne.n	800c530 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51e:	f383 8811 	msr	BASEPRI, r3
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	60bb      	str	r3, [r7, #8]
}
 800c52c:	bf00      	nop
 800c52e:	e7fe      	b.n	800c52e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c534:	1e5a      	subs	r2, r3, #1
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c542:	429a      	cmp	r2, r3
 800c544:	d02c      	beq.n	800c5a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d128      	bne.n	800c5a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	3304      	adds	r3, #4
 800c552:	4618      	mov	r0, r3
 800c554:	f7fe f99c 	bl	800a890 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c564:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c570:	4b0f      	ldr	r3, [pc, #60]	; (800c5b0 <xTaskPriorityDisinherit+0xd4>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	429a      	cmp	r2, r3
 800c576:	d903      	bls.n	800c580 <xTaskPriorityDisinherit+0xa4>
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57c:	4a0c      	ldr	r2, [pc, #48]	; (800c5b0 <xTaskPriorityDisinherit+0xd4>)
 800c57e:	6013      	str	r3, [r2, #0]
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c584:	4613      	mov	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	4a09      	ldr	r2, [pc, #36]	; (800c5b4 <xTaskPriorityDisinherit+0xd8>)
 800c58e:	441a      	add	r2, r3
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	3304      	adds	r3, #4
 800c594:	4619      	mov	r1, r3
 800c596:	4610      	mov	r0, r2
 800c598:	f7fe f91d 	bl	800a7d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c59c:	2301      	movs	r3, #1
 800c59e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5a0:	697b      	ldr	r3, [r7, #20]
	}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3718      	adds	r7, #24
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20000d7c 	.word	0x20000d7c
 800c5b0:	20001258 	.word	0x20001258
 800c5b4:	20000d80 	.word	0x20000d80

0800c5b8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800c5c2:	6839      	ldr	r1, [r7, #0]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f002 f804 	bl	800e5d2 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7f3 fe00 	bl	80001d0 <strlen>
 800c5d0:	60f8      	str	r0, [r7, #12]
 800c5d2:	e007      	b.n	800c5e4 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	4413      	add	r3, r2
 800c5da:	2220      	movs	r2, #32
 800c5dc:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	60fb      	str	r3, [r7, #12]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2b0e      	cmp	r3, #14
 800c5e8:	d9f4      	bls.n	800c5d4 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	4413      	add	r3, r2
	}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
	...

0800c604 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800c604:	b590      	push	{r4, r7, lr}
 800c606:	b089      	sub	sp, #36	; 0x24
 800c608:	af02      	add	r7, sp, #8
 800c60a:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800c612:	4b45      	ldr	r3, [pc, #276]	; (800c728 <vTaskList+0x124>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800c618:	4b43      	ldr	r3, [pc, #268]	; (800c728 <vTaskList+0x124>)
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	4613      	mov	r3, r2
 800c61e:	00db      	lsls	r3, r3, #3
 800c620:	4413      	add	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4618      	mov	r0, r3
 800c626:	f000 fef7 	bl	800d418 <pvPortMalloc>
 800c62a:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d076      	beq.n	800c720 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800c632:	2200      	movs	r2, #0
 800c634:	68f9      	ldr	r1, [r7, #12]
 800c636:	68b8      	ldr	r0, [r7, #8]
 800c638:	f7ff fa80 	bl	800bb3c <uxTaskGetSystemState>
 800c63c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800c63e:	2300      	movs	r3, #0
 800c640:	617b      	str	r3, [r7, #20]
 800c642:	e066      	b.n	800c712 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	4613      	mov	r3, r2
 800c648:	00db      	lsls	r3, r3, #3
 800c64a:	4413      	add	r3, r2
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	461a      	mov	r2, r3
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	4413      	add	r3, r2
 800c654:	7b1b      	ldrb	r3, [r3, #12]
 800c656:	2b04      	cmp	r3, #4
 800c658:	d81b      	bhi.n	800c692 <vTaskList+0x8e>
 800c65a:	a201      	add	r2, pc, #4	; (adr r2, 800c660 <vTaskList+0x5c>)
 800c65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c660:	0800c675 	.word	0x0800c675
 800c664:	0800c67b 	.word	0x0800c67b
 800c668:	0800c681 	.word	0x0800c681
 800c66c:	0800c687 	.word	0x0800c687
 800c670:	0800c68d 	.word	0x0800c68d
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800c674:	2358      	movs	r3, #88	; 0x58
 800c676:	74fb      	strb	r3, [r7, #19]
										break;
 800c678:	e00e      	b.n	800c698 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800c67a:	2352      	movs	r3, #82	; 0x52
 800c67c:	74fb      	strb	r3, [r7, #19]
										break;
 800c67e:	e00b      	b.n	800c698 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800c680:	2342      	movs	r3, #66	; 0x42
 800c682:	74fb      	strb	r3, [r7, #19]
										break;
 800c684:	e008      	b.n	800c698 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800c686:	2353      	movs	r3, #83	; 0x53
 800c688:	74fb      	strb	r3, [r7, #19]
										break;
 800c68a:	e005      	b.n	800c698 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800c68c:	2344      	movs	r3, #68	; 0x44
 800c68e:	74fb      	strb	r3, [r7, #19]
										break;
 800c690:	e002      	b.n	800c698 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800c692:	2300      	movs	r3, #0
 800c694:	74fb      	strb	r3, [r7, #19]
										break;
 800c696:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	4613      	mov	r3, r2
 800c69c:	00db      	lsls	r3, r3, #3
 800c69e:	4413      	add	r3, r2
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7ff ff83 	bl	800c5b8 <prvWriteNameToBuffer>
 800c6b2:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c6b4:	7cf9      	ldrb	r1, [r7, #19]
 800c6b6:	697a      	ldr	r2, [r7, #20]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	00db      	lsls	r3, r3, #3
 800c6bc:	4413      	add	r3, r2
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	6918      	ldr	r0, [r3, #16]
 800c6c8:	697a      	ldr	r2, [r7, #20]
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	00db      	lsls	r3, r3, #3
 800c6ce:	4413      	add	r3, r2
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	8c1b      	ldrh	r3, [r3, #32]
 800c6da:	461c      	mov	r4, r3
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	00db      	lsls	r3, r3, #3
 800c6e2:	4413      	add	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	9301      	str	r3, [sp, #4]
 800c6f0:	9400      	str	r4, [sp, #0]
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	460a      	mov	r2, r1
 800c6f6:	490d      	ldr	r1, [pc, #52]	; (800c72c <vTaskList+0x128>)
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f001 ff3b 	bl	800e574 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7f3 fd66 	bl	80001d0 <strlen>
 800c704:	4602      	mov	r2, r0
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4413      	add	r3, r2
 800c70a:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	3301      	adds	r3, #1
 800c710:	617b      	str	r3, [r7, #20]
 800c712:	697a      	ldr	r2, [r7, #20]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	429a      	cmp	r2, r3
 800c718:	d394      	bcc.n	800c644 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800c71a:	68b8      	ldr	r0, [r7, #8]
 800c71c:	f000 ff48 	bl	800d5b0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c720:	bf00      	nop
 800c722:	371c      	adds	r7, #28
 800c724:	46bd      	mov	sp, r7
 800c726:	bd90      	pop	{r4, r7, pc}
 800c728:	20001250 	.word	0x20001250
 800c72c:	0800ee48 	.word	0x0800ee48

0800c730 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800c730:	b580      	push	{r7, lr}
 800c732:	b088      	sub	sp, #32
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800c73e:	4b3a      	ldr	r3, [pc, #232]	; (800c828 <vTaskGetRunTimeStats+0xf8>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800c744:	4b38      	ldr	r3, [pc, #224]	; (800c828 <vTaskGetRunTimeStats+0xf8>)
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	4613      	mov	r3, r2
 800c74a:	00db      	lsls	r3, r3, #3
 800c74c:	4413      	add	r3, r2
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	4618      	mov	r0, r3
 800c752:	f000 fe61 	bl	800d418 <pvPortMalloc>
 800c756:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d05f      	beq.n	800c81e <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800c75e:	f107 030c 	add.w	r3, r7, #12
 800c762:	461a      	mov	r2, r3
 800c764:	69b9      	ldr	r1, [r7, #24]
 800c766:	6978      	ldr	r0, [r7, #20]
 800c768:	f7ff f9e8 	bl	800bb3c <uxTaskGetSystemState>
 800c76c:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	4a2e      	ldr	r2, [pc, #184]	; (800c82c <vTaskGetRunTimeStats+0xfc>)
 800c772:	fba2 2303 	umull	r2, r3, r2, r3
 800c776:	095b      	lsrs	r3, r3, #5
 800c778:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d04b      	beq.n	800c818 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800c780:	2300      	movs	r3, #0
 800c782:	61fb      	str	r3, [r7, #28]
 800c784:	e044      	b.n	800c810 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800c786:	69fa      	ldr	r2, [r7, #28]
 800c788:	4613      	mov	r3, r2
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	4413      	add	r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	461a      	mov	r2, r3
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	4413      	add	r3, r2
 800c796:	699a      	ldr	r2, [r3, #24]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c79e:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800c7a0:	69fa      	ldr	r2, [r7, #28]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	4413      	add	r3, r2
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff feff 	bl	800c5b8 <prvWriteNameToBuffer>
 800c7ba:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00e      	beq.n	800c7e0 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c7c2:	69fa      	ldr	r2, [r7, #28]
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	00db      	lsls	r3, r3, #3
 800c7c8:	4413      	add	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	699a      	ldr	r2, [r3, #24]
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	4916      	ldr	r1, [pc, #88]	; (800c830 <vTaskGetRunTimeStats+0x100>)
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f001 fecb 	bl	800e574 <siprintf>
 800c7de:	e00d      	b.n	800c7fc <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c7e0:	69fa      	ldr	r2, [r7, #28]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	00db      	lsls	r3, r3, #3
 800c7e6:	4413      	add	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	490f      	ldr	r1, [pc, #60]	; (800c834 <vTaskGetRunTimeStats+0x104>)
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f001 febc 	bl	800e574 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7f3 fce7 	bl	80001d0 <strlen>
 800c802:	4602      	mov	r2, r0
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4413      	add	r3, r2
 800c808:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	3301      	adds	r3, #1
 800c80e:	61fb      	str	r3, [r7, #28]
 800c810:	69fa      	ldr	r2, [r7, #28]
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	429a      	cmp	r2, r3
 800c816:	d3b6      	bcc.n	800c786 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800c818:	6978      	ldr	r0, [r7, #20]
 800c81a:	f000 fec9 	bl	800d5b0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c81e:	bf00      	nop
 800c820:	3720      	adds	r7, #32
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	20001250 	.word	0x20001250
 800c82c:	51eb851f 	.word	0x51eb851f
 800c830:	0800ee58 	.word	0x0800ee58
 800c834:	0800ee64 	.word	0x0800ee64

0800c838 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c842:	4b21      	ldr	r3, [pc, #132]	; (800c8c8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c848:	4b20      	ldr	r3, [pc, #128]	; (800c8cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3304      	adds	r3, #4
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fe f81e 	bl	800a890 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c85a:	d10a      	bne.n	800c872 <prvAddCurrentTaskToDelayedList+0x3a>
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d007      	beq.n	800c872 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c862:	4b1a      	ldr	r3, [pc, #104]	; (800c8cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	3304      	adds	r3, #4
 800c868:	4619      	mov	r1, r3
 800c86a:	4819      	ldr	r0, [pc, #100]	; (800c8d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c86c:	f7fd ffb3 	bl	800a7d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c870:	e026      	b.n	800c8c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	4413      	add	r3, r2
 800c878:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c87a:	4b14      	ldr	r3, [pc, #80]	; (800c8cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	429a      	cmp	r2, r3
 800c888:	d209      	bcs.n	800c89e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c88a:	4b12      	ldr	r3, [pc, #72]	; (800c8d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	3304      	adds	r3, #4
 800c894:	4619      	mov	r1, r3
 800c896:	4610      	mov	r0, r2
 800c898:	f7fd ffc1 	bl	800a81e <vListInsert>
}
 800c89c:	e010      	b.n	800c8c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c89e:	4b0e      	ldr	r3, [pc, #56]	; (800c8d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	4b0a      	ldr	r3, [pc, #40]	; (800c8cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	f7fd ffb7 	bl	800a81e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c8b0:	4b0a      	ldr	r3, [pc, #40]	; (800c8dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d202      	bcs.n	800c8c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c8ba:	4a08      	ldr	r2, [pc, #32]	; (800c8dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	6013      	str	r3, [r2, #0]
}
 800c8c0:	bf00      	nop
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	20001254 	.word	0x20001254
 800c8cc:	20000d7c 	.word	0x20000d7c
 800c8d0:	2000123c 	.word	0x2000123c
 800c8d4:	2000120c 	.word	0x2000120c
 800c8d8:	20001208 	.word	0x20001208
 800c8dc:	20001270 	.word	0x20001270

0800c8e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b08a      	sub	sp, #40	; 0x28
 800c8e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c8ea:	f000 fb07 	bl	800cefc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c8ee:	4b1c      	ldr	r3, [pc, #112]	; (800c960 <xTimerCreateTimerTask+0x80>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d021      	beq.n	800c93a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c8fe:	1d3a      	adds	r2, r7, #4
 800c900:	f107 0108 	add.w	r1, r7, #8
 800c904:	f107 030c 	add.w	r3, r7, #12
 800c908:	4618      	mov	r0, r3
 800c90a:	f7fd ff1d 	bl	800a748 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	9202      	str	r2, [sp, #8]
 800c916:	9301      	str	r3, [sp, #4]
 800c918:	2302      	movs	r3, #2
 800c91a:	9300      	str	r3, [sp, #0]
 800c91c:	2300      	movs	r3, #0
 800c91e:	460a      	mov	r2, r1
 800c920:	4910      	ldr	r1, [pc, #64]	; (800c964 <xTimerCreateTimerTask+0x84>)
 800c922:	4811      	ldr	r0, [pc, #68]	; (800c968 <xTimerCreateTimerTask+0x88>)
 800c924:	f7fe fd84 	bl	800b430 <xTaskCreateStatic>
 800c928:	4603      	mov	r3, r0
 800c92a:	4a10      	ldr	r2, [pc, #64]	; (800c96c <xTimerCreateTimerTask+0x8c>)
 800c92c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c92e:	4b0f      	ldr	r3, [pc, #60]	; (800c96c <xTimerCreateTimerTask+0x8c>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c936:	2301      	movs	r3, #1
 800c938:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10a      	bne.n	800c956 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	613b      	str	r3, [r7, #16]
}
 800c952:	bf00      	nop
 800c954:	e7fe      	b.n	800c954 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c956:	697b      	ldr	r3, [r7, #20]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3718      	adds	r7, #24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	200012b4 	.word	0x200012b4
 800c964:	0800ee70 	.word	0x0800ee70
 800c968:	0800caa5 	.word	0x0800caa5
 800c96c:	200012b8 	.word	0x200012b8

0800c970 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b08a      	sub	sp, #40	; 0x28
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
 800c97c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c97e:	2300      	movs	r3, #0
 800c980:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10a      	bne.n	800c99e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	623b      	str	r3, [r7, #32]
}
 800c99a:	bf00      	nop
 800c99c:	e7fe      	b.n	800c99c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c99e:	4b1a      	ldr	r3, [pc, #104]	; (800ca08 <xTimerGenericCommand+0x98>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d02a      	beq.n	800c9fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	2b05      	cmp	r3, #5
 800c9b6:	dc18      	bgt.n	800c9ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c9b8:	f7ff fd72 	bl	800c4a0 <xTaskGetSchedulerState>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d109      	bne.n	800c9d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c9c2:	4b11      	ldr	r3, [pc, #68]	; (800ca08 <xTimerGenericCommand+0x98>)
 800c9c4:	6818      	ldr	r0, [r3, #0]
 800c9c6:	f107 0110 	add.w	r1, r7, #16
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ce:	f7fe f8c7 	bl	800ab60 <xQueueGenericSend>
 800c9d2:	6278      	str	r0, [r7, #36]	; 0x24
 800c9d4:	e012      	b.n	800c9fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ca08 <xTimerGenericCommand+0x98>)
 800c9d8:	6818      	ldr	r0, [r3, #0]
 800c9da:	f107 0110 	add.w	r1, r7, #16
 800c9de:	2300      	movs	r3, #0
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f7fe f8bd 	bl	800ab60 <xQueueGenericSend>
 800c9e6:	6278      	str	r0, [r7, #36]	; 0x24
 800c9e8:	e008      	b.n	800c9fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c9ea:	4b07      	ldr	r3, [pc, #28]	; (800ca08 <xTimerGenericCommand+0x98>)
 800c9ec:	6818      	ldr	r0, [r3, #0]
 800c9ee:	f107 0110 	add.w	r1, r7, #16
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	683a      	ldr	r2, [r7, #0]
 800c9f6:	f7fe f9b1 	bl	800ad5c <xQueueGenericSendFromISR>
 800c9fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3728      	adds	r7, #40	; 0x28
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	200012b4 	.word	0x200012b4

0800ca0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b088      	sub	sp, #32
 800ca10:	af02      	add	r7, sp, #8
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca16:	4b22      	ldr	r3, [pc, #136]	; (800caa0 <prvProcessExpiredTimer+0x94>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	3304      	adds	r3, #4
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7fd ff33 	bl	800a890 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca30:	f003 0304 	and.w	r3, r3, #4
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d022      	beq.n	800ca7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	699a      	ldr	r2, [r3, #24]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	18d1      	adds	r1, r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	683a      	ldr	r2, [r7, #0]
 800ca44:	6978      	ldr	r0, [r7, #20]
 800ca46:	f000 f8d1 	bl	800cbec <prvInsertTimerInActiveList>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d01f      	beq.n	800ca90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca50:	2300      	movs	r3, #0
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	2300      	movs	r3, #0
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	2100      	movs	r1, #0
 800ca5a:	6978      	ldr	r0, [r7, #20]
 800ca5c:	f7ff ff88 	bl	800c970 <xTimerGenericCommand>
 800ca60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d113      	bne.n	800ca90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ca68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	60fb      	str	r3, [r7, #12]
}
 800ca7a:	bf00      	nop
 800ca7c:	e7fe      	b.n	800ca7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca84:	f023 0301 	bic.w	r3, r3, #1
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	6978      	ldr	r0, [r7, #20]
 800ca96:	4798      	blx	r3
}
 800ca98:	bf00      	nop
 800ca9a:	3718      	adds	r7, #24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	200012ac 	.word	0x200012ac

0800caa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800caac:	f107 0308 	add.w	r3, r7, #8
 800cab0:	4618      	mov	r0, r3
 800cab2:	f000 f857 	bl	800cb64 <prvGetNextExpireTime>
 800cab6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	4619      	mov	r1, r3
 800cabc:	68f8      	ldr	r0, [r7, #12]
 800cabe:	f000 f803 	bl	800cac8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cac2:	f000 f8d5 	bl	800cc70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cac6:	e7f1      	b.n	800caac <prvTimerTask+0x8>

0800cac8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cad2:	f7fe ff77 	bl	800b9c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cad6:	f107 0308 	add.w	r3, r7, #8
 800cada:	4618      	mov	r0, r3
 800cadc:	f000 f866 	bl	800cbac <prvSampleTimeNow>
 800cae0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d130      	bne.n	800cb4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d10a      	bne.n	800cb04 <prvProcessTimerOrBlockTask+0x3c>
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d806      	bhi.n	800cb04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800caf6:	f7fe ff73 	bl	800b9e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cafa:	68f9      	ldr	r1, [r7, #12]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff ff85 	bl	800ca0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cb02:	e024      	b.n	800cb4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d008      	beq.n	800cb1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb0a:	4b13      	ldr	r3, [pc, #76]	; (800cb58 <prvProcessTimerOrBlockTask+0x90>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d101      	bne.n	800cb18 <prvProcessTimerOrBlockTask+0x50>
 800cb14:	2301      	movs	r3, #1
 800cb16:	e000      	b.n	800cb1a <prvProcessTimerOrBlockTask+0x52>
 800cb18:	2300      	movs	r3, #0
 800cb1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cb1c:	4b0f      	ldr	r3, [pc, #60]	; (800cb5c <prvProcessTimerOrBlockTask+0x94>)
 800cb1e:	6818      	ldr	r0, [r3, #0]
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	1ad3      	subs	r3, r2, r3
 800cb26:	683a      	ldr	r2, [r7, #0]
 800cb28:	4619      	mov	r1, r3
 800cb2a:	f7fe fc4d 	bl	800b3c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cb2e:	f7fe ff57 	bl	800b9e0 <xTaskResumeAll>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10a      	bne.n	800cb4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cb38:	4b09      	ldr	r3, [pc, #36]	; (800cb60 <prvProcessTimerOrBlockTask+0x98>)
 800cb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb3e:	601a      	str	r2, [r3, #0]
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	f3bf 8f6f 	isb	sy
}
 800cb48:	e001      	b.n	800cb4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cb4a:	f7fe ff49 	bl	800b9e0 <xTaskResumeAll>
}
 800cb4e:	bf00      	nop
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	200012b0 	.word	0x200012b0
 800cb5c:	200012b4 	.word	0x200012b4
 800cb60:	e000ed04 	.word	0xe000ed04

0800cb64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cb6c:	4b0e      	ldr	r3, [pc, #56]	; (800cba8 <prvGetNextExpireTime+0x44>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d101      	bne.n	800cb7a <prvGetNextExpireTime+0x16>
 800cb76:	2201      	movs	r2, #1
 800cb78:	e000      	b.n	800cb7c <prvGetNextExpireTime+0x18>
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d105      	bne.n	800cb94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb88:	4b07      	ldr	r3, [pc, #28]	; (800cba8 <prvGetNextExpireTime+0x44>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	60fb      	str	r3, [r7, #12]
 800cb92:	e001      	b.n	800cb98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cb94:	2300      	movs	r3, #0
 800cb96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cb98:	68fb      	ldr	r3, [r7, #12]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3714      	adds	r7, #20
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	200012ac 	.word	0x200012ac

0800cbac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cbb4:	f7fe ffb2 	bl	800bb1c <xTaskGetTickCount>
 800cbb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cbba:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <prvSampleTimeNow+0x3c>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	68fa      	ldr	r2, [r7, #12]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d205      	bcs.n	800cbd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cbc4:	f000 f936 	bl	800ce34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	e002      	b.n	800cbd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cbd6:	4a04      	ldr	r2, [pc, #16]	; (800cbe8 <prvSampleTimeNow+0x3c>)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	200012bc 	.word	0x200012bc

0800cbec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b086      	sub	sp, #24
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
 800cbf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d812      	bhi.n	800cc38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	1ad2      	subs	r2, r2, r3
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	699b      	ldr	r3, [r3, #24]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d302      	bcc.n	800cc26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cc20:	2301      	movs	r3, #1
 800cc22:	617b      	str	r3, [r7, #20]
 800cc24:	e01b      	b.n	800cc5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cc26:	4b10      	ldr	r3, [pc, #64]	; (800cc68 <prvInsertTimerInActiveList+0x7c>)
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	4619      	mov	r1, r3
 800cc30:	4610      	mov	r0, r2
 800cc32:	f7fd fdf4 	bl	800a81e <vListInsert>
 800cc36:	e012      	b.n	800cc5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d206      	bcs.n	800cc4e <prvInsertTimerInActiveList+0x62>
 800cc40:	68ba      	ldr	r2, [r7, #8]
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d302      	bcc.n	800cc4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	617b      	str	r3, [r7, #20]
 800cc4c:	e007      	b.n	800cc5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc4e:	4b07      	ldr	r3, [pc, #28]	; (800cc6c <prvInsertTimerInActiveList+0x80>)
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3304      	adds	r3, #4
 800cc56:	4619      	mov	r1, r3
 800cc58:	4610      	mov	r0, r2
 800cc5a:	f7fd fde0 	bl	800a81e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cc5e:	697b      	ldr	r3, [r7, #20]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3718      	adds	r7, #24
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	200012b0 	.word	0x200012b0
 800cc6c:	200012ac 	.word	0x200012ac

0800cc70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08e      	sub	sp, #56	; 0x38
 800cc74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc76:	e0ca      	b.n	800ce0e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	da18      	bge.n	800ccb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cc7e:	1d3b      	adds	r3, r7, #4
 800cc80:	3304      	adds	r3, #4
 800cc82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10a      	bne.n	800cca0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	61fb      	str	r3, [r7, #28]
}
 800cc9c:	bf00      	nop
 800cc9e:	e7fe      	b.n	800cc9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cca6:	6850      	ldr	r0, [r2, #4]
 800cca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccaa:	6892      	ldr	r2, [r2, #8]
 800ccac:	4611      	mov	r1, r2
 800ccae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f2c0 80aa 	blt.w	800ce0c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ccbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbe:	695b      	ldr	r3, [r3, #20]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d004      	beq.n	800ccce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ccc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7fd fde1 	bl	800a890 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ccce:	463b      	mov	r3, r7
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7ff ff6b 	bl	800cbac <prvSampleTimeNow>
 800ccd6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b09      	cmp	r3, #9
 800ccdc:	f200 8097 	bhi.w	800ce0e <prvProcessReceivedCommands+0x19e>
 800cce0:	a201      	add	r2, pc, #4	; (adr r2, 800cce8 <prvProcessReceivedCommands+0x78>)
 800cce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce6:	bf00      	nop
 800cce8:	0800cd11 	.word	0x0800cd11
 800ccec:	0800cd11 	.word	0x0800cd11
 800ccf0:	0800cd11 	.word	0x0800cd11
 800ccf4:	0800cd85 	.word	0x0800cd85
 800ccf8:	0800cd99 	.word	0x0800cd99
 800ccfc:	0800cde3 	.word	0x0800cde3
 800cd00:	0800cd11 	.word	0x0800cd11
 800cd04:	0800cd11 	.word	0x0800cd11
 800cd08:	0800cd85 	.word	0x0800cd85
 800cd0c:	0800cd99 	.word	0x0800cd99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd16:	f043 0301 	orr.w	r3, r3, #1
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cd22:	68ba      	ldr	r2, [r7, #8]
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	699b      	ldr	r3, [r3, #24]
 800cd28:	18d1      	adds	r1, r2, r3
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd30:	f7ff ff5c 	bl	800cbec <prvInsertTimerInActiveList>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d069      	beq.n	800ce0e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3c:	6a1b      	ldr	r3, [r3, #32]
 800cd3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd48:	f003 0304 	and.w	r3, r3, #4
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d05e      	beq.n	800ce0e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cd50:	68ba      	ldr	r2, [r7, #8]
 800cd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd54:	699b      	ldr	r3, [r3, #24]
 800cd56:	441a      	add	r2, r3
 800cd58:	2300      	movs	r3, #0
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	2100      	movs	r1, #0
 800cd60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd62:	f7ff fe05 	bl	800c970 <xTimerGenericCommand>
 800cd66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cd68:	6a3b      	ldr	r3, [r7, #32]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d14f      	bne.n	800ce0e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	61bb      	str	r3, [r7, #24]
}
 800cd80:	bf00      	nop
 800cd82:	e7fe      	b.n	800cd82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd8a:	f023 0301 	bic.w	r3, r3, #1
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cd96:	e03a      	b.n	800ce0e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd9e:	f043 0301 	orr.w	r3, r3, #1
 800cda2:	b2da      	uxtb	r2, r3
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cdaa:	68ba      	ldr	r2, [r7, #8]
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10a      	bne.n	800cdce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbc:	f383 8811 	msr	BASEPRI, r3
 800cdc0:	f3bf 8f6f 	isb	sy
 800cdc4:	f3bf 8f4f 	dsb	sy
 800cdc8:	617b      	str	r3, [r7, #20]
}
 800cdca:	bf00      	nop
 800cdcc:	e7fe      	b.n	800cdcc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd0:	699a      	ldr	r2, [r3, #24]
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd4:	18d1      	adds	r1, r2, r3
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cddc:	f7ff ff06 	bl	800cbec <prvInsertTimerInActiveList>
					break;
 800cde0:	e015      	b.n	800ce0e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cde8:	f003 0302 	and.w	r3, r3, #2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d103      	bne.n	800cdf8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cdf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdf2:	f000 fbdd 	bl	800d5b0 <vPortFree>
 800cdf6:	e00a      	b.n	800ce0e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdfe:	f023 0301 	bic.w	r3, r3, #1
 800ce02:	b2da      	uxtb	r2, r3
 800ce04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ce0a:	e000      	b.n	800ce0e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ce0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce0e:	4b08      	ldr	r3, [pc, #32]	; (800ce30 <prvProcessReceivedCommands+0x1c0>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	1d39      	adds	r1, r7, #4
 800ce14:	2200      	movs	r2, #0
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe f83c 	bl	800ae94 <xQueueReceive>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f47f af2a 	bne.w	800cc78 <prvProcessReceivedCommands+0x8>
	}
}
 800ce24:	bf00      	nop
 800ce26:	bf00      	nop
 800ce28:	3730      	adds	r7, #48	; 0x30
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	200012b4 	.word	0x200012b4

0800ce34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce3a:	e048      	b.n	800cece <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce3c:	4b2d      	ldr	r3, [pc, #180]	; (800cef4 <prvSwitchTimerLists+0xc0>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce46:	4b2b      	ldr	r3, [pc, #172]	; (800cef4 <prvSwitchTimerLists+0xc0>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	3304      	adds	r3, #4
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7fd fd1b 	bl	800a890 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6a1b      	ldr	r3, [r3, #32]
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce68:	f003 0304 	and.w	r3, r3, #4
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d02e      	beq.n	800cece <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	699b      	ldr	r3, [r3, #24]
 800ce74:	693a      	ldr	r2, [r7, #16]
 800ce76:	4413      	add	r3, r2
 800ce78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d90e      	bls.n	800cea0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	68ba      	ldr	r2, [r7, #8]
 800ce86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce8e:	4b19      	ldr	r3, [pc, #100]	; (800cef4 <prvSwitchTimerLists+0xc0>)
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	3304      	adds	r3, #4
 800ce96:	4619      	mov	r1, r3
 800ce98:	4610      	mov	r0, r2
 800ce9a:	f7fd fcc0 	bl	800a81e <vListInsert>
 800ce9e:	e016      	b.n	800cece <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cea0:	2300      	movs	r3, #0
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	2300      	movs	r3, #0
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	2100      	movs	r1, #0
 800ceaa:	68f8      	ldr	r0, [r7, #12]
 800ceac:	f7ff fd60 	bl	800c970 <xTimerGenericCommand>
 800ceb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d10a      	bne.n	800cece <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ceb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebc:	f383 8811 	msr	BASEPRI, r3
 800cec0:	f3bf 8f6f 	isb	sy
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	603b      	str	r3, [r7, #0]
}
 800ceca:	bf00      	nop
 800cecc:	e7fe      	b.n	800cecc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cece:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <prvSwitchTimerLists+0xc0>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1b1      	bne.n	800ce3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ced8:	4b06      	ldr	r3, [pc, #24]	; (800cef4 <prvSwitchTimerLists+0xc0>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cede:	4b06      	ldr	r3, [pc, #24]	; (800cef8 <prvSwitchTimerLists+0xc4>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a04      	ldr	r2, [pc, #16]	; (800cef4 <prvSwitchTimerLists+0xc0>)
 800cee4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cee6:	4a04      	ldr	r2, [pc, #16]	; (800cef8 <prvSwitchTimerLists+0xc4>)
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	6013      	str	r3, [r2, #0]
}
 800ceec:	bf00      	nop
 800ceee:	3718      	adds	r7, #24
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	200012ac 	.word	0x200012ac
 800cef8:	200012b0 	.word	0x200012b0

0800cefc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cf02:	f000 f967 	bl	800d1d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cf06:	4b15      	ldr	r3, [pc, #84]	; (800cf5c <prvCheckForValidListAndQueue+0x60>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d120      	bne.n	800cf50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cf0e:	4814      	ldr	r0, [pc, #80]	; (800cf60 <prvCheckForValidListAndQueue+0x64>)
 800cf10:	f7fd fc34 	bl	800a77c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cf14:	4813      	ldr	r0, [pc, #76]	; (800cf64 <prvCheckForValidListAndQueue+0x68>)
 800cf16:	f7fd fc31 	bl	800a77c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cf1a:	4b13      	ldr	r3, [pc, #76]	; (800cf68 <prvCheckForValidListAndQueue+0x6c>)
 800cf1c:	4a10      	ldr	r2, [pc, #64]	; (800cf60 <prvCheckForValidListAndQueue+0x64>)
 800cf1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cf20:	4b12      	ldr	r3, [pc, #72]	; (800cf6c <prvCheckForValidListAndQueue+0x70>)
 800cf22:	4a10      	ldr	r2, [pc, #64]	; (800cf64 <prvCheckForValidListAndQueue+0x68>)
 800cf24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cf26:	2300      	movs	r3, #0
 800cf28:	9300      	str	r3, [sp, #0]
 800cf2a:	4b11      	ldr	r3, [pc, #68]	; (800cf70 <prvCheckForValidListAndQueue+0x74>)
 800cf2c:	4a11      	ldr	r2, [pc, #68]	; (800cf74 <prvCheckForValidListAndQueue+0x78>)
 800cf2e:	2110      	movs	r1, #16
 800cf30:	200a      	movs	r0, #10
 800cf32:	f7fd fd3f 	bl	800a9b4 <xQueueGenericCreateStatic>
 800cf36:	4603      	mov	r3, r0
 800cf38:	4a08      	ldr	r2, [pc, #32]	; (800cf5c <prvCheckForValidListAndQueue+0x60>)
 800cf3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cf3c:	4b07      	ldr	r3, [pc, #28]	; (800cf5c <prvCheckForValidListAndQueue+0x60>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d005      	beq.n	800cf50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cf44:	4b05      	ldr	r3, [pc, #20]	; (800cf5c <prvCheckForValidListAndQueue+0x60>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	490b      	ldr	r1, [pc, #44]	; (800cf78 <prvCheckForValidListAndQueue+0x7c>)
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7fe fa12 	bl	800b374 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf50:	f000 f970 	bl	800d234 <vPortExitCritical>
}
 800cf54:	bf00      	nop
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	200012b4 	.word	0x200012b4
 800cf60:	20001284 	.word	0x20001284
 800cf64:	20001298 	.word	0x20001298
 800cf68:	200012ac 	.word	0x200012ac
 800cf6c:	200012b0 	.word	0x200012b0
 800cf70:	20001360 	.word	0x20001360
 800cf74:	200012c0 	.word	0x200012c0
 800cf78:	0800ee78 	.word	0x0800ee78

0800cf7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	3b04      	subs	r3, #4
 800cf8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cf94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	3b04      	subs	r3, #4
 800cf9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	f023 0201 	bic.w	r2, r3, #1
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	3b04      	subs	r3, #4
 800cfaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cfac:	4a0c      	ldr	r2, [pc, #48]	; (800cfe0 <pxPortInitialiseStack+0x64>)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	3b14      	subs	r3, #20
 800cfb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	3b04      	subs	r3, #4
 800cfc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f06f 0202 	mvn.w	r2, #2
 800cfca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	3b20      	subs	r3, #32
 800cfd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3714      	adds	r7, #20
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	0800cfe5 	.word	0x0800cfe5

0800cfe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cfee:	4b12      	ldr	r3, [pc, #72]	; (800d038 <prvTaskExitError+0x54>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cff6:	d00a      	beq.n	800d00e <prvTaskExitError+0x2a>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	60fb      	str	r3, [r7, #12]
}
 800d00a:	bf00      	nop
 800d00c:	e7fe      	b.n	800d00c <prvTaskExitError+0x28>
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	60bb      	str	r3, [r7, #8]
}
 800d020:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d022:	bf00      	nop
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d0fc      	beq.n	800d024 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d02a:	bf00      	nop
 800d02c:	bf00      	nop
 800d02e:	3714      	adds	r7, #20
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	2000011c 	.word	0x2000011c
 800d03c:	00000000 	.word	0x00000000

0800d040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d040:	4b07      	ldr	r3, [pc, #28]	; (800d060 <pxCurrentTCBConst2>)
 800d042:	6819      	ldr	r1, [r3, #0]
 800d044:	6808      	ldr	r0, [r1, #0]
 800d046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04a:	f380 8809 	msr	PSP, r0
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f04f 0000 	mov.w	r0, #0
 800d056:	f380 8811 	msr	BASEPRI, r0
 800d05a:	4770      	bx	lr
 800d05c:	f3af 8000 	nop.w

0800d060 <pxCurrentTCBConst2>:
 800d060:	20000d7c 	.word	0x20000d7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d064:	bf00      	nop
 800d066:	bf00      	nop

0800d068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d068:	4808      	ldr	r0, [pc, #32]	; (800d08c <prvPortStartFirstTask+0x24>)
 800d06a:	6800      	ldr	r0, [r0, #0]
 800d06c:	6800      	ldr	r0, [r0, #0]
 800d06e:	f380 8808 	msr	MSP, r0
 800d072:	f04f 0000 	mov.w	r0, #0
 800d076:	f380 8814 	msr	CONTROL, r0
 800d07a:	b662      	cpsie	i
 800d07c:	b661      	cpsie	f
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	df00      	svc	0
 800d088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d08a:	bf00      	nop
 800d08c:	e000ed08 	.word	0xe000ed08

0800d090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d096:	4b46      	ldr	r3, [pc, #280]	; (800d1b0 <xPortStartScheduler+0x120>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a46      	ldr	r2, [pc, #280]	; (800d1b4 <xPortStartScheduler+0x124>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d10a      	bne.n	800d0b6 <xPortStartScheduler+0x26>
	__asm volatile
 800d0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a4:	f383 8811 	msr	BASEPRI, r3
 800d0a8:	f3bf 8f6f 	isb	sy
 800d0ac:	f3bf 8f4f 	dsb	sy
 800d0b0:	613b      	str	r3, [r7, #16]
}
 800d0b2:	bf00      	nop
 800d0b4:	e7fe      	b.n	800d0b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d0b6:	4b3e      	ldr	r3, [pc, #248]	; (800d1b0 <xPortStartScheduler+0x120>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a3f      	ldr	r2, [pc, #252]	; (800d1b8 <xPortStartScheduler+0x128>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d10a      	bne.n	800d0d6 <xPortStartScheduler+0x46>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	60fb      	str	r3, [r7, #12]
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d0d6:	4b39      	ldr	r3, [pc, #228]	; (800d1bc <xPortStartScheduler+0x12c>)
 800d0d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	22ff      	movs	r2, #255	; 0xff
 800d0e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0f0:	78fb      	ldrb	r3, [r7, #3]
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d0f8:	b2da      	uxtb	r2, r3
 800d0fa:	4b31      	ldr	r3, [pc, #196]	; (800d1c0 <xPortStartScheduler+0x130>)
 800d0fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d0fe:	4b31      	ldr	r3, [pc, #196]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d100:	2207      	movs	r2, #7
 800d102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d104:	e009      	b.n	800d11a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d106:	4b2f      	ldr	r3, [pc, #188]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	3b01      	subs	r3, #1
 800d10c:	4a2d      	ldr	r2, [pc, #180]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d10e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d110:	78fb      	ldrb	r3, [r7, #3]
 800d112:	b2db      	uxtb	r3, r3
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	b2db      	uxtb	r3, r3
 800d118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d11a:	78fb      	ldrb	r3, [r7, #3]
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d122:	2b80      	cmp	r3, #128	; 0x80
 800d124:	d0ef      	beq.n	800d106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d126:	4b27      	ldr	r3, [pc, #156]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f1c3 0307 	rsb	r3, r3, #7
 800d12e:	2b04      	cmp	r3, #4
 800d130:	d00a      	beq.n	800d148 <xPortStartScheduler+0xb8>
	__asm volatile
 800d132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	60bb      	str	r3, [r7, #8]
}
 800d144:	bf00      	nop
 800d146:	e7fe      	b.n	800d146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d148:	4b1e      	ldr	r3, [pc, #120]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	021b      	lsls	r3, r3, #8
 800d14e:	4a1d      	ldr	r2, [pc, #116]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d152:	4b1c      	ldr	r3, [pc, #112]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d15a:	4a1a      	ldr	r2, [pc, #104]	; (800d1c4 <xPortStartScheduler+0x134>)
 800d15c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	b2da      	uxtb	r2, r3
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d166:	4b18      	ldr	r3, [pc, #96]	; (800d1c8 <xPortStartScheduler+0x138>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a17      	ldr	r2, [pc, #92]	; (800d1c8 <xPortStartScheduler+0x138>)
 800d16c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d172:	4b15      	ldr	r3, [pc, #84]	; (800d1c8 <xPortStartScheduler+0x138>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a14      	ldr	r2, [pc, #80]	; (800d1c8 <xPortStartScheduler+0x138>)
 800d178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d17c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d17e:	f000 f8dd 	bl	800d33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d182:	4b12      	ldr	r3, [pc, #72]	; (800d1cc <xPortStartScheduler+0x13c>)
 800d184:	2200      	movs	r2, #0
 800d186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d188:	f000 f8fc 	bl	800d384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d18c:	4b10      	ldr	r3, [pc, #64]	; (800d1d0 <xPortStartScheduler+0x140>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a0f      	ldr	r2, [pc, #60]	; (800d1d0 <xPortStartScheduler+0x140>)
 800d192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d198:	f7ff ff66 	bl	800d068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d19c:	f7fe fe18 	bl	800bdd0 <vTaskSwitchContext>
	prvTaskExitError();
 800d1a0:	f7ff ff20 	bl	800cfe4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3718      	adds	r7, #24
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	e000ed00 	.word	0xe000ed00
 800d1b4:	410fc271 	.word	0x410fc271
 800d1b8:	410fc270 	.word	0x410fc270
 800d1bc:	e000e400 	.word	0xe000e400
 800d1c0:	200013b0 	.word	0x200013b0
 800d1c4:	200013b4 	.word	0x200013b4
 800d1c8:	e000ed20 	.word	0xe000ed20
 800d1cc:	2000011c 	.word	0x2000011c
 800d1d0:	e000ef34 	.word	0xe000ef34

0800d1d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
	__asm volatile
 800d1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1de:	f383 8811 	msr	BASEPRI, r3
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	f3bf 8f4f 	dsb	sy
 800d1ea:	607b      	str	r3, [r7, #4]
}
 800d1ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d1ee:	4b0f      	ldr	r3, [pc, #60]	; (800d22c <vPortEnterCritical+0x58>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	4a0d      	ldr	r2, [pc, #52]	; (800d22c <vPortEnterCritical+0x58>)
 800d1f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d1f8:	4b0c      	ldr	r3, [pc, #48]	; (800d22c <vPortEnterCritical+0x58>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d10f      	bne.n	800d220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d200:	4b0b      	ldr	r3, [pc, #44]	; (800d230 <vPortEnterCritical+0x5c>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	b2db      	uxtb	r3, r3
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00a      	beq.n	800d220 <vPortEnterCritical+0x4c>
	__asm volatile
 800d20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20e:	f383 8811 	msr	BASEPRI, r3
 800d212:	f3bf 8f6f 	isb	sy
 800d216:	f3bf 8f4f 	dsb	sy
 800d21a:	603b      	str	r3, [r7, #0]
}
 800d21c:	bf00      	nop
 800d21e:	e7fe      	b.n	800d21e <vPortEnterCritical+0x4a>
	}
}
 800d220:	bf00      	nop
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr
 800d22c:	2000011c 	.word	0x2000011c
 800d230:	e000ed04 	.word	0xe000ed04

0800d234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d23a:	4b12      	ldr	r3, [pc, #72]	; (800d284 <vPortExitCritical+0x50>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10a      	bne.n	800d258 <vPortExitCritical+0x24>
	__asm volatile
 800d242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	607b      	str	r3, [r7, #4]
}
 800d254:	bf00      	nop
 800d256:	e7fe      	b.n	800d256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d258:	4b0a      	ldr	r3, [pc, #40]	; (800d284 <vPortExitCritical+0x50>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	3b01      	subs	r3, #1
 800d25e:	4a09      	ldr	r2, [pc, #36]	; (800d284 <vPortExitCritical+0x50>)
 800d260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d262:	4b08      	ldr	r3, [pc, #32]	; (800d284 <vPortExitCritical+0x50>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d105      	bne.n	800d276 <vPortExitCritical+0x42>
 800d26a:	2300      	movs	r3, #0
 800d26c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	f383 8811 	msr	BASEPRI, r3
}
 800d274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d276:	bf00      	nop
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	2000011c 	.word	0x2000011c
	...

0800d290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d290:	f3ef 8009 	mrs	r0, PSP
 800d294:	f3bf 8f6f 	isb	sy
 800d298:	4b15      	ldr	r3, [pc, #84]	; (800d2f0 <pxCurrentTCBConst>)
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	f01e 0f10 	tst.w	lr, #16
 800d2a0:	bf08      	it	eq
 800d2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2aa:	6010      	str	r0, [r2, #0]
 800d2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d2b4:	f380 8811 	msr	BASEPRI, r0
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f7fe fd86 	bl	800bdd0 <vTaskSwitchContext>
 800d2c4:	f04f 0000 	mov.w	r0, #0
 800d2c8:	f380 8811 	msr	BASEPRI, r0
 800d2cc:	bc09      	pop	{r0, r3}
 800d2ce:	6819      	ldr	r1, [r3, #0]
 800d2d0:	6808      	ldr	r0, [r1, #0]
 800d2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d6:	f01e 0f10 	tst.w	lr, #16
 800d2da:	bf08      	it	eq
 800d2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d2e0:	f380 8809 	msr	PSP, r0
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	f3af 8000 	nop.w

0800d2f0 <pxCurrentTCBConst>:
 800d2f0:	20000d7c 	.word	0x20000d7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d2f4:	bf00      	nop
 800d2f6:	bf00      	nop

0800d2f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	607b      	str	r3, [r7, #4]
}
 800d310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d312:	f7fe fca3 	bl	800bc5c <xTaskIncrementTick>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d003      	beq.n	800d324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d31c:	4b06      	ldr	r3, [pc, #24]	; (800d338 <xPortSysTickHandler+0x40>)
 800d31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	2300      	movs	r3, #0
 800d326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	f383 8811 	msr	BASEPRI, r3
}
 800d32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d330:	bf00      	nop
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	e000ed04 	.word	0xe000ed04

0800d33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d33c:	b480      	push	{r7}
 800d33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d340:	4b0b      	ldr	r3, [pc, #44]	; (800d370 <vPortSetupTimerInterrupt+0x34>)
 800d342:	2200      	movs	r2, #0
 800d344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d346:	4b0b      	ldr	r3, [pc, #44]	; (800d374 <vPortSetupTimerInterrupt+0x38>)
 800d348:	2200      	movs	r2, #0
 800d34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d34c:	4b0a      	ldr	r3, [pc, #40]	; (800d378 <vPortSetupTimerInterrupt+0x3c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a0a      	ldr	r2, [pc, #40]	; (800d37c <vPortSetupTimerInterrupt+0x40>)
 800d352:	fba2 2303 	umull	r2, r3, r2, r3
 800d356:	099b      	lsrs	r3, r3, #6
 800d358:	4a09      	ldr	r2, [pc, #36]	; (800d380 <vPortSetupTimerInterrupt+0x44>)
 800d35a:	3b01      	subs	r3, #1
 800d35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d35e:	4b04      	ldr	r3, [pc, #16]	; (800d370 <vPortSetupTimerInterrupt+0x34>)
 800d360:	2207      	movs	r2, #7
 800d362:	601a      	str	r2, [r3, #0]
}
 800d364:	bf00      	nop
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	e000e010 	.word	0xe000e010
 800d374:	e000e018 	.word	0xe000e018
 800d378:	20000000 	.word	0x20000000
 800d37c:	10624dd3 	.word	0x10624dd3
 800d380:	e000e014 	.word	0xe000e014

0800d384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d394 <vPortEnableVFP+0x10>
 800d388:	6801      	ldr	r1, [r0, #0]
 800d38a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d38e:	6001      	str	r1, [r0, #0]
 800d390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d392:	bf00      	nop
 800d394:	e000ed88 	.word	0xe000ed88

0800d398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d39e:	f3ef 8305 	mrs	r3, IPSR
 800d3a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2b0f      	cmp	r3, #15
 800d3a8:	d914      	bls.n	800d3d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d3aa:	4a17      	ldr	r2, [pc, #92]	; (800d408 <vPortValidateInterruptPriority+0x70>)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d3b4:	4b15      	ldr	r3, [pc, #84]	; (800d40c <vPortValidateInterruptPriority+0x74>)
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	7afa      	ldrb	r2, [r7, #11]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d20a      	bcs.n	800d3d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	607b      	str	r3, [r7, #4]
}
 800d3d0:	bf00      	nop
 800d3d2:	e7fe      	b.n	800d3d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d3d4:	4b0e      	ldr	r3, [pc, #56]	; (800d410 <vPortValidateInterruptPriority+0x78>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d3dc:	4b0d      	ldr	r3, [pc, #52]	; (800d414 <vPortValidateInterruptPriority+0x7c>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d90a      	bls.n	800d3fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	603b      	str	r3, [r7, #0]
}
 800d3f6:	bf00      	nop
 800d3f8:	e7fe      	b.n	800d3f8 <vPortValidateInterruptPriority+0x60>
	}
 800d3fa:	bf00      	nop
 800d3fc:	3714      	adds	r7, #20
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	e000e3f0 	.word	0xe000e3f0
 800d40c:	200013b0 	.word	0x200013b0
 800d410:	e000ed0c 	.word	0xe000ed0c
 800d414:	200013b4 	.word	0x200013b4

0800d418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b08a      	sub	sp, #40	; 0x28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d420:	2300      	movs	r3, #0
 800d422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d424:	f7fe face 	bl	800b9c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d428:	4b5b      	ldr	r3, [pc, #364]	; (800d598 <pvPortMalloc+0x180>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d101      	bne.n	800d434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d430:	f000 f92c 	bl	800d68c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d434:	4b59      	ldr	r3, [pc, #356]	; (800d59c <pvPortMalloc+0x184>)
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4013      	ands	r3, r2
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f040 8093 	bne.w	800d568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d01d      	beq.n	800d484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d448:	2208      	movs	r2, #8
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4413      	add	r3, r2
 800d44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f003 0307 	and.w	r3, r3, #7
 800d456:	2b00      	cmp	r3, #0
 800d458:	d014      	beq.n	800d484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f023 0307 	bic.w	r3, r3, #7
 800d460:	3308      	adds	r3, #8
 800d462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f003 0307 	and.w	r3, r3, #7
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00a      	beq.n	800d484 <pvPortMalloc+0x6c>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	617b      	str	r3, [r7, #20]
}
 800d480:	bf00      	nop
 800d482:	e7fe      	b.n	800d482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d06e      	beq.n	800d568 <pvPortMalloc+0x150>
 800d48a:	4b45      	ldr	r3, [pc, #276]	; (800d5a0 <pvPortMalloc+0x188>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	429a      	cmp	r2, r3
 800d492:	d869      	bhi.n	800d568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d494:	4b43      	ldr	r3, [pc, #268]	; (800d5a4 <pvPortMalloc+0x18c>)
 800d496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d498:	4b42      	ldr	r3, [pc, #264]	; (800d5a4 <pvPortMalloc+0x18c>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d49e:	e004      	b.n	800d4aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d903      	bls.n	800d4bc <pvPortMalloc+0xa4>
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1f1      	bne.n	800d4a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d4bc:	4b36      	ldr	r3, [pc, #216]	; (800d598 <pvPortMalloc+0x180>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d050      	beq.n	800d568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d4c6:	6a3b      	ldr	r3, [r7, #32]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2208      	movs	r2, #8
 800d4cc:	4413      	add	r3, r2
 800d4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	6a3b      	ldr	r3, [r7, #32]
 800d4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	1ad2      	subs	r2, r2, r3
 800d4e0:	2308      	movs	r3, #8
 800d4e2:	005b      	lsls	r3, r3, #1
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d91f      	bls.n	800d528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	f003 0307 	and.w	r3, r3, #7
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00a      	beq.n	800d510 <pvPortMalloc+0xf8>
	__asm volatile
 800d4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	613b      	str	r3, [r7, #16]
}
 800d50c:	bf00      	nop
 800d50e:	e7fe      	b.n	800d50e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d512:	685a      	ldr	r2, [r3, #4]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	1ad2      	subs	r2, r2, r3
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d522:	69b8      	ldr	r0, [r7, #24]
 800d524:	f000 f914 	bl	800d750 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d528:	4b1d      	ldr	r3, [pc, #116]	; (800d5a0 <pvPortMalloc+0x188>)
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	4a1b      	ldr	r2, [pc, #108]	; (800d5a0 <pvPortMalloc+0x188>)
 800d534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d536:	4b1a      	ldr	r3, [pc, #104]	; (800d5a0 <pvPortMalloc+0x188>)
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	4b1b      	ldr	r3, [pc, #108]	; (800d5a8 <pvPortMalloc+0x190>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d203      	bcs.n	800d54a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d542:	4b17      	ldr	r3, [pc, #92]	; (800d5a0 <pvPortMalloc+0x188>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4a18      	ldr	r2, [pc, #96]	; (800d5a8 <pvPortMalloc+0x190>)
 800d548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	685a      	ldr	r2, [r3, #4]
 800d54e:	4b13      	ldr	r3, [pc, #76]	; (800d59c <pvPortMalloc+0x184>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	431a      	orrs	r2, r3
 800d554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55a:	2200      	movs	r2, #0
 800d55c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d55e:	4b13      	ldr	r3, [pc, #76]	; (800d5ac <pvPortMalloc+0x194>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3301      	adds	r3, #1
 800d564:	4a11      	ldr	r2, [pc, #68]	; (800d5ac <pvPortMalloc+0x194>)
 800d566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d568:	f7fe fa3a 	bl	800b9e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	f003 0307 	and.w	r3, r3, #7
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00a      	beq.n	800d58c <pvPortMalloc+0x174>
	__asm volatile
 800d576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	60fb      	str	r3, [r7, #12]
}
 800d588:	bf00      	nop
 800d58a:	e7fe      	b.n	800d58a <pvPortMalloc+0x172>
	return pvReturn;
 800d58c:	69fb      	ldr	r3, [r7, #28]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3728      	adds	r7, #40	; 0x28
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	20004fc0 	.word	0x20004fc0
 800d59c:	20004fd4 	.word	0x20004fd4
 800d5a0:	20004fc4 	.word	0x20004fc4
 800d5a4:	20004fb8 	.word	0x20004fb8
 800d5a8:	20004fc8 	.word	0x20004fc8
 800d5ac:	20004fcc 	.word	0x20004fcc

0800d5b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b086      	sub	sp, #24
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d04d      	beq.n	800d65e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d5c2:	2308      	movs	r3, #8
 800d5c4:	425b      	negs	r3, r3
 800d5c6:	697a      	ldr	r2, [r7, #20]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	685a      	ldr	r2, [r3, #4]
 800d5d4:	4b24      	ldr	r3, [pc, #144]	; (800d668 <vPortFree+0xb8>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4013      	ands	r3, r2
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d10a      	bne.n	800d5f4 <vPortFree+0x44>
	__asm volatile
 800d5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	60fb      	str	r3, [r7, #12]
}
 800d5f0:	bf00      	nop
 800d5f2:	e7fe      	b.n	800d5f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00a      	beq.n	800d612 <vPortFree+0x62>
	__asm volatile
 800d5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	60bb      	str	r3, [r7, #8]
}
 800d60e:	bf00      	nop
 800d610:	e7fe      	b.n	800d610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	4b14      	ldr	r3, [pc, #80]	; (800d668 <vPortFree+0xb8>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4013      	ands	r3, r2
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d01e      	beq.n	800d65e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d11a      	bne.n	800d65e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	685a      	ldr	r2, [r3, #4]
 800d62c:	4b0e      	ldr	r3, [pc, #56]	; (800d668 <vPortFree+0xb8>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	43db      	mvns	r3, r3
 800d632:	401a      	ands	r2, r3
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d638:	f7fe f9c4 	bl	800b9c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	685a      	ldr	r2, [r3, #4]
 800d640:	4b0a      	ldr	r3, [pc, #40]	; (800d66c <vPortFree+0xbc>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4413      	add	r3, r2
 800d646:	4a09      	ldr	r2, [pc, #36]	; (800d66c <vPortFree+0xbc>)
 800d648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d64a:	6938      	ldr	r0, [r7, #16]
 800d64c:	f000 f880 	bl	800d750 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d650:	4b07      	ldr	r3, [pc, #28]	; (800d670 <vPortFree+0xc0>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	3301      	adds	r3, #1
 800d656:	4a06      	ldr	r2, [pc, #24]	; (800d670 <vPortFree+0xc0>)
 800d658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d65a:	f7fe f9c1 	bl	800b9e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d65e:	bf00      	nop
 800d660:	3718      	adds	r7, #24
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20004fd4 	.word	0x20004fd4
 800d66c:	20004fc4 	.word	0x20004fc4
 800d670:	20004fd0 	.word	0x20004fd0

0800d674 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800d674:	b480      	push	{r7}
 800d676:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800d678:	4b03      	ldr	r3, [pc, #12]	; (800d688 <xPortGetFreeHeapSize+0x14>)
 800d67a:	681b      	ldr	r3, [r3, #0]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	20004fc4 	.word	0x20004fc4

0800d68c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d692:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d696:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d698:	4b27      	ldr	r3, [pc, #156]	; (800d738 <prvHeapInit+0xac>)
 800d69a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f003 0307 	and.w	r3, r3, #7
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00c      	beq.n	800d6c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	3307      	adds	r3, #7
 800d6aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f023 0307 	bic.w	r3, r3, #7
 800d6b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	1ad3      	subs	r3, r2, r3
 800d6ba:	4a1f      	ldr	r2, [pc, #124]	; (800d738 <prvHeapInit+0xac>)
 800d6bc:	4413      	add	r3, r2
 800d6be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d6c4:	4a1d      	ldr	r2, [pc, #116]	; (800d73c <prvHeapInit+0xb0>)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d6ca:	4b1c      	ldr	r3, [pc, #112]	; (800d73c <prvHeapInit+0xb0>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d6d8:	2208      	movs	r2, #8
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	1a9b      	subs	r3, r3, r2
 800d6de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f023 0307 	bic.w	r3, r3, #7
 800d6e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	4a15      	ldr	r2, [pc, #84]	; (800d740 <prvHeapInit+0xb4>)
 800d6ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d6ee:	4b14      	ldr	r3, [pc, #80]	; (800d740 <prvHeapInit+0xb4>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d6f6:	4b12      	ldr	r3, [pc, #72]	; (800d740 <prvHeapInit+0xb4>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	1ad2      	subs	r2, r2, r3
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d70c:	4b0c      	ldr	r3, [pc, #48]	; (800d740 <prvHeapInit+0xb4>)
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	4a0a      	ldr	r2, [pc, #40]	; (800d744 <prvHeapInit+0xb8>)
 800d71a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	4a09      	ldr	r2, [pc, #36]	; (800d748 <prvHeapInit+0xbc>)
 800d722:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d724:	4b09      	ldr	r3, [pc, #36]	; (800d74c <prvHeapInit+0xc0>)
 800d726:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d72a:	601a      	str	r2, [r3, #0]
}
 800d72c:	bf00      	nop
 800d72e:	3714      	adds	r7, #20
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr
 800d738:	200013b8 	.word	0x200013b8
 800d73c:	20004fb8 	.word	0x20004fb8
 800d740:	20004fc0 	.word	0x20004fc0
 800d744:	20004fc8 	.word	0x20004fc8
 800d748:	20004fc4 	.word	0x20004fc4
 800d74c:	20004fd4 	.word	0x20004fd4

0800d750 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d758:	4b28      	ldr	r3, [pc, #160]	; (800d7fc <prvInsertBlockIntoFreeList+0xac>)
 800d75a:	60fb      	str	r3, [r7, #12]
 800d75c:	e002      	b.n	800d764 <prvInsertBlockIntoFreeList+0x14>
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	60fb      	str	r3, [r7, #12]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d8f7      	bhi.n	800d75e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	68ba      	ldr	r2, [r7, #8]
 800d778:	4413      	add	r3, r2
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d108      	bne.n	800d792 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	685a      	ldr	r2, [r3, #4]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	441a      	add	r2, r3
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	68ba      	ldr	r2, [r7, #8]
 800d79c:	441a      	add	r2, r3
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d118      	bne.n	800d7d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	4b15      	ldr	r3, [pc, #84]	; (800d800 <prvInsertBlockIntoFreeList+0xb0>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d00d      	beq.n	800d7ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	685a      	ldr	r2, [r3, #4]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	441a      	add	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	601a      	str	r2, [r3, #0]
 800d7cc:	e008      	b.n	800d7e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d7ce:	4b0c      	ldr	r3, [pc, #48]	; (800d800 <prvInsertBlockIntoFreeList+0xb0>)
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	e003      	b.n	800d7e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d7e0:	68fa      	ldr	r2, [r7, #12]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d002      	beq.n	800d7ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7ee:	bf00      	nop
 800d7f0:	3714      	adds	r7, #20
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	20004fb8 	.word	0x20004fb8
 800d800:	20004fc0 	.word	0x20004fc0

0800d804 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d808:	2200      	movs	r2, #0
 800d80a:	4912      	ldr	r1, [pc, #72]	; (800d854 <MX_USB_DEVICE_Init+0x50>)
 800d80c:	4812      	ldr	r0, [pc, #72]	; (800d858 <MX_USB_DEVICE_Init+0x54>)
 800d80e:	f7fb fbab 	bl	8008f68 <USBD_Init>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d001      	beq.n	800d81c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d818:	f7f5 faf6 	bl	8002e08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d81c:	490f      	ldr	r1, [pc, #60]	; (800d85c <MX_USB_DEVICE_Init+0x58>)
 800d81e:	480e      	ldr	r0, [pc, #56]	; (800d858 <MX_USB_DEVICE_Init+0x54>)
 800d820:	f7fb fbd2 	bl	8008fc8 <USBD_RegisterClass>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d001      	beq.n	800d82e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d82a:	f7f5 faed 	bl	8002e08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d82e:	490c      	ldr	r1, [pc, #48]	; (800d860 <MX_USB_DEVICE_Init+0x5c>)
 800d830:	4809      	ldr	r0, [pc, #36]	; (800d858 <MX_USB_DEVICE_Init+0x54>)
 800d832:	f7fb faf3 	bl	8008e1c <USBD_CDC_RegisterInterface>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d83c:	f7f5 fae4 	bl	8002e08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d840:	4805      	ldr	r0, [pc, #20]	; (800d858 <MX_USB_DEVICE_Init+0x54>)
 800d842:	f7fb fbe8 	bl	8009016 <USBD_Start>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d001      	beq.n	800d850 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d84c:	f7f5 fadc 	bl	8002e08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d850:	bf00      	nop
 800d852:	bd80      	pop	{r7, pc}
 800d854:	20000134 	.word	0x20000134
 800d858:	2000a7b0 	.word	0x2000a7b0
 800d85c:	20000018 	.word	0x20000018
 800d860:	20000120 	.word	0x20000120

0800d864 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d868:	2200      	movs	r2, #0
 800d86a:	4905      	ldr	r1, [pc, #20]	; (800d880 <CDC_Init_FS+0x1c>)
 800d86c:	4805      	ldr	r0, [pc, #20]	; (800d884 <CDC_Init_FS+0x20>)
 800d86e:	f7fb faea 	bl	8008e46 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d872:	4905      	ldr	r1, [pc, #20]	; (800d888 <CDC_Init_FS+0x24>)
 800d874:	4803      	ldr	r0, [pc, #12]	; (800d884 <CDC_Init_FS+0x20>)
 800d876:	f7fb fb04 	bl	8008e82 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d87a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	2000b280 	.word	0x2000b280
 800d884:	2000a7b0 	.word	0x2000a7b0
 800d888:	2000aa80 	.word	0x2000aa80

0800d88c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d88c:	b480      	push	{r7}
 800d88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d890:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d892:	4618      	mov	r0, r3
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	6039      	str	r1, [r7, #0]
 800d8a6:	71fb      	strb	r3, [r7, #7]
 800d8a8:	4613      	mov	r3, r2
 800d8aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d8ac:	79fb      	ldrb	r3, [r7, #7]
 800d8ae:	2b23      	cmp	r3, #35	; 0x23
 800d8b0:	d84a      	bhi.n	800d948 <CDC_Control_FS+0xac>
 800d8b2:	a201      	add	r2, pc, #4	; (adr r2, 800d8b8 <CDC_Control_FS+0x1c>)
 800d8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b8:	0800d949 	.word	0x0800d949
 800d8bc:	0800d949 	.word	0x0800d949
 800d8c0:	0800d949 	.word	0x0800d949
 800d8c4:	0800d949 	.word	0x0800d949
 800d8c8:	0800d949 	.word	0x0800d949
 800d8cc:	0800d949 	.word	0x0800d949
 800d8d0:	0800d949 	.word	0x0800d949
 800d8d4:	0800d949 	.word	0x0800d949
 800d8d8:	0800d949 	.word	0x0800d949
 800d8dc:	0800d949 	.word	0x0800d949
 800d8e0:	0800d949 	.word	0x0800d949
 800d8e4:	0800d949 	.word	0x0800d949
 800d8e8:	0800d949 	.word	0x0800d949
 800d8ec:	0800d949 	.word	0x0800d949
 800d8f0:	0800d949 	.word	0x0800d949
 800d8f4:	0800d949 	.word	0x0800d949
 800d8f8:	0800d949 	.word	0x0800d949
 800d8fc:	0800d949 	.word	0x0800d949
 800d900:	0800d949 	.word	0x0800d949
 800d904:	0800d949 	.word	0x0800d949
 800d908:	0800d949 	.word	0x0800d949
 800d90c:	0800d949 	.word	0x0800d949
 800d910:	0800d949 	.word	0x0800d949
 800d914:	0800d949 	.word	0x0800d949
 800d918:	0800d949 	.word	0x0800d949
 800d91c:	0800d949 	.word	0x0800d949
 800d920:	0800d949 	.word	0x0800d949
 800d924:	0800d949 	.word	0x0800d949
 800d928:	0800d949 	.word	0x0800d949
 800d92c:	0800d949 	.word	0x0800d949
 800d930:	0800d949 	.word	0x0800d949
 800d934:	0800d949 	.word	0x0800d949
 800d938:	0800d949 	.word	0x0800d949
 800d93c:	0800d949 	.word	0x0800d949
 800d940:	0800d949 	.word	0x0800d949
 800d944:	0800d949 	.word	0x0800d949
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d948:	bf00      	nop
  }

  return (USBD_OK);
 800d94a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	370c      	adds	r7, #12
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d962:	6879      	ldr	r1, [r7, #4]
 800d964:	4805      	ldr	r0, [pc, #20]	; (800d97c <CDC_Receive_FS+0x24>)
 800d966:	f7fb fa8c 	bl	8008e82 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d96a:	4804      	ldr	r0, [pc, #16]	; (800d97c <CDC_Receive_FS+0x24>)
 800d96c:	f7fb fad2 	bl	8008f14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d970:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d972:	4618      	mov	r0, r3
 800d974:	3708      	adds	r7, #8
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	2000a7b0 	.word	0x2000a7b0

0800d980 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	460b      	mov	r3, r1
 800d98a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d98c:	2300      	movs	r3, #0
 800d98e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d990:	4b0d      	ldr	r3, [pc, #52]	; (800d9c8 <CDC_Transmit_FS+0x48>)
 800d992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d996:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d001      	beq.n	800d9a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e00b      	b.n	800d9be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d9a6:	887b      	ldrh	r3, [r7, #2]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	6879      	ldr	r1, [r7, #4]
 800d9ac:	4806      	ldr	r0, [pc, #24]	; (800d9c8 <CDC_Transmit_FS+0x48>)
 800d9ae:	f7fb fa4a 	bl	8008e46 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d9b2:	4805      	ldr	r0, [pc, #20]	; (800d9c8 <CDC_Transmit_FS+0x48>)
 800d9b4:	f7fb fa7e 	bl	8008eb4 <USBD_CDC_TransmitPacket>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	2000a7b0 	.word	0x2000a7b0

0800d9cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b087      	sub	sp, #28
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d9de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	371c      	adds	r7, #28
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
	...

0800d9f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	6039      	str	r1, [r7, #0]
 800d9fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	2212      	movs	r2, #18
 800da00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800da02:	4b03      	ldr	r3, [pc, #12]	; (800da10 <USBD_FS_DeviceDescriptor+0x20>)
}
 800da04:	4618      	mov	r0, r3
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr
 800da10:	20000150 	.word	0x20000150

0800da14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	4603      	mov	r3, r0
 800da1c:	6039      	str	r1, [r7, #0]
 800da1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	2204      	movs	r2, #4
 800da24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800da26:	4b03      	ldr	r3, [pc, #12]	; (800da34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800da28:	4618      	mov	r0, r3
 800da2a:	370c      	adds	r7, #12
 800da2c:	46bd      	mov	sp, r7
 800da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da32:	4770      	bx	lr
 800da34:	20000164 	.word	0x20000164

0800da38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	6039      	str	r1, [r7, #0]
 800da42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da44:	79fb      	ldrb	r3, [r7, #7]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d105      	bne.n	800da56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	4907      	ldr	r1, [pc, #28]	; (800da6c <USBD_FS_ProductStrDescriptor+0x34>)
 800da4e:	4808      	ldr	r0, [pc, #32]	; (800da70 <USBD_FS_ProductStrDescriptor+0x38>)
 800da50:	f7fc fb13 	bl	800a07a <USBD_GetString>
 800da54:	e004      	b.n	800da60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da56:	683a      	ldr	r2, [r7, #0]
 800da58:	4904      	ldr	r1, [pc, #16]	; (800da6c <USBD_FS_ProductStrDescriptor+0x34>)
 800da5a:	4805      	ldr	r0, [pc, #20]	; (800da70 <USBD_FS_ProductStrDescriptor+0x38>)
 800da5c:	f7fc fb0d 	bl	800a07a <USBD_GetString>
  }
  return USBD_StrDesc;
 800da60:	4b02      	ldr	r3, [pc, #8]	; (800da6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800da62:	4618      	mov	r0, r3
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	2000ba80 	.word	0x2000ba80
 800da70:	0800ee80 	.word	0x0800ee80

0800da74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	4603      	mov	r3, r0
 800da7c:	6039      	str	r1, [r7, #0]
 800da7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800da80:	683a      	ldr	r2, [r7, #0]
 800da82:	4904      	ldr	r1, [pc, #16]	; (800da94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800da84:	4804      	ldr	r0, [pc, #16]	; (800da98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800da86:	f7fc faf8 	bl	800a07a <USBD_GetString>
  return USBD_StrDesc;
 800da8a:	4b02      	ldr	r3, [pc, #8]	; (800da94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3708      	adds	r7, #8
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	2000ba80 	.word	0x2000ba80
 800da98:	0800ee98 	.word	0x0800ee98

0800da9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	4603      	mov	r3, r0
 800daa4:	6039      	str	r1, [r7, #0]
 800daa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	221a      	movs	r2, #26
 800daac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800daae:	f000 f843 	bl	800db38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dab2:	4b02      	ldr	r3, [pc, #8]	; (800dabc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3708      	adds	r7, #8
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	20000168 	.word	0x20000168

0800dac0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	4603      	mov	r3, r0
 800dac8:	6039      	str	r1, [r7, #0]
 800daca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d105      	bne.n	800dade <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dad2:	683a      	ldr	r2, [r7, #0]
 800dad4:	4907      	ldr	r1, [pc, #28]	; (800daf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dad6:	4808      	ldr	r0, [pc, #32]	; (800daf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dad8:	f7fc facf 	bl	800a07a <USBD_GetString>
 800dadc:	e004      	b.n	800dae8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	4904      	ldr	r1, [pc, #16]	; (800daf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dae2:	4805      	ldr	r0, [pc, #20]	; (800daf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dae4:	f7fc fac9 	bl	800a07a <USBD_GetString>
  }
  return USBD_StrDesc;
 800dae8:	4b02      	ldr	r3, [pc, #8]	; (800daf4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800daea:	4618      	mov	r0, r3
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	2000ba80 	.word	0x2000ba80
 800daf8:	0800eeac 	.word	0x0800eeac

0800dafc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	4603      	mov	r3, r0
 800db04:	6039      	str	r1, [r7, #0]
 800db06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db08:	79fb      	ldrb	r3, [r7, #7]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d105      	bne.n	800db1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	4907      	ldr	r1, [pc, #28]	; (800db30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db12:	4808      	ldr	r0, [pc, #32]	; (800db34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db14:	f7fc fab1 	bl	800a07a <USBD_GetString>
 800db18:	e004      	b.n	800db24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	4904      	ldr	r1, [pc, #16]	; (800db30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db1e:	4805      	ldr	r0, [pc, #20]	; (800db34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db20:	f7fc faab 	bl	800a07a <USBD_GetString>
  }
  return USBD_StrDesc;
 800db24:	4b02      	ldr	r3, [pc, #8]	; (800db30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800db26:	4618      	mov	r0, r3
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	2000ba80 	.word	0x2000ba80
 800db34:	0800eeb8 	.word	0x0800eeb8

0800db38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800db3e:	4b0f      	ldr	r3, [pc, #60]	; (800db7c <Get_SerialNum+0x44>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800db44:	4b0e      	ldr	r3, [pc, #56]	; (800db80 <Get_SerialNum+0x48>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800db4a:	4b0e      	ldr	r3, [pc, #56]	; (800db84 <Get_SerialNum+0x4c>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4413      	add	r3, r2
 800db56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d009      	beq.n	800db72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800db5e:	2208      	movs	r2, #8
 800db60:	4909      	ldr	r1, [pc, #36]	; (800db88 <Get_SerialNum+0x50>)
 800db62:	68f8      	ldr	r0, [r7, #12]
 800db64:	f000 f814 	bl	800db90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800db68:	2204      	movs	r2, #4
 800db6a:	4908      	ldr	r1, [pc, #32]	; (800db8c <Get_SerialNum+0x54>)
 800db6c:	68b8      	ldr	r0, [r7, #8]
 800db6e:	f000 f80f 	bl	800db90 <IntToUnicode>
  }
}
 800db72:	bf00      	nop
 800db74:	3710      	adds	r7, #16
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	1fff7a10 	.word	0x1fff7a10
 800db80:	1fff7a14 	.word	0x1fff7a14
 800db84:	1fff7a18 	.word	0x1fff7a18
 800db88:	2000016a 	.word	0x2000016a
 800db8c:	2000017a 	.word	0x2000017a

0800db90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800db90:	b480      	push	{r7}
 800db92:	b087      	sub	sp, #28
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	4613      	mov	r3, r2
 800db9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dba2:	2300      	movs	r3, #0
 800dba4:	75fb      	strb	r3, [r7, #23]
 800dba6:	e027      	b.n	800dbf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	0f1b      	lsrs	r3, r3, #28
 800dbac:	2b09      	cmp	r3, #9
 800dbae:	d80b      	bhi.n	800dbc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	0f1b      	lsrs	r3, r3, #28
 800dbb4:	b2da      	uxtb	r2, r3
 800dbb6:	7dfb      	ldrb	r3, [r7, #23]
 800dbb8:	005b      	lsls	r3, r3, #1
 800dbba:	4619      	mov	r1, r3
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	440b      	add	r3, r1
 800dbc0:	3230      	adds	r2, #48	; 0x30
 800dbc2:	b2d2      	uxtb	r2, r2
 800dbc4:	701a      	strb	r2, [r3, #0]
 800dbc6:	e00a      	b.n	800dbde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	0f1b      	lsrs	r3, r3, #28
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	7dfb      	ldrb	r3, [r7, #23]
 800dbd0:	005b      	lsls	r3, r3, #1
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	440b      	add	r3, r1
 800dbd8:	3237      	adds	r2, #55	; 0x37
 800dbda:	b2d2      	uxtb	r2, r2
 800dbdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	011b      	lsls	r3, r3, #4
 800dbe2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dbe4:	7dfb      	ldrb	r3, [r7, #23]
 800dbe6:	005b      	lsls	r3, r3, #1
 800dbe8:	3301      	adds	r3, #1
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	4413      	add	r3, r2
 800dbee:	2200      	movs	r2, #0
 800dbf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dbf2:	7dfb      	ldrb	r3, [r7, #23]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	75fb      	strb	r3, [r7, #23]
 800dbf8:	7dfa      	ldrb	r2, [r7, #23]
 800dbfa:	79fb      	ldrb	r3, [r7, #7]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d3d3      	bcc.n	800dba8 <IntToUnicode+0x18>
  }
}
 800dc00:	bf00      	nop
 800dc02:	bf00      	nop
 800dc04:	371c      	adds	r7, #28
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
	...

0800dc10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08a      	sub	sp, #40	; 0x28
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc18:	f107 0314 	add.w	r3, r7, #20
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	601a      	str	r2, [r3, #0]
 800dc20:	605a      	str	r2, [r3, #4]
 800dc22:	609a      	str	r2, [r3, #8]
 800dc24:	60da      	str	r2, [r3, #12]
 800dc26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc30:	d147      	bne.n	800dcc2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc32:	2300      	movs	r3, #0
 800dc34:	613b      	str	r3, [r7, #16]
 800dc36:	4b25      	ldr	r3, [pc, #148]	; (800dccc <HAL_PCD_MspInit+0xbc>)
 800dc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc3a:	4a24      	ldr	r2, [pc, #144]	; (800dccc <HAL_PCD_MspInit+0xbc>)
 800dc3c:	f043 0301 	orr.w	r3, r3, #1
 800dc40:	6313      	str	r3, [r2, #48]	; 0x30
 800dc42:	4b22      	ldr	r3, [pc, #136]	; (800dccc <HAL_PCD_MspInit+0xbc>)
 800dc44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc46:	f003 0301 	and.w	r3, r3, #1
 800dc4a:	613b      	str	r3, [r7, #16]
 800dc4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800dc4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dc54:	2300      	movs	r3, #0
 800dc56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800dc5c:	f107 0314 	add.w	r3, r7, #20
 800dc60:	4619      	mov	r1, r3
 800dc62:	481b      	ldr	r0, [pc, #108]	; (800dcd0 <HAL_PCD_MspInit+0xc0>)
 800dc64:	f7f5 fbdc 	bl	8003420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800dc68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800dc6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc6e:	2302      	movs	r3, #2
 800dc70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc72:	2300      	movs	r3, #0
 800dc74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc76:	2300      	movs	r3, #0
 800dc78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dc7a:	230a      	movs	r3, #10
 800dc7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc7e:	f107 0314 	add.w	r3, r7, #20
 800dc82:	4619      	mov	r1, r3
 800dc84:	4812      	ldr	r0, [pc, #72]	; (800dcd0 <HAL_PCD_MspInit+0xc0>)
 800dc86:	f7f5 fbcb 	bl	8003420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dc8a:	4b10      	ldr	r3, [pc, #64]	; (800dccc <HAL_PCD_MspInit+0xbc>)
 800dc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc8e:	4a0f      	ldr	r2, [pc, #60]	; (800dccc <HAL_PCD_MspInit+0xbc>)
 800dc90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc94:	6353      	str	r3, [r2, #52]	; 0x34
 800dc96:	2300      	movs	r3, #0
 800dc98:	60fb      	str	r3, [r7, #12]
 800dc9a:	4b0c      	ldr	r3, [pc, #48]	; (800dccc <HAL_PCD_MspInit+0xbc>)
 800dc9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc9e:	4a0b      	ldr	r2, [pc, #44]	; (800dccc <HAL_PCD_MspInit+0xbc>)
 800dca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dca4:	6453      	str	r3, [r2, #68]	; 0x44
 800dca6:	4b09      	ldr	r3, [pc, #36]	; (800dccc <HAL_PCD_MspInit+0xbc>)
 800dca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcae:	60fb      	str	r3, [r7, #12]
 800dcb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	2105      	movs	r1, #5
 800dcb6:	2043      	movs	r0, #67	; 0x43
 800dcb8:	f7f5 fb88 	bl	80033cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dcbc:	2043      	movs	r0, #67	; 0x43
 800dcbe:	f7f5 fba1 	bl	8003404 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dcc2:	bf00      	nop
 800dcc4:	3728      	adds	r7, #40	; 0x28
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	40023800 	.word	0x40023800
 800dcd0:	40020000 	.word	0x40020000

0800dcd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dce8:	4619      	mov	r1, r3
 800dcea:	4610      	mov	r0, r2
 800dcec:	f7fb f9de 	bl	80090ac <USBD_LL_SetupStage>
}
 800dcf0:	bf00      	nop
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	460b      	mov	r3, r1
 800dd02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800dd0a:	78fa      	ldrb	r2, [r7, #3]
 800dd0c:	6879      	ldr	r1, [r7, #4]
 800dd0e:	4613      	mov	r3, r2
 800dd10:	00db      	lsls	r3, r3, #3
 800dd12:	1a9b      	subs	r3, r3, r2
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	440b      	add	r3, r1
 800dd18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	78fb      	ldrb	r3, [r7, #3]
 800dd20:	4619      	mov	r1, r3
 800dd22:	f7fb fa18 	bl	8009156 <USBD_LL_DataOutStage>
}
 800dd26:	bf00      	nop
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b082      	sub	sp, #8
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
 800dd36:	460b      	mov	r3, r1
 800dd38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800dd40:	78fa      	ldrb	r2, [r7, #3]
 800dd42:	6879      	ldr	r1, [r7, #4]
 800dd44:	4613      	mov	r3, r2
 800dd46:	00db      	lsls	r3, r3, #3
 800dd48:	1a9b      	subs	r3, r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	440b      	add	r3, r1
 800dd4e:	3348      	adds	r3, #72	; 0x48
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	78fb      	ldrb	r3, [r7, #3]
 800dd54:	4619      	mov	r1, r3
 800dd56:	f7fb fa61 	bl	800921c <USBD_LL_DataInStage>
}
 800dd5a:	bf00      	nop
 800dd5c:	3708      	adds	r7, #8
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b082      	sub	sp, #8
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fb fb75 	bl	8009460 <USBD_LL_SOF>
}
 800dd76:	bf00      	nop
 800dd78:	3708      	adds	r7, #8
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}

0800dd7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd7e:	b580      	push	{r7, lr}
 800dd80:	b084      	sub	sp, #16
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dd86:	2301      	movs	r3, #1
 800dd88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	68db      	ldr	r3, [r3, #12]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d102      	bne.n	800dd98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dd92:	2300      	movs	r3, #0
 800dd94:	73fb      	strb	r3, [r7, #15]
 800dd96:	e008      	b.n	800ddaa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	68db      	ldr	r3, [r3, #12]
 800dd9c:	2b02      	cmp	r3, #2
 800dd9e:	d102      	bne.n	800dda6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dda0:	2301      	movs	r3, #1
 800dda2:	73fb      	strb	r3, [r7, #15]
 800dda4:	e001      	b.n	800ddaa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dda6:	f7f5 f82f 	bl	8002e08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddb0:	7bfa      	ldrb	r2, [r7, #15]
 800ddb2:	4611      	mov	r1, r2
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7fb fb15 	bl	80093e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fb fac1 	bl	8009348 <USBD_LL_Reset>
}
 800ddc6:	bf00      	nop
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
	...

0800ddd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fb fb10 	bl	8009404 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	6812      	ldr	r2, [r2, #0]
 800ddf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ddf6:	f043 0301 	orr.w	r3, r3, #1
 800ddfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6a1b      	ldr	r3, [r3, #32]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d005      	beq.n	800de10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de04:	4b04      	ldr	r3, [pc, #16]	; (800de18 <HAL_PCD_SuspendCallback+0x48>)
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	4a03      	ldr	r2, [pc, #12]	; (800de18 <HAL_PCD_SuspendCallback+0x48>)
 800de0a:	f043 0306 	orr.w	r3, r3, #6
 800de0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800de10:	bf00      	nop
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	e000ed00 	.word	0xe000ed00

0800de1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fb fb00 	bl	8009430 <USBD_LL_Resume>
}
 800de30:	bf00      	nop
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	460b      	mov	r3, r1
 800de42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de4a:	78fa      	ldrb	r2, [r7, #3]
 800de4c:	4611      	mov	r1, r2
 800de4e:	4618      	mov	r0, r3
 800de50:	f7fb fb4e 	bl	80094f0 <USBD_LL_IsoOUTIncomplete>
}
 800de54:	bf00      	nop
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	460b      	mov	r3, r1
 800de66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de6e:	78fa      	ldrb	r2, [r7, #3]
 800de70:	4611      	mov	r1, r2
 800de72:	4618      	mov	r0, r3
 800de74:	f7fb fb16 	bl	80094a4 <USBD_LL_IsoINIncomplete>
}
 800de78:	bf00      	nop
 800de7a:	3708      	adds	r7, #8
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fb fb54 	bl	800953c <USBD_LL_DevConnected>
}
 800de94:	bf00      	nop
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fb fb51 	bl	8009552 <USBD_LL_DevDisconnected>
}
 800deb0:	bf00      	nop
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d13c      	bne.n	800df42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dec8:	4a20      	ldr	r2, [pc, #128]	; (800df4c <USBD_LL_Init+0x94>)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	4a1e      	ldr	r2, [pc, #120]	; (800df4c <USBD_LL_Init+0x94>)
 800ded4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ded8:	4b1c      	ldr	r3, [pc, #112]	; (800df4c <USBD_LL_Init+0x94>)
 800deda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dede:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dee0:	4b1a      	ldr	r3, [pc, #104]	; (800df4c <USBD_LL_Init+0x94>)
 800dee2:	2204      	movs	r2, #4
 800dee4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dee6:	4b19      	ldr	r3, [pc, #100]	; (800df4c <USBD_LL_Init+0x94>)
 800dee8:	2202      	movs	r2, #2
 800deea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800deec:	4b17      	ldr	r3, [pc, #92]	; (800df4c <USBD_LL_Init+0x94>)
 800deee:	2200      	movs	r2, #0
 800def0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800def2:	4b16      	ldr	r3, [pc, #88]	; (800df4c <USBD_LL_Init+0x94>)
 800def4:	2202      	movs	r2, #2
 800def6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800def8:	4b14      	ldr	r3, [pc, #80]	; (800df4c <USBD_LL_Init+0x94>)
 800defa:	2200      	movs	r2, #0
 800defc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800defe:	4b13      	ldr	r3, [pc, #76]	; (800df4c <USBD_LL_Init+0x94>)
 800df00:	2200      	movs	r2, #0
 800df02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800df04:	4b11      	ldr	r3, [pc, #68]	; (800df4c <USBD_LL_Init+0x94>)
 800df06:	2200      	movs	r2, #0
 800df08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800df0a:	4b10      	ldr	r3, [pc, #64]	; (800df4c <USBD_LL_Init+0x94>)
 800df0c:	2200      	movs	r2, #0
 800df0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800df10:	4b0e      	ldr	r3, [pc, #56]	; (800df4c <USBD_LL_Init+0x94>)
 800df12:	2200      	movs	r2, #0
 800df14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800df16:	480d      	ldr	r0, [pc, #52]	; (800df4c <USBD_LL_Init+0x94>)
 800df18:	f7f6 fedb 	bl	8004cd2 <HAL_PCD_Init>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d001      	beq.n	800df26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800df22:	f7f4 ff71 	bl	8002e08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800df26:	2180      	movs	r1, #128	; 0x80
 800df28:	4808      	ldr	r0, [pc, #32]	; (800df4c <USBD_LL_Init+0x94>)
 800df2a:	f7f8 f838 	bl	8005f9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800df2e:	2240      	movs	r2, #64	; 0x40
 800df30:	2100      	movs	r1, #0
 800df32:	4806      	ldr	r0, [pc, #24]	; (800df4c <USBD_LL_Init+0x94>)
 800df34:	f7f7 ffec 	bl	8005f10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800df38:	2280      	movs	r2, #128	; 0x80
 800df3a:	2101      	movs	r1, #1
 800df3c:	4803      	ldr	r0, [pc, #12]	; (800df4c <USBD_LL_Init+0x94>)
 800df3e:	f7f7 ffe7 	bl	8005f10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	2000bc80 	.word	0x2000bc80

0800df50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df58:	2300      	movs	r3, #0
 800df5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df5c:	2300      	movs	r3, #0
 800df5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df66:	4618      	mov	r0, r3
 800df68:	f7f6 ffd0 	bl	8004f0c <HAL_PCD_Start>
 800df6c:	4603      	mov	r3, r0
 800df6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df70:	7bfb      	ldrb	r3, [r7, #15]
 800df72:	4618      	mov	r0, r3
 800df74:	f000 f942 	bl	800e1fc <USBD_Get_USB_Status>
 800df78:	4603      	mov	r3, r0
 800df7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b084      	sub	sp, #16
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
 800df8e:	4608      	mov	r0, r1
 800df90:	4611      	mov	r1, r2
 800df92:	461a      	mov	r2, r3
 800df94:	4603      	mov	r3, r0
 800df96:	70fb      	strb	r3, [r7, #3]
 800df98:	460b      	mov	r3, r1
 800df9a:	70bb      	strb	r3, [r7, #2]
 800df9c:	4613      	mov	r3, r2
 800df9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dfae:	78bb      	ldrb	r3, [r7, #2]
 800dfb0:	883a      	ldrh	r2, [r7, #0]
 800dfb2:	78f9      	ldrb	r1, [r7, #3]
 800dfb4:	f7f7 fbb4 	bl	8005720 <HAL_PCD_EP_Open>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfbc:	7bfb      	ldrb	r3, [r7, #15]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f000 f91c 	bl	800e1fc <USBD_Get_USB_Status>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b084      	sub	sp, #16
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	460b      	mov	r3, r1
 800dfdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dfec:	78fa      	ldrb	r2, [r7, #3]
 800dfee:	4611      	mov	r1, r2
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7f7 fbfd 	bl	80057f0 <HAL_PCD_EP_Close>
 800dff6:	4603      	mov	r3, r0
 800dff8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dffa:	7bfb      	ldrb	r3, [r7, #15]
 800dffc:	4618      	mov	r0, r3
 800dffe:	f000 f8fd 	bl	800e1fc <USBD_Get_USB_Status>
 800e002:	4603      	mov	r3, r0
 800e004:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e006:	7bbb      	ldrb	r3, [r7, #14]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3710      	adds	r7, #16
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	460b      	mov	r3, r1
 800e01a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e02a:	78fa      	ldrb	r2, [r7, #3]
 800e02c:	4611      	mov	r1, r2
 800e02e:	4618      	mov	r0, r3
 800e030:	f7f7 fcd5 	bl	80059de <HAL_PCD_EP_SetStall>
 800e034:	4603      	mov	r3, r0
 800e036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e038:	7bfb      	ldrb	r3, [r7, #15]
 800e03a:	4618      	mov	r0, r3
 800e03c:	f000 f8de 	bl	800e1fc <USBD_Get_USB_Status>
 800e040:	4603      	mov	r3, r0
 800e042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e044:	7bbb      	ldrb	r3, [r7, #14]
}
 800e046:	4618      	mov	r0, r3
 800e048:	3710      	adds	r7, #16
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b084      	sub	sp, #16
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
 800e056:	460b      	mov	r3, r1
 800e058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e05a:	2300      	movs	r3, #0
 800e05c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e05e:	2300      	movs	r3, #0
 800e060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e068:	78fa      	ldrb	r2, [r7, #3]
 800e06a:	4611      	mov	r1, r2
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7f7 fd1a 	bl	8005aa6 <HAL_PCD_EP_ClrStall>
 800e072:	4603      	mov	r3, r0
 800e074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e076:	7bfb      	ldrb	r3, [r7, #15]
 800e078:	4618      	mov	r0, r3
 800e07a:	f000 f8bf 	bl	800e1fc <USBD_Get_USB_Status>
 800e07e:	4603      	mov	r3, r0
 800e080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e082:	7bbb      	ldrb	r3, [r7, #14]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3710      	adds	r7, #16
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b085      	sub	sp, #20
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	460b      	mov	r3, r1
 800e096:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e09e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e0a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	da0b      	bge.n	800e0c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e0a8:	78fb      	ldrb	r3, [r7, #3]
 800e0aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0ae:	68f9      	ldr	r1, [r7, #12]
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	00db      	lsls	r3, r3, #3
 800e0b4:	1a9b      	subs	r3, r3, r2
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	440b      	add	r3, r1
 800e0ba:	333e      	adds	r3, #62	; 0x3e
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	e00b      	b.n	800e0d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e0c0:	78fb      	ldrb	r3, [r7, #3]
 800e0c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0c6:	68f9      	ldr	r1, [r7, #12]
 800e0c8:	4613      	mov	r3, r2
 800e0ca:	00db      	lsls	r3, r3, #3
 800e0cc:	1a9b      	subs	r3, r3, r2
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	440b      	add	r3, r1
 800e0d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e0d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3714      	adds	r7, #20
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0fe:	78fa      	ldrb	r2, [r7, #3]
 800e100:	4611      	mov	r1, r2
 800e102:	4618      	mov	r0, r3
 800e104:	f7f7 fae7 	bl	80056d6 <HAL_PCD_SetAddress>
 800e108:	4603      	mov	r3, r0
 800e10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 f874 	bl	800e1fc <USBD_Get_USB_Status>
 800e114:	4603      	mov	r3, r0
 800e116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e118:	7bbb      	ldrb	r3, [r7, #14]
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b086      	sub	sp, #24
 800e126:	af00      	add	r7, sp, #0
 800e128:	60f8      	str	r0, [r7, #12]
 800e12a:	607a      	str	r2, [r7, #4]
 800e12c:	603b      	str	r3, [r7, #0]
 800e12e:	460b      	mov	r3, r1
 800e130:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e132:	2300      	movs	r3, #0
 800e134:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e136:	2300      	movs	r3, #0
 800e138:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e140:	7af9      	ldrb	r1, [r7, #11]
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	f7f7 fc00 	bl	800594a <HAL_PCD_EP_Transmit>
 800e14a:	4603      	mov	r3, r0
 800e14c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e14e:	7dfb      	ldrb	r3, [r7, #23]
 800e150:	4618      	mov	r0, r3
 800e152:	f000 f853 	bl	800e1fc <USBD_Get_USB_Status>
 800e156:	4603      	mov	r3, r0
 800e158:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e15a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3718      	adds	r7, #24
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b086      	sub	sp, #24
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	607a      	str	r2, [r7, #4]
 800e16e:	603b      	str	r3, [r7, #0]
 800e170:	460b      	mov	r3, r1
 800e172:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e174:	2300      	movs	r3, #0
 800e176:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e178:	2300      	movs	r3, #0
 800e17a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e182:	7af9      	ldrb	r1, [r7, #11]
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	f7f7 fb7c 	bl	8005884 <HAL_PCD_EP_Receive>
 800e18c:	4603      	mov	r3, r0
 800e18e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e190:	7dfb      	ldrb	r3, [r7, #23]
 800e192:	4618      	mov	r0, r3
 800e194:	f000 f832 	bl	800e1fc <USBD_Get_USB_Status>
 800e198:	4603      	mov	r3, r0
 800e19a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e19c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3718      	adds	r7, #24
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b082      	sub	sp, #8
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e1b8:	78fa      	ldrb	r2, [r7, #3]
 800e1ba:	4611      	mov	r1, r2
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7f7 fbac 	bl	800591a <HAL_PCD_EP_GetRxCount>
 800e1c2:	4603      	mov	r3, r0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3708      	adds	r7, #8
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b083      	sub	sp, #12
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e1d4:	4b03      	ldr	r3, [pc, #12]	; (800e1e4 <USBD_static_malloc+0x18>)
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	370c      	adds	r7, #12
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr
 800e1e2:	bf00      	nop
 800e1e4:	20004fd8 	.word	0x20004fd8

0800e1e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]

}
 800e1f0:	bf00      	nop
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	4603      	mov	r3, r0
 800e204:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e206:	2300      	movs	r3, #0
 800e208:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e20a:	79fb      	ldrb	r3, [r7, #7]
 800e20c:	2b03      	cmp	r3, #3
 800e20e:	d817      	bhi.n	800e240 <USBD_Get_USB_Status+0x44>
 800e210:	a201      	add	r2, pc, #4	; (adr r2, 800e218 <USBD_Get_USB_Status+0x1c>)
 800e212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e216:	bf00      	nop
 800e218:	0800e229 	.word	0x0800e229
 800e21c:	0800e22f 	.word	0x0800e22f
 800e220:	0800e235 	.word	0x0800e235
 800e224:	0800e23b 	.word	0x0800e23b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e228:	2300      	movs	r3, #0
 800e22a:	73fb      	strb	r3, [r7, #15]
    break;
 800e22c:	e00b      	b.n	800e246 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e22e:	2303      	movs	r3, #3
 800e230:	73fb      	strb	r3, [r7, #15]
    break;
 800e232:	e008      	b.n	800e246 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e234:	2301      	movs	r3, #1
 800e236:	73fb      	strb	r3, [r7, #15]
    break;
 800e238:	e005      	b.n	800e246 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e23a:	2303      	movs	r3, #3
 800e23c:	73fb      	strb	r3, [r7, #15]
    break;
 800e23e:	e002      	b.n	800e246 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e240:	2303      	movs	r3, #3
 800e242:	73fb      	strb	r3, [r7, #15]
    break;
 800e244:	bf00      	nop
  }
  return usb_status;
 800e246:	7bfb      	ldrb	r3, [r7, #15]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3714      	adds	r7, #20
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <__errno>:
 800e254:	4b01      	ldr	r3, [pc, #4]	; (800e25c <__errno+0x8>)
 800e256:	6818      	ldr	r0, [r3, #0]
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop
 800e25c:	20000184 	.word	0x20000184

0800e260 <__libc_init_array>:
 800e260:	b570      	push	{r4, r5, r6, lr}
 800e262:	4d0d      	ldr	r5, [pc, #52]	; (800e298 <__libc_init_array+0x38>)
 800e264:	4c0d      	ldr	r4, [pc, #52]	; (800e29c <__libc_init_array+0x3c>)
 800e266:	1b64      	subs	r4, r4, r5
 800e268:	10a4      	asrs	r4, r4, #2
 800e26a:	2600      	movs	r6, #0
 800e26c:	42a6      	cmp	r6, r4
 800e26e:	d109      	bne.n	800e284 <__libc_init_array+0x24>
 800e270:	4d0b      	ldr	r5, [pc, #44]	; (800e2a0 <__libc_init_array+0x40>)
 800e272:	4c0c      	ldr	r4, [pc, #48]	; (800e2a4 <__libc_init_array+0x44>)
 800e274:	f000 fd3c 	bl	800ecf0 <_init>
 800e278:	1b64      	subs	r4, r4, r5
 800e27a:	10a4      	asrs	r4, r4, #2
 800e27c:	2600      	movs	r6, #0
 800e27e:	42a6      	cmp	r6, r4
 800e280:	d105      	bne.n	800e28e <__libc_init_array+0x2e>
 800e282:	bd70      	pop	{r4, r5, r6, pc}
 800e284:	f855 3b04 	ldr.w	r3, [r5], #4
 800e288:	4798      	blx	r3
 800e28a:	3601      	adds	r6, #1
 800e28c:	e7ee      	b.n	800e26c <__libc_init_array+0xc>
 800e28e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e292:	4798      	blx	r3
 800e294:	3601      	adds	r6, #1
 800e296:	e7f2      	b.n	800e27e <__libc_init_array+0x1e>
 800e298:	0800f06c 	.word	0x0800f06c
 800e29c:	0800f06c 	.word	0x0800f06c
 800e2a0:	0800f06c 	.word	0x0800f06c
 800e2a4:	0800f070 	.word	0x0800f070

0800e2a8 <__itoa>:
 800e2a8:	1e93      	subs	r3, r2, #2
 800e2aa:	2b22      	cmp	r3, #34	; 0x22
 800e2ac:	b510      	push	{r4, lr}
 800e2ae:	460c      	mov	r4, r1
 800e2b0:	d904      	bls.n	800e2bc <__itoa+0x14>
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	700b      	strb	r3, [r1, #0]
 800e2b6:	461c      	mov	r4, r3
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	bd10      	pop	{r4, pc}
 800e2bc:	2a0a      	cmp	r2, #10
 800e2be:	d109      	bne.n	800e2d4 <__itoa+0x2c>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	da07      	bge.n	800e2d4 <__itoa+0x2c>
 800e2c4:	232d      	movs	r3, #45	; 0x2d
 800e2c6:	700b      	strb	r3, [r1, #0]
 800e2c8:	4240      	negs	r0, r0
 800e2ca:	2101      	movs	r1, #1
 800e2cc:	4421      	add	r1, r4
 800e2ce:	f000 f989 	bl	800e5e4 <__utoa>
 800e2d2:	e7f1      	b.n	800e2b8 <__itoa+0x10>
 800e2d4:	2100      	movs	r1, #0
 800e2d6:	e7f9      	b.n	800e2cc <__itoa+0x24>

0800e2d8 <itoa>:
 800e2d8:	f7ff bfe6 	b.w	800e2a8 <__itoa>

0800e2dc <__retarget_lock_acquire_recursive>:
 800e2dc:	4770      	bx	lr

0800e2de <__retarget_lock_release_recursive>:
 800e2de:	4770      	bx	lr

0800e2e0 <malloc>:
 800e2e0:	4b02      	ldr	r3, [pc, #8]	; (800e2ec <malloc+0xc>)
 800e2e2:	4601      	mov	r1, r0
 800e2e4:	6818      	ldr	r0, [r3, #0]
 800e2e6:	f000 b871 	b.w	800e3cc <_malloc_r>
 800e2ea:	bf00      	nop
 800e2ec:	20000184 	.word	0x20000184

0800e2f0 <free>:
 800e2f0:	4b02      	ldr	r3, [pc, #8]	; (800e2fc <free+0xc>)
 800e2f2:	4601      	mov	r1, r0
 800e2f4:	6818      	ldr	r0, [r3, #0]
 800e2f6:	f000 b819 	b.w	800e32c <_free_r>
 800e2fa:	bf00      	nop
 800e2fc:	20000184 	.word	0x20000184

0800e300 <memcpy>:
 800e300:	440a      	add	r2, r1
 800e302:	4291      	cmp	r1, r2
 800e304:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e308:	d100      	bne.n	800e30c <memcpy+0xc>
 800e30a:	4770      	bx	lr
 800e30c:	b510      	push	{r4, lr}
 800e30e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e312:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e316:	4291      	cmp	r1, r2
 800e318:	d1f9      	bne.n	800e30e <memcpy+0xe>
 800e31a:	bd10      	pop	{r4, pc}

0800e31c <memset>:
 800e31c:	4402      	add	r2, r0
 800e31e:	4603      	mov	r3, r0
 800e320:	4293      	cmp	r3, r2
 800e322:	d100      	bne.n	800e326 <memset+0xa>
 800e324:	4770      	bx	lr
 800e326:	f803 1b01 	strb.w	r1, [r3], #1
 800e32a:	e7f9      	b.n	800e320 <memset+0x4>

0800e32c <_free_r>:
 800e32c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e32e:	2900      	cmp	r1, #0
 800e330:	d048      	beq.n	800e3c4 <_free_r+0x98>
 800e332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e336:	9001      	str	r0, [sp, #4]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f1a1 0404 	sub.w	r4, r1, #4
 800e33e:	bfb8      	it	lt
 800e340:	18e4      	addlt	r4, r4, r3
 800e342:	f000 f991 	bl	800e668 <__malloc_lock>
 800e346:	4a20      	ldr	r2, [pc, #128]	; (800e3c8 <_free_r+0x9c>)
 800e348:	9801      	ldr	r0, [sp, #4]
 800e34a:	6813      	ldr	r3, [r2, #0]
 800e34c:	4615      	mov	r5, r2
 800e34e:	b933      	cbnz	r3, 800e35e <_free_r+0x32>
 800e350:	6063      	str	r3, [r4, #4]
 800e352:	6014      	str	r4, [r2, #0]
 800e354:	b003      	add	sp, #12
 800e356:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e35a:	f000 b98b 	b.w	800e674 <__malloc_unlock>
 800e35e:	42a3      	cmp	r3, r4
 800e360:	d90b      	bls.n	800e37a <_free_r+0x4e>
 800e362:	6821      	ldr	r1, [r4, #0]
 800e364:	1862      	adds	r2, r4, r1
 800e366:	4293      	cmp	r3, r2
 800e368:	bf04      	itt	eq
 800e36a:	681a      	ldreq	r2, [r3, #0]
 800e36c:	685b      	ldreq	r3, [r3, #4]
 800e36e:	6063      	str	r3, [r4, #4]
 800e370:	bf04      	itt	eq
 800e372:	1852      	addeq	r2, r2, r1
 800e374:	6022      	streq	r2, [r4, #0]
 800e376:	602c      	str	r4, [r5, #0]
 800e378:	e7ec      	b.n	800e354 <_free_r+0x28>
 800e37a:	461a      	mov	r2, r3
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	b10b      	cbz	r3, 800e384 <_free_r+0x58>
 800e380:	42a3      	cmp	r3, r4
 800e382:	d9fa      	bls.n	800e37a <_free_r+0x4e>
 800e384:	6811      	ldr	r1, [r2, #0]
 800e386:	1855      	adds	r5, r2, r1
 800e388:	42a5      	cmp	r5, r4
 800e38a:	d10b      	bne.n	800e3a4 <_free_r+0x78>
 800e38c:	6824      	ldr	r4, [r4, #0]
 800e38e:	4421      	add	r1, r4
 800e390:	1854      	adds	r4, r2, r1
 800e392:	42a3      	cmp	r3, r4
 800e394:	6011      	str	r1, [r2, #0]
 800e396:	d1dd      	bne.n	800e354 <_free_r+0x28>
 800e398:	681c      	ldr	r4, [r3, #0]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	6053      	str	r3, [r2, #4]
 800e39e:	4421      	add	r1, r4
 800e3a0:	6011      	str	r1, [r2, #0]
 800e3a2:	e7d7      	b.n	800e354 <_free_r+0x28>
 800e3a4:	d902      	bls.n	800e3ac <_free_r+0x80>
 800e3a6:	230c      	movs	r3, #12
 800e3a8:	6003      	str	r3, [r0, #0]
 800e3aa:	e7d3      	b.n	800e354 <_free_r+0x28>
 800e3ac:	6825      	ldr	r5, [r4, #0]
 800e3ae:	1961      	adds	r1, r4, r5
 800e3b0:	428b      	cmp	r3, r1
 800e3b2:	bf04      	itt	eq
 800e3b4:	6819      	ldreq	r1, [r3, #0]
 800e3b6:	685b      	ldreq	r3, [r3, #4]
 800e3b8:	6063      	str	r3, [r4, #4]
 800e3ba:	bf04      	itt	eq
 800e3bc:	1949      	addeq	r1, r1, r5
 800e3be:	6021      	streq	r1, [r4, #0]
 800e3c0:	6054      	str	r4, [r2, #4]
 800e3c2:	e7c7      	b.n	800e354 <_free_r+0x28>
 800e3c4:	b003      	add	sp, #12
 800e3c6:	bd30      	pop	{r4, r5, pc}
 800e3c8:	200051f8 	.word	0x200051f8

0800e3cc <_malloc_r>:
 800e3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ce:	1ccd      	adds	r5, r1, #3
 800e3d0:	f025 0503 	bic.w	r5, r5, #3
 800e3d4:	3508      	adds	r5, #8
 800e3d6:	2d0c      	cmp	r5, #12
 800e3d8:	bf38      	it	cc
 800e3da:	250c      	movcc	r5, #12
 800e3dc:	2d00      	cmp	r5, #0
 800e3de:	4606      	mov	r6, r0
 800e3e0:	db01      	blt.n	800e3e6 <_malloc_r+0x1a>
 800e3e2:	42a9      	cmp	r1, r5
 800e3e4:	d903      	bls.n	800e3ee <_malloc_r+0x22>
 800e3e6:	230c      	movs	r3, #12
 800e3e8:	6033      	str	r3, [r6, #0]
 800e3ea:	2000      	movs	r0, #0
 800e3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3ee:	f000 f93b 	bl	800e668 <__malloc_lock>
 800e3f2:	4921      	ldr	r1, [pc, #132]	; (800e478 <_malloc_r+0xac>)
 800e3f4:	680a      	ldr	r2, [r1, #0]
 800e3f6:	4614      	mov	r4, r2
 800e3f8:	b99c      	cbnz	r4, 800e422 <_malloc_r+0x56>
 800e3fa:	4f20      	ldr	r7, [pc, #128]	; (800e47c <_malloc_r+0xb0>)
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	b923      	cbnz	r3, 800e40a <_malloc_r+0x3e>
 800e400:	4621      	mov	r1, r4
 800e402:	4630      	mov	r0, r6
 800e404:	f000 f8a6 	bl	800e554 <_sbrk_r>
 800e408:	6038      	str	r0, [r7, #0]
 800e40a:	4629      	mov	r1, r5
 800e40c:	4630      	mov	r0, r6
 800e40e:	f000 f8a1 	bl	800e554 <_sbrk_r>
 800e412:	1c43      	adds	r3, r0, #1
 800e414:	d123      	bne.n	800e45e <_malloc_r+0x92>
 800e416:	230c      	movs	r3, #12
 800e418:	6033      	str	r3, [r6, #0]
 800e41a:	4630      	mov	r0, r6
 800e41c:	f000 f92a 	bl	800e674 <__malloc_unlock>
 800e420:	e7e3      	b.n	800e3ea <_malloc_r+0x1e>
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	1b5b      	subs	r3, r3, r5
 800e426:	d417      	bmi.n	800e458 <_malloc_r+0x8c>
 800e428:	2b0b      	cmp	r3, #11
 800e42a:	d903      	bls.n	800e434 <_malloc_r+0x68>
 800e42c:	6023      	str	r3, [r4, #0]
 800e42e:	441c      	add	r4, r3
 800e430:	6025      	str	r5, [r4, #0]
 800e432:	e004      	b.n	800e43e <_malloc_r+0x72>
 800e434:	6863      	ldr	r3, [r4, #4]
 800e436:	42a2      	cmp	r2, r4
 800e438:	bf0c      	ite	eq
 800e43a:	600b      	streq	r3, [r1, #0]
 800e43c:	6053      	strne	r3, [r2, #4]
 800e43e:	4630      	mov	r0, r6
 800e440:	f000 f918 	bl	800e674 <__malloc_unlock>
 800e444:	f104 000b 	add.w	r0, r4, #11
 800e448:	1d23      	adds	r3, r4, #4
 800e44a:	f020 0007 	bic.w	r0, r0, #7
 800e44e:	1ac2      	subs	r2, r0, r3
 800e450:	d0cc      	beq.n	800e3ec <_malloc_r+0x20>
 800e452:	1a1b      	subs	r3, r3, r0
 800e454:	50a3      	str	r3, [r4, r2]
 800e456:	e7c9      	b.n	800e3ec <_malloc_r+0x20>
 800e458:	4622      	mov	r2, r4
 800e45a:	6864      	ldr	r4, [r4, #4]
 800e45c:	e7cc      	b.n	800e3f8 <_malloc_r+0x2c>
 800e45e:	1cc4      	adds	r4, r0, #3
 800e460:	f024 0403 	bic.w	r4, r4, #3
 800e464:	42a0      	cmp	r0, r4
 800e466:	d0e3      	beq.n	800e430 <_malloc_r+0x64>
 800e468:	1a21      	subs	r1, r4, r0
 800e46a:	4630      	mov	r0, r6
 800e46c:	f000 f872 	bl	800e554 <_sbrk_r>
 800e470:	3001      	adds	r0, #1
 800e472:	d1dd      	bne.n	800e430 <_malloc_r+0x64>
 800e474:	e7cf      	b.n	800e416 <_malloc_r+0x4a>
 800e476:	bf00      	nop
 800e478:	200051f8 	.word	0x200051f8
 800e47c:	200051fc 	.word	0x200051fc

0800e480 <cleanup_glue>:
 800e480:	b538      	push	{r3, r4, r5, lr}
 800e482:	460c      	mov	r4, r1
 800e484:	6809      	ldr	r1, [r1, #0]
 800e486:	4605      	mov	r5, r0
 800e488:	b109      	cbz	r1, 800e48e <cleanup_glue+0xe>
 800e48a:	f7ff fff9 	bl	800e480 <cleanup_glue>
 800e48e:	4621      	mov	r1, r4
 800e490:	4628      	mov	r0, r5
 800e492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e496:	f7ff bf49 	b.w	800e32c <_free_r>
	...

0800e49c <_reclaim_reent>:
 800e49c:	4b2c      	ldr	r3, [pc, #176]	; (800e550 <_reclaim_reent+0xb4>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4283      	cmp	r3, r0
 800e4a2:	b570      	push	{r4, r5, r6, lr}
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	d051      	beq.n	800e54c <_reclaim_reent+0xb0>
 800e4a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e4aa:	b143      	cbz	r3, 800e4be <_reclaim_reent+0x22>
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d14a      	bne.n	800e548 <_reclaim_reent+0xac>
 800e4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4b4:	6819      	ldr	r1, [r3, #0]
 800e4b6:	b111      	cbz	r1, 800e4be <_reclaim_reent+0x22>
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f7ff ff37 	bl	800e32c <_free_r>
 800e4be:	6961      	ldr	r1, [r4, #20]
 800e4c0:	b111      	cbz	r1, 800e4c8 <_reclaim_reent+0x2c>
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	f7ff ff32 	bl	800e32c <_free_r>
 800e4c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e4ca:	b111      	cbz	r1, 800e4d2 <_reclaim_reent+0x36>
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f7ff ff2d 	bl	800e32c <_free_r>
 800e4d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e4d4:	b111      	cbz	r1, 800e4dc <_reclaim_reent+0x40>
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f7ff ff28 	bl	800e32c <_free_r>
 800e4dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e4de:	b111      	cbz	r1, 800e4e6 <_reclaim_reent+0x4a>
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	f7ff ff23 	bl	800e32c <_free_r>
 800e4e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e4e8:	b111      	cbz	r1, 800e4f0 <_reclaim_reent+0x54>
 800e4ea:	4620      	mov	r0, r4
 800e4ec:	f7ff ff1e 	bl	800e32c <_free_r>
 800e4f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e4f2:	b111      	cbz	r1, 800e4fa <_reclaim_reent+0x5e>
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	f7ff ff19 	bl	800e32c <_free_r>
 800e4fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e4fc:	b111      	cbz	r1, 800e504 <_reclaim_reent+0x68>
 800e4fe:	4620      	mov	r0, r4
 800e500:	f7ff ff14 	bl	800e32c <_free_r>
 800e504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e506:	b111      	cbz	r1, 800e50e <_reclaim_reent+0x72>
 800e508:	4620      	mov	r0, r4
 800e50a:	f7ff ff0f 	bl	800e32c <_free_r>
 800e50e:	69a3      	ldr	r3, [r4, #24]
 800e510:	b1e3      	cbz	r3, 800e54c <_reclaim_reent+0xb0>
 800e512:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e514:	4620      	mov	r0, r4
 800e516:	4798      	blx	r3
 800e518:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e51a:	b1b9      	cbz	r1, 800e54c <_reclaim_reent+0xb0>
 800e51c:	4620      	mov	r0, r4
 800e51e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e522:	f7ff bfad 	b.w	800e480 <cleanup_glue>
 800e526:	5949      	ldr	r1, [r1, r5]
 800e528:	b941      	cbnz	r1, 800e53c <_reclaim_reent+0xa0>
 800e52a:	3504      	adds	r5, #4
 800e52c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e52e:	2d80      	cmp	r5, #128	; 0x80
 800e530:	68d9      	ldr	r1, [r3, #12]
 800e532:	d1f8      	bne.n	800e526 <_reclaim_reent+0x8a>
 800e534:	4620      	mov	r0, r4
 800e536:	f7ff fef9 	bl	800e32c <_free_r>
 800e53a:	e7ba      	b.n	800e4b2 <_reclaim_reent+0x16>
 800e53c:	680e      	ldr	r6, [r1, #0]
 800e53e:	4620      	mov	r0, r4
 800e540:	f7ff fef4 	bl	800e32c <_free_r>
 800e544:	4631      	mov	r1, r6
 800e546:	e7ef      	b.n	800e528 <_reclaim_reent+0x8c>
 800e548:	2500      	movs	r5, #0
 800e54a:	e7ef      	b.n	800e52c <_reclaim_reent+0x90>
 800e54c:	bd70      	pop	{r4, r5, r6, pc}
 800e54e:	bf00      	nop
 800e550:	20000184 	.word	0x20000184

0800e554 <_sbrk_r>:
 800e554:	b538      	push	{r3, r4, r5, lr}
 800e556:	4d06      	ldr	r5, [pc, #24]	; (800e570 <_sbrk_r+0x1c>)
 800e558:	2300      	movs	r3, #0
 800e55a:	4604      	mov	r4, r0
 800e55c:	4608      	mov	r0, r1
 800e55e:	602b      	str	r3, [r5, #0]
 800e560:	f7f4 fda4 	bl	80030ac <_sbrk>
 800e564:	1c43      	adds	r3, r0, #1
 800e566:	d102      	bne.n	800e56e <_sbrk_r+0x1a>
 800e568:	682b      	ldr	r3, [r5, #0]
 800e56a:	b103      	cbz	r3, 800e56e <_sbrk_r+0x1a>
 800e56c:	6023      	str	r3, [r4, #0]
 800e56e:	bd38      	pop	{r3, r4, r5, pc}
 800e570:	2000c094 	.word	0x2000c094

0800e574 <siprintf>:
 800e574:	b40e      	push	{r1, r2, r3}
 800e576:	b500      	push	{lr}
 800e578:	b09c      	sub	sp, #112	; 0x70
 800e57a:	ab1d      	add	r3, sp, #116	; 0x74
 800e57c:	9002      	str	r0, [sp, #8]
 800e57e:	9006      	str	r0, [sp, #24]
 800e580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e584:	4809      	ldr	r0, [pc, #36]	; (800e5ac <siprintf+0x38>)
 800e586:	9107      	str	r1, [sp, #28]
 800e588:	9104      	str	r1, [sp, #16]
 800e58a:	4909      	ldr	r1, [pc, #36]	; (800e5b0 <siprintf+0x3c>)
 800e58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e590:	9105      	str	r1, [sp, #20]
 800e592:	6800      	ldr	r0, [r0, #0]
 800e594:	9301      	str	r3, [sp, #4]
 800e596:	a902      	add	r1, sp, #8
 800e598:	f000 f8ce 	bl	800e738 <_svfiprintf_r>
 800e59c:	9b02      	ldr	r3, [sp, #8]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	701a      	strb	r2, [r3, #0]
 800e5a2:	b01c      	add	sp, #112	; 0x70
 800e5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5a8:	b003      	add	sp, #12
 800e5aa:	4770      	bx	lr
 800e5ac:	20000184 	.word	0x20000184
 800e5b0:	ffff0208 	.word	0xffff0208

0800e5b4 <strcat>:
 800e5b4:	b510      	push	{r4, lr}
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	7814      	ldrb	r4, [r2, #0]
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	3201      	adds	r2, #1
 800e5be:	2c00      	cmp	r4, #0
 800e5c0:	d1fa      	bne.n	800e5b8 <strcat+0x4>
 800e5c2:	3b01      	subs	r3, #1
 800e5c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5cc:	2a00      	cmp	r2, #0
 800e5ce:	d1f9      	bne.n	800e5c4 <strcat+0x10>
 800e5d0:	bd10      	pop	{r4, pc}

0800e5d2 <strcpy>:
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5d8:	f803 2b01 	strb.w	r2, [r3], #1
 800e5dc:	2a00      	cmp	r2, #0
 800e5de:	d1f9      	bne.n	800e5d4 <strcpy+0x2>
 800e5e0:	4770      	bx	lr
	...

0800e5e4 <__utoa>:
 800e5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5e6:	4c1f      	ldr	r4, [pc, #124]	; (800e664 <__utoa+0x80>)
 800e5e8:	b08b      	sub	sp, #44	; 0x2c
 800e5ea:	4605      	mov	r5, r0
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	466e      	mov	r6, sp
 800e5f0:	f104 0c20 	add.w	ip, r4, #32
 800e5f4:	6820      	ldr	r0, [r4, #0]
 800e5f6:	6861      	ldr	r1, [r4, #4]
 800e5f8:	4637      	mov	r7, r6
 800e5fa:	c703      	stmia	r7!, {r0, r1}
 800e5fc:	3408      	adds	r4, #8
 800e5fe:	4564      	cmp	r4, ip
 800e600:	463e      	mov	r6, r7
 800e602:	d1f7      	bne.n	800e5f4 <__utoa+0x10>
 800e604:	7921      	ldrb	r1, [r4, #4]
 800e606:	7139      	strb	r1, [r7, #4]
 800e608:	1e91      	subs	r1, r2, #2
 800e60a:	6820      	ldr	r0, [r4, #0]
 800e60c:	6038      	str	r0, [r7, #0]
 800e60e:	2922      	cmp	r1, #34	; 0x22
 800e610:	f04f 0100 	mov.w	r1, #0
 800e614:	d904      	bls.n	800e620 <__utoa+0x3c>
 800e616:	7019      	strb	r1, [r3, #0]
 800e618:	460b      	mov	r3, r1
 800e61a:	4618      	mov	r0, r3
 800e61c:	b00b      	add	sp, #44	; 0x2c
 800e61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e620:	1e58      	subs	r0, r3, #1
 800e622:	4684      	mov	ip, r0
 800e624:	fbb5 f7f2 	udiv	r7, r5, r2
 800e628:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800e62c:	fb02 5617 	mls	r6, r2, r7, r5
 800e630:	4476      	add	r6, lr
 800e632:	460c      	mov	r4, r1
 800e634:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e638:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e63c:	462e      	mov	r6, r5
 800e63e:	42b2      	cmp	r2, r6
 800e640:	f101 0101 	add.w	r1, r1, #1
 800e644:	463d      	mov	r5, r7
 800e646:	d9ed      	bls.n	800e624 <__utoa+0x40>
 800e648:	2200      	movs	r2, #0
 800e64a:	545a      	strb	r2, [r3, r1]
 800e64c:	1919      	adds	r1, r3, r4
 800e64e:	1aa5      	subs	r5, r4, r2
 800e650:	42aa      	cmp	r2, r5
 800e652:	dae2      	bge.n	800e61a <__utoa+0x36>
 800e654:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e658:	780e      	ldrb	r6, [r1, #0]
 800e65a:	7006      	strb	r6, [r0, #0]
 800e65c:	3201      	adds	r2, #1
 800e65e:	f801 5901 	strb.w	r5, [r1], #-1
 800e662:	e7f4      	b.n	800e64e <__utoa+0x6a>
 800e664:	0800f00c 	.word	0x0800f00c

0800e668 <__malloc_lock>:
 800e668:	4801      	ldr	r0, [pc, #4]	; (800e670 <__malloc_lock+0x8>)
 800e66a:	f7ff be37 	b.w	800e2dc <__retarget_lock_acquire_recursive>
 800e66e:	bf00      	nop
 800e670:	2000c08c 	.word	0x2000c08c

0800e674 <__malloc_unlock>:
 800e674:	4801      	ldr	r0, [pc, #4]	; (800e67c <__malloc_unlock+0x8>)
 800e676:	f7ff be32 	b.w	800e2de <__retarget_lock_release_recursive>
 800e67a:	bf00      	nop
 800e67c:	2000c08c 	.word	0x2000c08c

0800e680 <__ssputs_r>:
 800e680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e684:	688e      	ldr	r6, [r1, #8]
 800e686:	429e      	cmp	r6, r3
 800e688:	4682      	mov	sl, r0
 800e68a:	460c      	mov	r4, r1
 800e68c:	4690      	mov	r8, r2
 800e68e:	461f      	mov	r7, r3
 800e690:	d838      	bhi.n	800e704 <__ssputs_r+0x84>
 800e692:	898a      	ldrh	r2, [r1, #12]
 800e694:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e698:	d032      	beq.n	800e700 <__ssputs_r+0x80>
 800e69a:	6825      	ldr	r5, [r4, #0]
 800e69c:	6909      	ldr	r1, [r1, #16]
 800e69e:	eba5 0901 	sub.w	r9, r5, r1
 800e6a2:	6965      	ldr	r5, [r4, #20]
 800e6a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	444b      	add	r3, r9
 800e6b0:	106d      	asrs	r5, r5, #1
 800e6b2:	429d      	cmp	r5, r3
 800e6b4:	bf38      	it	cc
 800e6b6:	461d      	movcc	r5, r3
 800e6b8:	0553      	lsls	r3, r2, #21
 800e6ba:	d531      	bpl.n	800e720 <__ssputs_r+0xa0>
 800e6bc:	4629      	mov	r1, r5
 800e6be:	f7ff fe85 	bl	800e3cc <_malloc_r>
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	b950      	cbnz	r0, 800e6dc <__ssputs_r+0x5c>
 800e6c6:	230c      	movs	r3, #12
 800e6c8:	f8ca 3000 	str.w	r3, [sl]
 800e6cc:	89a3      	ldrh	r3, [r4, #12]
 800e6ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6d2:	81a3      	strh	r3, [r4, #12]
 800e6d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6dc:	6921      	ldr	r1, [r4, #16]
 800e6de:	464a      	mov	r2, r9
 800e6e0:	f7ff fe0e 	bl	800e300 <memcpy>
 800e6e4:	89a3      	ldrh	r3, [r4, #12]
 800e6e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e6ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6ee:	81a3      	strh	r3, [r4, #12]
 800e6f0:	6126      	str	r6, [r4, #16]
 800e6f2:	6165      	str	r5, [r4, #20]
 800e6f4:	444e      	add	r6, r9
 800e6f6:	eba5 0509 	sub.w	r5, r5, r9
 800e6fa:	6026      	str	r6, [r4, #0]
 800e6fc:	60a5      	str	r5, [r4, #8]
 800e6fe:	463e      	mov	r6, r7
 800e700:	42be      	cmp	r6, r7
 800e702:	d900      	bls.n	800e706 <__ssputs_r+0x86>
 800e704:	463e      	mov	r6, r7
 800e706:	4632      	mov	r2, r6
 800e708:	6820      	ldr	r0, [r4, #0]
 800e70a:	4641      	mov	r1, r8
 800e70c:	f000 faa8 	bl	800ec60 <memmove>
 800e710:	68a3      	ldr	r3, [r4, #8]
 800e712:	6822      	ldr	r2, [r4, #0]
 800e714:	1b9b      	subs	r3, r3, r6
 800e716:	4432      	add	r2, r6
 800e718:	60a3      	str	r3, [r4, #8]
 800e71a:	6022      	str	r2, [r4, #0]
 800e71c:	2000      	movs	r0, #0
 800e71e:	e7db      	b.n	800e6d8 <__ssputs_r+0x58>
 800e720:	462a      	mov	r2, r5
 800e722:	f000 fab7 	bl	800ec94 <_realloc_r>
 800e726:	4606      	mov	r6, r0
 800e728:	2800      	cmp	r0, #0
 800e72a:	d1e1      	bne.n	800e6f0 <__ssputs_r+0x70>
 800e72c:	6921      	ldr	r1, [r4, #16]
 800e72e:	4650      	mov	r0, sl
 800e730:	f7ff fdfc 	bl	800e32c <_free_r>
 800e734:	e7c7      	b.n	800e6c6 <__ssputs_r+0x46>
	...

0800e738 <_svfiprintf_r>:
 800e738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73c:	4698      	mov	r8, r3
 800e73e:	898b      	ldrh	r3, [r1, #12]
 800e740:	061b      	lsls	r3, r3, #24
 800e742:	b09d      	sub	sp, #116	; 0x74
 800e744:	4607      	mov	r7, r0
 800e746:	460d      	mov	r5, r1
 800e748:	4614      	mov	r4, r2
 800e74a:	d50e      	bpl.n	800e76a <_svfiprintf_r+0x32>
 800e74c:	690b      	ldr	r3, [r1, #16]
 800e74e:	b963      	cbnz	r3, 800e76a <_svfiprintf_r+0x32>
 800e750:	2140      	movs	r1, #64	; 0x40
 800e752:	f7ff fe3b 	bl	800e3cc <_malloc_r>
 800e756:	6028      	str	r0, [r5, #0]
 800e758:	6128      	str	r0, [r5, #16]
 800e75a:	b920      	cbnz	r0, 800e766 <_svfiprintf_r+0x2e>
 800e75c:	230c      	movs	r3, #12
 800e75e:	603b      	str	r3, [r7, #0]
 800e760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e764:	e0d1      	b.n	800e90a <_svfiprintf_r+0x1d2>
 800e766:	2340      	movs	r3, #64	; 0x40
 800e768:	616b      	str	r3, [r5, #20]
 800e76a:	2300      	movs	r3, #0
 800e76c:	9309      	str	r3, [sp, #36]	; 0x24
 800e76e:	2320      	movs	r3, #32
 800e770:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e774:	f8cd 800c 	str.w	r8, [sp, #12]
 800e778:	2330      	movs	r3, #48	; 0x30
 800e77a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e924 <_svfiprintf_r+0x1ec>
 800e77e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e782:	f04f 0901 	mov.w	r9, #1
 800e786:	4623      	mov	r3, r4
 800e788:	469a      	mov	sl, r3
 800e78a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e78e:	b10a      	cbz	r2, 800e794 <_svfiprintf_r+0x5c>
 800e790:	2a25      	cmp	r2, #37	; 0x25
 800e792:	d1f9      	bne.n	800e788 <_svfiprintf_r+0x50>
 800e794:	ebba 0b04 	subs.w	fp, sl, r4
 800e798:	d00b      	beq.n	800e7b2 <_svfiprintf_r+0x7a>
 800e79a:	465b      	mov	r3, fp
 800e79c:	4622      	mov	r2, r4
 800e79e:	4629      	mov	r1, r5
 800e7a0:	4638      	mov	r0, r7
 800e7a2:	f7ff ff6d 	bl	800e680 <__ssputs_r>
 800e7a6:	3001      	adds	r0, #1
 800e7a8:	f000 80aa 	beq.w	800e900 <_svfiprintf_r+0x1c8>
 800e7ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7ae:	445a      	add	r2, fp
 800e7b0:	9209      	str	r2, [sp, #36]	; 0x24
 800e7b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	f000 80a2 	beq.w	800e900 <_svfiprintf_r+0x1c8>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7c6:	f10a 0a01 	add.w	sl, sl, #1
 800e7ca:	9304      	str	r3, [sp, #16]
 800e7cc:	9307      	str	r3, [sp, #28]
 800e7ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7d2:	931a      	str	r3, [sp, #104]	; 0x68
 800e7d4:	4654      	mov	r4, sl
 800e7d6:	2205      	movs	r2, #5
 800e7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7dc:	4851      	ldr	r0, [pc, #324]	; (800e924 <_svfiprintf_r+0x1ec>)
 800e7de:	f7f1 fcff 	bl	80001e0 <memchr>
 800e7e2:	9a04      	ldr	r2, [sp, #16]
 800e7e4:	b9d8      	cbnz	r0, 800e81e <_svfiprintf_r+0xe6>
 800e7e6:	06d0      	lsls	r0, r2, #27
 800e7e8:	bf44      	itt	mi
 800e7ea:	2320      	movmi	r3, #32
 800e7ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7f0:	0711      	lsls	r1, r2, #28
 800e7f2:	bf44      	itt	mi
 800e7f4:	232b      	movmi	r3, #43	; 0x2b
 800e7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e7fe:	2b2a      	cmp	r3, #42	; 0x2a
 800e800:	d015      	beq.n	800e82e <_svfiprintf_r+0xf6>
 800e802:	9a07      	ldr	r2, [sp, #28]
 800e804:	4654      	mov	r4, sl
 800e806:	2000      	movs	r0, #0
 800e808:	f04f 0c0a 	mov.w	ip, #10
 800e80c:	4621      	mov	r1, r4
 800e80e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e812:	3b30      	subs	r3, #48	; 0x30
 800e814:	2b09      	cmp	r3, #9
 800e816:	d94e      	bls.n	800e8b6 <_svfiprintf_r+0x17e>
 800e818:	b1b0      	cbz	r0, 800e848 <_svfiprintf_r+0x110>
 800e81a:	9207      	str	r2, [sp, #28]
 800e81c:	e014      	b.n	800e848 <_svfiprintf_r+0x110>
 800e81e:	eba0 0308 	sub.w	r3, r0, r8
 800e822:	fa09 f303 	lsl.w	r3, r9, r3
 800e826:	4313      	orrs	r3, r2
 800e828:	9304      	str	r3, [sp, #16]
 800e82a:	46a2      	mov	sl, r4
 800e82c:	e7d2      	b.n	800e7d4 <_svfiprintf_r+0x9c>
 800e82e:	9b03      	ldr	r3, [sp, #12]
 800e830:	1d19      	adds	r1, r3, #4
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	9103      	str	r1, [sp, #12]
 800e836:	2b00      	cmp	r3, #0
 800e838:	bfbb      	ittet	lt
 800e83a:	425b      	neglt	r3, r3
 800e83c:	f042 0202 	orrlt.w	r2, r2, #2
 800e840:	9307      	strge	r3, [sp, #28]
 800e842:	9307      	strlt	r3, [sp, #28]
 800e844:	bfb8      	it	lt
 800e846:	9204      	strlt	r2, [sp, #16]
 800e848:	7823      	ldrb	r3, [r4, #0]
 800e84a:	2b2e      	cmp	r3, #46	; 0x2e
 800e84c:	d10c      	bne.n	800e868 <_svfiprintf_r+0x130>
 800e84e:	7863      	ldrb	r3, [r4, #1]
 800e850:	2b2a      	cmp	r3, #42	; 0x2a
 800e852:	d135      	bne.n	800e8c0 <_svfiprintf_r+0x188>
 800e854:	9b03      	ldr	r3, [sp, #12]
 800e856:	1d1a      	adds	r2, r3, #4
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	9203      	str	r2, [sp, #12]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	bfb8      	it	lt
 800e860:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e864:	3402      	adds	r4, #2
 800e866:	9305      	str	r3, [sp, #20]
 800e868:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e934 <_svfiprintf_r+0x1fc>
 800e86c:	7821      	ldrb	r1, [r4, #0]
 800e86e:	2203      	movs	r2, #3
 800e870:	4650      	mov	r0, sl
 800e872:	f7f1 fcb5 	bl	80001e0 <memchr>
 800e876:	b140      	cbz	r0, 800e88a <_svfiprintf_r+0x152>
 800e878:	2340      	movs	r3, #64	; 0x40
 800e87a:	eba0 000a 	sub.w	r0, r0, sl
 800e87e:	fa03 f000 	lsl.w	r0, r3, r0
 800e882:	9b04      	ldr	r3, [sp, #16]
 800e884:	4303      	orrs	r3, r0
 800e886:	3401      	adds	r4, #1
 800e888:	9304      	str	r3, [sp, #16]
 800e88a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e88e:	4826      	ldr	r0, [pc, #152]	; (800e928 <_svfiprintf_r+0x1f0>)
 800e890:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e894:	2206      	movs	r2, #6
 800e896:	f7f1 fca3 	bl	80001e0 <memchr>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d038      	beq.n	800e910 <_svfiprintf_r+0x1d8>
 800e89e:	4b23      	ldr	r3, [pc, #140]	; (800e92c <_svfiprintf_r+0x1f4>)
 800e8a0:	bb1b      	cbnz	r3, 800e8ea <_svfiprintf_r+0x1b2>
 800e8a2:	9b03      	ldr	r3, [sp, #12]
 800e8a4:	3307      	adds	r3, #7
 800e8a6:	f023 0307 	bic.w	r3, r3, #7
 800e8aa:	3308      	adds	r3, #8
 800e8ac:	9303      	str	r3, [sp, #12]
 800e8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8b0:	4433      	add	r3, r6
 800e8b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e8b4:	e767      	b.n	800e786 <_svfiprintf_r+0x4e>
 800e8b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8ba:	460c      	mov	r4, r1
 800e8bc:	2001      	movs	r0, #1
 800e8be:	e7a5      	b.n	800e80c <_svfiprintf_r+0xd4>
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	3401      	adds	r4, #1
 800e8c4:	9305      	str	r3, [sp, #20]
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	f04f 0c0a 	mov.w	ip, #10
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8d2:	3a30      	subs	r2, #48	; 0x30
 800e8d4:	2a09      	cmp	r2, #9
 800e8d6:	d903      	bls.n	800e8e0 <_svfiprintf_r+0x1a8>
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d0c5      	beq.n	800e868 <_svfiprintf_r+0x130>
 800e8dc:	9105      	str	r1, [sp, #20]
 800e8de:	e7c3      	b.n	800e868 <_svfiprintf_r+0x130>
 800e8e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	e7f0      	b.n	800e8cc <_svfiprintf_r+0x194>
 800e8ea:	ab03      	add	r3, sp, #12
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	462a      	mov	r2, r5
 800e8f0:	4b0f      	ldr	r3, [pc, #60]	; (800e930 <_svfiprintf_r+0x1f8>)
 800e8f2:	a904      	add	r1, sp, #16
 800e8f4:	4638      	mov	r0, r7
 800e8f6:	f3af 8000 	nop.w
 800e8fa:	1c42      	adds	r2, r0, #1
 800e8fc:	4606      	mov	r6, r0
 800e8fe:	d1d6      	bne.n	800e8ae <_svfiprintf_r+0x176>
 800e900:	89ab      	ldrh	r3, [r5, #12]
 800e902:	065b      	lsls	r3, r3, #25
 800e904:	f53f af2c 	bmi.w	800e760 <_svfiprintf_r+0x28>
 800e908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e90a:	b01d      	add	sp, #116	; 0x74
 800e90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e910:	ab03      	add	r3, sp, #12
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	462a      	mov	r2, r5
 800e916:	4b06      	ldr	r3, [pc, #24]	; (800e930 <_svfiprintf_r+0x1f8>)
 800e918:	a904      	add	r1, sp, #16
 800e91a:	4638      	mov	r0, r7
 800e91c:	f000 f87a 	bl	800ea14 <_printf_i>
 800e920:	e7eb      	b.n	800e8fa <_svfiprintf_r+0x1c2>
 800e922:	bf00      	nop
 800e924:	0800f031 	.word	0x0800f031
 800e928:	0800f03b 	.word	0x0800f03b
 800e92c:	00000000 	.word	0x00000000
 800e930:	0800e681 	.word	0x0800e681
 800e934:	0800f037 	.word	0x0800f037

0800e938 <_printf_common>:
 800e938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e93c:	4616      	mov	r6, r2
 800e93e:	4699      	mov	r9, r3
 800e940:	688a      	ldr	r2, [r1, #8]
 800e942:	690b      	ldr	r3, [r1, #16]
 800e944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e948:	4293      	cmp	r3, r2
 800e94a:	bfb8      	it	lt
 800e94c:	4613      	movlt	r3, r2
 800e94e:	6033      	str	r3, [r6, #0]
 800e950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e954:	4607      	mov	r7, r0
 800e956:	460c      	mov	r4, r1
 800e958:	b10a      	cbz	r2, 800e95e <_printf_common+0x26>
 800e95a:	3301      	adds	r3, #1
 800e95c:	6033      	str	r3, [r6, #0]
 800e95e:	6823      	ldr	r3, [r4, #0]
 800e960:	0699      	lsls	r1, r3, #26
 800e962:	bf42      	ittt	mi
 800e964:	6833      	ldrmi	r3, [r6, #0]
 800e966:	3302      	addmi	r3, #2
 800e968:	6033      	strmi	r3, [r6, #0]
 800e96a:	6825      	ldr	r5, [r4, #0]
 800e96c:	f015 0506 	ands.w	r5, r5, #6
 800e970:	d106      	bne.n	800e980 <_printf_common+0x48>
 800e972:	f104 0a19 	add.w	sl, r4, #25
 800e976:	68e3      	ldr	r3, [r4, #12]
 800e978:	6832      	ldr	r2, [r6, #0]
 800e97a:	1a9b      	subs	r3, r3, r2
 800e97c:	42ab      	cmp	r3, r5
 800e97e:	dc26      	bgt.n	800e9ce <_printf_common+0x96>
 800e980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e984:	1e13      	subs	r3, r2, #0
 800e986:	6822      	ldr	r2, [r4, #0]
 800e988:	bf18      	it	ne
 800e98a:	2301      	movne	r3, #1
 800e98c:	0692      	lsls	r2, r2, #26
 800e98e:	d42b      	bmi.n	800e9e8 <_printf_common+0xb0>
 800e990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e994:	4649      	mov	r1, r9
 800e996:	4638      	mov	r0, r7
 800e998:	47c0      	blx	r8
 800e99a:	3001      	adds	r0, #1
 800e99c:	d01e      	beq.n	800e9dc <_printf_common+0xa4>
 800e99e:	6823      	ldr	r3, [r4, #0]
 800e9a0:	68e5      	ldr	r5, [r4, #12]
 800e9a2:	6832      	ldr	r2, [r6, #0]
 800e9a4:	f003 0306 	and.w	r3, r3, #6
 800e9a8:	2b04      	cmp	r3, #4
 800e9aa:	bf08      	it	eq
 800e9ac:	1aad      	subeq	r5, r5, r2
 800e9ae:	68a3      	ldr	r3, [r4, #8]
 800e9b0:	6922      	ldr	r2, [r4, #16]
 800e9b2:	bf0c      	ite	eq
 800e9b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9b8:	2500      	movne	r5, #0
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	bfc4      	itt	gt
 800e9be:	1a9b      	subgt	r3, r3, r2
 800e9c0:	18ed      	addgt	r5, r5, r3
 800e9c2:	2600      	movs	r6, #0
 800e9c4:	341a      	adds	r4, #26
 800e9c6:	42b5      	cmp	r5, r6
 800e9c8:	d11a      	bne.n	800ea00 <_printf_common+0xc8>
 800e9ca:	2000      	movs	r0, #0
 800e9cc:	e008      	b.n	800e9e0 <_printf_common+0xa8>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	4652      	mov	r2, sl
 800e9d2:	4649      	mov	r1, r9
 800e9d4:	4638      	mov	r0, r7
 800e9d6:	47c0      	blx	r8
 800e9d8:	3001      	adds	r0, #1
 800e9da:	d103      	bne.n	800e9e4 <_printf_common+0xac>
 800e9dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9e4:	3501      	adds	r5, #1
 800e9e6:	e7c6      	b.n	800e976 <_printf_common+0x3e>
 800e9e8:	18e1      	adds	r1, r4, r3
 800e9ea:	1c5a      	adds	r2, r3, #1
 800e9ec:	2030      	movs	r0, #48	; 0x30
 800e9ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e9f2:	4422      	add	r2, r4
 800e9f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e9fc:	3302      	adds	r3, #2
 800e9fe:	e7c7      	b.n	800e990 <_printf_common+0x58>
 800ea00:	2301      	movs	r3, #1
 800ea02:	4622      	mov	r2, r4
 800ea04:	4649      	mov	r1, r9
 800ea06:	4638      	mov	r0, r7
 800ea08:	47c0      	blx	r8
 800ea0a:	3001      	adds	r0, #1
 800ea0c:	d0e6      	beq.n	800e9dc <_printf_common+0xa4>
 800ea0e:	3601      	adds	r6, #1
 800ea10:	e7d9      	b.n	800e9c6 <_printf_common+0x8e>
	...

0800ea14 <_printf_i>:
 800ea14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea18:	460c      	mov	r4, r1
 800ea1a:	4691      	mov	r9, r2
 800ea1c:	7e27      	ldrb	r7, [r4, #24]
 800ea1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ea20:	2f78      	cmp	r7, #120	; 0x78
 800ea22:	4680      	mov	r8, r0
 800ea24:	469a      	mov	sl, r3
 800ea26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea2a:	d807      	bhi.n	800ea3c <_printf_i+0x28>
 800ea2c:	2f62      	cmp	r7, #98	; 0x62
 800ea2e:	d80a      	bhi.n	800ea46 <_printf_i+0x32>
 800ea30:	2f00      	cmp	r7, #0
 800ea32:	f000 80d8 	beq.w	800ebe6 <_printf_i+0x1d2>
 800ea36:	2f58      	cmp	r7, #88	; 0x58
 800ea38:	f000 80a3 	beq.w	800eb82 <_printf_i+0x16e>
 800ea3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ea40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea44:	e03a      	b.n	800eabc <_printf_i+0xa8>
 800ea46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea4a:	2b15      	cmp	r3, #21
 800ea4c:	d8f6      	bhi.n	800ea3c <_printf_i+0x28>
 800ea4e:	a001      	add	r0, pc, #4	; (adr r0, 800ea54 <_printf_i+0x40>)
 800ea50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ea54:	0800eaad 	.word	0x0800eaad
 800ea58:	0800eac1 	.word	0x0800eac1
 800ea5c:	0800ea3d 	.word	0x0800ea3d
 800ea60:	0800ea3d 	.word	0x0800ea3d
 800ea64:	0800ea3d 	.word	0x0800ea3d
 800ea68:	0800ea3d 	.word	0x0800ea3d
 800ea6c:	0800eac1 	.word	0x0800eac1
 800ea70:	0800ea3d 	.word	0x0800ea3d
 800ea74:	0800ea3d 	.word	0x0800ea3d
 800ea78:	0800ea3d 	.word	0x0800ea3d
 800ea7c:	0800ea3d 	.word	0x0800ea3d
 800ea80:	0800ebcd 	.word	0x0800ebcd
 800ea84:	0800eaf1 	.word	0x0800eaf1
 800ea88:	0800ebaf 	.word	0x0800ebaf
 800ea8c:	0800ea3d 	.word	0x0800ea3d
 800ea90:	0800ea3d 	.word	0x0800ea3d
 800ea94:	0800ebef 	.word	0x0800ebef
 800ea98:	0800ea3d 	.word	0x0800ea3d
 800ea9c:	0800eaf1 	.word	0x0800eaf1
 800eaa0:	0800ea3d 	.word	0x0800ea3d
 800eaa4:	0800ea3d 	.word	0x0800ea3d
 800eaa8:	0800ebb7 	.word	0x0800ebb7
 800eaac:	680b      	ldr	r3, [r1, #0]
 800eaae:	1d1a      	adds	r2, r3, #4
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	600a      	str	r2, [r1, #0]
 800eab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eabc:	2301      	movs	r3, #1
 800eabe:	e0a3      	b.n	800ec08 <_printf_i+0x1f4>
 800eac0:	6825      	ldr	r5, [r4, #0]
 800eac2:	6808      	ldr	r0, [r1, #0]
 800eac4:	062e      	lsls	r6, r5, #24
 800eac6:	f100 0304 	add.w	r3, r0, #4
 800eaca:	d50a      	bpl.n	800eae2 <_printf_i+0xce>
 800eacc:	6805      	ldr	r5, [r0, #0]
 800eace:	600b      	str	r3, [r1, #0]
 800ead0:	2d00      	cmp	r5, #0
 800ead2:	da03      	bge.n	800eadc <_printf_i+0xc8>
 800ead4:	232d      	movs	r3, #45	; 0x2d
 800ead6:	426d      	negs	r5, r5
 800ead8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eadc:	485e      	ldr	r0, [pc, #376]	; (800ec58 <_printf_i+0x244>)
 800eade:	230a      	movs	r3, #10
 800eae0:	e019      	b.n	800eb16 <_printf_i+0x102>
 800eae2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800eae6:	6805      	ldr	r5, [r0, #0]
 800eae8:	600b      	str	r3, [r1, #0]
 800eaea:	bf18      	it	ne
 800eaec:	b22d      	sxthne	r5, r5
 800eaee:	e7ef      	b.n	800ead0 <_printf_i+0xbc>
 800eaf0:	680b      	ldr	r3, [r1, #0]
 800eaf2:	6825      	ldr	r5, [r4, #0]
 800eaf4:	1d18      	adds	r0, r3, #4
 800eaf6:	6008      	str	r0, [r1, #0]
 800eaf8:	0628      	lsls	r0, r5, #24
 800eafa:	d501      	bpl.n	800eb00 <_printf_i+0xec>
 800eafc:	681d      	ldr	r5, [r3, #0]
 800eafe:	e002      	b.n	800eb06 <_printf_i+0xf2>
 800eb00:	0669      	lsls	r1, r5, #25
 800eb02:	d5fb      	bpl.n	800eafc <_printf_i+0xe8>
 800eb04:	881d      	ldrh	r5, [r3, #0]
 800eb06:	4854      	ldr	r0, [pc, #336]	; (800ec58 <_printf_i+0x244>)
 800eb08:	2f6f      	cmp	r7, #111	; 0x6f
 800eb0a:	bf0c      	ite	eq
 800eb0c:	2308      	moveq	r3, #8
 800eb0e:	230a      	movne	r3, #10
 800eb10:	2100      	movs	r1, #0
 800eb12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb16:	6866      	ldr	r6, [r4, #4]
 800eb18:	60a6      	str	r6, [r4, #8]
 800eb1a:	2e00      	cmp	r6, #0
 800eb1c:	bfa2      	ittt	ge
 800eb1e:	6821      	ldrge	r1, [r4, #0]
 800eb20:	f021 0104 	bicge.w	r1, r1, #4
 800eb24:	6021      	strge	r1, [r4, #0]
 800eb26:	b90d      	cbnz	r5, 800eb2c <_printf_i+0x118>
 800eb28:	2e00      	cmp	r6, #0
 800eb2a:	d04d      	beq.n	800ebc8 <_printf_i+0x1b4>
 800eb2c:	4616      	mov	r6, r2
 800eb2e:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb32:	fb03 5711 	mls	r7, r3, r1, r5
 800eb36:	5dc7      	ldrb	r7, [r0, r7]
 800eb38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eb3c:	462f      	mov	r7, r5
 800eb3e:	42bb      	cmp	r3, r7
 800eb40:	460d      	mov	r5, r1
 800eb42:	d9f4      	bls.n	800eb2e <_printf_i+0x11a>
 800eb44:	2b08      	cmp	r3, #8
 800eb46:	d10b      	bne.n	800eb60 <_printf_i+0x14c>
 800eb48:	6823      	ldr	r3, [r4, #0]
 800eb4a:	07df      	lsls	r7, r3, #31
 800eb4c:	d508      	bpl.n	800eb60 <_printf_i+0x14c>
 800eb4e:	6923      	ldr	r3, [r4, #16]
 800eb50:	6861      	ldr	r1, [r4, #4]
 800eb52:	4299      	cmp	r1, r3
 800eb54:	bfde      	ittt	le
 800eb56:	2330      	movle	r3, #48	; 0x30
 800eb58:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eb5c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800eb60:	1b92      	subs	r2, r2, r6
 800eb62:	6122      	str	r2, [r4, #16]
 800eb64:	f8cd a000 	str.w	sl, [sp]
 800eb68:	464b      	mov	r3, r9
 800eb6a:	aa03      	add	r2, sp, #12
 800eb6c:	4621      	mov	r1, r4
 800eb6e:	4640      	mov	r0, r8
 800eb70:	f7ff fee2 	bl	800e938 <_printf_common>
 800eb74:	3001      	adds	r0, #1
 800eb76:	d14c      	bne.n	800ec12 <_printf_i+0x1fe>
 800eb78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb7c:	b004      	add	sp, #16
 800eb7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb82:	4835      	ldr	r0, [pc, #212]	; (800ec58 <_printf_i+0x244>)
 800eb84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eb88:	6823      	ldr	r3, [r4, #0]
 800eb8a:	680e      	ldr	r6, [r1, #0]
 800eb8c:	061f      	lsls	r7, r3, #24
 800eb8e:	f856 5b04 	ldr.w	r5, [r6], #4
 800eb92:	600e      	str	r6, [r1, #0]
 800eb94:	d514      	bpl.n	800ebc0 <_printf_i+0x1ac>
 800eb96:	07d9      	lsls	r1, r3, #31
 800eb98:	bf44      	itt	mi
 800eb9a:	f043 0320 	orrmi.w	r3, r3, #32
 800eb9e:	6023      	strmi	r3, [r4, #0]
 800eba0:	b91d      	cbnz	r5, 800ebaa <_printf_i+0x196>
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	f023 0320 	bic.w	r3, r3, #32
 800eba8:	6023      	str	r3, [r4, #0]
 800ebaa:	2310      	movs	r3, #16
 800ebac:	e7b0      	b.n	800eb10 <_printf_i+0xfc>
 800ebae:	6823      	ldr	r3, [r4, #0]
 800ebb0:	f043 0320 	orr.w	r3, r3, #32
 800ebb4:	6023      	str	r3, [r4, #0]
 800ebb6:	2378      	movs	r3, #120	; 0x78
 800ebb8:	4828      	ldr	r0, [pc, #160]	; (800ec5c <_printf_i+0x248>)
 800ebba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ebbe:	e7e3      	b.n	800eb88 <_printf_i+0x174>
 800ebc0:	065e      	lsls	r6, r3, #25
 800ebc2:	bf48      	it	mi
 800ebc4:	b2ad      	uxthmi	r5, r5
 800ebc6:	e7e6      	b.n	800eb96 <_printf_i+0x182>
 800ebc8:	4616      	mov	r6, r2
 800ebca:	e7bb      	b.n	800eb44 <_printf_i+0x130>
 800ebcc:	680b      	ldr	r3, [r1, #0]
 800ebce:	6826      	ldr	r6, [r4, #0]
 800ebd0:	6960      	ldr	r0, [r4, #20]
 800ebd2:	1d1d      	adds	r5, r3, #4
 800ebd4:	600d      	str	r5, [r1, #0]
 800ebd6:	0635      	lsls	r5, r6, #24
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	d501      	bpl.n	800ebe0 <_printf_i+0x1cc>
 800ebdc:	6018      	str	r0, [r3, #0]
 800ebde:	e002      	b.n	800ebe6 <_printf_i+0x1d2>
 800ebe0:	0671      	lsls	r1, r6, #25
 800ebe2:	d5fb      	bpl.n	800ebdc <_printf_i+0x1c8>
 800ebe4:	8018      	strh	r0, [r3, #0]
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	6123      	str	r3, [r4, #16]
 800ebea:	4616      	mov	r6, r2
 800ebec:	e7ba      	b.n	800eb64 <_printf_i+0x150>
 800ebee:	680b      	ldr	r3, [r1, #0]
 800ebf0:	1d1a      	adds	r2, r3, #4
 800ebf2:	600a      	str	r2, [r1, #0]
 800ebf4:	681e      	ldr	r6, [r3, #0]
 800ebf6:	6862      	ldr	r2, [r4, #4]
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	4630      	mov	r0, r6
 800ebfc:	f7f1 faf0 	bl	80001e0 <memchr>
 800ec00:	b108      	cbz	r0, 800ec06 <_printf_i+0x1f2>
 800ec02:	1b80      	subs	r0, r0, r6
 800ec04:	6060      	str	r0, [r4, #4]
 800ec06:	6863      	ldr	r3, [r4, #4]
 800ec08:	6123      	str	r3, [r4, #16]
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec10:	e7a8      	b.n	800eb64 <_printf_i+0x150>
 800ec12:	6923      	ldr	r3, [r4, #16]
 800ec14:	4632      	mov	r2, r6
 800ec16:	4649      	mov	r1, r9
 800ec18:	4640      	mov	r0, r8
 800ec1a:	47d0      	blx	sl
 800ec1c:	3001      	adds	r0, #1
 800ec1e:	d0ab      	beq.n	800eb78 <_printf_i+0x164>
 800ec20:	6823      	ldr	r3, [r4, #0]
 800ec22:	079b      	lsls	r3, r3, #30
 800ec24:	d413      	bmi.n	800ec4e <_printf_i+0x23a>
 800ec26:	68e0      	ldr	r0, [r4, #12]
 800ec28:	9b03      	ldr	r3, [sp, #12]
 800ec2a:	4298      	cmp	r0, r3
 800ec2c:	bfb8      	it	lt
 800ec2e:	4618      	movlt	r0, r3
 800ec30:	e7a4      	b.n	800eb7c <_printf_i+0x168>
 800ec32:	2301      	movs	r3, #1
 800ec34:	4632      	mov	r2, r6
 800ec36:	4649      	mov	r1, r9
 800ec38:	4640      	mov	r0, r8
 800ec3a:	47d0      	blx	sl
 800ec3c:	3001      	adds	r0, #1
 800ec3e:	d09b      	beq.n	800eb78 <_printf_i+0x164>
 800ec40:	3501      	adds	r5, #1
 800ec42:	68e3      	ldr	r3, [r4, #12]
 800ec44:	9903      	ldr	r1, [sp, #12]
 800ec46:	1a5b      	subs	r3, r3, r1
 800ec48:	42ab      	cmp	r3, r5
 800ec4a:	dcf2      	bgt.n	800ec32 <_printf_i+0x21e>
 800ec4c:	e7eb      	b.n	800ec26 <_printf_i+0x212>
 800ec4e:	2500      	movs	r5, #0
 800ec50:	f104 0619 	add.w	r6, r4, #25
 800ec54:	e7f5      	b.n	800ec42 <_printf_i+0x22e>
 800ec56:	bf00      	nop
 800ec58:	0800f042 	.word	0x0800f042
 800ec5c:	0800f053 	.word	0x0800f053

0800ec60 <memmove>:
 800ec60:	4288      	cmp	r0, r1
 800ec62:	b510      	push	{r4, lr}
 800ec64:	eb01 0402 	add.w	r4, r1, r2
 800ec68:	d902      	bls.n	800ec70 <memmove+0x10>
 800ec6a:	4284      	cmp	r4, r0
 800ec6c:	4623      	mov	r3, r4
 800ec6e:	d807      	bhi.n	800ec80 <memmove+0x20>
 800ec70:	1e43      	subs	r3, r0, #1
 800ec72:	42a1      	cmp	r1, r4
 800ec74:	d008      	beq.n	800ec88 <memmove+0x28>
 800ec76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec7e:	e7f8      	b.n	800ec72 <memmove+0x12>
 800ec80:	4402      	add	r2, r0
 800ec82:	4601      	mov	r1, r0
 800ec84:	428a      	cmp	r2, r1
 800ec86:	d100      	bne.n	800ec8a <memmove+0x2a>
 800ec88:	bd10      	pop	{r4, pc}
 800ec8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec92:	e7f7      	b.n	800ec84 <memmove+0x24>

0800ec94 <_realloc_r>:
 800ec94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec96:	4607      	mov	r7, r0
 800ec98:	4614      	mov	r4, r2
 800ec9a:	460e      	mov	r6, r1
 800ec9c:	b921      	cbnz	r1, 800eca8 <_realloc_r+0x14>
 800ec9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eca2:	4611      	mov	r1, r2
 800eca4:	f7ff bb92 	b.w	800e3cc <_malloc_r>
 800eca8:	b922      	cbnz	r2, 800ecb4 <_realloc_r+0x20>
 800ecaa:	f7ff fb3f 	bl	800e32c <_free_r>
 800ecae:	4625      	mov	r5, r4
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecb4:	f000 f814 	bl	800ece0 <_malloc_usable_size_r>
 800ecb8:	42a0      	cmp	r0, r4
 800ecba:	d20f      	bcs.n	800ecdc <_realloc_r+0x48>
 800ecbc:	4621      	mov	r1, r4
 800ecbe:	4638      	mov	r0, r7
 800ecc0:	f7ff fb84 	bl	800e3cc <_malloc_r>
 800ecc4:	4605      	mov	r5, r0
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	d0f2      	beq.n	800ecb0 <_realloc_r+0x1c>
 800ecca:	4631      	mov	r1, r6
 800eccc:	4622      	mov	r2, r4
 800ecce:	f7ff fb17 	bl	800e300 <memcpy>
 800ecd2:	4631      	mov	r1, r6
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	f7ff fb29 	bl	800e32c <_free_r>
 800ecda:	e7e9      	b.n	800ecb0 <_realloc_r+0x1c>
 800ecdc:	4635      	mov	r5, r6
 800ecde:	e7e7      	b.n	800ecb0 <_realloc_r+0x1c>

0800ece0 <_malloc_usable_size_r>:
 800ece0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ece4:	1f18      	subs	r0, r3, #4
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	bfbc      	itt	lt
 800ecea:	580b      	ldrlt	r3, [r1, r0]
 800ecec:	18c0      	addlt	r0, r0, r3
 800ecee:	4770      	bx	lr

0800ecf0 <_init>:
 800ecf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf2:	bf00      	nop
 800ecf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecf6:	bc08      	pop	{r3}
 800ecf8:	469e      	mov	lr, r3
 800ecfa:	4770      	bx	lr

0800ecfc <_fini>:
 800ecfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecfe:	bf00      	nop
 800ed00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed02:	bc08      	pop	{r3}
 800ed04:	469e      	mov	lr, r3
 800ed06:	4770      	bx	lr
